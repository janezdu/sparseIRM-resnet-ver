hello
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_194523-qbwfdcr2
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/qbwfdcr2
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1172
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6020, 3, 32, 32) (5980, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:35,  1.43s/it] 19%|#9        | 5/26 [00:01<00:04,  4.26it/s] 38%|###8      | 10/26 [00:01<00:01,  9.32it/s] 58%|#####7    | 15/26 [00:01<00:00, 14.48it/s] 73%|#######3  | 19/26 [00:01<00:00, 18.58it/s] 92%|#########2| 24/26 [00:01<00:00, 23.43it/s]100%|##########| 26/26 [00:02<00:00, 10.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.388 (0.507)	train_nll   0.39 (  0.51)	train_penalty   0.06 (  0.16)	weight_norm  20.96 ( 18.20)	train_acc   0.86 (  0.81)	train_minacc   0.00 (  0.07)	train_majacc   0.99 (  0.94)	train_corr   0.00 (  0.00)	l1 7.2023 (8.4620)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 27%|##6       | 7/26 [00:00<00:00, 33.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.65it/s] 50%|#####     | 13/26 [00:00<00:00, 39.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.07it/s] 96%|#########6| 25/26 [00:00<00:00, 46.58it/s]100%|##########| 26/26 [00:00<00:00, 38.55it/s]
Test: [   0/  26]	Loss 0.419 (0.419)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   0.98 (  0.98)	Loss_d 0.419 (0.419)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.401 (0.406)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.401 (0.406)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.425 (0.408)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.425 (0.408)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.397 (0.408)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.397 (0.408)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]
Test: [  0/  1]	Loss 1.795 (1.795)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.795 (1.795)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.795 (1.795)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.795 (1.795)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/128/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0715 (0.0715)	validation_time 0.0067 (0.0067)	train_time 0.0625 (0.0625)
record: (train_acc, test_acc) (0.8461000269651413, 0.10600000619888306)
last accs (train_acc, test_acc) (0.8461000269651413, 0.10600000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.87it/s] 19%|#9        | 5/26 [00:00<00:00, 26.15it/s] 35%|###4      | 9/26 [00:00<00:00, 30.08it/s] 50%|#####     | 13/26 [00:00<00:00, 32.92it/s] 65%|######5   | 17/26 [00:00<00:00, 34.69it/s] 81%|########  | 21/26 [00:00<00:00, 36.30it/s] 96%|#########6| 25/26 [00:00<00:00, 36.00it/s]100%|##########| 26/26 [00:00<00:00, 31.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.383 (0.405)	train_nll   0.38 (  0.41)	train_penalty   0.05 (  0.05)	weight_norm  22.06 ( 21.72)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.02)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 6.8952 (7.0317)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.38it/s] 27%|##6       | 7/26 [00:00<00:00, 33.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.19it/s] 46%|####6     | 12/26 [00:00<00:00, 37.69it/s] 69%|######9   | 18/26 [00:00<00:00, 45.14it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.14it/s] 92%|#########2| 24/26 [00:00<00:00, 46.06it/s]100%|##########| 26/26 [00:00<00:00, 38.41it/s]
Test: [   0/  26]	Loss 0.394 (0.394)	test_acc   0.83 (  0.83)	test_minacc   0.07 (  0.07)	test_majacc   0.97 (  0.97)	Loss_d 0.394 (0.394)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.395 (0.392)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.395 (0.392)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.400 (0.393)	test_acc   0.84 (  0.85)	test_minacc   0.06 (  0.05)	test_majacc   0.98 (  0.99)	Loss_d 0.400 (0.393)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.06 (  0.05)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  26/  26]	Loss 0.379 (0.392)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.05)	test_majacc   0.98 (  0.99)	Loss_d 0.379 (0.392)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.05)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.71it/s]
Test: [  0/  1]	Loss 1.693 (1.693)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.693 (1.693)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.693 (1.693)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.693 (1.693)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/128/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0361 (0.0538)	validation_time 0.0004 (0.0035)	train_time 0.0358 (0.0491)
record: (train_acc, test_acc) (0.847000024497509, 0.12000000476837158)
last accs (train_acc, test_acc) (0.847000024497509, 0.12000000476837158)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.81it/s] 12%|#1        | 3/26 [00:00<00:01, 14.19it/s] 27%|##6       | 7/26 [00:00<00:00, 23.97it/s] 46%|####6     | 12/26 [00:00<00:00, 30.98it/s] 62%|######1   | 16/26 [00:00<00:00, 32.73it/s] 77%|#######6  | 20/26 [00:00<00:00, 34.52it/s] 92%|#########2| 24/26 [00:00<00:00, 36.07it/s]100%|##########| 26/26 [00:00<00:00, 29.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.393 (0.387)	train_nll   0.39 (  0.39)	train_penalty   0.04 (  0.04)	weight_norm  22.19 ( 22.14)	train_acc   0.84 (  0.85)	train_minacc   0.12 (  0.05)	train_majacc   0.94 (  0.99)	train_corr   0.00 (  0.00)	l1 6.9167 (6.8885)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.76it/s] 27%|##6       | 7/26 [00:00<00:00, 36.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.52it/s] 50%|#####     | 13/26 [00:00<00:00, 40.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.71it/s] 96%|#########6| 25/26 [00:00<00:00, 46.30it/s]100%|##########| 26/26 [00:00<00:00, 39.15it/s]
Test: [   0/  26]	Loss 0.371 (0.371)	test_acc   0.84 (  0.84)	test_minacc   0.22 (  0.22)	test_majacc   0.95 (  0.95)	Loss_d 0.371 (0.371)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.364 (0.367)	test_acc   0.86 (  0.85)	test_minacc   0.23 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.364 (0.367)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.23 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.376 (0.369)	test_acc   0.84 (  0.85)	test_minacc   0.19 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.376 (0.369)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.19 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.91)
Test: [  26/  26]	Loss 0.377 (0.367)	test_acc   0.84 (  0.85)	test_minacc   0.06 (  0.18)	test_majacc   0.95 (  0.97)	Loss_d 0.377 (0.367)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.06 (  0.18)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.70it/s]
Test: [  0/  1]	Loss 1.693 (1.693)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 1.693 (1.693)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.693 (1.693)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 1.693 (1.693)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/128/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0357 (0.0478)	validation_time 0.0004 (0.0025)	train_time 0.0353 (0.0445)
record: (train_acc, test_acc) (0.8489000186920166, 0.23600001633167267)
last accs (train_acc, test_acc) (0.8489000186920166, 0.23600001633167267)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.68it/s] 19%|#9        | 5/26 [00:00<00:01, 18.47it/s] 35%|###4      | 9/26 [00:00<00:00, 26.06it/s] 50%|#####     | 13/26 [00:00<00:00, 30.64it/s] 65%|######5   | 17/26 [00:00<00:00, 33.39it/s] 81%|########  | 21/26 [00:00<00:00, 35.37it/s] 96%|#########6| 25/26 [00:00<00:00, 36.37it/s]100%|##########| 26/26 [00:00<00:00, 28.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.343 (0.366)	train_nll   0.34 (  0.37)	train_penalty   0.03 (  0.04)	weight_norm  22.26 ( 22.22)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.09)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.8275 (6.9222)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.11it/s] 27%|##6       | 7/26 [00:00<00:00, 35.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.22it/s] 50%|#####     | 13/26 [00:00<00:00, 40.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.33it/s] 96%|#########6| 25/26 [00:00<00:00, 47.70it/s]100%|##########| 26/26 [00:00<00:00, 39.69it/s]
Test: [   0/  26]	Loss 0.381 (0.381)	test_acc   0.85 (  0.85)	test_minacc   0.13 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.381 (0.381)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.348 (0.367)	test_acc   0.86 (  0.85)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.348 (0.367)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.371 (0.364)	test_acc   0.84 (  0.85)	test_minacc   0.08 (  0.11)	test_majacc   0.99 (  0.98)	Loss_d 0.371 (0.364)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.08 (  0.11)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.335 (0.360)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.11)	test_majacc   0.99 (  0.98)	Loss_d 0.335 (0.360)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.11)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.95 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.97it/s]
Test: [  0/  1]	Loss 1.674 (1.674)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.674 (1.674)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.674 (1.674)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.674 (1.674)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.84 (  0.84)
Overall Timing[  3/  1]	epoch_time 0.0346 (0.0445)	validation_time 0.0004 (0.0020)	train_time 0.0342 (0.0419)
record: (train_acc, test_acc) (0.8489000186920166, 0.23600001633167267)
last accs (train_acc, test_acc) (0.8516000241041184, 0.16100001335144043)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.71it/s] 19%|#9        | 5/26 [00:00<00:01, 19.86it/s] 35%|###4      | 9/26 [00:00<00:00, 27.06it/s] 50%|#####     | 13/26 [00:00<00:00, 31.22it/s] 69%|######9   | 18/26 [00:00<00:00, 34.80it/s] 88%|########8 | 23/26 [00:00<00:00, 36.63it/s]100%|##########| 26/26 [00:00<00:00, 29.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.315 (0.351)	train_nll   0.32 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm  22.35 ( 22.30)	train_acc   0.87 (  0.85)	train_minacc   0.09 (  0.16)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 6.6315 (6.9211)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.17it/s] 31%|###       | 8/26 [00:00<00:00, 38.56it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.56it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.44it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.23it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.23it/s]100%|##########| 26/26 [00:00<00:00, 50.45it/s]100%|##########| 26/26 [00:00<00:00, 41.70it/s]
Test: [   0/  26]	Loss 0.375 (0.375)	test_acc   0.85 (  0.85)	test_minacc   0.20 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 0.375 (0.375)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.324 (0.356)	test_acc   0.86 (  0.85)	test_minacc   0.21 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.324 (0.356)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.21 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.364 (0.352)	test_acc   0.85 (  0.85)	test_minacc   0.13 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.364 (0.352)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.13 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.304 (0.348)	test_acc   0.88 (  0.86)	test_minacc   0.16 (  0.19)	test_majacc   0.99 (  0.97)	Loss_d 0.304 (0.348)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.16 (  0.19)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.92 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.85it/s]
Test: [  0/  1]	Loss 1.633 (1.633)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.97 (  0.97)	Loss_d 1.633 (1.633)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.633 (1.633)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.97 (  0.97)	Loss_d 1.633 (1.633)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.76 (  0.76)
Overall Timing[  4/  1]	epoch_time 0.0350 (0.0426)	validation_time 0.0004 (0.0017)	train_time 0.0346 (0.0404)
record: (train_acc, test_acc) (0.8489000186920166, 0.23600001633167267)
last accs (train_acc, test_acc) (0.8560000237226486, 0.2240000069141388)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.44it/s] 23%|##3       | 6/26 [00:00<00:00, 28.06it/s] 38%|###8      | 10/26 [00:00<00:00, 31.65it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.79it/s] 69%|######9   | 18/26 [00:00<00:00, 35.04it/s] 85%|########4 | 22/26 [00:00<00:00, 35.86it/s]100%|##########| 26/26 [00:00<00:00, 31.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.290 (0.331)	train_nll   0.29 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm  22.46 ( 22.40)	train_acc   0.86 (  0.86)	train_minacc   0.16 (  0.25)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 6.7056 (6.9178)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.97it/s] 19%|#9        | 5/26 [00:00<00:01, 20.81it/s]                                               19%|#9        | 5/26 [00:00<00:01, 20.81it/s] 42%|####2     | 11/26 [00:00<00:00, 32.29it/s] 65%|######5   | 17/26 [00:00<00:00, 40.91it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.91it/s] 88%|########8 | 23/26 [00:00<00:00, 43.25it/s]100%|##########| 26/26 [00:00<00:00, 35.26it/s]
Test: [   0/  26]	Loss 0.351 (0.351)	test_acc   0.84 (  0.84)	test_minacc   0.30 (  0.30)	test_majacc   0.94 (  0.94)	Loss_d 0.351 (0.351)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.284 (0.330)	test_acc   0.87 (  0.86)	test_minacc   0.33 (  0.33)	test_majacc   0.96 (  0.95)	Loss_d 0.284 (0.330)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.88 (  0.87)
Test: [  20/  26]	Loss 0.330 (0.320)	test_acc   0.87 (  0.87)	test_minacc   0.37 (  0.36)	test_majacc   0.96 (  0.96)	Loss_d 0.330 (0.320)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.37 (  0.36)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.86)
Test: [  26/  26]	Loss 0.277 (0.317)	test_acc   0.88 (  0.87)	test_minacc   0.28 (  0.36)	test_majacc   0.97 (  0.96)	Loss_d 0.277 (0.317)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.28 (  0.36)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.69it/s]
Test: [  0/  1]	Loss 1.642 (1.642)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.94 (  0.94)	Loss_d 1.642 (1.642)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.642 (1.642)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.94 (  0.94)	Loss_d 1.642 (1.642)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.68 (  0.68)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/128/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0332 (0.0410)	validation_time 0.0003 (0.0014)	train_time 0.0329 (0.0392)
record: (train_acc, test_acc) (0.8673000279068946, 0.30000001192092896)
last accs (train_acc, test_acc) (0.8673000279068946, 0.30000001192092896)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.45it/s] 19%|#9        | 5/26 [00:00<00:00, 25.98it/s] 38%|###8      | 10/26 [00:00<00:00, 33.47it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.29it/s] 69%|######9   | 18/26 [00:00<00:00, 36.86it/s] 85%|########4 | 22/26 [00:00<00:00, 37.49it/s]100%|##########| 26/26 [00:00<00:00, 38.01it/s]100%|##########| 26/26 [00:00<00:00, 32.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.269 (0.310)	train_nll   0.27 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.61 ( 22.53)	train_acc   0.89 (  0.87)	train_minacc   0.41 (  0.34)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 6.8203 (6.9954)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.70it/s] 31%|###       | 8/26 [00:00<00:00, 38.72it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.72it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.42it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.83it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.83it/s]100%|##########| 26/26 [00:00<00:00, 49.53it/s]100%|##########| 26/26 [00:00<00:00, 38.65it/s]
Test: [   0/  26]	Loss 0.321 (0.321)	test_acc   0.85 (  0.85)	test_minacc   0.40 (  0.40)	test_majacc   0.93 (  0.93)	Loss_d 0.321 (0.321)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.262 (0.301)	test_acc   0.89 (  0.87)	test_minacc   0.44 (  0.43)	test_majacc   0.97 (  0.95)	Loss_d 0.262 (0.301)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.44 (  0.43)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.87 (  0.86)
Test: [  20/  26]	Loss 0.283 (0.287)	test_acc   0.88 (  0.88)	test_minacc   0.48 (  0.47)	test_majacc   0.96 (  0.95)	Loss_d 0.283 (0.287)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.48 (  0.47)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.85 (  0.86)
Test: [  26/  26]	Loss 0.248 (0.283)	test_acc   0.90 (  0.88)	test_minacc   0.38 (  0.47)	test_majacc   0.97 (  0.96)	Loss_d 0.248 (0.283)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.38 (  0.47)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.02it/s]
Test: [  0/  1]	Loss 1.741 (1.741)	test_acc   0.33 (  0.33)	test_minacc   0.27 (  0.27)	test_majacc   0.94 (  0.94)	Loss_d 1.741 (1.741)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.741 (1.741)	test_acc   0.33 (  0.33)	test_minacc   0.27 (  0.27)	test_majacc   0.94 (  0.94)	Loss_d 1.741 (1.741)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.65 (  0.65)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/128/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0380 (0.0406)	validation_time 0.0004 (0.0013)	train_time 0.0376 (0.0390)
record: (train_acc, test_acc) (0.8815000227093697, 0.33400002121925354)
last accs (train_acc, test_acc) (0.8815000227093697, 0.33400002121925354)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.01it/s] 19%|#9        | 5/26 [00:00<00:01, 20.55it/s] 35%|###4      | 9/26 [00:00<00:00, 27.27it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.69it/s] 69%|######9   | 18/26 [00:00<00:00, 34.22it/s] 88%|########8 | 23/26 [00:00<00:00, 36.51it/s]100%|##########| 26/26 [00:00<00:00, 29.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.239 (0.293)	train_nll   0.24 (  0.29)	train_penalty   0.01 (  0.02)	weight_norm  22.79 ( 22.70)	train_acc   0.91 (  0.87)	train_minacc   0.53 (  0.40)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 6.9169 (7.0150)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.94it/s] 27%|##6       | 7/26 [00:00<00:00, 32.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.78it/s] 50%|#####     | 13/26 [00:00<00:00, 40.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.25it/s] 96%|#########6| 25/26 [00:00<00:00, 46.46it/s]100%|##########| 26/26 [00:00<00:00, 38.11it/s]
Test: [   0/  26]	Loss 0.314 (0.314)	test_acc   0.87 (  0.87)	test_minacc   0.55 (  0.55)	test_majacc   0.93 (  0.93)	Loss_d 0.314 (0.314)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.240 (0.292)	test_acc   0.91 (  0.87)	test_minacc   0.63 (  0.52)	test_majacc   0.95 (  0.94)	Loss_d 0.240 (0.292)	test_acc_d   0.91 (  0.87)	test_minacc_d   0.63 (  0.52)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.83 (  0.82)
Test: [  20/  26]	Loss 0.279 (0.275)	test_acc   0.87 (  0.88)	test_minacc   0.57 (  0.57)	test_majacc   0.93 (  0.94)	Loss_d 0.279 (0.275)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.80 (  0.82)
Test: [  26/  26]	Loss 0.209 (0.268)	test_acc   0.93 (  0.89)	test_minacc   0.59 (  0.58)	test_majacc   0.98 (  0.94)	Loss_d 0.209 (0.268)	test_acc_d   0.93 (  0.89)	test_minacc_d   0.59 (  0.58)	test_majacc_d   0.98 (  0.94)	test_corr_d   0.86 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.35it/s]
Test: [  0/  1]	Loss 1.737 (1.737)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.89 (  0.89)	Loss_d 1.737 (1.737)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.46 (  0.46)
Test: [  1/  1]	Loss 1.737 (1.737)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.89 (  0.89)	Loss_d 1.737 (1.737)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.46 (  0.46)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/128/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0359 (0.0400)	validation_time 0.0004 (0.0012)	train_time 0.0355 (0.0385)
record: (train_acc, test_acc) (0.8874000190496445, 0.4300000071525574)
last accs (train_acc, test_acc) (0.8874000190496445, 0.4300000071525574)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.72it/s] 19%|#9        | 5/26 [00:00<00:00, 25.82it/s] 35%|###4      | 9/26 [00:00<00:00, 30.21it/s] 50%|#####     | 13/26 [00:00<00:00, 33.56it/s] 69%|######9   | 18/26 [00:00<00:00, 36.54it/s] 85%|########4 | 22/26 [00:00<00:00, 37.36it/s]100%|##########| 26/26 [00:00<00:00, 31.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.208 (0.273)	train_nll   0.21 (  0.27)	train_penalty   0.00 (  0.01)	weight_norm  23.03 ( 22.91)	train_acc   0.92 (  0.88)	train_minacc   0.56 (  0.50)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 7.3933 (7.0485)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.40it/s] 27%|##6       | 7/26 [00:00<00:00, 35.15it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.15it/s] 46%|####6     | 12/26 [00:00<00:00, 38.13it/s] 69%|######9   | 18/26 [00:00<00:00, 44.87it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.87it/s] 92%|#########2| 24/26 [00:00<00:00, 46.48it/s]100%|##########| 26/26 [00:00<00:00, 39.50it/s]
Test: [   0/  26]	Loss 0.322 (0.322)	test_acc   0.86 (  0.86)	test_minacc   0.52 (  0.52)	test_majacc   0.92 (  0.92)	Loss_d 0.322 (0.322)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.213 (0.298)	test_acc   0.93 (  0.87)	test_minacc   0.65 (  0.51)	test_majacc   0.97 (  0.94)	Loss_d 0.213 (0.298)	test_acc_d   0.93 (  0.87)	test_minacc_d   0.65 (  0.51)	test_majacc_d   0.97 (  0.94)	test_corr_d   0.85 (  0.83)
Test: [  20/  26]	Loss 0.308 (0.284)	test_acc   0.87 (  0.88)	test_minacc   0.57 (  0.54)	test_majacc   0.93 (  0.94)	Loss_d 0.308 (0.284)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.81 (  0.83)
Test: [  26/  26]	Loss 0.176 (0.273)	test_acc   0.94 (  0.88)	test_minacc   0.69 (  0.56)	test_majacc   0.98 (  0.94)	Loss_d 0.176 (0.273)	test_acc_d   0.94 (  0.88)	test_minacc_d   0.69 (  0.56)	test_majacc_d   0.98 (  0.94)	test_corr_d   0.85 (  0.83)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.86it/s]
Test: [  0/  1]	Loss 2.093 (2.093)	test_acc   0.41 (  0.41)	test_minacc   0.35 (  0.35)	test_majacc   0.88 (  0.88)	Loss_d 2.093 (2.093)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.50 (  0.50)
Test: [  1/  1]	Loss 2.093 (2.093)	test_acc   0.41 (  0.41)	test_minacc   0.35 (  0.35)	test_majacc   0.88 (  0.88)	Loss_d 2.093 (2.093)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.50 (  0.50)
Overall Timing[  8/  1]	epoch_time 0.0355 (0.0395)	validation_time 0.0004 (0.0011)	train_time 0.0350 (0.0381)
record: (train_acc, test_acc) (0.8874000190496445, 0.4300000071525574)
last accs (train_acc, test_acc) (0.8840000233650207, 0.40700000524520874)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.77it/s] 19%|#9        | 5/26 [00:00<00:00, 24.23it/s] 38%|###8      | 10/26 [00:00<00:00, 32.77it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.56it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.47it/s] 96%|#########6| 25/26 [00:00<00:00, 39.35it/s]100%|##########| 26/26 [00:00<00:00, 33.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.185 (0.274)	train_nll   0.18 (  0.27)	train_penalty   0.00 (  0.01)	weight_norm  23.32 ( 23.18)	train_acc   0.92 (  0.88)	train_minacc   0.81 (  0.49)	train_majacc   0.94 (  0.95)	train_corr   0.00 (  0.00)	l1 7.5715 (6.9610)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.68it/s] 31%|###       | 8/26 [00:00<00:00, 39.24it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.24it/s] 50%|#####     | 13/26 [00:00<00:00, 43.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.52it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.52it/s] 92%|#########2| 24/26 [00:00<00:00, 46.76it/s]100%|##########| 26/26 [00:00<00:00, 41.85it/s]
Test: [   0/  26]	Loss 0.283 (0.283)	test_acc   0.88 (  0.88)	test_minacc   0.63 (  0.63)	test_majacc   0.92 (  0.92)	Loss_d 0.283 (0.283)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.78 (  0.78)
Test: [  10/  26]	Loss 0.256 (0.307)	test_acc   0.90 (  0.87)	test_minacc   0.65 (  0.61)	test_majacc   0.94 (  0.92)	Loss_d 0.256 (0.307)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.65 (  0.61)	test_majacc_d   0.94 (  0.92)	test_corr_d   0.79 (  0.77)
Test: [  20/  26]	Loss 0.266 (0.281)	test_acc   0.87 (  0.88)	test_minacc   0.65 (  0.65)	test_majacc   0.92 (  0.92)	Loss_d 0.266 (0.281)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.74 (  0.77)
Test: [  26/  26]	Loss 0.136 (0.266)	test_acc   0.95 (  0.89)	test_minacc   0.78 (  0.67)	test_majacc   0.97 (  0.92)	Loss_d 0.136 (0.266)	test_acc_d   0.95 (  0.89)	test_minacc_d   0.78 (  0.67)	test_majacc_d   0.97 (  0.92)	test_corr_d   0.83 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.56it/s]
Test: [  0/  1]	Loss 2.134 (2.134)	test_acc   0.46 (  0.46)	test_minacc   0.42 (  0.42)	test_majacc   0.90 (  0.90)	Loss_d 2.134 (2.134)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.35 (  0.35)
Test: [  1/  1]	Loss 2.134 (2.134)	test_acc   0.46 (  0.46)	test_minacc   0.42 (  0.42)	test_majacc   0.90 (  0.90)	Loss_d 2.134 (2.134)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.35 (  0.35)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/128/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0337 (0.0389)	validation_time 0.0004 (0.0010)	train_time 0.0333 (0.0377)
record: (train_acc, test_acc) (0.8860000213384628, 0.46400001645088196)
last accs (train_acc, test_acc) (0.8860000213384628, 0.46400001645088196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 19%|#9        | 5/26 [00:00<00:00, 23.82it/s] 35%|###4      | 9/26 [00:00<00:00, 29.81it/s] 50%|#####     | 13/26 [00:00<00:00, 32.72it/s] 69%|######9   | 18/26 [00:00<00:00, 35.56it/s] 88%|########8 | 23/26 [00:00<00:00, 37.47it/s]100%|##########| 26/26 [00:00<00:00, 31.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.193 (0.258)	train_nll   0.19 (  0.26)	train_penalty   0.00 (  0.01)	weight_norm  23.64 ( 23.49)	train_acc   0.93 (  0.89)	train_minacc   0.72 (  0.54)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 7.6063 (6.9875)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.77it/s] 31%|###       | 8/26 [00:00<00:00, 40.76it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.76it/s] 50%|#####     | 13/26 [00:00<00:00, 42.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.11it/s] 96%|#########6| 25/26 [00:00<00:00, 46.52it/s]100%|##########| 26/26 [00:00<00:00, 39.51it/s]
Test: [   0/  26]	Loss 0.265 (0.265)	test_acc   0.88 (  0.88)	test_minacc   0.70 (  0.70)	test_majacc   0.92 (  0.92)	Loss_d 0.265 (0.265)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.206 (0.263)	test_acc   0.92 (  0.89)	test_minacc   0.72 (  0.68)	test_majacc   0.95 (  0.92)	Loss_d 0.206 (0.263)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.72 (  0.68)	test_majacc_d   0.95 (  0.92)	test_corr_d   0.79 (  0.76)
Test: [  20/  26]	Loss 0.246 (0.250)	test_acc   0.89 (  0.89)	test_minacc   0.73 (  0.71)	test_majacc   0.92 (  0.93)	Loss_d 0.246 (0.250)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.73 (  0.71)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.73 (  0.75)
Test: [  26/  26]	Loss 0.149 (0.238)	test_acc   0.95 (  0.90)	test_minacc   0.78 (  0.72)	test_majacc   0.98 (  0.93)	Loss_d 0.149 (0.238)	test_acc_d   0.95 (  0.90)	test_minacc_d   0.78 (  0.72)	test_majacc_d   0.98 (  0.93)	test_corr_d   0.82 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.65it/s]
Test: [  0/  1]	Loss 2.071 (2.071)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.90 (  0.90)	Loss_d 2.071 (2.071)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 2.071 (2.071)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.90 (  0.90)	Loss_d 2.071 (2.071)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.28 (  0.28)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/128/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0368 (0.0387)	validation_time 0.0003 (0.0010)	train_time 0.0365 (0.0375)
record: (train_acc, test_acc) (0.8975000193715096, 0.5)
last accs (train_acc, test_acc) (0.8975000193715096, 0.5)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.70it/s] 19%|#9        | 5/26 [00:00<00:00, 23.08it/s] 38%|###8      | 10/26 [00:00<00:00, 31.62it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.50it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.64it/s] 96%|#########6| 25/26 [00:00<00:00, 39.15it/s]100%|##########| 26/26 [00:00<00:00, 32.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.159 (0.240)	train_nll   0.16 (  0.24)	train_penalty   0.00 (  0.01)	weight_norm  23.96 ( 23.80)	train_acc   0.94 (  0.90)	train_minacc   0.78 (  0.59)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 7.6303 (7.3744)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 27%|##6       | 7/26 [00:00<00:00, 36.70it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.70it/s] 50%|#####     | 13/26 [00:00<00:00, 43.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.73it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.73it/s] 96%|#########6| 25/26 [00:00<00:00, 48.43it/s]100%|##########| 26/26 [00:00<00:00, 40.60it/s]
Test: [   0/  26]	Loss 0.245 (0.245)	test_acc   0.88 (  0.88)	test_minacc   0.72 (  0.72)	test_majacc   0.91 (  0.91)	Loss_d 0.245 (0.245)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.75 (  0.75)
Test: [  10/  26]	Loss 0.201 (0.234)	test_acc   0.91 (  0.90)	test_minacc   0.74 (  0.74)	test_majacc   0.93 (  0.92)	Loss_d 0.201 (0.234)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.76 (  0.74)
Test: [  20/  26]	Loss 0.229 (0.220)	test_acc   0.89 (  0.90)	test_minacc   0.78 (  0.77)	test_majacc   0.92 (  0.93)	Loss_d 0.229 (0.220)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.78 (  0.77)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.73 (  0.74)
Test: [  26/  26]	Loss 0.120 (0.210)	test_acc   0.97 (  0.91)	test_minacc   0.88 (  0.78)	test_majacc   0.98 (  0.93)	Loss_d 0.120 (0.210)	test_acc_d   0.97 (  0.91)	test_minacc_d   0.88 (  0.78)	test_majacc_d   0.98 (  0.93)	test_corr_d   0.81 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.14it/s]
Test: [  0/  1]	Loss 2.071 (2.071)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.88 (  0.88)	Loss_d 2.071 (2.071)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.071 (2.071)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.88 (  0.88)	Loss_d 2.071 (2.071)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.25 (  0.25)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/128/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0353 (0.0385)	validation_time 0.0004 (0.0009)	train_time 0.0349 (0.0373)
record: (train_acc, test_acc) (0.9091000195145607, 0.5120000243186951)
last accs (train_acc, test_acc) (0.9091000195145607, 0.5120000243186951)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 19%|#9        | 5/26 [00:00<00:00, 23.64it/s] 35%|###4      | 9/26 [00:00<00:00, 29.79it/s] 50%|#####     | 13/26 [00:00<00:00, 32.75it/s] 65%|######5   | 17/26 [00:00<00:00, 33.07it/s] 81%|########  | 21/26 [00:00<00:00, 34.89it/s] 96%|#########6| 25/26 [00:00<00:00, 36.22it/s]100%|##########| 26/26 [00:00<00:00, 30.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.154 (0.228)	train_nll   0.15 (  0.23)	train_penalty   0.00 (  0.01)	weight_norm  24.35 ( 24.15)	train_acc   0.94 (  0.91)	train_minacc   0.78 (  0.64)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 7.4490 (7.4056)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s] 27%|##6       | 7/26 [00:00<00:00, 30.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.68it/s] 50%|#####     | 13/26 [00:00<00:00, 37.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.62it/s] 96%|#########6| 25/26 [00:00<00:00, 45.76it/s]100%|##########| 26/26 [00:00<00:00, 37.01it/s]
Test: [   0/  26]	Loss 0.231 (0.231)	test_acc   0.90 (  0.90)	test_minacc   0.68 (  0.68)	test_majacc   0.94 (  0.94)	Loss_d 0.231 (0.231)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.77 (  0.77)
Test: [  10/  26]	Loss 0.196 (0.218)	test_acc   0.91 (  0.90)	test_minacc   0.77 (  0.73)	test_majacc   0.94 (  0.94)	Loss_d 0.196 (0.218)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.77 (  0.73)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.75 (  0.75)
Test: [  20/  26]	Loss 0.192 (0.207)	test_acc   0.92 (  0.91)	test_minacc   0.83 (  0.76)	test_majacc   0.94 (  0.94)	Loss_d 0.192 (0.207)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.83 (  0.76)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.72 (  0.75)
Test: [  26/  26]	Loss 0.131 (0.199)	test_acc   0.96 (  0.92)	test_minacc   0.84 (  0.78)	test_majacc   0.98 (  0.94)	Loss_d 0.131 (0.199)	test_acc_d   0.96 (  0.92)	test_minacc_d   0.84 (  0.78)	test_majacc_d   0.98 (  0.94)	test_corr_d   0.81 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.43it/s]
Test: [  0/  1]	Loss 2.055 (2.055)	test_acc   0.49 (  0.49)	test_minacc   0.45 (  0.45)	test_majacc   0.89 (  0.89)	Loss_d 2.055 (2.055)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.055 (2.055)	test_acc   0.49 (  0.49)	test_minacc   0.45 (  0.45)	test_majacc   0.89 (  0.89)	Loss_d 2.055 (2.055)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.26 (  0.26)
Overall Timing[ 12/  1]	epoch_time 0.0353 (0.0382)	validation_time 0.0006 (0.0009)	train_time 0.0347 (0.0371)
record: (train_acc, test_acc) (0.9091000195145607, 0.5120000243186951)
last accs (train_acc, test_acc) (0.9190000243186951, 0.492000013589859)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.72it/s] 19%|#9        | 5/26 [00:00<00:00, 22.07it/s] 35%|###4      | 9/26 [00:00<00:00, 28.68it/s] 50%|#####     | 13/26 [00:00<00:00, 32.65it/s] 65%|######5   | 17/26 [00:00<00:00, 35.02it/s] 81%|########  | 21/26 [00:00<00:00, 36.61it/s] 96%|#########6| 25/26 [00:00<00:00, 37.56it/s]100%|##########| 26/26 [00:00<00:00, 30.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.150 (0.218)	train_nll   0.15 (  0.22)	train_penalty   0.00 (  0.01)	weight_norm  24.81 ( 24.57)	train_acc   0.96 (  0.91)	train_minacc   0.81 (  0.65)	train_majacc   0.98 (  0.95)	train_corr   0.00 (  0.00)	l1 7.3331 (7.5690)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.83it/s] 23%|##3       | 6/26 [00:00<00:00, 27.67it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.67it/s] 42%|####2     | 11/26 [00:00<00:00, 35.52it/s] 65%|######5   | 17/26 [00:00<00:00, 40.56it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.56it/s] 88%|########8 | 23/26 [00:00<00:00, 45.83it/s]100%|##########| 26/26 [00:00<00:00, 36.38it/s]
Test: [   0/  26]	Loss 0.211 (0.211)	test_acc   0.92 (  0.92)	test_minacc   0.78 (  0.78)	test_majacc   0.95 (  0.95)	Loss_d 0.211 (0.211)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.183 (0.200)	test_acc   0.93 (  0.92)	test_minacc   0.74 (  0.75)	test_majacc   0.96 (  0.95)	Loss_d 0.183 (0.200)	test_acc_d   0.93 (  0.92)	test_minacc_d   0.74 (  0.75)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.79 (  0.76)
Test: [  20/  26]	Loss 0.197 (0.194)	test_acc   0.92 (  0.92)	test_minacc   0.78 (  0.77)	test_majacc   0.94 (  0.95)	Loss_d 0.197 (0.194)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.78 (  0.77)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.74 (  0.76)
Test: [  26/  26]	Loss 0.117 (0.187)	test_acc   0.96 (  0.93)	test_minacc   0.81 (  0.79)	test_majacc   0.99 (  0.95)	Loss_d 0.117 (0.187)	test_acc_d   0.96 (  0.93)	test_minacc_d   0.81 (  0.79)	test_majacc_d   0.99 (  0.95)	test_corr_d   0.82 (  0.76)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.56it/s]
Test: [  0/  1]	Loss 2.161 (2.161)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.88 (  0.88)	Loss_d 2.161 (2.161)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.161 (2.161)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.88 (  0.88)	Loss_d 2.161 (2.161)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.33 (  0.33)
Overall Timing[ 13/  1]	epoch_time 0.0370 (0.0381)	validation_time 0.0004 (0.0009)	train_time 0.0366 (0.0371)
record: (train_acc, test_acc) (0.9091000195145607, 0.5120000243186951)
last accs (train_acc, test_acc) (0.9280000205039978, 0.4570000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.44it/s] 19%|#9        | 5/26 [00:00<00:00, 22.12it/s] 35%|###4      | 9/26 [00:00<00:00, 28.57it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.62it/s] 69%|######9   | 18/26 [00:00<00:00, 35.53it/s] 88%|########8 | 23/26 [00:00<00:00, 37.84it/s]100%|##########| 26/26 [00:00<00:00, 31.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.143 (0.193)	train_nll   0.14 (  0.19)	train_penalty   0.00 (  0.00)	weight_norm  25.27 ( 25.04)	train_acc   0.95 (  0.92)	train_minacc   0.72 (  0.71)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 7.3184 (8.1234)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.15it/s] 27%|##6       | 7/26 [00:00<00:00, 35.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.21it/s] 50%|#####     | 13/26 [00:00<00:00, 40.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.07it/s] 96%|#########6| 25/26 [00:00<00:00, 46.92it/s]100%|##########| 26/26 [00:00<00:00, 39.58it/s]
Test: [   0/  26]	Loss 0.192 (0.192)	test_acc   0.93 (  0.93)	test_minacc   0.72 (  0.72)	test_majacc   0.97 (  0.97)	Loss_d 0.192 (0.192)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.179 (0.197)	test_acc   0.94 (  0.92)	test_minacc   0.70 (  0.71)	test_majacc   0.98 (  0.96)	Loss_d 0.179 (0.197)	test_acc_d   0.94 (  0.92)	test_minacc_d   0.70 (  0.71)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.82 (  0.79)
Test: [  20/  26]	Loss 0.190 (0.184)	test_acc   0.93 (  0.93)	test_minacc   0.75 (  0.75)	test_majacc   0.96 (  0.96)	Loss_d 0.190 (0.184)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.77 (  0.79)
Test: [  26/  26]	Loss 0.116 (0.176)	test_acc   0.97 (  0.93)	test_minacc   0.84 (  0.76)	test_majacc   0.99 (  0.97)	Loss_d 0.116 (0.176)	test_acc_d   0.97 (  0.93)	test_minacc_d   0.84 (  0.76)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.84 (  0.79)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.80it/s]
Test: [  0/  1]	Loss 2.347 (2.347)	test_acc   0.42 (  0.42)	test_minacc   0.37 (  0.37)	test_majacc   0.88 (  0.88)	Loss_d 2.347 (2.347)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.43 (  0.43)
Test: [  1/  1]	Loss 2.347 (2.347)	test_acc   0.42 (  0.42)	test_minacc   0.37 (  0.37)	test_majacc   0.88 (  0.88)	Loss_d 2.347 (2.347)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.43 (  0.43)
Overall Timing[ 14/  1]	epoch_time 0.0369 (0.0381)	validation_time 0.0003 (0.0008)	train_time 0.0366 (0.0371)
record: (train_acc, test_acc) (0.9091000195145607, 0.5120000243186951)
last accs (train_acc, test_acc) (0.934900020301342, 0.4240000247955322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.05it/s] 19%|#9        | 5/26 [00:00<00:00, 23.23it/s] 38%|###8      | 10/26 [00:00<00:00, 31.57it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.01it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.05it/s] 96%|#########6| 25/26 [00:00<00:00, 38.21it/s]100%|##########| 26/26 [00:00<00:00, 32.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.002 (0.075)	train_nll   0.24 (  0.21)	train_penalty   0.00 (  0.00)	weight_norm  25.63 ( 25.48)	train_acc   0.90 (  0.91)	train_minacc   0.66 (  0.74)	train_majacc   0.93 (  0.94)	train_corr   0.00 (  0.00)	l1 7.2886 (7.9164)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 27%|##6       | 7/26 [00:00<00:00, 32.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.01it/s] 50%|#####     | 13/26 [00:00<00:00, 39.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.00it/s] 96%|#########6| 25/26 [00:00<00:00, 47.28it/s]100%|##########| 26/26 [00:00<00:00, 37.92it/s]
Test: [   0/  26]	Loss 0.243 (0.243)	test_acc   0.89 (  0.89)	test_minacc   0.70 (  0.70)	test_majacc   0.93 (  0.93)	Loss_d 0.243 (0.243)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.77 (  0.77)
Test: [  10/  26]	Loss 0.208 (0.207)	test_acc   0.92 (  0.92)	test_minacc   0.70 (  0.74)	test_majacc   0.95 (  0.95)	Loss_d 0.208 (0.207)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.70 (  0.74)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.77 (  0.76)
Test: [  20/  26]	Loss 0.272 (0.217)	test_acc   0.89 (  0.92)	test_minacc   0.65 (  0.73)	test_majacc   0.94 (  0.95)	Loss_d 0.272 (0.217)	test_acc_d   0.89 (  0.92)	test_minacc_d   0.65 (  0.73)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.76 (  0.76)
Test: [  26/  26]	Loss 0.238 (0.221)	test_acc   0.89 (  0.91)	test_minacc   0.66 (  0.72)	test_majacc   0.93 (  0.94)	Loss_d 0.238 (0.221)	test_acc_d   0.89 (  0.91)	test_minacc_d   0.66 (  0.72)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.77 (  0.76)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.79it/s]
Test: [  0/  1]	Loss 2.336 (2.336)	test_acc   0.37 (  0.37)	test_minacc   0.32 (  0.32)	test_majacc   0.81 (  0.81)	Loss_d 2.336 (2.336)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.47 (  0.47)
Test: [  1/  1]	Loss 2.336 (2.336)	test_acc   0.37 (  0.37)	test_minacc   0.32 (  0.32)	test_majacc   0.81 (  0.81)	Loss_d 2.336 (2.336)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.47 (  0.47)
Overall Timing[ 15/  1]	epoch_time 0.0354 (0.0379)	validation_time 0.0005 (0.0008)	train_time 0.0349 (0.0369)
record: (train_acc, test_acc) (0.9091000195145607, 0.5120000243186951)
last accs (train_acc, test_acc) (0.9107000195980072, 0.37300002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.24it/s] 19%|#9        | 5/26 [00:00<00:00, 24.39it/s] 35%|###4      | 9/26 [00:00<00:00, 30.75it/s] 50%|#####     | 13/26 [00:00<00:00, 32.47it/s] 65%|######5   | 17/26 [00:00<00:00, 34.54it/s] 85%|########4 | 22/26 [00:00<00:00, 37.40it/s]100%|##########| 26/26 [00:00<00:00, 31.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.001 (0.003)	train_nll   0.31 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.72 ( 25.69)	train_acc   0.82 (  0.88)	train_minacc   0.81 (  0.81)	train_majacc   0.82 (  0.89)	train_corr   0.00 (  0.00)	l1 6.7037 (6.9389)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.34it/s] 27%|##6       | 7/26 [00:00<00:00, 35.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.38it/s] 50%|#####     | 13/26 [00:00<00:00, 40.61it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.35it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.35it/s] 96%|#########6| 25/26 [00:00<00:00, 46.66it/s]100%|##########| 26/26 [00:00<00:00, 38.59it/s]
Test: [   0/  26]	Loss 0.311 (0.311)	test_acc   0.85 (  0.85)	test_minacc   0.83 (  0.83)	test_majacc   0.85 (  0.85)	Loss_d 0.311 (0.311)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.254 (0.278)	test_acc   0.88 (  0.87)	test_minacc   0.93 (  0.88)	test_majacc   0.87 (  0.86)	Loss_d 0.254 (0.278)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.93 (  0.88)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.60 (  0.60)
Test: [  20/  26]	Loss 0.345 (0.288)	test_acc   0.83 (  0.86)	test_minacc   0.87 (  0.88)	test_majacc   0.83 (  0.86)	Loss_d 0.345 (0.288)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.87 (  0.88)	test_majacc_d   0.83 (  0.86)	test_corr_d   0.56 (  0.60)
Test: [  26/  26]	Loss 0.311 (0.293)	test_acc   0.82 (  0.86)	test_minacc   0.78 (  0.87)	test_majacc   0.82 (  0.85)	Loss_d 0.311 (0.293)	test_acc_d   0.82 (  0.86)	test_minacc_d   0.78 (  0.87)	test_majacc_d   0.82 (  0.85)	test_corr_d   0.61 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.01it/s]
Test: [  0/  1]	Loss 1.706 (1.706)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.76 (  0.76)	Loss_d 1.706 (1.706)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 1.706 (1.706)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.76 (  0.76)	Loss_d 1.706 (1.706)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.11 (  0.11)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/128/checkpoints/model_best.pth
Overall Timing[ 16/  1]	epoch_time 0.0357 (0.0378)	validation_time 0.0004 (0.0008)	train_time 0.0353 (0.0368)
record: (train_acc, test_acc) (0.855800028026104, 0.5550000071525574)
last accs (train_acc, test_acc) (0.855800028026104, 0.5550000071525574)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.82it/s] 19%|#9        | 5/26 [00:00<00:00, 26.04it/s] 35%|###4      | 9/26 [00:00<00:00, 31.94it/s] 50%|#####     | 13/26 [00:00<00:00, 34.31it/s] 69%|######9   | 18/26 [00:00<00:00, 37.09it/s] 88%|########8 | 23/26 [00:00<00:00, 38.12it/s]100%|##########| 26/26 [00:00<00:00, 32.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.006 (0.002)	train_nll   0.24 (  0.29)	train_penalty   0.01 (  0.00)	weight_norm  25.73 ( 25.72)	train_acc   0.88 (  0.86)	train_minacc   0.75 (  0.83)	train_majacc   0.90 (  0.86)	train_corr   0.00 (  0.00)	l1 6.2954 (6.6093)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s] 27%|##6       | 7/26 [00:00<00:00, 31.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.90it/s] 50%|#####     | 13/26 [00:00<00:00, 38.81it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.50it/s] 96%|#########6| 25/26 [00:00<00:00, 45.79it/s]100%|##########| 26/26 [00:00<00:00, 37.69it/s]
Test: [   0/  26]	Loss 0.258 (0.258)	test_acc   0.90 (  0.90)	test_minacc   0.77 (  0.77)	test_majacc   0.93 (  0.93)	Loss_d 0.258 (0.258)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.77 (  0.77)
Test: [  10/  26]	Loss 0.232 (0.234)	test_acc   0.93 (  0.92)	test_minacc   0.84 (  0.80)	test_majacc   0.94 (  0.94)	Loss_d 0.232 (0.234)	test_acc_d   0.93 (  0.92)	test_minacc_d   0.84 (  0.80)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.75 (  0.76)
Test: [  20/  26]	Loss 0.285 (0.236)	test_acc   0.88 (  0.91)	test_minacc   0.71 (  0.78)	test_majacc   0.91 (  0.93)	Loss_d 0.285 (0.236)	test_acc_d   0.88 (  0.91)	test_minacc_d   0.71 (  0.78)	test_majacc_d   0.91 (  0.93)	test_corr_d   0.75 (  0.76)
Test: [  26/  26]	Loss 0.244 (0.240)	test_acc   0.88 (  0.90)	test_minacc   0.72 (  0.77)	test_majacc   0.90 (  0.93)	Loss_d 0.244 (0.240)	test_acc_d   0.88 (  0.90)	test_minacc_d   0.72 (  0.77)	test_majacc_d   0.90 (  0.93)	test_corr_d   0.79 (  0.76)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 1.910 (1.910)	test_acc   0.45 (  0.45)	test_minacc   0.41 (  0.41)	test_majacc   0.86 (  0.86)	Loss_d 1.910 (1.910)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.42 (  0.42)
Test: [  1/  1]	Loss 1.910 (1.910)	test_acc   0.45 (  0.45)	test_minacc   0.41 (  0.41)	test_majacc   0.86 (  0.86)	Loss_d 1.910 (1.910)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.42 (  0.42)
Overall Timing[ 17/  1]	epoch_time 0.0344 (0.0376)	validation_time 0.0003 (0.0008)	train_time 0.0341 (0.0367)
record: (train_acc, test_acc) (0.855800028026104, 0.5550000071525574)
last accs (train_acc, test_acc) (0.903100015103817, 0.453000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.09it/s] 19%|#9        | 5/26 [00:00<00:00, 22.80it/s] 35%|###4      | 9/26 [00:00<00:00, 29.69it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.36it/s] 92%|#########2| 24/26 [00:00<00:00, 39.28it/s]100%|##########| 26/26 [00:00<00:00, 32.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.001 (0.002)	train_nll   0.26 (  0.26)	train_penalty   0.00 (  0.00)	weight_norm  25.75 ( 25.74)	train_acc   0.86 (  0.88)	train_minacc   0.72 (  0.78)	train_majacc   0.88 (  0.90)	train_corr   0.00 (  0.00)	l1 7.0765 (7.1685)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.68it/s] 27%|##6       | 7/26 [00:00<00:00, 36.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.12it/s] 50%|#####     | 13/26 [00:00<00:00, 41.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.03it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.03it/s] 96%|#########6| 25/26 [00:00<00:00, 47.91it/s]100%|##########| 26/26 [00:00<00:00, 39.93it/s]
Test: [   0/  26]	Loss 0.266 (0.266)	test_acc   0.89 (  0.89)	test_minacc   0.83 (  0.83)	test_majacc   0.91 (  0.91)	Loss_d 0.266 (0.266)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.75 (  0.75)
Test: [  10/  26]	Loss 0.214 (0.229)	test_acc   0.91 (  0.90)	test_minacc   0.86 (  0.82)	test_majacc   0.92 (  0.92)	Loss_d 0.214 (0.229)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.86 (  0.82)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.74 (  0.74)
Test: [  20/  26]	Loss 0.252 (0.220)	test_acc   0.91 (  0.91)	test_minacc   0.86 (  0.84)	test_majacc   0.91 (  0.92)	Loss_d 0.252 (0.220)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.86 (  0.84)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.73 (  0.75)
Test: [  26/  26]	Loss 0.251 (0.225)	test_acc   0.86 (  0.90)	test_minacc   0.72 (  0.83)	test_majacc   0.88 (  0.92)	Loss_d 0.251 (0.225)	test_acc_d   0.86 (  0.90)	test_minacc_d   0.72 (  0.83)	test_majacc_d   0.88 (  0.92)	test_corr_d   0.77 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.38it/s]
Test: [  0/  1]	Loss 2.154 (2.154)	test_acc   0.49 (  0.49)	test_minacc   0.45 (  0.45)	test_majacc   0.84 (  0.84)	Loss_d 2.154 (2.154)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.36 (  0.36)
Test: [  1/  1]	Loss 2.154 (2.154)	test_acc   0.49 (  0.49)	test_minacc   0.45 (  0.45)	test_majacc   0.84 (  0.84)	Loss_d 2.154 (2.154)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.36 (  0.36)
Overall Timing[ 18/  1]	epoch_time 0.0352 (0.0374)	validation_time 0.0004 (0.0007)	train_time 0.0348 (0.0366)
record: (train_acc, test_acc) (0.855800028026104, 0.5550000071525574)
last accs (train_acc, test_acc) (0.9032000140547752, 0.492000013589859)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.43it/s] 23%|##3       | 6/26 [00:00<00:00, 25.96it/s] 38%|###8      | 10/26 [00:00<00:00, 29.99it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.00it/s] 92%|#########2| 24/26 [00:00<00:00, 37.33it/s]100%|##########| 26/26 [00:00<00:00, 31.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.002)	train_nll   0.24 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.77 ( 25.76)	train_acc   0.86 (  0.89)	train_minacc   0.78 (  0.86)	train_majacc   0.87 (  0.89)	train_corr   0.00 (  0.00)	l1 7.9451 (7.2420)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.33it/s] 27%|##6       | 7/26 [00:00<00:00, 36.58it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.58it/s] 50%|#####     | 13/26 [00:00<00:00, 40.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.19it/s] 96%|#########6| 25/26 [00:00<00:00, 46.65it/s]100%|##########| 26/26 [00:00<00:00, 39.32it/s]
Test: [   0/  26]	Loss 0.311 (0.311)	test_acc   0.87 (  0.87)	test_minacc   0.78 (  0.78)	test_majacc   0.88 (  0.88)	Loss_d 0.311 (0.311)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.284 (0.297)	test_acc   0.86 (  0.86)	test_minacc   0.88 (  0.79)	test_majacc   0.86 (  0.87)	Loss_d 0.284 (0.297)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.88 (  0.79)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.67 (  0.69)
Test: [  20/  26]	Loss 0.268 (0.281)	test_acc   0.88 (  0.86)	test_minacc   0.86 (  0.82)	test_majacc   0.89 (  0.87)	Loss_d 0.268 (0.281)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.86 (  0.82)	test_majacc_d   0.89 (  0.87)	test_corr_d   0.69 (  0.69)
Test: [  26/  26]	Loss 0.238 (0.276)	test_acc   0.86 (  0.86)	test_minacc   0.78 (  0.83)	test_majacc   0.87 (  0.87)	Loss_d 0.238 (0.276)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.78 (  0.83)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.73 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.27it/s]
Test: [  0/  1]	Loss 2.487 (2.487)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.82 (  0.82)	Loss_d 2.487 (2.487)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 2.487 (2.487)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.82 (  0.82)	Loss_d 2.487 (2.487)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.27 (  0.27)
Overall Timing[ 19/  1]	epoch_time 0.0350 (0.0373)	validation_time 0.0003 (0.0007)	train_time 0.0346 (0.0365)
record: (train_acc, test_acc) (0.855800028026104, 0.5550000071525574)
last accs (train_acc, test_acc) (0.8645000246167183, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.19it/s] 27%|##6       | 7/26 [00:00<00:00, 30.46it/s] 46%|####6     | 12/26 [00:00<00:00, 35.07it/s] 65%|######5   | 17/26 [00:00<00:00, 37.28it/s] 85%|########4 | 22/26 [00:00<00:00, 38.88it/s]100%|##########| 26/26 [00:00<00:00, 33.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.002)	train_nll   0.27 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.79 ( 25.78)	train_acc   0.85 (  0.88)	train_minacc   0.75 (  0.80)	train_majacc   0.86 (  0.90)	train_corr   0.00 (  0.00)	l1 7.7103 (7.5339)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.59it/s] 35%|###4      | 9/26 [00:00<00:00, 38.73it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.73it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.45it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.45it/s] 81%|########  | 21/26 [00:00<00:00, 46.46it/s]100%|##########| 26/26 [00:00<00:00, 40.94it/s]
Test: [   0/  26]	Loss 0.258 (0.258)	test_acc   0.87 (  0.87)	test_minacc   0.90 (  0.90)	test_majacc   0.87 (  0.87)	Loss_d 0.258 (0.258)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.234 (0.259)	test_acc   0.89 (  0.87)	test_minacc   0.84 (  0.83)	test_majacc   0.89 (  0.88)	Loss_d 0.234 (0.259)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.73 (  0.71)
Test: [  20/  26]	Loss 0.290 (0.261)	test_acc   0.84 (  0.87)	test_minacc   0.79 (  0.82)	test_majacc   0.85 (  0.88)	Loss_d 0.290 (0.261)	test_acc_d   0.84 (  0.87)	test_minacc_d   0.79 (  0.82)	test_majacc_d   0.85 (  0.88)	test_corr_d   0.69 (  0.71)
Test: [  26/  26]	Loss 0.263 (0.261)	test_acc   0.84 (  0.87)	test_minacc   0.75 (  0.82)	test_majacc   0.86 (  0.88)	Loss_d 0.263 (0.261)	test_acc_d   0.84 (  0.87)	test_minacc_d   0.75 (  0.82)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.74 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.24it/s]
Test: [  0/  1]	Loss 2.277 (2.277)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.81 (  0.81)	Loss_d 2.277 (2.277)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.277 (2.277)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.81 (  0.81)	Loss_d 2.277 (2.277)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.25 (  0.25)
Overall Timing[ 20/  1]	epoch_time 0.0344 (0.0372)	validation_time 0.0003 (0.0007)	train_time 0.0341 (0.0364)
record: (train_acc, test_acc) (0.855800028026104, 0.5550000071525574)
last accs (train_acc, test_acc) (0.8677000249624253, 0.5450000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.52it/s] 19%|#9        | 5/26 [00:00<00:01, 20.84it/s] 35%|###4      | 9/26 [00:00<00:00, 27.25it/s] 50%|#####     | 13/26 [00:00<00:00, 31.48it/s] 69%|######9   | 18/26 [00:00<00:00, 34.94it/s] 88%|########8 | 23/26 [00:00<00:00, 36.90it/s]100%|##########| 26/26 [00:00<00:00, 29.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.26)	train_penalty   0.00 (  0.00)	weight_norm  25.79 ( 25.79)	train_acc   0.86 (  0.87)	train_minacc   0.91 (  0.86)	train_majacc   0.86 (  0.88)	train_corr   0.00 (  0.00)	l1 7.8428 (7.6958)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.94it/s] 27%|##6       | 7/26 [00:00<00:00, 33.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.35it/s] 50%|#####     | 13/26 [00:00<00:00, 39.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.44it/s] 96%|#########6| 25/26 [00:00<00:00, 46.36it/s]100%|##########| 26/26 [00:00<00:00, 38.21it/s]
Test: [   0/  26]	Loss 0.255 (0.255)	test_acc   0.87 (  0.87)	test_minacc   0.92 (  0.92)	test_majacc   0.86 (  0.86)	Loss_d 0.255 (0.255)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.253 (0.261)	test_acc   0.87 (  0.86)	test_minacc   0.86 (  0.87)	test_majacc   0.88 (  0.86)	Loss_d 0.253 (0.261)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.86 (  0.87)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.68 (  0.67)
Test: [  20/  26]	Loss 0.288 (0.269)	test_acc   0.85 (  0.86)	test_minacc   0.92 (  0.87)	test_majacc   0.84 (  0.86)	Loss_d 0.288 (0.269)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.92 (  0.87)	test_majacc_d   0.84 (  0.86)	test_corr_d   0.64 (  0.67)
Test: [  26/  26]	Loss 0.253 (0.268)	test_acc   0.86 (  0.86)	test_minacc   0.91 (  0.87)	test_majacc   0.86 (  0.86)	Loss_d 0.253 (0.268)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.91 (  0.87)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.71 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.73it/s]
Test: [  0/  1]	Loss 2.206 (2.206)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.79 (  0.79)	Loss_d 2.206 (2.206)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 2.206 (2.206)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.79 (  0.79)	Loss_d 2.206 (2.206)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.15 (  0.15)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/128/checkpoints/model_best.pth
Overall Timing[ 21/  1]	epoch_time 0.0379 (0.0372)	validation_time 0.0004 (0.0007)	train_time 0.0375 (0.0364)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.47it/s] 19%|#9        | 5/26 [00:00<00:00, 25.37it/s] 35%|###4      | 9/26 [00:00<00:00, 31.65it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.64it/s] 69%|######9   | 18/26 [00:00<00:00, 37.03it/s] 88%|########8 | 23/26 [00:00<00:00, 38.72it/s]100%|##########| 26/26 [00:00<00:00, 32.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.24 (  0.26)	train_penalty   0.00 (  0.00)	weight_norm  25.79 ( 25.79)	train_acc   0.88 (  0.87)	train_minacc   0.88 (  0.85)	train_majacc   0.88 (  0.87)	train_corr   0.00 (  0.00)	l1 7.6903 (7.7751)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.38it/s] 27%|##6       | 7/26 [00:00<00:00, 32.87it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.87it/s] 50%|#####     | 13/26 [00:00<00:00, 38.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.00it/s] 96%|#########6| 25/26 [00:00<00:00, 46.32it/s]100%|##########| 26/26 [00:00<00:00, 38.11it/s]
Test: [   0/  26]	Loss 0.246 (0.246)	test_acc   0.89 (  0.89)	test_minacc   0.92 (  0.92)	test_majacc   0.88 (  0.88)	Loss_d 0.246 (0.246)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.232 (0.242)	test_acc   0.89 (  0.88)	test_minacc   0.86 (  0.85)	test_majacc   0.89 (  0.88)	Loss_d 0.232 (0.242)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.86 (  0.85)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.72 (  0.71)
Test: [  20/  26]	Loss 0.274 (0.251)	test_acc   0.86 (  0.87)	test_minacc   0.90 (  0.86)	test_majacc   0.86 (  0.88)	Loss_d 0.274 (0.251)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.90 (  0.86)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.69 (  0.71)
Test: [  26/  26]	Loss 0.238 (0.251)	test_acc   0.88 (  0.87)	test_minacc   0.88 (  0.85)	test_majacc   0.88 (  0.88)	Loss_d 0.238 (0.251)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.88 (  0.85)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.75 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.29it/s]
Test: [  0/  1]	Loss 2.233 (2.233)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.82 (  0.82)	Loss_d 2.233 (2.233)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.233 (2.233)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.82 (  0.82)	Loss_d 2.233 (2.233)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Overall Timing[ 22/  1]	epoch_time 0.0353 (0.0371)	validation_time 0.0004 (0.0007)	train_time 0.0349 (0.0364)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8729000225067138, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 19%|#9        | 5/26 [00:00<00:00, 23.34it/s] 35%|###4      | 9/26 [00:00<00:00, 29.39it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.51it/s] 92%|#########2| 24/26 [00:00<00:00, 38.36it/s]100%|##########| 26/26 [00:00<00:00, 31.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 7.751160621643066
set z to 7.363602590560912
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.26)	train_penalty   0.00 (  0.00)	weight_norm  25.79 ( 25.79)	train_acc   0.88 (  0.87)	train_minacc   0.91 (  0.85)	train_majacc   0.87 (  0.87)	train_corr   0.00 (  0.00)	l1 7.6948 (7.8181)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.49it/s] 27%|##6       | 7/26 [00:00<00:00, 34.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.97it/s] 46%|####6     | 12/26 [00:00<00:00, 41.31it/s] 65%|######5   | 17/26 [00:00<00:00, 41.65it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.65it/s] 88%|########8 | 23/26 [00:00<00:00, 46.75it/s]100%|##########| 26/26 [00:00<00:00, 38.49it/s]
Test: [   0/  26]	Loss 0.239 (0.239)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.89 (  0.89)	Loss_d 0.239 (0.239)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.226 (0.234)	test_acc   0.88 (  0.88)	test_minacc   0.86 (  0.86)	test_majacc   0.89 (  0.89)	Loss_d 0.226 (0.234)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.73 (  0.72)
Test: [  20/  26]	Loss 0.262 (0.240)	test_acc   0.87 (  0.88)	test_minacc   0.92 (  0.87)	test_majacc   0.86 (  0.88)	Loss_d 0.262 (0.240)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.92 (  0.87)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.234 (0.242)	test_acc   0.88 (  0.88)	test_minacc   0.91 (  0.87)	test_majacc   0.87 (  0.88)	Loss_d 0.234 (0.242)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.91 (  0.87)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.76 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.84it/s]
Test: [  0/  1]	Loss 2.238 (2.238)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.82 (  0.82)	Loss_d 2.238 (2.238)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 2.238 (2.238)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.82 (  0.82)	Loss_d 2.238 (2.238)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.24 (  0.24)
Overall Timing[ 23/  1]	epoch_time 0.0363 (0.0371)	validation_time 0.0003 (0.0007)	train_time 0.0360 (0.0363)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8792000256180763, 0.5550000071525574)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.72it/s] 19%|#9        | 5/26 [00:00<00:00, 23.29it/s] 35%|###4      | 9/26 [00:00<00:00, 29.13it/s] 50%|#####     | 13/26 [00:00<00:00, 32.69it/s] 65%|######5   | 17/26 [00:00<00:00, 35.08it/s] 85%|########4 | 22/26 [00:00<00:00, 37.36it/s]100%|##########| 26/26 [00:00<00:00, 31.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.24 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.80 ( 25.79)	train_acc   0.87 (  0.87)	train_minacc   0.91 (  0.87)	train_majacc   0.87 (  0.87)	train_corr   0.00 (  0.00)	l1 7.8988 (7.8803)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.34it/s] 35%|###4      | 9/26 [00:00<00:00, 38.29it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.29it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.88it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.88it/s] 81%|########  | 21/26 [00:00<00:00, 46.58it/s]100%|##########| 26/26 [00:00<00:00, 41.20it/s]
Test: [   0/  26]	Loss 0.241 (0.241)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.89 (  0.89)	Loss_d 0.241 (0.241)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.231 (0.241)	test_acc   0.88 (  0.88)	test_minacc   0.86 (  0.86)	test_majacc   0.88 (  0.88)	Loss_d 0.231 (0.241)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  20/  26]	Loss 0.256 (0.242)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.87)	test_majacc   0.87 (  0.88)	Loss_d 0.256 (0.242)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.87)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.236 (0.243)	test_acc   0.88 (  0.88)	test_minacc   0.91 (  0.87)	test_majacc   0.87 (  0.88)	Loss_d 0.236 (0.243)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.91 (  0.87)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.75 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.25it/s]
Test: [  0/  1]	Loss 2.309 (2.309)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.83 (  0.83)	Loss_d 2.309 (2.309)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 2.309 (2.309)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.83 (  0.83)	Loss_d 2.309 (2.309)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.24 (  0.24)
Overall Timing[ 24/  1]	epoch_time 0.0355 (0.0370)	validation_time 0.0004 (0.0006)	train_time 0.0351 (0.0363)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8798000209331512, 0.5560000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.24it/s] 19%|#9        | 5/26 [00:00<00:00, 23.66it/s] 35%|###4      | 9/26 [00:00<00:00, 29.53it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.48it/s] 92%|#########2| 24/26 [00:00<00:00, 38.27it/s]100%|##########| 26/26 [00:00<00:00, 31.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.24 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.80 ( 25.80)	train_acc   0.87 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.86 (  0.88)	train_corr   0.00 (  0.00)	l1 8.1848 (7.9095)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 27%|##6       | 7/26 [00:00<00:00, 32.70it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.70it/s] 50%|#####     | 13/26 [00:00<00:00, 39.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.20it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.20it/s] 96%|#########6| 25/26 [00:00<00:00, 46.64it/s]100%|##########| 26/26 [00:00<00:00, 38.19it/s]
Test: [   0/  26]	Loss 0.252 (0.252)	test_acc   0.88 (  0.88)	test_minacc   0.90 (  0.90)	test_majacc   0.87 (  0.87)	Loss_d 0.252 (0.252)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.245 (0.253)	test_acc   0.87 (  0.87)	test_minacc   0.88 (  0.87)	test_majacc   0.87 (  0.87)	Loss_d 0.245 (0.253)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.88 (  0.87)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.69 (  0.69)
Test: [  20/  26]	Loss 0.266 (0.256)	test_acc   0.86 (  0.87)	test_minacc   0.94 (  0.88)	test_majacc   0.85 (  0.87)	Loss_d 0.266 (0.256)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.94 (  0.88)	test_majacc_d   0.85 (  0.87)	test_corr_d   0.67 (  0.69)
Test: [  26/  26]	Loss 0.243 (0.255)	test_acc   0.87 (  0.87)	test_minacc   0.94 (  0.88)	test_majacc   0.86 (  0.87)	Loss_d 0.243 (0.255)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.94 (  0.88)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.73 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.11it/s]
Test: [  0/  1]	Loss 2.371 (2.371)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.80 (  0.80)	Loss_d 2.371 (2.371)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 2.371 (2.371)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.80 (  0.80)	Loss_d 2.371 (2.371)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.18 (  0.18)
Overall Timing[ 25/  1]	epoch_time 0.0365 (0.0370)	validation_time 0.0003 (0.0006)	train_time 0.0362 (0.0363)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.869300023674965, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 19%|#9        | 5/26 [00:00<00:00, 24.92it/s] 35%|###4      | 9/26 [00:00<00:00, 30.45it/s] 50%|#####     | 13/26 [00:00<00:00, 33.47it/s] 65%|######5   | 17/26 [00:00<00:00, 35.62it/s] 81%|########  | 21/26 [00:00<00:00, 37.03it/s]100%|##########| 26/26 [00:00<00:00, 38.68it/s]100%|##########| 26/26 [00:00<00:00, 31.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.80 ( 25.80)	train_acc   0.88 (  0.88)	train_minacc   0.91 (  0.88)	train_majacc   0.88 (  0.88)	train_corr   0.00 (  0.00)	l1 8.0064 (7.9967)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.41it/s] 27%|##6       | 7/26 [00:00<00:00, 35.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.81it/s] 50%|#####     | 13/26 [00:00<00:00, 44.09it/s] 69%|######9   | 18/26 [00:00<00:00, 43.93it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.93it/s] 92%|#########2| 24/26 [00:00<00:00, 47.88it/s]100%|##########| 26/26 [00:00<00:00, 40.39it/s]
Test: [   0/  26]	Loss 0.240 (0.240)	test_acc   0.88 (  0.88)	test_minacc   0.92 (  0.92)	test_majacc   0.88 (  0.88)	Loss_d 0.240 (0.240)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.232 (0.236)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.232 (0.236)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.71)
Test: [  20/  26]	Loss 0.261 (0.244)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.88)	test_majacc   0.86 (  0.88)	Loss_d 0.261 (0.244)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.88)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.69 (  0.71)
Test: [  26/  26]	Loss 0.233 (0.244)	test_acc   0.88 (  0.88)	test_minacc   0.91 (  0.88)	test_majacc   0.88 (  0.87)	Loss_d 0.233 (0.244)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.91 (  0.88)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.75 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.60it/s]
Test: [  0/  1]	Loss 2.352 (2.352)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.352 (2.352)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 2.352 (2.352)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.352 (2.352)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.22 (  0.22)
Overall Timing[ 26/  1]	epoch_time 0.0353 (0.0370)	validation_time 0.0004 (0.0006)	train_time 0.0348 (0.0362)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8757000237107276, 0.5690000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.09it/s] 23%|##3       | 6/26 [00:00<00:00, 26.08it/s] 38%|###8      | 10/26 [00:00<00:00, 31.28it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.42it/s] 69%|######9   | 18/26 [00:00<00:00, 36.04it/s] 85%|########4 | 22/26 [00:00<00:00, 37.07it/s]100%|##########| 26/26 [00:00<00:00, 37.64it/s]100%|##########| 26/26 [00:00<00:00, 31.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.25)	train_penalty   0.00 (  0.00)	weight_norm  25.80 ( 25.80)	train_acc   0.88 (  0.87)	train_minacc   0.91 (  0.87)	train_majacc   0.87 (  0.87)	train_corr   0.00 (  0.00)	l1 7.8897 (8.0787)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 27%|##6       | 7/26 [00:00<00:00, 34.04it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.04it/s] 50%|#####     | 13/26 [00:00<00:00, 39.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.72it/s] 96%|#########6| 25/26 [00:00<00:00, 45.76it/s]100%|##########| 26/26 [00:00<00:00, 38.21it/s]
Test: [   0/  26]	Loss 0.235 (0.235)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.89 (  0.89)	Loss_d 0.235 (0.235)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.221 (0.229)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.87)	test_majacc   0.88 (  0.88)	Loss_d 0.221 (0.229)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.87)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.74 (  0.73)
Test: [  20/  26]	Loss 0.256 (0.236)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.88)	test_majacc   0.86 (  0.88)	Loss_d 0.256 (0.236)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.88)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.71 (  0.73)
Test: [  26/  26]	Loss 0.231 (0.237)	test_acc   0.88 (  0.88)	test_minacc   0.91 (  0.88)	test_majacc   0.87 (  0.88)	Loss_d 0.231 (0.237)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.91 (  0.88)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.76 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.36it/s]
Test: [  0/  1]	Loss 2.330 (2.330)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.82 (  0.82)	Loss_d 2.330 (2.330)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.330 (2.330)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.82 (  0.82)	Loss_d 2.330 (2.330)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.26 (  0.26)
Overall Timing[ 27/  1]	epoch_time 0.0360 (0.0369)	validation_time 0.0003 (0.0006)	train_time 0.0356 (0.0362)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8796000209450722, 0.5560000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.08it/s] 19%|#9        | 5/26 [00:00<00:01, 19.07it/s] 35%|###4      | 9/26 [00:00<00:00, 26.48it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.91it/s] 92%|#########2| 24/26 [00:00<00:00, 37.96it/s]100%|##########| 26/26 [00:00<00:00, 29.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.24 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.80 ( 25.80)	train_acc   0.87 (  0.87)	train_minacc   0.91 (  0.88)	train_majacc   0.87 (  0.87)	train_corr   0.00 (  0.00)	l1 8.0649 (8.0447)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.68it/s] 23%|##3       | 6/26 [00:00<00:00, 32.58it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.58it/s] 46%|####6     | 12/26 [00:00<00:00, 43.80it/s] 65%|######5   | 17/26 [00:00<00:00, 43.27it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.27it/s] 88%|########8 | 23/26 [00:00<00:00, 48.21it/s]100%|##########| 26/26 [00:00<00:00, 39.64it/s]
Test: [   0/  26]	Loss 0.241 (0.241)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.241 (0.241)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.227 (0.237)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.87)	test_majacc   0.88 (  0.88)	Loss_d 0.227 (0.237)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.87)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.72)
Test: [  20/  26]	Loss 0.255 (0.240)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.88)	test_majacc   0.86 (  0.88)	Loss_d 0.255 (0.240)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.88)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.237 (0.241)	test_acc   0.88 (  0.88)	test_minacc   0.91 (  0.88)	test_majacc   0.87 (  0.88)	Loss_d 0.237 (0.241)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.91 (  0.88)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.75 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.30it/s]
Test: [  0/  1]	Loss 2.372 (2.372)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.83 (  0.83)	Loss_d 2.372 (2.372)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 2.372 (2.372)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.83 (  0.83)	Loss_d 2.372 (2.372)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.24 (  0.24)
Overall Timing[ 28/  1]	epoch_time 0.0367 (0.0369)	validation_time 0.0004 (0.0006)	train_time 0.0363 (0.0362)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8769000176191329, 0.5660000443458557)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 19%|#9        | 5/26 [00:00<00:00, 23.00it/s] 35%|###4      | 9/26 [00:00<00:00, 29.18it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.88it/s] 92%|#########2| 24/26 [00:00<00:00, 37.90it/s]100%|##########| 26/26 [00:00<00:00, 31.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.24 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.80 ( 25.80)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.87 (  0.88)	train_corr   0.00 (  0.00)	l1 8.2200 (8.0427)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 27%|##6       | 7/26 [00:00<00:00, 34.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.07it/s] 50%|#####     | 13/26 [00:00<00:00, 39.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.20it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.20it/s] 96%|#########6| 25/26 [00:00<00:00, 46.34it/s]100%|##########| 26/26 [00:00<00:00, 38.66it/s]
Test: [   0/  26]	Loss 0.244 (0.244)	test_acc   0.88 (  0.88)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.244 (0.244)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.237 (0.243)	test_acc   0.87 (  0.87)	test_minacc   0.88 (  0.88)	test_majacc   0.87 (  0.87)	Loss_d 0.237 (0.243)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.71 (  0.70)
Test: [  20/  26]	Loss 0.258 (0.247)	test_acc   0.87 (  0.87)	test_minacc   0.94 (  0.89)	test_majacc   0.85 (  0.87)	Loss_d 0.258 (0.247)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.85 (  0.87)	test_corr_d   0.68 (  0.70)
Test: [  26/  26]	Loss 0.238 (0.247)	test_acc   0.88 (  0.87)	test_minacc   0.94 (  0.90)	test_majacc   0.87 (  0.87)	Loss_d 0.238 (0.247)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.94 (  0.90)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.74 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 2.395 (2.395)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.81 (  0.81)	Loss_d 2.395 (2.395)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.395 (2.395)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.81 (  0.81)	Loss_d 2.395 (2.395)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.20 (  0.20)
Overall Timing[ 29/  1]	epoch_time 0.0357 (0.0369)	validation_time 0.0003 (0.0006)	train_time 0.0353 (0.0362)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8728000180721283, 0.578000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.88it/s] 19%|#9        | 5/26 [00:00<00:00, 25.89it/s] 38%|###8      | 10/26 [00:00<00:00, 33.64it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.95it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.03it/s] 96%|#########6| 25/26 [00:00<00:00, 40.02it/s]100%|##########| 26/26 [00:00<00:00, 33.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.80 ( 25.80)	train_acc   0.89 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.88 (  0.88)	train_corr   0.00 (  0.00)	l1 8.0953 (8.1216)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.94it/s] 15%|#5        | 4/26 [00:00<00:01, 20.56it/s] 38%|###8      | 10/26 [00:00<00:00, 36.01it/s]                                                38%|###8      | 10/26 [00:00<00:00, 36.01it/s] 62%|######1   | 16/26 [00:00<00:00, 40.62it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.62it/s] 85%|########4 | 22/26 [00:00<00:00, 46.37it/s]100%|##########| 26/26 [00:00<00:00, 37.50it/s]
Test: [   0/  26]	Loss 0.237 (0.237)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.237 (0.237)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.229 (0.234)	test_acc   0.88 (  0.88)	test_minacc   0.89 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.229 (0.234)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.89 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  20/  26]	Loss 0.256 (0.241)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.256 (0.241)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.230 (0.241)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.88 (  0.87)	Loss_d 0.230 (0.241)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.75 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.79it/s]
Test: [  0/  1]	Loss 2.380 (2.380)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.380 (2.380)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.380 (2.380)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.380 (2.380)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Overall Timing[ 30/  1]	epoch_time 0.0359 (0.0368)	validation_time 0.0004 (0.0006)	train_time 0.0354 (0.0362)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8780000261068344, 0.5760000348091125)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.80it/s] 23%|##3       | 6/26 [00:00<00:00, 26.82it/s] 38%|###8      | 10/26 [00:00<00:00, 31.87it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.01it/s] 92%|#########2| 24/26 [00:00<00:00, 38.66it/s]100%|##########| 26/26 [00:00<00:00, 32.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.80 ( 25.80)	train_acc   0.88 (  0.87)	train_minacc   0.91 (  0.88)	train_majacc   0.88 (  0.87)	train_corr   0.00 (  0.00)	l1 8.0447 (8.1582)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.49it/s] 23%|##3       | 6/26 [00:00<00:00, 31.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.76it/s] 50%|#####     | 13/26 [00:00<00:00, 42.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.10it/s] 96%|#########6| 25/26 [00:00<00:00, 47.78it/s]100%|##########| 26/26 [00:00<00:00, 39.73it/s]
Test: [   0/  26]	Loss 0.237 (0.237)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.237 (0.237)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.223 (0.232)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.87)	test_majacc   0.89 (  0.88)	Loss_d 0.223 (0.232)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.87)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  20/  26]	Loss 0.255 (0.238)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.88)	test_majacc   0.86 (  0.88)	Loss_d 0.255 (0.238)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.88)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.71 (  0.73)
Test: [  26/  26]	Loss 0.232 (0.239)	test_acc   0.88 (  0.88)	test_minacc   0.91 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.232 (0.239)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.91 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.76 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.08it/s]
Test: [  0/  1]	Loss 2.376 (2.376)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.83 (  0.83)	Loss_d 2.376 (2.376)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.376 (2.376)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.83 (  0.83)	Loss_d 2.376 (2.376)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.25 (  0.25)
Overall Timing[ 31/  1]	epoch_time 0.0352 (0.0368)	validation_time 0.0004 (0.0006)	train_time 0.0348 (0.0361)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8792000246644021, 0.5680000185966492)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s] 23%|##3       | 6/26 [00:00<00:00, 24.37it/s] 42%|####2     | 11/26 [00:00<00:00, 31.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.63it/s] 92%|#########2| 24/26 [00:00<00:00, 37.67it/s]100%|##########| 26/26 [00:00<00:00, 30.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.24 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.87 (  0.87)	train_corr   0.00 (  0.00)	l1 8.1618 (8.1119)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 23%|##3       | 6/26 [00:00<00:00, 32.13it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.13it/s] 46%|####6     | 12/26 [00:00<00:00, 42.23it/s] 65%|######5   | 17/26 [00:00<00:00, 41.06it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.06it/s] 88%|########8 | 23/26 [00:00<00:00, 45.85it/s]100%|##########| 26/26 [00:00<00:00, 38.41it/s]
Test: [   0/  26]	Loss 0.242 (0.242)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.242 (0.242)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.228 (0.238)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.228 (0.238)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  20/  26]	Loss 0.257 (0.242)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.85 (  0.88)	Loss_d 0.257 (0.242)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.85 (  0.88)	test_corr_d   0.69 (  0.72)
Test: [  26/  26]	Loss 0.236 (0.242)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.87 (  0.87)	Loss_d 0.236 (0.242)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.75 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.65it/s]
Test: [  0/  1]	Loss 2.399 (2.399)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.399 (2.399)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.399 (2.399)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.399 (2.399)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Overall Timing[ 32/  1]	epoch_time 0.0355 (0.0367)	validation_time 0.0003 (0.0006)	train_time 0.0352 (0.0361)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8759000236988068, 0.5710000395774841)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.88it/s] 19%|#9        | 5/26 [00:00<00:00, 24.74it/s] 35%|###4      | 9/26 [00:00<00:00, 30.85it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.02it/s] 69%|######9   | 18/26 [00:00<00:00, 36.04it/s] 88%|########8 | 23/26 [00:00<00:00, 37.58it/s]100%|##########| 26/26 [00:00<00:00, 31.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.87 (  0.88)	train_corr   0.00 (  0.00)	l1 8.1982 (8.1154)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 27%|##6       | 7/26 [00:00<00:00, 34.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.07it/s] 50%|#####     | 13/26 [00:00<00:00, 40.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.59it/s] 96%|#########6| 25/26 [00:00<00:00, 47.27it/s]100%|##########| 26/26 [00:00<00:00, 39.30it/s]
Test: [   0/  26]	Loss 0.241 (0.241)	test_acc   0.88 (  0.88)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.241 (0.241)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.231 (0.238)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.231 (0.238)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.71)
Test: [  20/  26]	Loss 0.257 (0.243)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.87)	Loss_d 0.257 (0.243)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.69 (  0.71)
Test: [  26/  26]	Loss 0.234 (0.243)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.90)	test_majacc   0.87 (  0.87)	Loss_d 0.234 (0.243)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.90)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.75 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.24it/s]
Test: [  0/  1]	Loss 2.402 (2.402)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.402 (2.402)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 2.402 (2.402)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.402 (2.402)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.21 (  0.21)
Overall Timing[ 33/  1]	epoch_time 0.0363 (0.0367)	validation_time 0.0003 (0.0006)	train_time 0.0360 (0.0361)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8752000272274018, 0.578000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.62it/s] 15%|#5        | 4/26 [00:00<00:01, 19.24it/s] 35%|###4      | 9/26 [00:00<00:00, 29.12it/s] 50%|#####     | 13/26 [00:00<00:00, 32.71it/s] 65%|######5   | 17/26 [00:00<00:00, 35.12it/s] 81%|########  | 21/26 [00:00<00:00, 36.36it/s]100%|##########| 26/26 [00:00<00:00, 38.10it/s]100%|##########| 26/26 [00:00<00:00, 30.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.88 (  0.87)	train_corr   0.00 (  0.00)	l1 8.1222 (8.1590)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 23%|##3       | 6/26 [00:00<00:00, 27.83it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.83it/s] 46%|####6     | 12/26 [00:00<00:00, 39.55it/s] 65%|######5   | 17/26 [00:00<00:00, 42.30it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.30it/s] 85%|########4 | 22/26 [00:00<00:00, 44.59it/s]100%|##########| 26/26 [00:00<00:00, 37.47it/s]
Test: [   0/  26]	Loss 0.237 (0.237)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.237 (0.237)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.227 (0.233)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.227 (0.233)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.72)
Test: [  20/  26]	Loss 0.256 (0.239)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.256 (0.239)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.230 (0.240)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.88 (  0.88)	Loss_d 0.230 (0.240)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.75 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.94it/s]
Test: [  0/  1]	Loss 2.390 (2.390)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.390 (2.390)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.390 (2.390)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.390 (2.390)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Overall Timing[ 34/  1]	epoch_time 0.0364 (0.0367)	validation_time 0.0006 (0.0006)	train_time 0.0358 (0.0361)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8781000272631645, 0.5730000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.64it/s] 19%|#9        | 5/26 [00:00<00:00, 22.78it/s] 35%|###4      | 9/26 [00:00<00:00, 29.79it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.61it/s] 92%|#########2| 24/26 [00:00<00:00, 37.77it/s]100%|##########| 26/26 [00:00<00:00, 31.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.91 (  0.89)	train_majacc   0.88 (  0.87)	train_corr   0.00 (  0.00)	l1 8.1063 (8.1695)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.18it/s] 31%|###       | 8/26 [00:00<00:00, 35.43it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.43it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.90it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.38it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.38it/s]100%|##########| 26/26 [00:00<00:00, 49.88it/s]100%|##########| 26/26 [00:00<00:00, 41.41it/s]
Test: [   0/  26]	Loss 0.237 (0.237)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.237 (0.237)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.224 (0.233)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.87)	test_majacc   0.88 (  0.88)	Loss_d 0.224 (0.233)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.87)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.72)
Test: [  20/  26]	Loss 0.255 (0.238)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.255 (0.238)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.233 (0.239)	test_acc   0.88 (  0.88)	test_minacc   0.91 (  0.89)	test_majacc   0.88 (  0.88)	Loss_d 0.233 (0.239)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.91 (  0.89)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.76 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.71it/s]
Test: [  0/  1]	Loss 2.393 (2.393)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.83 (  0.83)	Loss_d 2.393 (2.393)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 2.393 (2.393)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.83 (  0.83)	Loss_d 2.393 (2.393)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.24 (  0.24)
Overall Timing[ 35/  1]	epoch_time 0.0358 (0.0367)	validation_time 0.0004 (0.0006)	train_time 0.0354 (0.0361)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8790000223517418, 0.5710000395774841)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.02it/s] 23%|##3       | 6/26 [00:00<00:00, 26.26it/s] 42%|####2     | 11/26 [00:00<00:00, 32.98it/s] 62%|######1   | 16/26 [00:00<00:00, 36.23it/s] 81%|########  | 21/26 [00:00<00:00, 38.03it/s]100%|##########| 26/26 [00:00<00:00, 39.82it/s]100%|##########| 26/26 [00:00<00:00, 32.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.90)	train_majacc   0.87 (  0.87)	train_corr   0.00 (  0.00)	l1 8.1825 (8.1375)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.92it/s] 27%|##6       | 7/26 [00:00<00:00, 32.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.01it/s] 50%|#####     | 13/26 [00:00<00:00, 38.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.82it/s] 96%|#########6| 25/26 [00:00<00:00, 46.78it/s]100%|##########| 26/26 [00:00<00:00, 38.12it/s]
Test: [   0/  26]	Loss 0.241 (0.241)	test_acc   0.88 (  0.88)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.241 (0.241)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.229 (0.236)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.229 (0.236)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  20/  26]	Loss 0.257 (0.241)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.257 (0.241)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.69 (  0.72)
Test: [  26/  26]	Loss 0.234 (0.241)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.90)	test_majacc   0.87 (  0.87)	Loss_d 0.234 (0.241)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.90)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.75 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.74it/s]
Test: [  0/  1]	Loss 2.405 (2.405)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.405 (2.405)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.405 (2.405)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.405 (2.405)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Overall Timing[ 36/  1]	epoch_time 0.0360 (0.0367)	validation_time 0.0004 (0.0006)	train_time 0.0356 (0.0360)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8767000306248665, 0.5710000395774841)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.88it/s] 23%|##3       | 6/26 [00:00<00:00, 29.85it/s] 42%|####2     | 11/26 [00:00<00:00, 35.55it/s] 62%|######1   | 16/26 [00:00<00:00, 38.46it/s] 81%|########  | 21/26 [00:00<00:00, 39.68it/s]100%|##########| 26/26 [00:00<00:00, 40.53it/s]100%|##########| 26/26 [00:00<00:00, 34.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.87 (  0.88)	train_corr   0.00 (  0.00)	l1 8.1948 (8.1481)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.46it/s] 23%|##3       | 6/26 [00:00<00:00, 22.95it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.95it/s] 46%|####6     | 12/26 [00:00<00:00, 35.68it/s] 69%|######9   | 18/26 [00:00<00:00, 40.11it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.11it/s] 92%|#########2| 24/26 [00:00<00:00, 45.66it/s]100%|##########| 26/26 [00:00<00:00, 35.59it/s]
Test: [   0/  26]	Loss 0.239 (0.239)	test_acc   0.88 (  0.88)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.239 (0.239)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.229 (0.236)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.229 (0.236)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.71)
Test: [  20/  26]	Loss 0.255 (0.241)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.87)	Loss_d 0.255 (0.241)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.69 (  0.71)
Test: [  26/  26]	Loss 0.233 (0.241)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.90)	test_majacc   0.87 (  0.87)	Loss_d 0.233 (0.241)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.90)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.75 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.30it/s]
Test: [  0/  1]	Loss 2.407 (2.407)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.407 (2.407)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 2.407 (2.407)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.407 (2.407)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.22 (  0.22)
Overall Timing[ 37/  1]	epoch_time 0.0353 (0.0366)	validation_time 0.0003 (0.0006)	train_time 0.0350 (0.0360)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.876900021314621, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.93it/s] 19%|#9        | 5/26 [00:00<00:00, 25.99it/s] 38%|###8      | 10/26 [00:00<00:00, 33.62it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.00it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.07it/s] 96%|#########6| 25/26 [00:00<00:00, 39.92it/s]100%|##########| 26/26 [00:00<00:00, 33.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.87 (  0.87)	train_corr   0.00 (  0.00)	l1 8.1441 (8.1726)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.72it/s] 31%|###       | 8/26 [00:00<00:00, 40.74it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.74it/s] 50%|#####     | 13/26 [00:00<00:00, 40.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.76it/s] 96%|#########6| 25/26 [00:00<00:00, 46.61it/s]100%|##########| 26/26 [00:00<00:00, 40.24it/s]
Test: [   0/  26]	Loss 0.237 (0.237)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.237 (0.237)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.226 (0.233)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.89 (  0.88)	Loss_d 0.226 (0.233)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.73 (  0.72)
Test: [  20/  26]	Loss 0.256 (0.239)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.256 (0.239)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.230 (0.239)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.87 (  0.88)	Loss_d 0.230 (0.239)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.76 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.12it/s]
Test: [  0/  1]	Loss 2.401 (2.401)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.401 (2.401)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.401 (2.401)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.401 (2.401)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Overall Timing[ 38/  1]	epoch_time 0.0363 (0.0366)	validation_time 0.0003 (0.0005)	train_time 0.0360 (0.0360)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8786000200510025, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.49it/s] 19%|#9        | 5/26 [00:00<00:00, 24.38it/s] 38%|###8      | 10/26 [00:00<00:00, 32.14it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.95it/s] 96%|#########6| 25/26 [00:00<00:00, 39.25it/s]100%|##########| 26/26 [00:00<00:00, 32.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.87 (  0.87)	train_corr   0.00 (  0.00)	l1 8.1358 (8.1750)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.57it/s] 31%|###       | 8/26 [00:00<00:00, 39.05it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.05it/s] 50%|#####     | 13/26 [00:00<00:00, 41.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.78it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.78it/s] 96%|#########6| 25/26 [00:00<00:00, 46.24it/s]100%|##########| 26/26 [00:00<00:00, 39.79it/s]
Test: [   0/  26]	Loss 0.237 (0.237)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.237 (0.237)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.225 (0.232)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.225 (0.232)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.72)
Test: [  20/  26]	Loss 0.255 (0.238)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.255 (0.238)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.232 (0.239)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.87 (  0.88)	Loss_d 0.232 (0.239)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.76 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.55it/s]
Test: [  0/  1]	Loss 2.399 (2.399)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.399 (2.399)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 2.399 (2.399)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.399 (2.399)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.24 (  0.24)
Overall Timing[ 39/  1]	epoch_time 0.0360 (0.0366)	validation_time 0.0004 (0.0005)	train_time 0.0356 (0.0360)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8795000188350678, 0.5710000395774841)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.85it/s] 19%|#9        | 5/26 [00:00<00:01, 20.94it/s] 35%|###4      | 9/26 [00:00<00:00, 28.02it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.48it/s] 92%|#########2| 24/26 [00:00<00:00, 37.35it/s]100%|##########| 26/26 [00:00<00:00, 30.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.87 (  0.88)	train_corr   0.00 (  0.00)	l1 8.1868 (8.1663)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.93it/s] 31%|###       | 8/26 [00:00<00:00, 38.29it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.29it/s] 54%|#####3    | 14/26 [00:00<00:00, 46.29it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.29it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.29it/s]100%|##########| 26/26 [00:00<00:00, 51.45it/s]100%|##########| 26/26 [00:00<00:00, 42.47it/s]
Test: [   0/  26]	Loss 0.239 (0.239)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.239 (0.239)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.226 (0.235)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.226 (0.235)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.72)
Test: [  20/  26]	Loss 0.255 (0.239)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.85 (  0.88)	Loss_d 0.255 (0.239)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.85 (  0.88)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.232 (0.240)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.87 (  0.88)	Loss_d 0.232 (0.240)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.75 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.30it/s]
Test: [  0/  1]	Loss 2.415 (2.415)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.415 (2.415)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.415 (2.415)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.415 (2.415)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Overall Timing[ 40/  1]	epoch_time 0.0358 (0.0366)	validation_time 0.0004 (0.0005)	train_time 0.0353 (0.0360)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8772000271081924, 0.5690000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.27it/s] 19%|#9        | 5/26 [00:00<00:01, 20.00it/s] 38%|###8      | 10/26 [00:00<00:00, 29.17it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.69it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.25it/s] 96%|#########6| 25/26 [00:00<00:00, 37.61it/s]100%|##########| 26/26 [00:00<00:00, 29.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.87 (  0.88)	train_corr   0.00 (  0.00)	l1 8.2148 (8.1605)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.20it/s] 23%|##3       | 6/26 [00:00<00:00, 28.66it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.66it/s] 46%|####6     | 12/26 [00:00<00:00, 37.81it/s] 69%|######9   | 18/26 [00:00<00:00, 44.87it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.87it/s] 92%|#########2| 24/26 [00:00<00:00, 45.65it/s]100%|##########| 26/26 [00:00<00:00, 38.15it/s]
Test: [   0/  26]	Loss 0.239 (0.239)	test_acc   0.88 (  0.88)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.239 (0.239)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.229 (0.235)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.229 (0.235)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.71)
Test: [  20/  26]	Loss 0.255 (0.240)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.255 (0.240)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.69 (  0.71)
Test: [  26/  26]	Loss 0.232 (0.241)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.90)	test_majacc   0.87 (  0.87)	Loss_d 0.232 (0.241)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.90)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.75 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.14it/s]
Test: [  0/  1]	Loss 2.414 (2.414)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.414 (2.414)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 2.414 (2.414)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.414 (2.414)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.22 (  0.22)
Overall Timing[ 41/  1]	epoch_time 0.0362 (0.0366)	validation_time 0.0003 (0.0005)	train_time 0.0359 (0.0360)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8773000236153603, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.68it/s] 19%|#9        | 5/26 [00:00<00:00, 26.31it/s] 38%|###8      | 10/26 [00:00<00:00, 33.50it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.42it/s] 88%|########8 | 23/26 [00:00<00:00, 37.90it/s]100%|##########| 26/26 [00:00<00:00, 32.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.88 (  0.88)	train_corr   0.00 (  0.00)	l1 8.1652 (8.1848)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.57it/s] 31%|###       | 8/26 [00:00<00:00, 41.75it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.75it/s] 50%|#####     | 13/26 [00:00<00:00, 45.16it/s] 69%|######9   | 18/26 [00:00<00:00, 46.47it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.47it/s] 92%|#########2| 24/26 [00:00<00:00, 49.96it/s]100%|##########| 26/26 [00:00<00:00, 42.23it/s]
Test: [   0/  26]	Loss 0.236 (0.236)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.236 (0.236)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.225 (0.232)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.89 (  0.88)	Loss_d 0.225 (0.232)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.73 (  0.72)
Test: [  20/  26]	Loss 0.254 (0.238)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.254 (0.238)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.229 (0.239)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.88 (  0.88)	Loss_d 0.229 (0.239)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.76 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.54it/s]
Test: [  0/  1]	Loss 2.408 (2.408)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.81 (  0.81)	Loss_d 2.408 (2.408)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.408 (2.408)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.81 (  0.81)	Loss_d 2.408 (2.408)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.23 (  0.23)
Overall Timing[ 42/  1]	epoch_time 0.0347 (0.0365)	validation_time 0.0004 (0.0005)	train_time 0.0343 (0.0359)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8791000225543976, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.89it/s] 19%|#9        | 5/26 [00:00<00:00, 22.82it/s] 38%|###8      | 10/26 [00:00<00:00, 31.20it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.30it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.92it/s] 96%|#########6| 25/26 [00:00<00:00, 39.30it/s]100%|##########| 26/26 [00:00<00:00, 31.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.87 (  0.88)	train_corr   0.00 (  0.00)	l1 8.1412 (8.1911)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 23%|##3       | 6/26 [00:00<00:00, 27.06it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.06it/s] 46%|####6     | 12/26 [00:00<00:00, 34.50it/s] 69%|######9   | 18/26 [00:00<00:00, 42.15it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.15it/s] 92%|#########2| 24/26 [00:00<00:00, 44.10it/s]100%|##########| 26/26 [00:00<00:00, 36.47it/s]
Test: [   0/  26]	Loss 0.236 (0.236)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.236 (0.236)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.224 (0.231)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.89 (  0.88)	Loss_d 0.224 (0.231)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.73 (  0.72)
Test: [  20/  26]	Loss 0.254 (0.236)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.254 (0.236)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.230 (0.237)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.87 (  0.88)	Loss_d 0.230 (0.237)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.76 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.16it/s]
Test: [  0/  1]	Loss 2.406 (2.406)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.406 (2.406)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 2.406 (2.406)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.406 (2.406)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.24 (  0.24)
Overall Timing[ 43/  1]	epoch_time 0.0352 (0.0365)	validation_time 0.0004 (0.0005)	train_time 0.0347 (0.0359)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.880000019967556, 0.5670000314712524)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.91it/s] 19%|#9        | 5/26 [00:00<00:00, 21.20it/s] 35%|###4      | 9/26 [00:00<00:00, 27.59it/s] 50%|#####     | 13/26 [00:00<00:00, 31.47it/s] 69%|######9   | 18/26 [00:00<00:00, 34.96it/s] 88%|########8 | 23/26 [00:00<00:00, 36.91it/s]100%|##########| 26/26 [00:00<00:00, 30.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.87 (  0.88)	train_corr   0.00 (  0.00)	l1 8.1907 (8.1840)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s] 27%|##6       | 7/26 [00:00<00:00, 31.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.01it/s] 50%|#####     | 13/26 [00:00<00:00, 38.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.09it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.09it/s] 96%|#########6| 25/26 [00:00<00:00, 46.14it/s]100%|##########| 26/26 [00:00<00:00, 37.45it/s]
Test: [   0/  26]	Loss 0.237 (0.237)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.237 (0.237)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.225 (0.233)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.225 (0.233)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.72)
Test: [  20/  26]	Loss 0.253 (0.238)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.253 (0.238)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.231 (0.238)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.87 (  0.88)	Loss_d 0.231 (0.238)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.75 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.18it/s]
Test: [  0/  1]	Loss 2.420 (2.420)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.420 (2.420)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 2.420 (2.420)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.420 (2.420)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.24 (  0.24)
Overall Timing[ 44/  1]	epoch_time 0.0357 (0.0365)	validation_time 0.0003 (0.0005)	train_time 0.0353 (0.0359)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8787000235319138, 0.5700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.59it/s] 19%|#9        | 5/26 [00:00<00:01, 20.83it/s] 38%|###8      | 10/26 [00:00<00:00, 29.65it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.78it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.44it/s] 96%|#########6| 25/26 [00:00<00:00, 37.72it/s]100%|##########| 26/26 [00:00<00:00, 30.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.90)	train_majacc   0.87 (  0.88)	train_corr   0.00 (  0.00)	l1 8.2448 (8.1763)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 27%|##6       | 7/26 [00:00<00:00, 34.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.50it/s] 50%|#####     | 13/26 [00:00<00:00, 40.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.66it/s] 96%|#########6| 25/26 [00:00<00:00, 47.13it/s]100%|##########| 26/26 [00:00<00:00, 38.77it/s]
Test: [   0/  26]	Loss 0.238 (0.238)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.238 (0.238)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.228 (0.235)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.228 (0.235)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.71)
Test: [  20/  26]	Loss 0.254 (0.240)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.254 (0.240)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.69 (  0.71)
Test: [  26/  26]	Loss 0.231 (0.240)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.90)	test_majacc   0.87 (  0.87)	Loss_d 0.231 (0.240)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.90)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.75 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.85it/s]
Test: [  0/  1]	Loss 2.427 (2.427)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.427 (2.427)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 2.427 (2.427)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 2.427 (2.427)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.22 (  0.22)
Overall Timing[ 45/  1]	epoch_time 0.0355 (0.0365)	validation_time 0.0006 (0.0005)	train_time 0.0348 (0.0359)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8773000212907791, 0.5740000009536743)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.92it/s] 23%|##3       | 6/26 [00:00<00:00, 28.28it/s] 42%|####2     | 11/26 [00:00<00:00, 33.95it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.80it/s] 92%|#########2| 24/26 [00:00<00:00, 38.23it/s]100%|##########| 26/26 [00:00<00:00, 32.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.88 (  0.88)	train_corr   0.00 (  0.00)	l1 8.2033 (8.1948)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.16it/s] 19%|#9        | 5/26 [00:00<00:00, 23.46it/s]                                               19%|#9        | 5/26 [00:00<00:00, 23.46it/s] 42%|####2     | 11/26 [00:00<00:00, 37.58it/s] 62%|######1   | 16/26 [00:00<00:00, 41.59it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.59it/s] 85%|########4 | 22/26 [00:00<00:00, 47.02it/s]100%|##########| 26/26 [00:00<00:00, 37.63it/s]
Test: [   0/  26]	Loss 0.236 (0.236)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.236 (0.236)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.226 (0.232)	test_acc   0.88 (  0.88)	test_minacc   0.89 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.226 (0.232)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.89 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  20/  26]	Loss 0.254 (0.238)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.254 (0.238)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.70 (  0.72)
Test: [  26/  26]	Loss 0.229 (0.238)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.229 (0.238)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.75 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.74it/s]
Test: [  0/  1]	Loss 2.419 (2.419)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.81 (  0.81)	Loss_d 2.419 (2.419)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.419 (2.419)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.81 (  0.81)	Loss_d 2.419 (2.419)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.23 (  0.23)
Overall Timing[ 46/  1]	epoch_time 0.0356 (0.0365)	validation_time 0.0004 (0.0005)	train_time 0.0352 (0.0359)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8786000214219093, 0.5750000476837158)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.19it/s] 23%|##3       | 6/26 [00:00<00:00, 26.05it/s] 42%|####2     | 11/26 [00:00<00:00, 32.62it/s] 62%|######1   | 16/26 [00:00<00:00, 36.53it/s] 81%|########  | 21/26 [00:00<00:00, 38.34it/s]100%|##########| 26/26 [00:00<00:00, 39.28it/s]100%|##########| 26/26 [00:00<00:00, 32.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.88 (  0.88)	train_corr   0.00 (  0.00)	l1 8.1406 (8.2111)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 27%|##6       | 7/26 [00:00<00:00, 35.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.60it/s] 46%|####6     | 12/26 [00:00<00:00, 41.49it/s] 65%|######5   | 17/26 [00:00<00:00, 43.08it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.08it/s] 88%|########8 | 23/26 [00:00<00:00, 47.95it/s]100%|##########| 26/26 [00:00<00:00, 39.72it/s]
Test: [   0/  26]	Loss 0.234 (0.234)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.89 (  0.89)	Loss_d 0.234 (0.234)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.222 (0.229)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.89 (  0.88)	Loss_d 0.222 (0.229)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  20/  26]	Loss 0.253 (0.235)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.253 (0.235)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.71 (  0.73)
Test: [  26/  26]	Loss 0.228 (0.236)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.88 (  0.88)	Loss_d 0.228 (0.236)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.76 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.25it/s]
Test: [  0/  1]	Loss 2.411 (2.411)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.411 (2.411)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.411 (2.411)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.411 (2.411)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.25 (  0.25)
Overall Timing[ 47/  1]	epoch_time 0.0343 (0.0364)	validation_time 0.0003 (0.0005)	train_time 0.0340 (0.0358)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8812000212669373, 0.5680000185966492)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 19%|#9        | 5/26 [00:00<00:00, 22.72it/s] 35%|###4      | 9/26 [00:00<00:00, 29.28it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.46it/s] 69%|######9   | 18/26 [00:00<00:00, 35.82it/s] 88%|########8 | 23/26 [00:00<00:00, 37.31it/s]100%|##########| 26/26 [00:00<00:00, 31.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.89)	train_majacc   0.87 (  0.88)	train_corr   0.00 (  0.00)	l1 8.1711 (8.2072)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 27%|##6       | 7/26 [00:00<00:00, 34.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.22it/s] 50%|#####     | 13/26 [00:00<00:00, 40.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.68it/s] 96%|#########6| 25/26 [00:00<00:00, 47.33it/s]100%|##########| 26/26 [00:00<00:00, 39.09it/s]
Test: [   0/  26]	Loss 0.235 (0.235)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.235 (0.235)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.222 (0.231)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.89 (  0.88)	Loss_d 0.222 (0.231)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  20/  26]	Loss 0.251 (0.235)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.251 (0.235)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.70 (  0.73)
Test: [  26/  26]	Loss 0.230 (0.236)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.87 (  0.88)	Loss_d 0.230 (0.236)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.76 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.84it/s]
Test: [  0/  1]	Loss 2.422 (2.422)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.83 (  0.83)	Loss_d 2.422 (2.422)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.422 (2.422)	test_acc   0.56 (  0.56)	test_minacc   0.53 (  0.53)	test_majacc   0.83 (  0.83)	Loss_d 2.422 (2.422)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.25 (  0.25)
Overall Timing[ 48/  1]	epoch_time 0.0362 (0.0364)	validation_time 0.0004 (0.0005)	train_time 0.0358 (0.0358)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8800000246167183, 0.5640000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.64it/s] 19%|#9        | 5/26 [00:00<00:00, 24.30it/s] 35%|###4      | 9/26 [00:00<00:00, 30.86it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.14it/s] 92%|#########2| 24/26 [00:00<00:00, 38.31it/s]100%|##########| 26/26 [00:00<00:00, 31.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.23 (  0.24)	train_penalty   0.00 (  0.00)	weight_norm  25.81 ( 25.81)	train_acc   0.88 (  0.88)	train_minacc   0.94 (  0.90)	train_majacc   0.87 (  0.88)	train_corr   0.00 (  0.00)	l1 8.2803 (8.1937)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.88it/s] 27%|##6       | 7/26 [00:00<00:00, 36.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.69it/s] 50%|#####     | 13/26 [00:00<00:00, 41.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.00it/s] 96%|#########6| 25/26 [00:00<00:00, 48.00it/s]100%|##########| 26/26 [00:00<00:00, 40.63it/s]
Test: [   0/  26]	Loss 0.238 (0.238)	test_acc   0.89 (  0.89)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.88)	Loss_d 0.238 (0.238)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.228 (0.235)	test_acc   0.88 (  0.88)	test_minacc   0.88 (  0.88)	test_majacc   0.88 (  0.88)	Loss_d 0.228 (0.235)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.72)
Test: [  20/  26]	Loss 0.252 (0.239)	test_acc   0.87 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.86 (  0.88)	Loss_d 0.252 (0.239)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.69 (  0.72)
Test: [  26/  26]	Loss 0.232 (0.239)	test_acc   0.88 (  0.88)	test_minacc   0.94 (  0.89)	test_majacc   0.87 (  0.87)	Loss_d 0.232 (0.239)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.94 (  0.89)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.75 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.85it/s]
Test: [  0/  1]	Loss 2.443 (2.443)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.443 (2.443)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 2.443 (2.443)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.82 (  0.82)	Loss_d 2.443 (2.443)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Overall Timing[ 49/  1]	epoch_time 0.0345 (0.0364)	validation_time 0.0003 (0.0005)	train_time 0.0341 (0.0358)
record: (train_acc, test_acc) (0.8604000249505043, 0.581000030040741)
last accs (train_acc, test_acc) (0.8777000235915184, 0.5710000395774841)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.102 MB of 0.102 MB uploadedwandb: \ 0.102 MB of 0.102 MB uploadedwandb: | 0.102 MB of 0.102 MB uploadedwandb: / 0.102 MB of 0.102 MB uploadedwandb: - 0.102 MB of 0.102 MB uploadedwandb: \ 0.102 MB of 0.102 MB uploadedwandb: | 0.102 MB of 0.102 MB uploadedwandb: / 0.102 MB of 0.102 MB uploadedwandb: - 0.102 MB of 0.102 MB uploadedwandb: \ 0.102 MB of 0.102 MB uploadedwandb: | 0.124 MB of 0.133 MB uploaded (0.003 MB deduped)wandb: / 0.332 MB of 0.332 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/diagnostics/epoch_time_val █▂▁▁▁▂▁▁▂▁▁▂▁▁▁▁▁▂▁▂▂▁▂▂▁▁▁▂▁▂▁▂▁▂▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/diagnostics/train_time_val █▂▂▁▁▂▂▂▂▁▁▂▁▂▁▁▁▂▁▂▂▁▂▂▂▁▂▂▂▂▁▂▂▂▁▁▁▂▁▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/Loss_avg ▂▁▁▁▁▂▂▅▅▅▅▆▇▂▃▅▇▆▆▆▇▇▇▇▇▇██████████████
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/Loss_d_avg ▂▁▁▁▁▂▂▅▅▅▅▆▇▂▃▅▇▆▆▆▇▇▇▇▇▇██████████████
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/Loss_d_val ▂▁▁▁▁▂▂▅▅▅▅▆▇▂▃▅▇▆▆▆▇▇▇▇▇▇██████████████
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/Loss_val ▂▁▁▁▁▂▂▅▅▅▅▆▇▂▃▅▇▆▆▆▇▇▇▇▇▇██████████████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_acc_avg ▁▁▃▂▄▄▆▅▇▇▇▆▅█▆▇▇███████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_acc_d_avg ▁▁▃▂▄▄▆▅▇▇▇▆▅█▆▇▇███████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_acc_d_val ▁▁▃▂▄▄▆▅▇▇▇▆▅█▆▇▇███████████████████████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_acc_val ▁▁▃▂▄▄▆▅▇▇▇▆▅█▆▇▇███████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_corr_d_avg ██▇▇▆▅▄▄▂▂▂▃▄▁▄▃▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_corr_d_val ██▇▇▆▅▄▄▂▂▂▃▄▁▄▃▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_majacc_avg ████▆▆▅▅▅▅▅▅▃▁▄▃▃▂▃▃▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_majacc_d_avg ████▆▆▅▅▅▅▅▅▃▁▄▃▃▂▃▃▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_majacc_d_val ████▆▆▅▅▅▅▅▅▃▁▄▃▃▂▃▃▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_majacc_val ████▆▆▅▅▅▅▅▅▃▁▄▃▃▂▃▃▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_minacc_avg ▁▁▃▂▄▄▆▅▇▇▇▆▅█▆▇▇███████████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_minacc_d_avg ▁▁▃▂▄▄▆▅▇▇▇▆▅█▆▇▇███████████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_minacc_d_val ▁▁▃▂▄▄▆▅▇▇▇▆▅█▆▇▇███████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_minacc_val ▁▁▃▂▄▄▆▅▇▇▇▆▅█▆▇▇███████████████████████
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/Loss_avg █▇▆▆▆▅▅▅▅▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/Loss_val ███▇▆▆▅▅▄▄▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/l1_avg █▃▂▂▂▂▃▃▂▄▄▅▆▂▁▃▄▅▅▆▆▆▇▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/l1_val ▄▃▃▃▂▃▃▅▆▆▅▅▅▂▁▄▆▆▆▆█▇▇▇▇▇██▇███████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_acc_avg ▁▃▃▃▄▅▅▆▇▇▇██▅▄▆▆▅▅▅▆▆▅▅▆▅▅▆▅▆▆▅▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_acc_val ▃▃▂▃▃▅▆▆▇▇▇█▅▁▄▃▃▃▄▄▄▄▄▄▅▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_majacc_avg ▅██▇▇▆▆▆▆▆▆▆▅▂▁▃▃▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_majacc_val ██▆█▇▇▇▇▇▇▇▇▆▁▅▄▃▃▃▃▃▃▃▃▄▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_minacc_avg ▁▁▁▂▃▄▄▅▅▆▆▆▇▇▇▇▇███████████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_minacc_val ▁▁▂▁▂▄▅▅▆▇▇▇▆▇▇▆▇███████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_nll_avg █▆▅▅▄▃▃▂▂▂▁▁▁▂▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_nll_val ███▇▅▄▄▃▂▁▁▁▃▆▄▄▄▄▃▃▄▃▃▄▃▃▄▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_penalty_avg █▃▃▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_penalty_val █▇▆▅▃▂▂▂▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/weight_norm_avg ▁▄▅▅▅▅▅▅▆▆▆▇████████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/weight_norm_val ▁▃▃▃▃▃▄▄▅▅▆▇████████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/diagnostics/epoch_time_val 0.03445
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/diagnostics/train_time_val 0.03413
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/diagnostics/validation_time_val 0.00031
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/Loss_avg 2.44338
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/Loss_d_avg 2.44338
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/Loss_d_val 2.44338
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/Loss_val 2.44338
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_acc_avg 0.571
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_acc_d_avg 0.571
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_acc_d_val 0.571
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_acc_val 0.571
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_corr_d_avg 0.22581
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_corr_d_val 0.22581
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_majacc_avg 0.82
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_majacc_d_avg 0.82
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_majacc_d_val 0.82
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_majacc_val 0.82
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_minacc_avg 0.54333
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_minacc_d_avg 0.54333
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_minacc_d_val 0.54333
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/test/test_minacc_val 0.54333
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/Loss_avg 4e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/Loss_val 6e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/l1_avg 8.1937
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/l1_val 8.28029
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_acc_avg 0.8795
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_acc_val 0.88
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_majacc_avg 0.87641
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_majacc_val 0.87156
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_minacc_avg 0.89682
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_minacc_val 0.9375
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_nll_avg 0.23639
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_nll_val 0.23275
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_penalty_avg 2e-05
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/train_penalty_val 4e-05
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/weight_norm_avg 25.80733
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/weight_norm_val 25.80779
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/128/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/qbwfdcr2
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_194523-qbwfdcr2/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_194747-p6xsn8m5
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/p6xsn8m5
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1183
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6007, 3, 32, 32) (5993, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:39,  1.59s/it] 19%|#9        | 5/26 [00:01<00:05,  3.81it/s] 38%|###8      | 10/26 [00:01<00:01,  8.41it/s] 54%|#####3    | 14/26 [00:01<00:00, 12.40it/s] 69%|######9   | 18/26 [00:02<00:00, 16.46it/s] 85%|########4 | 22/26 [00:02<00:00, 20.55it/s]100%|##########| 26/26 [00:02<00:00, 14.91it/s]100%|##########| 26/26 [00:02<00:00, 10.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.453 (0.549)	train_nll   0.45 (  0.55)	train_penalty   0.03 (  0.24)	weight_norm  20.83 ( 18.07)	train_acc   0.84 (  0.79)	train_minacc   0.00 (  0.09)	train_majacc   0.98 (  0.92)	train_corr   0.00 (  0.00)	l1 6.9708 (7.4701)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.00it/s] 35%|###4      | 9/26 [00:00<00:00, 40.64it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.64it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.59it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.38it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.38it/s] 96%|#########6| 25/26 [00:00<00:00, 48.60it/s]100%|##########| 26/26 [00:00<00:00, 41.97it/s]
Test: [   0/  26]	Loss 0.472 (0.472)	test_acc   0.81 (  0.81)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.472 (0.472)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.425 (0.428)	test_acc   0.85 (  0.84)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.425 (0.428)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.442 (0.427)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.442 (0.427)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.443 (0.427)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.443 (0.427)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]
Test: [  0/  1]	Loss 1.474 (1.474)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   0.98 (  0.98)	Loss_d 1.474 (1.474)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.474 (1.474)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   0.98 (  0.98)	Loss_d 1.474 (1.474)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/129/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0767 (0.0767)	validation_time 0.0068 (0.0068)	train_time 0.0642 (0.0642)
record: (train_acc, test_acc) (0.8456000214219094, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8456000214219094, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.22it/s] 19%|#9        | 5/26 [00:00<00:00, 25.22it/s] 35%|###4      | 9/26 [00:00<00:00, 29.75it/s] 50%|#####     | 13/26 [00:00<00:00, 32.51it/s] 65%|######5   | 17/26 [00:00<00:00, 34.52it/s] 81%|########  | 21/26 [00:00<00:00, 35.87it/s] 96%|#########6| 25/26 [00:00<00:00, 36.56it/s]100%|##########| 26/26 [00:00<00:00, 31.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.419 (0.419)	train_nll   0.42 (  0.42)	train_penalty   0.04 (  0.06)	weight_norm  21.95 ( 21.60)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 7.2384 (7.2266)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.39it/s] 31%|###       | 8/26 [00:00<00:00, 41.53it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.53it/s] 50%|#####     | 13/26 [00:00<00:00, 42.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.20it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.20it/s] 96%|#########6| 25/26 [00:00<00:00, 47.27it/s]100%|##########| 26/26 [00:00<00:00, 41.20it/s]
Test: [   0/  26]	Loss 0.467 (0.467)	test_acc   0.82 (  0.82)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.467 (0.467)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.407 (0.411)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.407 (0.411)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.429 (0.409)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.429 (0.409)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.415 (0.409)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.415 (0.409)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.20it/s]
Test: [  0/  1]	Loss 1.630 (1.630)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.630 (1.630)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.630 (1.630)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.630 (1.630)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Overall Timing[  1/  1]	epoch_time 0.0361 (0.0564)	validation_time 0.0004 (0.0036)	train_time 0.0357 (0.0499)
record: (train_acc, test_acc) (0.8456000214219094, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8483000274896622, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.46it/s] 23%|##3       | 6/26 [00:00<00:00, 24.87it/s] 42%|####2     | 11/26 [00:00<00:00, 31.66it/s] 62%|######1   | 16/26 [00:00<00:00, 35.20it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.67it/s] 92%|#########2| 24/26 [00:00<00:00, 36.82it/s]100%|##########| 26/26 [00:00<00:00, 31.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.386 (0.405)	train_nll   0.39 (  0.41)	train_penalty   0.03 (  0.06)	weight_norm  22.06 ( 22.02)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.01)	train_majacc   0.99 (  1.00)	train_corr   0.00 (  0.00)	l1 7.3813 (7.3651)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.31it/s] 27%|##6       | 7/26 [00:00<00:00, 24.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.18it/s] 50%|#####     | 13/26 [00:00<00:00, 34.27it/s] 69%|######9   | 18/26 [00:00<00:00, 39.02it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.02it/s] 92%|#########2| 24/26 [00:00<00:00, 44.35it/s]100%|##########| 26/26 [00:00<00:00, 34.00it/s]
Test: [   0/  26]	Loss 0.445 (0.445)	test_acc   0.82 (  0.82)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.445 (0.445)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.387 (0.393)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.387 (0.393)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.414 (0.391)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.414 (0.391)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.380 (0.391)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.380 (0.391)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.85it/s]
Test: [  0/  1]	Loss 1.625 (1.625)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.625 (1.625)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.625 (1.625)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.625 (1.625)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Overall Timing[  2/  1]	epoch_time 0.0349 (0.0492)	validation_time 0.0003 (0.0025)	train_time 0.0345 (0.0448)
record: (train_acc, test_acc) (0.8456000214219094, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8504000229239463, 0.10700000822544098)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.04it/s] 19%|#9        | 5/26 [00:00<00:00, 21.55it/s] 35%|###4      | 9/26 [00:00<00:00, 28.51it/s] 50%|#####     | 13/26 [00:00<00:00, 32.38it/s] 65%|######5   | 17/26 [00:00<00:00, 34.93it/s] 81%|########  | 21/26 [00:00<00:00, 36.37it/s]100%|##########| 26/26 [00:00<00:00, 38.17it/s]100%|##########| 26/26 [00:00<00:00, 30.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.342 (0.387)	train_nll   0.34 (  0.39)	train_penalty   0.02 (  0.05)	weight_norm  22.10 ( 22.08)	train_acc   0.86 (  0.85)	train_minacc   0.11 (  0.04)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 7.6742 (7.5239)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.74it/s] 23%|##3       | 6/26 [00:00<00:00, 30.91it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.91it/s] 42%|####2     | 11/26 [00:00<00:00, 38.39it/s] 65%|######5   | 17/26 [00:00<00:00, 42.45it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.45it/s] 88%|########8 | 23/26 [00:00<00:00, 47.75it/s]100%|##########| 26/26 [00:00<00:00, 38.68it/s]
Test: [   0/  26]	Loss 0.422 (0.422)	test_acc   0.83 (  0.83)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.422 (0.422)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.359 (0.368)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.09)	test_majacc   0.98 (  0.99)	Loss_d 0.359 (0.368)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.09)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.385 (0.367)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.385 (0.367)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.93)
Test: [  26/  26]	Loss 0.328 (0.365)	test_acc   0.86 (  0.85)	test_minacc   0.08 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.328 (0.365)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.08 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.96it/s]
Test: [  0/  1]	Loss 1.622 (1.622)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.622 (1.622)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.622 (1.622)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.622 (1.622)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/129/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0358 (0.0459)	validation_time 0.0003 (0.0020)	train_time 0.0354 (0.0425)
record: (train_acc, test_acc) (0.8516000218987465, 0.1730000078678131)
last accs (train_acc, test_acc) (0.8516000218987465, 0.1730000078678131)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 19%|#9        | 5/26 [00:00<00:00, 21.86it/s] 35%|###4      | 9/26 [00:00<00:00, 28.95it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.72it/s] 69%|######9   | 18/26 [00:00<00:00, 35.70it/s] 88%|########8 | 23/26 [00:00<00:00, 37.24it/s]100%|##########| 26/26 [00:00<00:00, 30.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.315 (0.365)	train_nll   0.31 (  0.36)	train_penalty   0.01 (  0.04)	weight_norm  22.16 ( 22.13)	train_acc   0.85 (  0.85)	train_minacc   0.27 (  0.10)	train_majacc   0.95 (  0.98)	train_corr   0.00 (  0.00)	l1 7.8608 (7.7616)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 27%|##6       | 7/26 [00:00<00:00, 31.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.13it/s] 50%|#####     | 13/26 [00:00<00:00, 40.80it/s] 69%|######9   | 18/26 [00:00<00:00, 43.32it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.32it/s] 92%|#########2| 24/26 [00:00<00:00, 48.19it/s]100%|##########| 26/26 [00:00<00:00, 38.81it/s]
Test: [   0/  26]	Loss 0.377 (0.377)	test_acc   0.84 (  0.84)	test_minacc   0.19 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 0.377 (0.377)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.327 (0.337)	test_acc   0.84 (  0.85)	test_minacc   0.07 (  0.17)	test_majacc   0.98 (  0.97)	Loss_d 0.327 (0.337)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.07 (  0.17)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.339 (0.336)	test_acc   0.86 (  0.86)	test_minacc   0.17 (  0.20)	test_majacc   0.98 (  0.97)	Loss_d 0.339 (0.336)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.17 (  0.20)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.90)
Test: [  26/  26]	Loss 0.296 (0.334)	test_acc   0.87 (  0.86)	test_minacc   0.24 (  0.20)	test_majacc   0.98 (  0.97)	Loss_d 0.296 (0.334)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.24 (  0.20)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.24it/s]
Test: [  0/  1]	Loss 1.477 (1.477)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 1.477 (1.477)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.477 (1.477)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 1.477 (1.477)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.78 (  0.78)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/129/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0372 (0.0441)	validation_time 0.0004 (0.0016)	train_time 0.0368 (0.0413)
record: (train_acc, test_acc) (0.8578000208735466, 0.23800000548362732)
last accs (train_acc, test_acc) (0.8578000208735466, 0.23800000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.90it/s] 23%|##3       | 6/26 [00:00<00:00, 27.81it/s] 42%|####2     | 11/26 [00:00<00:00, 33.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.73it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.66it/s] 96%|#########6| 25/26 [00:00<00:00, 38.47it/s]100%|##########| 26/26 [00:00<00:00, 32.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.293 (0.345)	train_nll   0.29 (  0.34)	train_penalty   0.01 (  0.03)	weight_norm  22.22 ( 22.19)	train_acc   0.85 (  0.85)	train_minacc   0.35 (  0.16)	train_majacc   0.93 (  0.98)	train_corr   0.00 (  0.00)	l1 7.9455 (7.8515)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 27%|##6       | 7/26 [00:00<00:00, 34.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.60it/s] 50%|#####     | 13/26 [00:00<00:00, 41.70it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.24it/s] 96%|#########6| 25/26 [00:00<00:00, 48.10it/s]100%|##########| 26/26 [00:00<00:00, 39.50it/s]
Test: [   0/  26]	Loss 0.339 (0.339)	test_acc   0.85 (  0.85)	test_minacc   0.30 (  0.30)	test_majacc   0.97 (  0.97)	Loss_d 0.339 (0.339)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.343 (0.322)	test_acc   0.85 (  0.86)	test_minacc   0.27 (  0.32)	test_majacc   0.96 (  0.95)	Loss_d 0.343 (0.322)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.27 (  0.32)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.89 (  0.87)
Test: [  20/  26]	Loss 0.315 (0.321)	test_acc   0.84 (  0.86)	test_minacc   0.27 (  0.33)	test_majacc   0.95 (  0.95)	Loss_d 0.315 (0.321)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.27 (  0.33)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.87)
Test: [  26/  26]	Loss 0.275 (0.319)	test_acc   0.85 (  0.86)	test_minacc   0.38 (  0.33)	test_majacc   0.93 (  0.95)	Loss_d 0.275 (0.319)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.38 (  0.33)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.86 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.34it/s]
Test: [  0/  1]	Loss 1.410 (1.410)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.98 (  0.98)	Loss_d 1.410 (1.410)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.410 (1.410)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.98 (  0.98)	Loss_d 1.410 (1.410)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.69 (  0.69)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/129/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0351 (0.0426)	validation_time 0.0004 (0.0014)	train_time 0.0347 (0.0402)
record: (train_acc, test_acc) (0.8568000225424767, 0.320000022649765)
last accs (train_acc, test_acc) (0.8568000225424767, 0.320000022649765)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.92it/s] 19%|#9        | 5/26 [00:00<00:00, 27.19it/s] 35%|###4      | 9/26 [00:00<00:00, 32.85it/s] 50%|#####     | 13/26 [00:00<00:00, 34.20it/s] 65%|######5   | 17/26 [00:00<00:00, 34.90it/s] 81%|########  | 21/26 [00:00<00:00, 35.93it/s] 96%|#########6| 25/26 [00:00<00:00, 37.18it/s]100%|##########| 26/26 [00:00<00:00, 31.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.262 (0.333)	train_nll   0.26 (  0.33)	train_penalty   0.01 (  0.03)	weight_norm  22.29 ( 22.26)	train_acc   0.87 (  0.86)	train_minacc   0.35 (  0.22)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 7.6196 (7.7683)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.69it/s] 23%|##3       | 6/26 [00:00<00:00, 30.77it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.77it/s] 46%|####6     | 12/26 [00:00<00:00, 41.59it/s] 65%|######5   | 17/26 [00:00<00:00, 40.95it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.95it/s] 88%|########8 | 23/26 [00:00<00:00, 45.75it/s]100%|##########| 26/26 [00:00<00:00, 37.05it/s]
Test: [   0/  26]	Loss 0.324 (0.324)	test_acc   0.87 (  0.87)	test_minacc   0.35 (  0.35)	test_majacc   0.98 (  0.98)	Loss_d 0.324 (0.324)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.325 (0.299)	test_acc   0.86 (  0.86)	test_minacc   0.27 (  0.34)	test_majacc   0.96 (  0.96)	Loss_d 0.325 (0.299)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.27 (  0.34)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.91 (  0.89)
Test: [  20/  26]	Loss 0.312 (0.301)	test_acc   0.85 (  0.86)	test_minacc   0.27 (  0.34)	test_majacc   0.95 (  0.96)	Loss_d 0.312 (0.301)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.27 (  0.34)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.90 (  0.89)
Test: [  26/  26]	Loss 0.249 (0.299)	test_acc   0.88 (  0.87)	test_minacc   0.41 (  0.34)	test_majacc   0.96 (  0.96)	Loss_d 0.249 (0.299)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.41 (  0.34)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.72it/s]
Test: [  0/  1]	Loss 1.428 (1.428)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.98 (  0.98)	Loss_d 1.428 (1.428)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.428 (1.428)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.98 (  0.98)	Loss_d 1.428 (1.428)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.69 (  0.69)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/129/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0358 (0.0417)	validation_time 0.0003 (0.0013)	train_time 0.0355 (0.0395)
record: (train_acc, test_acc) (0.865600023150444, 0.328000009059906)
last accs (train_acc, test_acc) (0.865600023150444, 0.328000009059906)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.19it/s] 19%|#9        | 5/26 [00:00<00:01, 19.25it/s] 35%|###4      | 9/26 [00:00<00:00, 26.58it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.11it/s] 69%|######9   | 18/26 [00:00<00:00, 33.80it/s] 85%|########4 | 22/26 [00:00<00:00, 35.61it/s]100%|##########| 26/26 [00:00<00:00, 29.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.272 (0.321)	train_nll   0.27 (  0.32)	train_penalty   0.01 (  0.02)	weight_norm  22.37 ( 22.33)	train_acc   0.86 (  0.86)	train_minacc   0.38 (  0.28)	train_majacc   0.94 (  0.96)	train_corr   0.00 (  0.00)	l1 7.5119 (7.8131)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.78it/s] 27%|##6       | 7/26 [00:00<00:00, 36.34it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.34it/s] 46%|####6     | 12/26 [00:00<00:00, 41.41it/s] 69%|######9   | 18/26 [00:00<00:00, 46.55it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.55it/s] 92%|#########2| 24/26 [00:00<00:00, 47.36it/s]100%|##########| 26/26 [00:00<00:00, 40.60it/s]
Test: [   0/  26]	Loss 0.309 (0.309)	test_acc   0.87 (  0.87)	test_minacc   0.36 (  0.36)	test_majacc   0.98 (  0.98)	Loss_d 0.309 (0.309)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.306 (0.289)	test_acc   0.86 (  0.87)	test_minacc   0.31 (  0.36)	test_majacc   0.96 (  0.96)	Loss_d 0.306 (0.289)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.31 (  0.36)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.89)
Test: [  20/  26]	Loss 0.298 (0.291)	test_acc   0.86 (  0.87)	test_minacc   0.32 (  0.37)	test_majacc   0.96 (  0.96)	Loss_d 0.298 (0.291)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.32 (  0.37)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.88)
Test: [  26/  26]	Loss 0.259 (0.290)	test_acc   0.86 (  0.87)	test_minacc   0.41 (  0.37)	test_majacc   0.94 (  0.96)	Loss_d 0.259 (0.290)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.41 (  0.37)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.87 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.96it/s]
Test: [  0/  1]	Loss 1.389 (1.389)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.98 (  0.98)	Loss_d 1.389 (1.389)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.389 (1.389)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.98 (  0.98)	Loss_d 1.389 (1.389)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/129/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0343 (0.0407)	validation_time 0.0004 (0.0012)	train_time 0.0339 (0.0388)
record: (train_acc, test_acc) (0.8705000208616257, 0.3440000116825104)
last accs (train_acc, test_acc) (0.8705000208616257, 0.3440000116825104)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.36it/s] 19%|#9        | 5/26 [00:00<00:00, 23.66it/s] 35%|###4      | 9/26 [00:00<00:00, 29.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.92it/s] 92%|#########2| 24/26 [00:00<00:00, 38.34it/s]100%|##########| 26/26 [00:00<00:00, 31.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.263 (0.307)	train_nll   0.26 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.47 ( 22.42)	train_acc   0.86 (  0.86)	train_minacc   0.41 (  0.36)	train_majacc   0.94 (  0.95)	train_corr   0.00 (  0.00)	l1 7.2858 (7.8268)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 27%|##6       | 7/26 [00:00<00:00, 34.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.28it/s] 46%|####6     | 12/26 [00:00<00:00, 39.09it/s] 69%|######9   | 18/26 [00:00<00:00, 45.34it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.34it/s] 92%|#########2| 24/26 [00:00<00:00, 46.22it/s]100%|##########| 26/26 [00:00<00:00, 38.76it/s]
Test: [   0/  26]	Loss 0.321 (0.321)	test_acc   0.87 (  0.87)	test_minacc   0.43 (  0.43)	test_majacc   0.96 (  0.96)	Loss_d 0.321 (0.321)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.297 (0.288)	test_acc   0.86 (  0.87)	test_minacc   0.36 (  0.47)	test_majacc   0.95 (  0.94)	Loss_d 0.297 (0.288)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.36 (  0.47)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.87 (  0.86)
Test: [  20/  26]	Loss 0.280 (0.288)	test_acc   0.87 (  0.88)	test_minacc   0.47 (  0.49)	test_majacc   0.94 (  0.94)	Loss_d 0.280 (0.288)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.85)
Test: [  26/  26]	Loss 0.247 (0.287)	test_acc   0.87 (  0.88)	test_minacc   0.49 (  0.49)	test_majacc   0.93 (  0.94)	Loss_d 0.247 (0.287)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.85 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.73it/s]
Test: [  0/  1]	Loss 1.240 (1.240)	test_acc   0.41 (  0.41)	test_minacc   0.34 (  0.34)	test_majacc   0.97 (  0.97)	Loss_d 1.240 (1.240)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 1.240 (1.240)	test_acc   0.41 (  0.41)	test_minacc   0.34 (  0.34)	test_majacc   0.97 (  0.97)	Loss_d 1.240 (1.240)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.58 (  0.58)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/129/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0354 (0.0401)	validation_time 0.0003 (0.0011)	train_time 0.0351 (0.0384)
record: (train_acc, test_acc) (0.8756000161170959, 0.4050000309944153)
last accs (train_acc, test_acc) (0.8756000161170959, 0.4050000309944153)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 19%|#9        | 5/26 [00:00<00:00, 21.58it/s] 35%|###4      | 9/26 [00:00<00:00, 28.77it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.17it/s] 92%|#########2| 24/26 [00:00<00:00, 37.81it/s]100%|##########| 26/26 [00:00<00:00, 30.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.271 (0.298)	train_nll   0.27 (  0.30)	train_penalty   0.01 (  0.02)	weight_norm  22.60 ( 22.54)	train_acc   0.87 (  0.87)	train_minacc   0.32 (  0.41)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 7.2224 (7.8002)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.17it/s] 31%|###       | 8/26 [00:00<00:00, 39.18it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.18it/s] 50%|#####     | 13/26 [00:00<00:00, 42.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.03it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.03it/s] 96%|#########6| 25/26 [00:00<00:00, 47.35it/s]100%|##########| 26/26 [00:00<00:00, 40.31it/s]
Test: [   0/  26]	Loss 0.323 (0.323)	test_acc   0.86 (  0.86)	test_minacc   0.35 (  0.35)	test_majacc   0.98 (  0.98)	Loss_d 0.323 (0.323)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.300 (0.289)	test_acc   0.87 (  0.87)	test_minacc   0.34 (  0.42)	test_majacc   0.96 (  0.96)	Loss_d 0.300 (0.289)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.34 (  0.42)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.88)
Test: [  20/  26]	Loss 0.281 (0.284)	test_acc   0.87 (  0.88)	test_minacc   0.41 (  0.43)	test_majacc   0.96 (  0.96)	Loss_d 0.281 (0.284)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.41 (  0.43)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.254 (0.283)	test_acc   0.87 (  0.88)	test_minacc   0.43 (  0.43)	test_majacc   0.94 (  0.96)	Loss_d 0.254 (0.283)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.88 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.88it/s]
Test: [  0/  1]	Loss 1.381 (1.381)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.97 (  0.97)	Loss_d 1.381 (1.381)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.66 (  0.66)
Test: [  1/  1]	Loss 1.381 (1.381)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.97 (  0.97)	Loss_d 1.381 (1.381)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.66 (  0.66)
Overall Timing[  9/  1]	epoch_time 0.0352 (0.0397)	validation_time 0.0004 (0.0010)	train_time 0.0349 (0.0381)
record: (train_acc, test_acc) (0.8756000161170959, 0.4050000309944153)
last accs (train_acc, test_acc) (0.8757000219225883, 0.34800001978874207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.62it/s] 19%|#9        | 5/26 [00:00<00:00, 22.87it/s] 35%|###4      | 9/26 [00:00<00:00, 29.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.58it/s] 69%|######9   | 18/26 [00:00<00:00, 36.33it/s] 88%|########8 | 23/26 [00:00<00:00, 38.30it/s]100%|##########| 26/26 [00:00<00:00, 31.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.229 (0.287)	train_nll   0.23 (  0.29)	train_penalty   0.01 (  0.01)	weight_norm  22.75 ( 22.68)	train_acc   0.91 (  0.88)	train_minacc   0.59 (  0.46)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 7.3363 (7.7030)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.05it/s] 31%|###       | 8/26 [00:00<00:00, 40.46it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.46it/s] 50%|#####     | 13/26 [00:00<00:00, 42.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.78it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.78it/s] 96%|#########6| 25/26 [00:00<00:00, 47.89it/s]100%|##########| 26/26 [00:00<00:00, 40.42it/s]
Test: [   0/  26]	Loss 0.310 (0.310)	test_acc   0.87 (  0.87)	test_minacc   0.38 (  0.38)	test_majacc   0.98 (  0.98)	Loss_d 0.310 (0.310)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.295 (0.287)	test_acc   0.88 (  0.88)	test_minacc   0.41 (  0.41)	test_majacc   0.97 (  0.96)	Loss_d 0.295 (0.287)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.88)
Test: [  20/  26]	Loss 0.287 (0.281)	test_acc   0.87 (  0.88)	test_minacc   0.44 (  0.43)	test_majacc   0.95 (  0.96)	Loss_d 0.287 (0.281)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.44 (  0.43)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  26/  26]	Loss 0.222 (0.281)	test_acc   0.90 (  0.88)	test_minacc   0.54 (  0.43)	test_majacc   0.96 (  0.96)	Loss_d 0.222 (0.281)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.54 (  0.43)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.00it/s]
Test: [  0/  1]	Loss 1.626 (1.626)	test_acc   0.35 (  0.35)	test_minacc   0.27 (  0.27)	test_majacc   0.98 (  0.98)	Loss_d 1.626 (1.626)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 1.626 (1.626)	test_acc   0.35 (  0.35)	test_minacc   0.27 (  0.27)	test_majacc   0.98 (  0.98)	Loss_d 1.626 (1.626)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.67 (  0.67)
Overall Timing[ 10/  1]	epoch_time 0.0369 (0.0394)	validation_time 0.0004 (0.0009)	train_time 0.0365 (0.0379)
record: (train_acc, test_acc) (0.8756000161170959, 0.4050000309944153)
last accs (train_acc, test_acc) (0.881300017118454, 0.3450000286102295)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 19%|#9        | 5/26 [00:00<00:00, 23.89it/s] 35%|###4      | 9/26 [00:00<00:00, 29.54it/s] 50%|#####     | 13/26 [00:00<00:00, 33.25it/s] 65%|######5   | 17/26 [00:00<00:00, 35.26it/s] 85%|########4 | 22/26 [00:00<00:00, 37.33it/s]100%|##########| 26/26 [00:00<00:00, 31.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.211 (0.275)	train_nll   0.21 (  0.28)	train_penalty   0.01 (  0.01)	weight_norm  22.91 ( 22.83)	train_acc   0.93 (  0.88)	train_minacc   0.73 (  0.52)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 7.5669 (7.6573)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.07it/s] 31%|###       | 8/26 [00:00<00:00, 41.17it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.17it/s] 50%|#####     | 13/26 [00:00<00:00, 42.61it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.59it/s] 96%|#########6| 25/26 [00:00<00:00, 48.25it/s]100%|##########| 26/26 [00:00<00:00, 41.45it/s]
Test: [   0/  26]	Loss 0.300 (0.300)	test_acc   0.89 (  0.89)	test_minacc   0.49 (  0.49)	test_majacc   0.98 (  0.98)	Loss_d 0.300 (0.300)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.288 (0.257)	test_acc   0.87 (  0.89)	test_minacc   0.47 (  0.51)	test_majacc   0.95 (  0.96)	Loss_d 0.288 (0.257)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.88 (  0.87)
Test: [  20/  26]	Loss 0.238 (0.247)	test_acc   0.91 (  0.90)	test_minacc   0.64 (  0.55)	test_majacc   0.96 (  0.96)	Loss_d 0.238 (0.247)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.64 (  0.55)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.86)
Test: [  26/  26]	Loss 0.181 (0.243)	test_acc   0.94 (  0.90)	test_minacc   0.76 (  0.55)	test_majacc   0.98 (  0.96)	Loss_d 0.181 (0.243)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.76 (  0.55)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.86 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.88it/s]
Test: [  0/  1]	Loss 1.662 (1.662)	test_acc   0.39 (  0.39)	test_minacc   0.32 (  0.32)	test_majacc   0.98 (  0.98)	Loss_d 1.662 (1.662)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 1.662 (1.662)	test_acc   0.39 (  0.39)	test_minacc   0.32 (  0.32)	test_majacc   0.98 (  0.98)	Loss_d 1.662 (1.662)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.63 (  0.63)
Overall Timing[ 11/  1]	epoch_time 0.0352 (0.0391)	validation_time 0.0004 (0.0009)	train_time 0.0348 (0.0377)
record: (train_acc, test_acc) (0.8756000161170959, 0.4050000309944153)
last accs (train_acc, test_acc) (0.9017000225186348, 0.38700002431869507)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 19%|#9        | 5/26 [00:00<00:00, 21.96it/s] 35%|###4      | 9/26 [00:00<00:00, 28.83it/s] 50%|#####     | 13/26 [00:00<00:00, 32.77it/s] 69%|######9   | 18/26 [00:00<00:00, 35.96it/s] 88%|########8 | 23/26 [00:00<00:00, 37.31it/s]100%|##########| 26/26 [00:00<00:00, 30.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.186 (0.252)	train_nll   0.19 (  0.25)	train_penalty   0.00 (  0.01)	weight_norm  23.10 ( 23.01)	train_acc   0.93 (  0.90)	train_minacc   0.84 (  0.59)	train_majacc   0.95 (  0.95)	train_corr   0.00 (  0.00)	l1 7.8263 (7.8863)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.81it/s] 31%|###       | 8/26 [00:00<00:00, 39.04it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.04it/s] 54%|#####3    | 14/26 [00:00<00:00, 46.25it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.50it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.50it/s]100%|##########| 26/26 [00:00<00:00, 51.18it/s]100%|##########| 26/26 [00:00<00:00, 42.23it/s]
Test: [   0/  26]	Loss 0.266 (0.266)	test_acc   0.91 (  0.91)	test_minacc   0.68 (  0.68)	test_majacc   0.96 (  0.96)	Loss_d 0.266 (0.266)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.275 (0.257)	test_acc   0.88 (  0.89)	test_minacc   0.58 (  0.67)	test_majacc   0.93 (  0.93)	Loss_d 0.275 (0.257)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.58 (  0.67)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.82 (  0.80)
Test: [  20/  26]	Loss 0.232 (0.249)	test_acc   0.91 (  0.90)	test_minacc   0.71 (  0.68)	test_majacc   0.94 (  0.93)	Loss_d 0.232 (0.249)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.71 (  0.68)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.79 (  0.79)
Test: [  26/  26]	Loss 0.162 (0.242)	test_acc   0.93 (  0.90)	test_minacc   0.78 (  0.69)	test_majacc   0.96 (  0.94)	Loss_d 0.162 (0.242)	test_acc_d   0.93 (  0.90)	test_minacc_d   0.78 (  0.69)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.81 (  0.79)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.03it/s]
Test: [  0/  1]	Loss 1.683 (1.683)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.93 (  0.93)	Loss_d 1.683 (1.683)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.43 (  0.43)
Test: [  1/  1]	Loss 1.683 (1.683)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.93 (  0.93)	Loss_d 1.683 (1.683)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.43 (  0.43)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/129/checkpoints/model_best.pth
Overall Timing[ 12/  1]	epoch_time 0.0353 (0.0388)	validation_time 0.0004 (0.0009)	train_time 0.0349 (0.0375)
record: (train_acc, test_acc) (0.8995000162124633, 0.4740000367164612)
last accs (train_acc, test_acc) (0.8995000162124633, 0.4740000367164612)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.34it/s] 23%|##3       | 6/26 [00:00<00:00, 26.94it/s] 38%|###8      | 10/26 [00:00<00:00, 31.44it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.86it/s] 92%|#########2| 24/26 [00:00<00:00, 38.77it/s]100%|##########| 26/26 [00:00<00:00, 32.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.191 (0.240)	train_nll   0.19 (  0.24)	train_penalty   0.00 (  0.01)	weight_norm  23.34 ( 23.22)	train_acc   0.92 (  0.90)	train_minacc   0.84 (  0.60)	train_majacc   0.94 (  0.95)	train_corr   0.00 (  0.00)	l1 8.1408 (7.9847)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.34it/s] 27%|##6       | 7/26 [00:00<00:00, 35.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.79it/s] 50%|#####     | 13/26 [00:00<00:00, 41.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.99it/s] 96%|#########6| 25/26 [00:00<00:00, 48.20it/s]100%|##########| 26/26 [00:00<00:00, 40.38it/s]
Test: [   0/  26]	Loss 0.273 (0.273)	test_acc   0.90 (  0.90)	test_minacc   0.61 (  0.61)	test_majacc   0.97 (  0.97)	Loss_d 0.273 (0.273)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.256 (0.225)	test_acc   0.90 (  0.91)	test_minacc   0.69 (  0.72)	test_majacc   0.94 (  0.94)	Loss_d 0.256 (0.225)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.69 (  0.72)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.81 (  0.80)
Test: [  20/  26]	Loss 0.217 (0.226)	test_acc   0.92 (  0.91)	test_minacc   0.78 (  0.72)	test_majacc   0.95 (  0.94)	Loss_d 0.217 (0.226)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.78 (  0.72)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.78 (  0.79)
Test: [  26/  26]	Loss 0.146 (0.216)	test_acc   0.94 (  0.91)	test_minacc   0.89 (  0.74)	test_majacc   0.95 (  0.94)	Loss_d 0.146 (0.216)	test_acc_d   0.94 (  0.91)	test_minacc_d   0.89 (  0.74)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.78 (  0.79)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.57it/s]
Test: [  0/  1]	Loss 1.686 (1.686)	test_acc   0.47 (  0.47)	test_minacc   0.41 (  0.41)	test_majacc   0.96 (  0.96)	Loss_d 1.686 (1.686)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.44 (  0.44)
Test: [  1/  1]	Loss 1.686 (1.686)	test_acc   0.47 (  0.47)	test_minacc   0.41 (  0.41)	test_majacc   0.96 (  0.96)	Loss_d 1.686 (1.686)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.44 (  0.44)
Overall Timing[ 13/  1]	epoch_time 0.0364 (0.0386)	validation_time 0.0003 (0.0008)	train_time 0.0361 (0.0374)
record: (train_acc, test_acc) (0.8995000162124633, 0.4740000367164612)
last accs (train_acc, test_acc) (0.9126000207066536, 0.46800002455711365)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.71it/s] 15%|#5        | 4/26 [00:00<00:01, 19.92it/s] 31%|###       | 8/26 [00:00<00:00, 26.89it/s] 46%|####6     | 12/26 [00:00<00:00, 30.70it/s] 62%|######1   | 16/26 [00:00<00:00, 33.10it/s] 77%|#######6  | 20/26 [00:00<00:00, 34.45it/s] 92%|#########2| 24/26 [00:00<00:00, 35.40it/s]100%|##########| 26/26 [00:00<00:00, 29.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.175 (0.231)	train_nll   0.17 (  0.23)	train_penalty   0.00 (  0.01)	weight_norm  23.65 ( 23.49)	train_acc   0.91 (  0.91)	train_minacc   0.65 (  0.62)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 8.3914 (8.2908)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.29it/s] 31%|###       | 8/26 [00:00<00:00, 38.54it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.54it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.16it/s] 96%|#########6| 25/26 [00:00<00:00, 49.43it/s]100%|##########| 26/26 [00:00<00:00, 41.99it/s]
Test: [   0/  26]	Loss 0.243 (0.243)	test_acc   0.92 (  0.92)	test_minacc   0.62 (  0.62)	test_majacc   0.98 (  0.98)	Loss_d 0.243 (0.243)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.265 (0.231)	test_acc   0.90 (  0.91)	test_minacc   0.61 (  0.62)	test_majacc   0.95 (  0.96)	Loss_d 0.265 (0.231)	test_acc_d   0.90 (  0.91)	test_minacc_d   0.61 (  0.62)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.82 (  0.82)
Test: [  20/  26]	Loss 0.209 (0.223)	test_acc   0.93 (  0.91)	test_minacc   0.69 (  0.64)	test_majacc   0.97 (  0.96)	Loss_d 0.209 (0.223)	test_acc_d   0.93 (  0.91)	test_minacc_d   0.69 (  0.64)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.82 (  0.82)
Test: [  26/  26]	Loss 0.141 (0.212)	test_acc   0.96 (  0.92)	test_minacc   0.92 (  0.67)	test_majacc   0.96 (  0.96)	Loss_d 0.141 (0.212)	test_acc_d   0.96 (  0.92)	test_minacc_d   0.92 (  0.67)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.80 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.18it/s]
Test: [  0/  1]	Loss 1.847 (1.847)	test_acc   0.40 (  0.40)	test_minacc   0.33 (  0.33)	test_majacc   0.97 (  0.97)	Loss_d 1.847 (1.847)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 1.847 (1.847)	test_acc   0.40 (  0.40)	test_minacc   0.33 (  0.33)	test_majacc   0.97 (  0.97)	Loss_d 1.847 (1.847)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.53 (  0.53)
Overall Timing[ 14/  1]	epoch_time 0.0364 (0.0384)	validation_time 0.0004 (0.0008)	train_time 0.0360 (0.0373)
record: (train_acc, test_acc) (0.8995000162124633, 0.4740000367164612)
last accs (train_acc, test_acc) (0.9167000195980072, 0.39500001072883606)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.97it/s] 23%|##3       | 6/26 [00:00<00:00, 29.14it/s] 38%|###8      | 10/26 [00:00<00:00, 33.73it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.98it/s] 92%|#########2| 24/26 [00:00<00:00, 39.23it/s]100%|##########| 26/26 [00:00<00:00, 33.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.011 (0.092)	train_nll   0.64 (  0.33)	train_penalty   0.01 (  0.01)	weight_norm  23.96 ( 23.81)	train_acc   0.61 (  0.85)	train_minacc   0.76 (  0.68)	train_majacc   0.58 (  0.88)	train_corr   0.00 (  0.00)	l1 6.5230 (8.1922)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s] 27%|##6       | 7/26 [00:00<00:00, 35.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.81it/s] 50%|#####     | 13/26 [00:00<00:00, 41.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.18it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.18it/s] 96%|#########6| 25/26 [00:00<00:00, 47.63it/s]100%|##########| 26/26 [00:00<00:00, 40.03it/s]
Test: [   0/  26]	Loss 0.602 (0.602)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.64)	test_majacc   0.63 (  0.63)	Loss_d 0.602 (0.602)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.619 (0.587)	test_acc   0.62 (  0.65)	test_minacc   0.69 (  0.75)	test_majacc   0.61 (  0.64)	Loss_d 0.619 (0.587)	test_acc_d   0.62 (  0.65)	test_minacc_d   0.69 (  0.75)	test_majacc_d   0.61 (  0.64)	test_corr_d   0.29 (  0.30)
Test: [  20/  26]	Loss 0.607 (0.590)	test_acc   0.64 (  0.65)	test_minacc   0.66 (  0.76)	test_majacc   0.64 (  0.63)	Loss_d 0.607 (0.590)	test_acc_d   0.64 (  0.65)	test_minacc_d   0.66 (  0.76)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.31 (  0.30)
Test: [  26/  26]	Loss 0.623 (0.594)	test_acc   0.61 (  0.65)	test_minacc   0.73 (  0.75)	test_majacc   0.59 (  0.63)	Loss_d 0.623 (0.594)	test_acc_d   0.61 (  0.65)	test_minacc_d   0.73 (  0.75)	test_majacc_d   0.59 (  0.63)	test_corr_d   0.25 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.19it/s]
Test: [  0/  1]	Loss 0.800 (0.800)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.67 (  0.67)	Loss_d 0.800 (0.800)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.800 (0.800)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.67 (  0.67)	Loss_d 0.800 (0.800)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.02 (  0.02)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/129/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0347 (0.0382)	validation_time 0.0003 (0.0008)	train_time 0.0343 (0.0371)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.63it/s] 23%|##3       | 6/26 [00:00<00:00, 28.25it/s] 38%|###8      | 10/26 [00:00<00:00, 32.45it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.84it/s] 69%|######9   | 18/26 [00:00<00:00, 35.81it/s] 85%|########4 | 22/26 [00:00<00:00, 36.87it/s]100%|##########| 26/26 [00:00<00:00, 32.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.60 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.04 ( 24.02)	train_acc   0.62 (  0.65)	train_minacc   0.68 (  0.68)	train_majacc   0.61 (  0.65)	train_corr   0.00 (  0.00)	l1 5.5348 (5.6941)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.65it/s] 27%|##6       | 7/26 [00:00<00:00, 34.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.75it/s] 50%|#####     | 13/26 [00:00<00:00, 41.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.79it/s] 96%|#########6| 25/26 [00:00<00:00, 47.67it/s]100%|##########| 26/26 [00:00<00:00, 39.89it/s]
Test: [   0/  26]	Loss 0.612 (0.612)	test_acc   0.62 (  0.62)	test_minacc   0.57 (  0.57)	test_majacc   0.63 (  0.63)	Loss_d 0.612 (0.612)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.638 (0.613)	test_acc   0.59 (  0.63)	test_minacc   0.63 (  0.68)	test_majacc   0.59 (  0.62)	Loss_d 0.638 (0.613)	test_acc_d   0.59 (  0.63)	test_minacc_d   0.63 (  0.68)	test_majacc_d   0.59 (  0.62)	test_corr_d   0.29 (  0.30)
Test: [  20/  26]	Loss 0.628 (0.614)	test_acc   0.62 (  0.63)	test_minacc   0.59 (  0.69)	test_majacc   0.63 (  0.62)	Loss_d 0.628 (0.614)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.59 (  0.69)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.31 (  0.30)
Test: [  26/  26]	Loss 0.620 (0.617)	test_acc   0.60 (  0.62)	test_minacc   0.70 (  0.68)	test_majacc   0.59 (  0.61)	Loss_d 0.620 (0.617)	test_acc_d   0.60 (  0.62)	test_minacc_d   0.70 (  0.68)	test_majacc_d   0.59 (  0.61)	test_corr_d   0.29 (  0.30)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.70it/s]
Test: [  0/  1]	Loss 0.790 (0.790)	test_acc   0.56 (  0.56)	test_minacc   0.55 (  0.55)	test_majacc   0.66 (  0.66)	Loss_d 0.790 (0.790)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.790 (0.790)	test_acc   0.56 (  0.56)	test_minacc   0.55 (  0.55)	test_majacc   0.66 (  0.66)	Loss_d 0.790 (0.790)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.09 (  0.09)
Overall Timing[ 16/  1]	epoch_time 0.0345 (0.0380)	validation_time 0.0003 (0.0007)	train_time 0.0342 (0.0369)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6221000087857247, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 19%|#9        | 5/26 [00:00<00:00, 23.31it/s] 35%|###4      | 9/26 [00:00<00:00, 28.76it/s] 50%|#####     | 13/26 [00:00<00:00, 32.51it/s] 65%|######5   | 17/26 [00:00<00:00, 34.66it/s] 81%|########  | 21/26 [00:00<00:00, 35.12it/s]100%|##########| 26/26 [00:00<00:00, 37.54it/s]100%|##########| 26/26 [00:00<00:00, 30.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.001 (0.001)	train_nll   0.59 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  24.05 ( 24.05)	train_acc   0.62 (  0.63)	train_minacc   0.65 (  0.67)	train_majacc   0.62 (  0.62)	train_corr   0.00 (  0.00)	l1 5.2720 (5.4289)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.23it/s] 27%|##6       | 7/26 [00:00<00:00, 27.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.11it/s] 46%|####6     | 12/26 [00:00<00:00, 35.23it/s] 65%|######5   | 17/26 [00:00<00:00, 39.49it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.49it/s] 88%|########8 | 23/26 [00:00<00:00, 45.58it/s]100%|##########| 26/26 [00:00<00:00, 35.05it/s]
Test: [   0/  26]	Loss 0.579 (0.579)	test_acc   0.66 (  0.66)	test_minacc   0.57 (  0.57)	test_majacc   0.68 (  0.68)	Loss_d 0.579 (0.579)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.46 (  0.46)
Test: [  10/  26]	Loss 0.590 (0.575)	test_acc   0.63 (  0.65)	test_minacc   0.61 (  0.61)	test_majacc   0.63 (  0.65)	Loss_d 0.590 (0.575)	test_acc_d   0.63 (  0.65)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.63 (  0.65)	test_corr_d   0.42 (  0.43)
Test: [  20/  26]	Loss 0.584 (0.576)	test_acc   0.66 (  0.65)	test_minacc   0.59 (  0.62)	test_majacc   0.67 (  0.65)	Loss_d 0.584 (0.576)	test_acc_d   0.66 (  0.65)	test_minacc_d   0.59 (  0.62)	test_majacc_d   0.67 (  0.65)	test_corr_d   0.44 (  0.43)
Test: [  26/  26]	Loss 0.583 (0.579)	test_acc   0.62 (  0.64)	test_minacc   0.65 (  0.62)	test_majacc   0.61 (  0.65)	Loss_d 0.583 (0.579)	test_acc_d   0.62 (  0.64)	test_minacc_d   0.65 (  0.62)	test_majacc_d   0.61 (  0.65)	test_corr_d   0.39 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.77it/s]
Test: [  0/  1]	Loss 0.853 (0.853)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.72 (  0.72)	Loss_d 0.853 (0.853)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 0.853 (0.853)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.72 (  0.72)	Loss_d 0.853 (0.853)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.28 (  0.28)
Overall Timing[ 17/  1]	epoch_time 0.0368 (0.0379)	validation_time 0.0003 (0.0007)	train_time 0.0364 (0.0369)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6417000163793564, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.22it/s] 27%|##6       | 7/26 [00:00<00:00, 32.42it/s] 42%|####2     | 11/26 [00:00<00:00, 34.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.19it/s] 88%|########8 | 23/26 [00:00<00:00, 37.80it/s]100%|##########| 26/26 [00:00<00:00, 33.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.001)	train_nll   0.61 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  24.05 ( 24.05)	train_acc   0.58 (  0.60)	train_minacc   0.68 (  0.67)	train_majacc   0.56 (  0.59)	train_corr   0.00 (  0.00)	l1 5.1224 (5.1904)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 27%|##6       | 7/26 [00:00<00:00, 32.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.37it/s] 46%|####6     | 12/26 [00:00<00:00, 39.25it/s] 65%|######5   | 17/26 [00:00<00:00, 41.08it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.08it/s] 88%|########8 | 23/26 [00:00<00:00, 46.69it/s]100%|##########| 26/26 [00:00<00:00, 37.72it/s]
Test: [   0/  26]	Loss 0.599 (0.599)	test_acc   0.64 (  0.64)	test_minacc   0.57 (  0.57)	test_majacc   0.65 (  0.65)	Loss_d 0.599 (0.599)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.607 (0.596)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.63)	test_majacc   0.63 (  0.63)	Loss_d 0.607 (0.596)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.63)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.38 (  0.38)
Test: [  20/  26]	Loss 0.597 (0.596)	test_acc   0.65 (  0.63)	test_minacc   0.64 (  0.62)	test_majacc   0.66 (  0.63)	Loss_d 0.597 (0.596)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.64 (  0.62)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.41 (  0.38)
Test: [  26/  26]	Loss 0.609 (0.598)	test_acc   0.59 (  0.62)	test_minacc   0.68 (  0.62)	test_majacc   0.58 (  0.62)	Loss_d 0.609 (0.598)	test_acc_d   0.59 (  0.62)	test_minacc_d   0.68 (  0.62)	test_majacc_d   0.58 (  0.62)	test_corr_d   0.34 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.33it/s]
Test: [  0/  1]	Loss 0.815 (0.815)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.68 (  0.68)	Loss_d 0.815 (0.815)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 0.815 (0.815)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.68 (  0.68)	Loss_d 0.815 (0.815)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.24 (  0.24)
Overall Timing[ 18/  1]	epoch_time 0.0359 (0.0378)	validation_time 0.0003 (0.0007)	train_time 0.0356 (0.0368)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6226000081300735, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 19%|#9        | 5/26 [00:00<00:00, 25.14it/s] 35%|###4      | 9/26 [00:00<00:00, 31.42it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.61it/s] 92%|#########2| 24/26 [00:00<00:00, 38.77it/s]100%|##########| 26/26 [00:00<00:00, 32.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  24.06 ( 24.06)	train_acc   0.55 (  0.60)	train_minacc   0.68 (  0.65)	train_majacc   0.53 (  0.59)	train_corr   0.00 (  0.00)	l1 5.0704 (5.1204)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.29it/s] 27%|##6       | 7/26 [00:00<00:00, 28.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.63it/s] 50%|#####     | 13/26 [00:00<00:00, 36.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.45it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.45it/s] 96%|#########6| 25/26 [00:00<00:00, 44.91it/s]100%|##########| 26/26 [00:00<00:00, 35.74it/s]
Test: [   0/  26]	Loss 0.608 (0.608)	test_acc   0.64 (  0.64)	test_minacc   0.59 (  0.59)	test_majacc   0.65 (  0.65)	Loss_d 0.608 (0.608)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.610 (0.602)	test_acc   0.62 (  0.62)	test_minacc   0.66 (  0.64)	test_majacc   0.61 (  0.62)	Loss_d 0.610 (0.602)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.66 (  0.64)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.36 (  0.36)
Test: [  20/  26]	Loss 0.601 (0.603)	test_acc   0.65 (  0.61)	test_minacc   0.64 (  0.63)	test_majacc   0.65 (  0.61)	Loss_d 0.601 (0.603)	test_acc_d   0.65 (  0.61)	test_minacc_d   0.64 (  0.63)	test_majacc_d   0.65 (  0.61)	test_corr_d   0.39 (  0.36)
Test: [  26/  26]	Loss 0.618 (0.605)	test_acc   0.56 (  0.61)	test_minacc   0.62 (  0.63)	test_majacc   0.54 (  0.61)	Loss_d 0.618 (0.605)	test_acc_d   0.56 (  0.61)	test_minacc_d   0.62 (  0.63)	test_majacc_d   0.54 (  0.61)	test_corr_d   0.32 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.26it/s]
Test: [  0/  1]	Loss 0.811 (0.811)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.68 (  0.68)	Loss_d 0.811 (0.811)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 0.811 (0.811)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.68 (  0.68)	Loss_d 0.811 (0.811)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.23 (  0.23)
Overall Timing[ 19/  1]	epoch_time 0.0358 (0.0377)	validation_time 0.0003 (0.0007)	train_time 0.0355 (0.0367)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6115000052452088, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 19%|#9        | 5/26 [00:00<00:00, 22.60it/s] 35%|###4      | 9/26 [00:00<00:00, 28.50it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.74it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.75it/s] 92%|#########2| 24/26 [00:00<00:00, 38.44it/s]100%|##########| 26/26 [00:00<00:00, 31.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  24.06 ( 24.06)	train_acc   0.55 (  0.59)	train_minacc   0.62 (  0.66)	train_majacc   0.54 (  0.58)	train_corr   0.00 (  0.00)	l1 5.0485 (5.0777)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.22it/s] 27%|##6       | 7/26 [00:00<00:00, 31.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.26it/s] 50%|#####     | 13/26 [00:00<00:00, 38.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.46it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.46it/s] 96%|#########6| 25/26 [00:00<00:00, 46.09it/s]100%|##########| 26/26 [00:00<00:00, 37.51it/s]
Test: [   0/  26]	Loss 0.609 (0.609)	test_acc   0.64 (  0.64)	test_minacc   0.55 (  0.55)	test_majacc   0.65 (  0.65)	Loss_d 0.609 (0.609)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.40 (  0.40)
Test: [  10/  26]	Loss 0.608 (0.601)	test_acc   0.62 (  0.62)	test_minacc   0.66 (  0.63)	test_majacc   0.61 (  0.62)	Loss_d 0.608 (0.601)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.66 (  0.63)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.599 (0.602)	test_acc   0.65 (  0.62)	test_minacc   0.66 (  0.62)	test_majacc   0.64 (  0.62)	Loss_d 0.599 (0.602)	test_acc_d   0.65 (  0.62)	test_minacc_d   0.66 (  0.62)	test_majacc_d   0.64 (  0.62)	test_corr_d   0.40 (  0.37)
Test: [  26/  26]	Loss 0.619 (0.604)	test_acc   0.57 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.56 (  0.61)	Loss_d 0.619 (0.604)	test_acc_d   0.57 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.56 (  0.61)	test_corr_d   0.33 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.79it/s]
Test: [  0/  1]	Loss 0.816 (0.816)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.69 (  0.69)	Loss_d 0.816 (0.816)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 0.816 (0.816)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.69 (  0.69)	Loss_d 0.816 (0.816)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.24 (  0.24)
Overall Timing[ 20/  1]	epoch_time 0.0347 (0.0376)	validation_time 0.0003 (0.0007)	train_time 0.0343 (0.0366)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6144000125527382, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.90it/s] 19%|#9        | 5/26 [00:00<00:00, 22.14it/s] 35%|###4      | 9/26 [00:00<00:00, 28.76it/s] 50%|#####     | 13/26 [00:00<00:00, 32.55it/s] 69%|######9   | 18/26 [00:00<00:00, 35.67it/s] 88%|########8 | 23/26 [00:00<00:00, 37.09it/s]100%|##########| 26/26 [00:00<00:00, 30.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  24.06 ( 24.06)	train_acc   0.56 (  0.59)	train_minacc   0.65 (  0.65)	train_majacc   0.54 (  0.58)	train_corr   0.00 (  0.00)	l1 5.0122 (5.0500)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 27%|##6       | 7/26 [00:00<00:00, 30.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.75it/s] 50%|#####     | 13/26 [00:00<00:00, 38.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.01it/s] 96%|#########6| 25/26 [00:00<00:00, 46.89it/s]100%|##########| 26/26 [00:00<00:00, 37.87it/s]
Test: [   0/  26]	Loss 0.607 (0.607)	test_acc   0.64 (  0.64)	test_minacc   0.55 (  0.55)	test_majacc   0.65 (  0.65)	Loss_d 0.607 (0.607)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.40 (  0.40)
Test: [  10/  26]	Loss 0.603 (0.597)	test_acc   0.62 (  0.63)	test_minacc   0.66 (  0.64)	test_majacc   0.61 (  0.63)	Loss_d 0.603 (0.597)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.66 (  0.64)	test_majacc_d   0.61 (  0.63)	test_corr_d   0.38 (  0.38)
Test: [  20/  26]	Loss 0.595 (0.599)	test_acc   0.65 (  0.62)	test_minacc   0.66 (  0.63)	test_majacc   0.65 (  0.62)	Loss_d 0.595 (0.599)	test_acc_d   0.65 (  0.62)	test_minacc_d   0.66 (  0.63)	test_majacc_d   0.65 (  0.62)	test_corr_d   0.40 (  0.38)
Test: [  26/  26]	Loss 0.617 (0.601)	test_acc   0.57 (  0.62)	test_minacc   0.62 (  0.63)	test_majacc   0.56 (  0.61)	Loss_d 0.617 (0.601)	test_acc_d   0.57 (  0.62)	test_minacc_d   0.62 (  0.63)	test_majacc_d   0.56 (  0.61)	test_corr_d   0.33 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.87it/s]
Test: [  0/  1]	Loss 0.820 (0.820)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.69 (  0.69)	Loss_d 0.820 (0.820)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 0.820 (0.820)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.69 (  0.69)	Loss_d 0.820 (0.820)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.25 (  0.25)
Overall Timing[ 21/  1]	epoch_time 0.0345 (0.0374)	validation_time 0.0003 (0.0006)	train_time 0.0342 (0.0365)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6157000136375427, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.41it/s] 19%|#9        | 5/26 [00:00<00:01, 19.60it/s] 38%|###8      | 10/26 [00:00<00:00, 28.66it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.23it/s] 92%|#########2| 24/26 [00:00<00:00, 37.25it/s]100%|##########| 26/26 [00:00<00:00, 29.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  24.06 ( 24.06)	train_acc   0.56 (  0.60)	train_minacc   0.65 (  0.65)	train_majacc   0.54 (  0.59)	train_corr   0.00 (  0.00)	l1 4.9894 (5.0243)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.52it/s] 31%|###       | 8/26 [00:00<00:00, 40.43it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.43it/s] 50%|#####     | 13/26 [00:00<00:00, 41.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.25it/s] 96%|#########6| 25/26 [00:00<00:00, 48.27it/s]100%|##########| 26/26 [00:00<00:00, 41.27it/s]
Test: [   0/  26]	Loss 0.607 (0.607)	test_acc   0.64 (  0.64)	test_minacc   0.55 (  0.55)	test_majacc   0.66 (  0.66)	Loss_d 0.607 (0.607)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.40 (  0.40)
Test: [  10/  26]	Loss 0.598 (0.595)	test_acc   0.62 (  0.63)	test_minacc   0.66 (  0.64)	test_majacc   0.62 (  0.63)	Loss_d 0.598 (0.595)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.66 (  0.64)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.38 (  0.38)
Test: [  20/  26]	Loss 0.592 (0.597)	test_acc   0.65 (  0.62)	test_minacc   0.66 (  0.63)	test_majacc   0.65 (  0.62)	Loss_d 0.592 (0.597)	test_acc_d   0.65 (  0.62)	test_minacc_d   0.66 (  0.63)	test_majacc_d   0.65 (  0.62)	test_corr_d   0.41 (  0.38)
Test: [  26/  26]	Loss 0.616 (0.598)	test_acc   0.58 (  0.62)	test_minacc   0.65 (  0.63)	test_majacc   0.57 (  0.62)	Loss_d 0.616 (0.598)	test_acc_d   0.58 (  0.62)	test_minacc_d   0.65 (  0.63)	test_majacc_d   0.57 (  0.62)	test_corr_d   0.33 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.27it/s]
Test: [  0/  1]	Loss 0.824 (0.824)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.69 (  0.69)	Loss_d 0.824 (0.824)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.824 (0.824)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.69 (  0.69)	Loss_d 0.824 (0.824)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.26 (  0.26)
Overall Timing[ 22/  1]	epoch_time 0.0358 (0.0374)	validation_time 0.0004 (0.0006)	train_time 0.0355 (0.0365)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6181000046133995, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 19%|#9        | 5/26 [00:00<00:00, 22.75it/s] 35%|###4      | 9/26 [00:00<00:00, 29.51it/s] 50%|#####     | 13/26 [00:00<00:00, 33.32it/s] 69%|######9   | 18/26 [00:00<00:00, 36.34it/s] 88%|########8 | 23/26 [00:00<00:00, 37.86it/s]100%|##########| 26/26 [00:00<00:00, 31.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 4.976496696472168
set z to 4.72767186164856
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  24.06 ( 24.06)	train_acc   0.55 (  0.60)	train_minacc   0.62 (  0.65)	train_majacc   0.54 (  0.59)	train_corr   0.00 (  0.00)	l1 4.9406 (4.9928)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 27%|##6       | 7/26 [00:00<00:00, 34.42it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.42it/s] 50%|#####     | 13/26 [00:00<00:00, 41.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.32it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.32it/s] 96%|#########6| 25/26 [00:00<00:00, 47.60it/s]100%|##########| 26/26 [00:00<00:00, 39.49it/s]
Test: [   0/  26]	Loss 0.602 (0.602)	test_acc   0.64 (  0.64)	test_minacc   0.57 (  0.57)	test_majacc   0.65 (  0.65)	Loss_d 0.602 (0.602)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.588 (0.588)	test_acc   0.63 (  0.63)	test_minacc   0.66 (  0.65)	test_majacc   0.62 (  0.63)	Loss_d 0.588 (0.588)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.66 (  0.65)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.40 (  0.39)
Test: [  20/  26]	Loss 0.584 (0.591)	test_acc   0.65 (  0.62)	test_minacc   0.66 (  0.65)	test_majacc   0.65 (  0.62)	Loss_d 0.584 (0.591)	test_acc_d   0.65 (  0.62)	test_minacc_d   0.66 (  0.65)	test_majacc_d   0.65 (  0.62)	test_corr_d   0.42 (  0.39)
Test: [  26/  26]	Loss 0.610 (0.592)	test_acc   0.58 (  0.62)	test_minacc   0.65 (  0.65)	test_majacc   0.57 (  0.62)	Loss_d 0.610 (0.592)	test_acc_d   0.58 (  0.62)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.57 (  0.62)	test_corr_d   0.34 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.34it/s]
Test: [  0/  1]	Loss 0.826 (0.826)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.70 (  0.70)	Loss_d 0.826 (0.826)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.826 (0.826)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.70 (  0.70)	Loss_d 0.826 (0.826)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.26 (  0.26)
Overall Timing[ 23/  1]	epoch_time 0.0351 (0.0373)	validation_time 0.0003 (0.0006)	train_time 0.0348 (0.0364)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6226000171303749, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s] 19%|#9        | 5/26 [00:00<00:00, 24.37it/s] 35%|###4      | 9/26 [00:00<00:00, 30.82it/s] 50%|#####     | 13/26 [00:00<00:00, 34.18it/s] 65%|######5   | 17/26 [00:00<00:00, 36.06it/s] 85%|########4 | 22/26 [00:00<00:00, 38.33it/s]100%|##########| 26/26 [00:00<00:00, 37.06it/s]100%|##########| 26/26 [00:00<00:00, 31.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  24.06 ( 24.06)	train_acc   0.54 (  0.60)	train_minacc   0.62 (  0.65)	train_majacc   0.53 (  0.60)	train_corr   0.00 (  0.00)	l1 4.9269 (4.9684)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 27%|##6       | 7/26 [00:00<00:00, 35.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.35it/s] 50%|#####     | 13/26 [00:00<00:00, 40.40it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.49it/s] 96%|#########6| 25/26 [00:00<00:00, 47.11it/s]100%|##########| 26/26 [00:00<00:00, 39.33it/s]
Test: [   0/  26]	Loss 0.600 (0.600)	test_acc   0.63 (  0.63)	test_minacc   0.57 (  0.57)	test_majacc   0.65 (  0.65)	Loss_d 0.600 (0.600)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.581 (0.584)	test_acc   0.64 (  0.63)	test_minacc   0.66 (  0.65)	test_majacc   0.64 (  0.63)	Loss_d 0.581 (0.584)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.66 (  0.65)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.41 (  0.40)
Test: [  20/  26]	Loss 0.580 (0.588)	test_acc   0.66 (  0.63)	test_minacc   0.66 (  0.64)	test_majacc   0.66 (  0.63)	Loss_d 0.580 (0.588)	test_acc_d   0.66 (  0.63)	test_minacc_d   0.66 (  0.64)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.42 (  0.40)
Test: [  26/  26]	Loss 0.608 (0.588)	test_acc   0.59 (  0.63)	test_minacc   0.65 (  0.64)	test_majacc   0.58 (  0.62)	Loss_d 0.608 (0.588)	test_acc_d   0.59 (  0.63)	test_minacc_d   0.65 (  0.64)	test_majacc_d   0.58 (  0.62)	test_corr_d   0.35 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.76it/s]
Test: [  0/  1]	Loss 0.833 (0.833)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.69 (  0.69)	Loss_d 0.833 (0.833)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.833 (0.833)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.69 (  0.69)	Loss_d 0.833 (0.833)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.26 (  0.26)
Overall Timing[ 24/  1]	epoch_time 0.0348 (0.0372)	validation_time 0.0004 (0.0006)	train_time 0.0344 (0.0363)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6262000055909157, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.05it/s] 19%|#9        | 5/26 [00:00<00:00, 24.72it/s] 38%|###8      | 10/26 [00:00<00:00, 32.79it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.39it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.00it/s] 96%|#########6| 25/26 [00:00<00:00, 38.67it/s]100%|##########| 26/26 [00:00<00:00, 32.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  24.06 ( 24.06)	train_acc   0.55 (  0.62)	train_minacc   0.65 (  0.64)	train_majacc   0.54 (  0.62)	train_corr   0.00 (  0.00)	l1 4.9244 (4.9481)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.86it/s] 27%|##6       | 7/26 [00:00<00:00, 34.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.51it/s] 50%|#####     | 13/26 [00:00<00:00, 42.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.29it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.29it/s] 96%|#########6| 25/26 [00:00<00:00, 48.04it/s]100%|##########| 26/26 [00:00<00:00, 39.30it/s]
Test: [   0/  26]	Loss 0.606 (0.606)	test_acc   0.61 (  0.61)	test_minacc   0.55 (  0.55)	test_majacc   0.62 (  0.62)	Loss_d 0.606 (0.606)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.581 (0.588)	test_acc   0.64 (  0.63)	test_minacc   0.69 (  0.69)	test_majacc   0.63 (  0.62)	Loss_d 0.581 (0.588)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.37 (  0.36)
Test: [  20/  26]	Loss 0.585 (0.593)	test_acc   0.63 (  0.62)	test_minacc   0.68 (  0.67)	test_majacc   0.63 (  0.61)	Loss_d 0.585 (0.593)	test_acc_d   0.63 (  0.62)	test_minacc_d   0.68 (  0.67)	test_majacc_d   0.63 (  0.61)	test_corr_d   0.39 (  0.36)
Test: [  26/  26]	Loss 0.611 (0.593)	test_acc   0.56 (  0.62)	test_minacc   0.65 (  0.67)	test_majacc   0.55 (  0.61)	Loss_d 0.611 (0.593)	test_acc_d   0.56 (  0.62)	test_minacc_d   0.65 (  0.67)	test_majacc_d   0.55 (  0.61)	test_corr_d   0.30 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.43it/s]
Test: [  0/  1]	Loss 0.818 (0.818)	test_acc   0.55 (  0.55)	test_minacc   0.53 (  0.53)	test_majacc   0.69 (  0.69)	Loss_d 0.818 (0.818)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 0.818 (0.818)	test_acc   0.55 (  0.55)	test_minacc   0.53 (  0.53)	test_majacc   0.69 (  0.69)	Loss_d 0.818 (0.818)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.21 (  0.21)
Overall Timing[ 25/  1]	epoch_time 0.0353 (0.0371)	validation_time 0.0004 (0.0006)	train_time 0.0349 (0.0363)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6185000084042549, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.87it/s] 23%|##3       | 6/26 [00:00<00:00, 25.24it/s] 42%|####2     | 11/26 [00:00<00:00, 31.73it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.15it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.56it/s] 96%|#########6| 25/26 [00:00<00:00, 37.55it/s]100%|##########| 26/26 [00:00<00:00, 31.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.59 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.06 ( 24.06)	train_acc   0.58 (  0.63)	train_minacc   0.68 (  0.64)	train_majacc   0.57 (  0.63)	train_corr   0.00 (  0.00)	l1 4.8038 (4.9135)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.78it/s] 27%|##6       | 7/26 [00:00<00:00, 26.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.90it/s] 50%|#####     | 13/26 [00:00<00:00, 37.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.39it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.39it/s] 96%|#########6| 25/26 [00:00<00:00, 46.30it/s]100%|##########| 26/26 [00:00<00:00, 36.41it/s]
Test: [   0/  26]	Loss 0.588 (0.588)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.63 (  0.63)	Loss_d 0.588 (0.588)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.40 (  0.40)
Test: [  10/  26]	Loss 0.557 (0.570)	test_acc   0.66 (  0.66)	test_minacc   0.78 (  0.74)	test_majacc   0.64 (  0.64)	Loss_d 0.557 (0.570)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.78 (  0.74)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.41 (  0.39)
Test: [  20/  26]	Loss 0.571 (0.577)	test_acc   0.64 (  0.65)	test_minacc   0.66 (  0.71)	test_majacc   0.64 (  0.63)	Loss_d 0.571 (0.577)	test_acc_d   0.64 (  0.65)	test_minacc_d   0.66 (  0.71)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.41 (  0.39)
Test: [  26/  26]	Loss 0.584 (0.577)	test_acc   0.58 (  0.64)	test_minacc   0.68 (  0.71)	test_majacc   0.56 (  0.63)	Loss_d 0.584 (0.577)	test_acc_d   0.58 (  0.64)	test_minacc_d   0.68 (  0.71)	test_majacc_d   0.56 (  0.63)	test_corr_d   0.33 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.81it/s]
Test: [  0/  1]	Loss 0.828 (0.828)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.71 (  0.71)	Loss_d 0.828 (0.828)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 0.828 (0.828)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.71 (  0.71)	Loss_d 0.828 (0.828)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.20 (  0.20)
Overall Timing[ 26/  1]	epoch_time 0.0352 (0.0370)	validation_time 0.0004 (0.0006)	train_time 0.0349 (0.0362)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6439000156521797, 0.5400000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.74it/s] 19%|#9        | 5/26 [00:00<00:01, 20.08it/s] 38%|###8      | 10/26 [00:00<00:00, 29.13it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.74it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.10it/s] 88%|########8 | 23/26 [00:00<00:00, 35.43it/s]100%|##########| 26/26 [00:00<00:00, 29.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.001 (0.000)	train_nll   0.63 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  24.06 ( 24.06)	train_acc   0.59 (  0.62)	train_minacc   0.73 (  0.73)	train_majacc   0.56 (  0.61)	train_corr   0.00 (  0.00)	l1 4.9742 (4.8556)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.88it/s] 31%|###       | 8/26 [00:00<00:00, 39.90it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.90it/s] 50%|#####     | 13/26 [00:00<00:00, 41.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.62it/s] 96%|#########6| 25/26 [00:00<00:00, 47.89it/s]100%|##########| 26/26 [00:00<00:00, 40.82it/s]
Test: [   0/  26]	Loss 0.611 (0.611)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.62 (  0.62)	Loss_d 0.611 (0.611)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.582 (0.594)	test_acc   0.65 (  0.63)	test_minacc   0.71 (  0.69)	test_majacc   0.63 (  0.62)	Loss_d 0.582 (0.594)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.71 (  0.69)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.36 (  0.34)
Test: [  20/  26]	Loss 0.592 (0.600)	test_acc   0.63 (  0.62)	test_minacc   0.64 (  0.68)	test_majacc   0.63 (  0.61)	Loss_d 0.592 (0.600)	test_acc_d   0.63 (  0.62)	test_minacc_d   0.64 (  0.68)	test_majacc_d   0.63 (  0.61)	test_corr_d   0.37 (  0.34)
Test: [  26/  26]	Loss 0.614 (0.599)	test_acc   0.60 (  0.62)	test_minacc   0.73 (  0.69)	test_majacc   0.58 (  0.61)	Loss_d 0.614 (0.599)	test_acc_d   0.60 (  0.62)	test_minacc_d   0.73 (  0.69)	test_majacc_d   0.58 (  0.61)	test_corr_d   0.30 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.62it/s]
Test: [  0/  1]	Loss 0.823 (0.823)	test_acc   0.56 (  0.56)	test_minacc   0.54 (  0.54)	test_majacc   0.68 (  0.68)	Loss_d 0.823 (0.823)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 0.823 (0.823)	test_acc   0.56 (  0.56)	test_minacc   0.54 (  0.54)	test_majacc   0.68 (  0.68)	Loss_d 0.823 (0.823)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.17 (  0.17)
Overall Timing[ 27/  1]	epoch_time 0.0348 (0.0370)	validation_time 0.0003 (0.0006)	train_time 0.0345 (0.0362)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.619700013577938, 0.5550000071525574)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.12it/s] 19%|#9        | 5/26 [00:00<00:01, 20.52it/s] 35%|###4      | 9/26 [00:00<00:00, 27.39it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.81it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.61it/s] 88%|########8 | 23/26 [00:00<00:00, 36.69it/s]100%|##########| 26/26 [00:00<00:00, 30.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.001 (0.002)	train_nll   0.63 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.07 ( 24.07)	train_acc   0.64 (  0.65)	train_minacc   0.73 (  0.61)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 4.8124 (4.8611)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.40it/s] 31%|###       | 8/26 [00:00<00:00, 39.91it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.91it/s] 50%|#####     | 13/26 [00:00<00:00, 40.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.16it/s] 96%|#########6| 25/26 [00:00<00:00, 46.77it/s]100%|##########| 26/26 [00:00<00:00, 40.15it/s]
Test: [   0/  26]	Loss 0.615 (0.615)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.62 (  0.62)	Loss_d 0.615 (0.615)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.34 (  0.34)
Test: [  10/  26]	Loss 0.588 (0.606)	test_acc   0.65 (  0.63)	test_minacc   0.69 (  0.68)	test_majacc   0.65 (  0.62)	Loss_d 0.588 (0.606)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.69 (  0.68)	test_majacc_d   0.65 (  0.62)	test_corr_d   0.36 (  0.33)
Test: [  20/  26]	Loss 0.604 (0.609)	test_acc   0.65 (  0.63)	test_minacc   0.69 (  0.68)	test_majacc   0.64 (  0.62)	Loss_d 0.604 (0.609)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.69 (  0.68)	test_majacc_d   0.64 (  0.62)	test_corr_d   0.35 (  0.32)
Test: [  26/  26]	Loss 0.619 (0.608)	test_acc   0.62 (  0.63)	test_minacc   0.76 (  0.69)	test_majacc   0.59 (  0.62)	Loss_d 0.619 (0.608)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.76 (  0.69)	test_majacc_d   0.59 (  0.62)	test_corr_d   0.28 (  0.32)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.60it/s]
Test: [  0/  1]	Loss 0.798 (0.798)	test_acc   0.56 (  0.56)	test_minacc   0.55 (  0.55)	test_majacc   0.65 (  0.65)	Loss_d 0.798 (0.798)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.798 (0.798)	test_acc   0.56 (  0.56)	test_minacc   0.55 (  0.55)	test_majacc   0.65 (  0.65)	Loss_d 0.798 (0.798)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.11 (  0.11)
Overall Timing[ 28/  1]	epoch_time 0.0363 (0.0369)	validation_time 0.0003 (0.0006)	train_time 0.0360 (0.0361)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6263000079989434, 0.5560000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.97it/s] 19%|#9        | 5/26 [00:00<00:01, 19.10it/s] 35%|###4      | 9/26 [00:00<00:00, 26.20it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.92it/s] 69%|######9   | 18/26 [00:00<00:00, 33.67it/s] 88%|########8 | 23/26 [00:00<00:00, 35.86it/s]100%|##########| 26/26 [00:00<00:00, 29.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.55 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.07 ( 24.07)	train_acc   0.66 (  0.65)	train_minacc   0.76 (  0.73)	train_majacc   0.65 (  0.64)	train_corr   0.00 (  0.00)	l1 4.4227 (4.4828)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 27%|##6       | 7/26 [00:00<00:00, 34.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.51it/s] 50%|#####     | 13/26 [00:00<00:00, 41.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.57it/s] 96%|#########6| 25/26 [00:00<00:00, 47.81it/s]100%|##########| 26/26 [00:00<00:00, 39.46it/s]
Test: [   0/  26]	Loss 0.573 (0.573)	test_acc   0.68 (  0.68)	test_minacc   0.65 (  0.65)	test_majacc   0.69 (  0.69)	Loss_d 0.573 (0.573)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.546 (0.567)	test_acc   0.69 (  0.68)	test_minacc   0.76 (  0.74)	test_majacc   0.68 (  0.67)	Loss_d 0.546 (0.567)	test_acc_d   0.69 (  0.68)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.68 (  0.67)	test_corr_d   0.44 (  0.41)
Test: [  20/  26]	Loss 0.573 (0.574)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.72)	test_majacc   0.67 (  0.66)	Loss_d 0.573 (0.574)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.72)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.42 (  0.41)
Test: [  26/  26]	Loss 0.557 (0.574)	test_acc   0.67 (  0.67)	test_minacc   0.78 (  0.72)	test_majacc   0.65 (  0.66)	Loss_d 0.557 (0.574)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.78 (  0.72)	test_majacc_d   0.65 (  0.66)	test_corr_d   0.37 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.91it/s]
Test: [  0/  1]	Loss 0.849 (0.849)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.72 (  0.72)	Loss_d 0.849 (0.849)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.849 (0.849)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.72 (  0.72)	Loss_d 0.849 (0.849)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.15 (  0.15)
Overall Timing[ 29/  1]	epoch_time 0.0360 (0.0369)	validation_time 0.0003 (0.0006)	train_time 0.0356 (0.0361)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6712000203728676, 0.5400000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.58it/s] 19%|#9        | 5/26 [00:00<00:00, 24.44it/s] 35%|###4      | 9/26 [00:00<00:00, 29.89it/s] 50%|#####     | 13/26 [00:00<00:00, 32.49it/s] 69%|######9   | 18/26 [00:00<00:00, 35.86it/s] 85%|########4 | 22/26 [00:00<00:00, 36.61it/s]100%|##########| 26/26 [00:00<00:00, 31.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.59 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  24.08 ( 24.07)	train_acc   0.62 (  0.65)	train_minacc   0.78 (  0.74)	train_majacc   0.59 (  0.63)	train_corr   0.00 (  0.00)	l1 4.6820 (4.4652)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.95it/s] 35%|###4      | 9/26 [00:00<00:00, 39.78it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.78it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.03it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.03it/s] 81%|########  | 21/26 [00:00<00:00, 46.74it/s]100%|##########| 26/26 [00:00<00:00, 41.60it/s]
Test: [   0/  26]	Loss 0.589 (0.589)	test_acc   0.65 (  0.65)	test_minacc   0.61 (  0.61)	test_majacc   0.65 (  0.65)	Loss_d 0.589 (0.589)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.36 (  0.36)
Test: [  10/  26]	Loss 0.555 (0.582)	test_acc   0.67 (  0.63)	test_minacc   0.73 (  0.71)	test_majacc   0.66 (  0.62)	Loss_d 0.555 (0.582)	test_acc_d   0.67 (  0.63)	test_minacc_d   0.73 (  0.71)	test_majacc_d   0.66 (  0.62)	test_corr_d   0.38 (  0.34)
Test: [  20/  26]	Loss 0.587 (0.589)	test_acc   0.64 (  0.63)	test_minacc   0.71 (  0.71)	test_majacc   0.62 (  0.61)	Loss_d 0.587 (0.589)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.36 (  0.34)
Test: [  26/  26]	Loss 0.583 (0.588)	test_acc   0.63 (  0.63)	test_minacc   0.78 (  0.71)	test_majacc   0.60 (  0.61)	Loss_d 0.583 (0.588)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.78 (  0.71)	test_majacc_d   0.60 (  0.61)	test_corr_d   0.30 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.71it/s]
Test: [  0/  1]	Loss 0.845 (0.845)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.64 (  0.64)	Loss_d 0.845 (0.845)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.845 (0.845)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.64 (  0.64)	Loss_d 0.845 (0.845)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.12 (  0.12)
Overall Timing[ 30/  1]	epoch_time 0.0357 (0.0369)	validation_time 0.0003 (0.0006)	train_time 0.0353 (0.0361)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6270000140666961, 0.5740000009536743)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 19%|#9        | 5/26 [00:00<00:01, 20.63it/s] 35%|###4      | 9/26 [00:00<00:00, 27.87it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.61it/s] 92%|#########2| 24/26 [00:00<00:00, 37.37it/s]100%|##########| 26/26 [00:00<00:00, 30.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.002 (0.001)	train_nll   0.53 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  24.08 ( 24.08)	train_acc   0.74 (  0.66)	train_minacc   0.65 (  0.67)	train_majacc   0.76 (  0.66)	train_corr   0.00 (  0.00)	l1 4.2611 (4.5690)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.08it/s] 27%|##6       | 7/26 [00:00<00:00, 33.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.83it/s] 50%|#####     | 13/26 [00:00<00:00, 44.61it/s] 69%|######9   | 18/26 [00:00<00:00, 45.19it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.19it/s] 92%|#########2| 24/26 [00:00<00:00, 49.52it/s]100%|##########| 26/26 [00:00<00:00, 41.20it/s]
Test: [   0/  26]	Loss 0.533 (0.533)	test_acc   0.74 (  0.74)	test_minacc   0.57 (  0.57)	test_majacc   0.78 (  0.78)	Loss_d 0.533 (0.533)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.55 (  0.55)
Test: [  10/  26]	Loss 0.513 (0.532)	test_acc   0.77 (  0.74)	test_minacc   0.68 (  0.62)	test_majacc   0.79 (  0.76)	Loss_d 0.513 (0.532)	test_acc_d   0.77 (  0.74)	test_minacc_d   0.68 (  0.62)	test_majacc_d   0.79 (  0.76)	test_corr_d   0.55 (  0.52)
Test: [  20/  26]	Loss 0.545 (0.538)	test_acc   0.72 (  0.74)	test_minacc   0.58 (  0.61)	test_majacc   0.74 (  0.76)	Loss_d 0.545 (0.538)	test_acc_d   0.72 (  0.74)	test_minacc_d   0.58 (  0.61)	test_majacc_d   0.74 (  0.76)	test_corr_d   0.53 (  0.52)
Test: [  26/  26]	Loss 0.524 (0.537)	test_acc   0.75 (  0.74)	test_minacc   0.68 (  0.61)	test_majacc   0.76 (  0.76)	Loss_d 0.524 (0.537)	test_acc_d   0.75 (  0.74)	test_minacc_d   0.68 (  0.61)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.49 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.42it/s]
Test: [  0/  1]	Loss 0.901 (0.901)	test_acc   0.42 (  0.42)	test_minacc   0.38 (  0.38)	test_majacc   0.79 (  0.79)	Loss_d 0.901 (0.901)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 0.901 (0.901)	test_acc   0.42 (  0.42)	test_minacc   0.38 (  0.38)	test_majacc   0.79 (  0.79)	Loss_d 0.901 (0.901)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.32 (  0.32)
Overall Timing[ 31/  1]	epoch_time 0.0340 (0.0368)	validation_time 0.0003 (0.0005)	train_time 0.0336 (0.0360)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.7369000298976898, 0.42000001668930054)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.40it/s] 19%|#9        | 5/26 [00:00<00:00, 24.64it/s] 35%|###4      | 9/26 [00:00<00:00, 30.87it/s] 50%|#####     | 13/26 [00:00<00:00, 33.85it/s] 65%|######5   | 17/26 [00:00<00:00, 35.88it/s] 85%|########4 | 22/26 [00:00<00:00, 37.64it/s]100%|##########| 26/26 [00:00<00:00, 32.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.001)	train_nll   0.58 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.08 ( 24.08)	train_acc   0.62 (  0.69)	train_minacc   0.78 (  0.68)	train_majacc   0.60 (  0.70)	train_corr   0.00 (  0.00)	l1 4.2653 (4.2522)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.09it/s] 27%|##6       | 7/26 [00:00<00:00, 34.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.60it/s] 50%|#####     | 13/26 [00:00<00:00, 39.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.48it/s] 96%|#########6| 25/26 [00:00<00:00, 46.62it/s]100%|##########| 26/26 [00:00<00:00, 38.31it/s]
Test: [   0/  26]	Loss 0.556 (0.556)	test_acc   0.68 (  0.68)	test_minacc   0.70 (  0.70)	test_majacc   0.68 (  0.68)	Loss_d 0.556 (0.556)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.44 (  0.44)
Test: [  10/  26]	Loss 0.534 (0.555)	test_acc   0.71 (  0.68)	test_minacc   0.80 (  0.76)	test_majacc   0.69 (  0.67)	Loss_d 0.534 (0.555)	test_acc_d   0.71 (  0.68)	test_minacc_d   0.80 (  0.76)	test_majacc_d   0.69 (  0.67)	test_corr_d   0.46 (  0.42)
Test: [  20/  26]	Loss 0.572 (0.560)	test_acc   0.66 (  0.67)	test_minacc   0.68 (  0.74)	test_majacc   0.65 (  0.66)	Loss_d 0.572 (0.560)	test_acc_d   0.66 (  0.67)	test_minacc_d   0.68 (  0.74)	test_majacc_d   0.65 (  0.66)	test_corr_d   0.42 (  0.42)
Test: [  26/  26]	Loss 0.561 (0.560)	test_acc   0.62 (  0.67)	test_minacc   0.78 (  0.74)	test_majacc   0.60 (  0.66)	Loss_d 0.561 (0.560)	test_acc_d   0.62 (  0.67)	test_minacc_d   0.78 (  0.74)	test_majacc_d   0.60 (  0.66)	test_corr_d   0.36 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.62it/s]
Test: [  0/  1]	Loss 0.819 (0.819)	test_acc   0.55 (  0.55)	test_minacc   0.53 (  0.53)	test_majacc   0.74 (  0.74)	Loss_d 0.819 (0.819)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.819 (0.819)	test_acc   0.55 (  0.55)	test_minacc   0.53 (  0.53)	test_majacc   0.74 (  0.74)	Loss_d 0.819 (0.819)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.15 (  0.15)
Overall Timing[ 32/  1]	epoch_time 0.0357 (0.0367)	validation_time 0.0004 (0.0005)	train_time 0.0353 (0.0360)
record: (train_acc, test_acc) (0.6481000179052353, 0.5879999995231628)
last accs (train_acc, test_acc) (0.6717000251412392, 0.5509999990463257)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.89it/s] 19%|#9        | 5/26 [00:00<00:00, 22.07it/s] 35%|###4      | 9/26 [00:00<00:00, 29.02it/s] 50%|#####     | 13/26 [00:00<00:00, 32.59it/s] 69%|######9   | 18/26 [00:00<00:00, 35.60it/s] 88%|########8 | 23/26 [00:00<00:00, 37.26it/s]100%|##########| 26/26 [00:00<00:00, 30.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.001)	train_nll   0.58 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  24.09 ( 24.09)	train_acc   0.58 (  0.66)	train_minacc   0.81 (  0.73)	train_majacc   0.54 (  0.65)	train_corr   0.00 (  0.00)	l1 4.5994 (4.3729)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.72it/s] 27%|##6       | 7/26 [00:00<00:00, 29.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.83it/s] 50%|#####     | 13/26 [00:00<00:00, 38.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.15it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.15it/s] 96%|#########6| 25/26 [00:00<00:00, 46.03it/s]100%|##########| 26/26 [00:00<00:00, 36.91it/s]
Test: [   0/  26]	Loss 0.582 (0.582)	test_acc   0.62 (  0.62)	test_minacc   0.67 (  0.67)	test_majacc   0.61 (  0.61)	Loss_d 0.582 (0.582)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.545 (0.573)	test_acc   0.66 (  0.63)	test_minacc   0.78 (  0.75)	test_majacc   0.64 (  0.61)	Loss_d 0.545 (0.573)	test_acc_d   0.66 (  0.63)	test_minacc_d   0.78 (  0.75)	test_majacc_d   0.64 (  0.61)	test_corr_d   0.40 (  0.35)
Test: [  20/  26]	Loss 0.585 (0.576)	test_acc   0.60 (  0.63)	test_minacc   0.68 (  0.74)	test_majacc   0.59 (  0.61)	Loss_d 0.585 (0.576)	test_acc_d   0.60 (  0.63)	test_minacc_d   0.68 (  0.74)	test_majacc_d   0.59 (  0.61)	test_corr_d   0.36 (  0.35)
Test: [  26/  26]	Loss 0.576 (0.575)	test_acc   0.58 (  0.63)	test_minacc   0.81 (  0.74)	test_majacc   0.54 (  0.61)	Loss_d 0.576 (0.575)	test_acc_d   0.58 (  0.63)	test_minacc_d   0.81 (  0.74)	test_majacc_d   0.54 (  0.61)	test_corr_d   0.29 (  0.35)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.33it/s]
Test: [  0/  1]	Loss 0.846 (0.846)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.68 (  0.68)	Loss_d 0.846 (0.846)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.846 (0.846)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.68 (  0.68)	Loss_d 0.846 (0.846)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.10 (  0.10)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/129/checkpoints/model_best.pth
Overall Timing[ 33/  1]	epoch_time 0.0365 (0.0367)	validation_time 0.0004 (0.0005)	train_time 0.0361 (0.0360)
record: (train_acc, test_acc) (0.6270000112652778, 0.6010000109672546)
last accs (train_acc, test_acc) (0.6270000112652778, 0.6010000109672546)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 19%|#9        | 5/26 [00:00<00:01, 20.42it/s] 35%|###4      | 9/26 [00:00<00:00, 26.56it/s] 50%|#####     | 13/26 [00:00<00:00, 31.12it/s] 69%|######9   | 18/26 [00:00<00:00, 34.42it/s] 85%|########4 | 22/26 [00:00<00:00, 36.08it/s]100%|##########| 26/26 [00:00<00:00, 29.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.001)	train_nll   0.56 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  24.09 ( 24.09)	train_acc   0.62 (  0.65)	train_minacc   0.78 (  0.71)	train_majacc   0.59 (  0.64)	train_corr   0.00 (  0.00)	l1 4.3330 (4.5676)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.35it/s] 27%|##6       | 7/26 [00:00<00:00, 30.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.02it/s] 50%|#####     | 13/26 [00:00<00:00, 38.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.65it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.65it/s] 96%|#########6| 25/26 [00:00<00:00, 46.69it/s]100%|##########| 26/26 [00:00<00:00, 37.43it/s]
Test: [   0/  26]	Loss 0.605 (0.605)	test_acc   0.65 (  0.65)	test_minacc   0.67 (  0.67)	test_majacc   0.64 (  0.64)	Loss_d 0.605 (0.605)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.579 (0.606)	test_acc   0.66 (  0.64)	test_minacc   0.76 (  0.74)	test_majacc   0.64 (  0.62)	Loss_d 0.579 (0.606)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.64 (  0.62)	test_corr_d   0.38 (  0.33)
Test: [  20/  26]	Loss 0.621 (0.608)	test_acc   0.62 (  0.63)	test_minacc   0.68 (  0.74)	test_majacc   0.61 (  0.62)	Loss_d 0.621 (0.608)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.68 (  0.74)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.33 (  0.33)
Test: [  26/  26]	Loss 0.599 (0.608)	test_acc   0.62 (  0.63)	test_minacc   0.78 (  0.74)	test_majacc   0.59 (  0.61)	Loss_d 0.599 (0.608)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.78 (  0.74)	test_majacc_d   0.59 (  0.61)	test_corr_d   0.27 (  0.33)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.94it/s]
Test: [  0/  1]	Loss 0.867 (0.867)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.67 (  0.67)	Loss_d 0.867 (0.867)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.867 (0.867)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.67 (  0.67)	Loss_d 0.867 (0.867)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.06 (  0.06)
Overall Timing[ 34/  1]	epoch_time 0.0362 (0.0367)	validation_time 0.0004 (0.0005)	train_time 0.0358 (0.0360)
record: (train_acc, test_acc) (0.6270000112652778, 0.6010000109672546)
last accs (train_acc, test_acc) (0.6335000075697899, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.46it/s] 19%|#9        | 5/26 [00:00<00:00, 25.96it/s] 35%|###4      | 9/26 [00:00<00:00, 31.20it/s] 50%|#####     | 13/26 [00:00<00:00, 34.38it/s] 65%|######5   | 17/26 [00:00<00:00, 36.27it/s] 81%|########  | 21/26 [00:00<00:00, 37.50it/s] 96%|#########6| 25/26 [00:00<00:00, 38.20it/s]100%|##########| 26/26 [00:00<00:00, 32.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.005 (0.002)	train_nll   0.52 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  24.11 ( 24.10)	train_acc   0.67 (  0.65)	train_minacc   0.84 (  0.72)	train_majacc   0.64 (  0.63)	train_corr   0.00 (  0.00)	l1 4.1654 (4.5203)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.31it/s] 35%|###4      | 9/26 [00:00<00:00, 39.31it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.31it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.77it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.77it/s] 81%|########  | 21/26 [00:00<00:00, 48.22it/s]100%|##########| 26/26 [00:00<00:00, 42.58it/s]
Test: [   0/  26]	Loss 0.531 (0.531)	test_acc   0.67 (  0.67)	test_minacc   0.72 (  0.72)	test_majacc   0.66 (  0.66)	Loss_d 0.531 (0.531)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.46 (  0.46)
Test: [  10/  26]	Loss 0.533 (0.547)	test_acc   0.67 (  0.65)	test_minacc   0.83 (  0.76)	test_majacc   0.64 (  0.62)	Loss_d 0.533 (0.547)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.83 (  0.76)	test_majacc_d   0.64 (  0.62)	test_corr_d   0.45 (  0.43)
Test: [  20/  26]	Loss 0.568 (0.546)	test_acc   0.63 (  0.65)	test_minacc   0.75 (  0.76)	test_majacc   0.61 (  0.63)	Loss_d 0.568 (0.546)	test_acc_d   0.63 (  0.65)	test_minacc_d   0.75 (  0.76)	test_majacc_d   0.61 (  0.63)	test_corr_d   0.42 (  0.44)
Test: [  26/  26]	Loss 0.535 (0.546)	test_acc   0.65 (  0.65)	test_minacc   0.84 (  0.77)	test_majacc   0.62 (  0.63)	Loss_d 0.535 (0.546)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.84 (  0.77)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.41 (  0.43)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.34it/s]
Test: [  0/  1]	Loss 0.822 (0.822)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.68 (  0.68)	Loss_d 0.822 (0.822)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 0.822 (0.822)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.68 (  0.68)	Loss_d 0.822 (0.822)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.19 (  0.19)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/129/checkpoints/model_best.pth
Overall Timing[ 35/  1]	epoch_time 0.0352 (0.0367)	validation_time 0.0003 (0.0005)	train_time 0.0348 (0.0360)
record: (train_acc, test_acc) (0.6468000182509422, 0.6080000400543213)
last accs (train_acc, test_acc) (0.6468000182509422, 0.6080000400543213)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 19%|#9        | 5/26 [00:00<00:00, 23.99it/s] 35%|###4      | 9/26 [00:00<00:00, 30.42it/s] 50%|#####     | 13/26 [00:00<00:00, 33.31it/s] 65%|######5   | 17/26 [00:00<00:00, 35.18it/s] 81%|########  | 21/26 [00:00<00:00, 36.71it/s]100%|##########| 26/26 [00:00<00:00, 38.62it/s]100%|##########| 26/26 [00:00<00:00, 31.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.001 (0.001)	train_nll   0.54 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.12 ( 24.11)	train_acc   0.62 (  0.61)	train_minacc   0.76 (  0.76)	train_majacc   0.59 (  0.58)	train_corr   0.00 (  0.00)	l1 4.2914 (4.4249)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.96it/s] 31%|###       | 8/26 [00:00<00:00, 34.39it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.39it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.89it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.89it/s]100%|##########| 26/26 [00:00<00:00, 49.59it/s]100%|##########| 26/26 [00:00<00:00, 40.78it/s]
Test: [   0/  26]	Loss 0.550 (0.550)	test_acc   0.66 (  0.66)	test_minacc   0.68 (  0.68)	test_majacc   0.65 (  0.65)	Loss_d 0.550 (0.550)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.45 (  0.45)
Test: [  10/  26]	Loss 0.550 (0.560)	test_acc   0.64 (  0.63)	test_minacc   0.73 (  0.71)	test_majacc   0.63 (  0.62)	Loss_d 0.550 (0.560)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.73 (  0.71)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.46 (  0.43)
Test: [  20/  26]	Loss 0.570 (0.555)	test_acc   0.62 (  0.64)	test_minacc   0.73 (  0.72)	test_majacc   0.60 (  0.62)	Loss_d 0.570 (0.555)	test_acc_d   0.62 (  0.64)	test_minacc_d   0.73 (  0.72)	test_majacc_d   0.60 (  0.62)	test_corr_d   0.43 (  0.44)
Test: [  26/  26]	Loss 0.548 (0.557)	test_acc   0.63 (  0.63)	test_minacc   0.78 (  0.72)	test_majacc   0.60 (  0.62)	Loss_d 0.548 (0.557)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.78 (  0.72)	test_majacc_d   0.60 (  0.62)	test_corr_d   0.40 (  0.43)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.87it/s]
Test: [  0/  1]	Loss 0.904 (0.904)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.62 (  0.62)	Loss_d 0.904 (0.904)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 0.904 (0.904)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.62 (  0.62)	Loss_d 0.904 (0.904)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.19 (  0.19)
Overall Timing[ 36/  1]	epoch_time 0.0335 (0.0366)	validation_time 0.0003 (0.0005)	train_time 0.0331 (0.0359)
record: (train_acc, test_acc) (0.6468000182509422, 0.6080000400543213)
last accs (train_acc, test_acc) (0.6329000079035759, 0.597000002861023)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.51it/s] 19%|#9        | 5/26 [00:00<00:00, 26.20it/s] 38%|###8      | 10/26 [00:00<00:00, 33.30it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.12it/s] 88%|########8 | 23/26 [00:00<00:00, 37.77it/s]100%|##########| 26/26 [00:00<00:00, 32.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.57 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.13 ( 24.12)	train_acc   0.60 (  0.63)	train_minacc   0.78 (  0.75)	train_majacc   0.56 (  0.60)	train_corr   0.00 (  0.00)	l1 4.0276 (4.0962)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.97it/s] 27%|##6       | 7/26 [00:00<00:00, 35.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.33it/s] 50%|#####     | 13/26 [00:00<00:00, 41.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.52it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.52it/s] 92%|#########2| 24/26 [00:00<00:00, 47.57it/s]100%|##########| 26/26 [00:00<00:00, 37.91it/s]
Test: [   0/  26]	Loss 0.560 (0.560)	test_acc   0.67 (  0.67)	test_minacc   0.72 (  0.72)	test_majacc   0.65 (  0.65)	Loss_d 0.560 (0.560)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.559 (0.568)	test_acc   0.65 (  0.64)	test_minacc   0.78 (  0.77)	test_majacc   0.63 (  0.61)	Loss_d 0.559 (0.568)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.78 (  0.77)	test_majacc_d   0.63 (  0.61)	test_corr_d   0.41 (  0.38)
Test: [  20/  26]	Loss 0.585 (0.565)	test_acc   0.61 (  0.63)	test_minacc   0.76 (  0.77)	test_majacc   0.58 (  0.61)	Loss_d 0.585 (0.565)	test_acc_d   0.61 (  0.63)	test_minacc_d   0.76 (  0.77)	test_majacc_d   0.58 (  0.61)	test_corr_d   0.38 (  0.39)
Test: [  26/  26]	Loss 0.572 (0.568)	test_acc   0.59 (  0.63)	test_minacc   0.78 (  0.76)	test_majacc   0.56 (  0.61)	Loss_d 0.572 (0.568)	test_acc_d   0.59 (  0.63)	test_minacc_d   0.78 (  0.76)	test_majacc_d   0.56 (  0.61)	test_corr_d   0.34 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.85it/s]
Test: [  0/  1]	Loss 0.826 (0.826)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.62 (  0.62)	Loss_d 0.826 (0.826)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.826 (0.826)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.62 (  0.62)	Loss_d 0.826 (0.826)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.10 (  0.10)
Overall Timing[ 37/  1]	epoch_time 0.0355 (0.0366)	validation_time 0.0004 (0.0005)	train_time 0.0351 (0.0359)
record: (train_acc, test_acc) (0.6468000182509422, 0.6080000400543213)
last accs (train_acc, test_acc) (0.630600016951561, 0.6040000319480896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 19%|#9        | 5/26 [00:00<00:00, 24.85it/s] 38%|###8      | 10/26 [00:00<00:00, 32.50it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.79it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.69it/s] 92%|#########2| 24/26 [00:00<00:00, 38.30it/s]100%|##########| 26/26 [00:00<00:00, 32.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.001 (0.001)	train_nll   0.54 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  24.13 ( 24.13)	train_acc   0.62 (  0.63)	train_minacc   0.76 (  0.75)	train_majacc   0.60 (  0.61)	train_corr   0.00 (  0.00)	l1 4.1982 (4.1501)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 27%|##6       | 7/26 [00:00<00:00, 32.85it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.85it/s] 46%|####6     | 12/26 [00:00<00:00, 38.09it/s] 69%|######9   | 18/26 [00:00<00:00, 45.20it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.20it/s] 92%|#########2| 24/26 [00:00<00:00, 45.85it/s]100%|##########| 26/26 [00:00<00:00, 38.48it/s]
Test: [   0/  26]	Loss 0.541 (0.541)	test_acc   0.64 (  0.64)	test_minacc   0.68 (  0.68)	test_majacc   0.63 (  0.63)	Loss_d 0.541 (0.541)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.542 (0.543)	test_acc   0.63 (  0.64)	test_minacc   0.68 (  0.72)	test_majacc   0.62 (  0.63)	Loss_d 0.542 (0.543)	test_acc_d   0.63 (  0.64)	test_minacc_d   0.68 (  0.72)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.49 (  0.48)
Test: [  20/  26]	Loss 0.559 (0.538)	test_acc   0.65 (  0.64)	test_minacc   0.73 (  0.73)	test_majacc   0.63 (  0.63)	Loss_d 0.559 (0.538)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.47 (  0.48)
Test: [  26/  26]	Loss 0.546 (0.540)	test_acc   0.62 (  0.64)	test_minacc   0.76 (  0.73)	test_majacc   0.60 (  0.63)	Loss_d 0.546 (0.540)	test_acc_d   0.62 (  0.64)	test_minacc_d   0.76 (  0.73)	test_majacc_d   0.60 (  0.63)	test_corr_d   0.46 (  0.48)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.45it/s]
Test: [  0/  1]	Loss 0.900 (0.900)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.68 (  0.68)	Loss_d 0.900 (0.900)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 0.900 (0.900)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.68 (  0.68)	Loss_d 0.900 (0.900)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.23 (  0.23)
Overall Timing[ 38/  1]	epoch_time 0.0354 (0.0365)	validation_time 0.0004 (0.0005)	train_time 0.0350 (0.0359)
record: (train_acc, test_acc) (0.6468000182509422, 0.6080000400543213)
last accs (train_acc, test_acc) (0.6429000115394592, 0.593000054359436)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.77it/s] 19%|#9        | 5/26 [00:00<00:00, 25.75it/s] 35%|###4      | 9/26 [00:00<00:00, 31.05it/s] 50%|#####     | 13/26 [00:00<00:00, 33.93it/s] 65%|######5   | 17/26 [00:00<00:00, 35.77it/s] 85%|########4 | 22/26 [00:00<00:00, 37.97it/s]100%|##########| 26/26 [00:00<00:00, 32.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.001)	train_nll   0.58 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  24.14 ( 24.14)	train_acc   0.57 (  0.61)	train_minacc   0.78 (  0.77)	train_majacc   0.54 (  0.59)	train_corr   0.00 (  0.00)	l1 4.3120 (4.4390)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.55it/s] 27%|##6       | 7/26 [00:00<00:00, 32.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.57it/s] 50%|#####     | 13/26 [00:00<00:00, 43.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.97it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.97it/s] 96%|#########6| 25/26 [00:00<00:00, 49.44it/s]100%|##########| 26/26 [00:00<00:00, 40.08it/s]
Test: [   0/  26]	Loss 0.559 (0.559)	test_acc   0.62 (  0.62)	test_minacc   0.74 (  0.74)	test_majacc   0.60 (  0.60)	Loss_d 0.559 (0.559)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.44 (  0.44)
Test: [  10/  26]	Loss 0.557 (0.558)	test_acc   0.62 (  0.62)	test_minacc   0.75 (  0.76)	test_majacc   0.60 (  0.59)	Loss_d 0.557 (0.558)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.75 (  0.76)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.43 (  0.41)
Test: [  20/  26]	Loss 0.568 (0.555)	test_acc   0.62 (  0.62)	test_minacc   0.76 (  0.78)	test_majacc   0.59 (  0.60)	Loss_d 0.568 (0.555)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.76 (  0.78)	test_majacc_d   0.59 (  0.60)	test_corr_d   0.41 (  0.42)
Test: [  26/  26]	Loss 0.578 (0.558)	test_acc   0.58 (  0.62)	test_minacc   0.76 (  0.77)	test_majacc   0.54 (  0.59)	Loss_d 0.578 (0.558)	test_acc_d   0.58 (  0.62)	test_minacc_d   0.76 (  0.77)	test_majacc_d   0.54 (  0.59)	test_corr_d   0.38 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.56it/s]
Test: [  0/  1]	Loss 0.841 (0.841)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.63 (  0.63)	Loss_d 0.841 (0.841)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.841 (0.841)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.63 (  0.63)	Loss_d 0.841 (0.841)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.15 (  0.15)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/129/checkpoints/model_best.pth
Overall Timing[ 39/  1]	epoch_time 0.0350 (0.0365)	validation_time 0.0003 (0.0005)	train_time 0.0346 (0.0358)
record: (train_acc, test_acc) (0.6186000113487243, 0.625)
last accs (train_acc, test_acc) (0.6186000113487243, 0.625)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.44it/s] 19%|#9        | 5/26 [00:00<00:00, 24.05it/s] 38%|###8      | 10/26 [00:00<00:00, 31.94it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.46it/s] 88%|########8 | 23/26 [00:00<00:00, 37.04it/s]100%|##########| 26/26 [00:00<00:00, 31.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.59 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.14 ( 24.14)	train_acc   0.56 (  0.61)	train_minacc   0.76 (  0.72)	train_majacc   0.53 (  0.59)	train_corr   0.00 (  0.00)	l1 4.3405 (4.4142)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.58it/s] 23%|##3       | 6/26 [00:00<00:00, 28.47it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.47it/s] 46%|####6     | 12/26 [00:00<00:00, 37.48it/s] 69%|######9   | 18/26 [00:00<00:00, 44.15it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.15it/s] 92%|#########2| 24/26 [00:00<00:00, 45.42it/s]100%|##########| 26/26 [00:00<00:00, 38.11it/s]
Test: [   0/  26]	Loss 0.572 (0.572)	test_acc   0.61 (  0.61)	test_minacc   0.72 (  0.72)	test_majacc   0.58 (  0.58)	Loss_d 0.572 (0.572)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.564 (0.570)	test_acc   0.61 (  0.60)	test_minacc   0.75 (  0.76)	test_majacc   0.59 (  0.58)	Loss_d 0.564 (0.570)	test_acc_d   0.61 (  0.60)	test_minacc_d   0.75 (  0.76)	test_majacc_d   0.59 (  0.58)	test_corr_d   0.41 (  0.40)
Test: [  20/  26]	Loss 0.571 (0.566)	test_acc   0.60 (  0.61)	test_minacc   0.75 (  0.77)	test_majacc   0.57 (  0.58)	Loss_d 0.571 (0.566)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.75 (  0.77)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.41 (  0.40)
Test: [  26/  26]	Loss 0.590 (0.568)	test_acc   0.56 (  0.61)	test_minacc   0.76 (  0.76)	test_majacc   0.53 (  0.58)	Loss_d 0.590 (0.568)	test_acc_d   0.56 (  0.61)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.53 (  0.58)	test_corr_d   0.36 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.12it/s]
Test: [  0/  1]	Loss 0.839 (0.839)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.59 (  0.59)	Loss_d 0.839 (0.839)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.839 (0.839)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.59 (  0.59)	Loss_d 0.839 (0.839)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.15 (  0.15)
Overall Timing[ 40/  1]	epoch_time 0.0342 (0.0364)	validation_time 0.0003 (0.0005)	train_time 0.0338 (0.0358)
record: (train_acc, test_acc) (0.6186000113487243, 0.625)
last accs (train_acc, test_acc) (0.6074000079035758, 0.6200000047683716)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.66it/s] 19%|#9        | 5/26 [00:00<00:01, 17.95it/s] 35%|###4      | 9/26 [00:00<00:00, 25.56it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.70it/s] 88%|########8 | 23/26 [00:00<00:00, 36.23it/s]100%|##########| 26/26 [00:00<00:00, 28.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  24.14 ( 24.14)	train_acc   0.56 (  0.60)	train_minacc   0.73 (  0.76)	train_majacc   0.53 (  0.57)	train_corr   0.00 (  0.00)	l1 4.3388 (4.3665)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.83it/s] 23%|##3       | 6/26 [00:00<00:00, 31.64it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.64it/s] 46%|####6     | 12/26 [00:00<00:00, 44.02it/s] 65%|######5   | 17/26 [00:00<00:00, 44.36it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.36it/s] 88%|########8 | 23/26 [00:00<00:00, 48.97it/s]100%|##########| 26/26 [00:00<00:00, 39.31it/s]
Test: [   0/  26]	Loss 0.566 (0.566)	test_acc   0.62 (  0.62)	test_minacc   0.70 (  0.70)	test_majacc   0.60 (  0.60)	Loss_d 0.566 (0.566)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.554 (0.563)	test_acc   0.62 (  0.61)	test_minacc   0.73 (  0.73)	test_majacc   0.60 (  0.59)	Loss_d 0.554 (0.563)	test_acc_d   0.62 (  0.61)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.43 (  0.42)
Test: [  20/  26]	Loss 0.558 (0.557)	test_acc   0.62 (  0.62)	test_minacc   0.75 (  0.74)	test_majacc   0.59 (  0.60)	Loss_d 0.558 (0.557)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.75 (  0.74)	test_majacc_d   0.59 (  0.60)	test_corr_d   0.43 (  0.42)
Test: [  26/  26]	Loss 0.578 (0.560)	test_acc   0.57 (  0.61)	test_minacc   0.73 (  0.74)	test_majacc   0.54 (  0.59)	Loss_d 0.578 (0.560)	test_acc_d   0.57 (  0.61)	test_minacc_d   0.73 (  0.74)	test_majacc_d   0.54 (  0.59)	test_corr_d   0.38 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.37it/s]
Test: [  0/  1]	Loss 0.877 (0.877)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.60 (  0.60)	Loss_d 0.877 (0.877)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.877 (0.877)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.60 (  0.60)	Loss_d 0.877 (0.877)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.18 (  0.18)
Overall Timing[ 41/  1]	epoch_time 0.0352 (0.0364)	validation_time 0.0003 (0.0005)	train_time 0.0349 (0.0357)
record: (train_acc, test_acc) (0.6186000113487243, 0.625)
last accs (train_acc, test_acc) (0.6124000113010406, 0.6030000448226929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.67it/s] 19%|#9        | 5/26 [00:00<00:00, 26.82it/s] 38%|###8      | 10/26 [00:00<00:00, 34.07it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.16it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.92it/s] 92%|#########2| 24/26 [00:00<00:00, 39.23it/s]100%|##########| 26/26 [00:00<00:00, 33.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  24.15 ( 24.15)	train_acc   0.56 (  0.60)	train_minacc   0.76 (  0.74)	train_majacc   0.53 (  0.58)	train_corr   0.00 (  0.00)	l1 4.3440 (4.4222)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.54it/s] 31%|###       | 8/26 [00:00<00:00, 39.52it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.52it/s] 50%|#####     | 13/26 [00:00<00:00, 40.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.13it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.13it/s] 96%|#########6| 25/26 [00:00<00:00, 47.36it/s]100%|##########| 26/26 [00:00<00:00, 40.37it/s]
Test: [   0/  26]	Loss 0.570 (0.570)	test_acc   0.62 (  0.62)	test_minacc   0.70 (  0.70)	test_majacc   0.60 (  0.60)	Loss_d 0.570 (0.570)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.558 (0.568)	test_acc   0.61 (  0.60)	test_minacc   0.73 (  0.73)	test_majacc   0.59 (  0.58)	Loss_d 0.558 (0.568)	test_acc_d   0.61 (  0.60)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.59 (  0.58)	test_corr_d   0.43 (  0.41)
Test: [  20/  26]	Loss 0.560 (0.561)	test_acc   0.62 (  0.61)	test_minacc   0.73 (  0.74)	test_majacc   0.60 (  0.59)	Loss_d 0.560 (0.561)	test_acc_d   0.62 (  0.61)	test_minacc_d   0.73 (  0.74)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.43 (  0.42)
Test: [  26/  26]	Loss 0.577 (0.562)	test_acc   0.57 (  0.61)	test_minacc   0.76 (  0.74)	test_majacc   0.54 (  0.59)	Loss_d 0.577 (0.562)	test_acc_d   0.57 (  0.61)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.54 (  0.59)	test_corr_d   0.38 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.81it/s]
Test: [  0/  1]	Loss 0.879 (0.879)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.59 (  0.59)	Loss_d 0.879 (0.879)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 0.879 (0.879)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.59 (  0.59)	Loss_d 0.879 (0.879)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.19 (  0.19)
Overall Timing[ 42/  1]	epoch_time 0.0352 (0.0364)	validation_time 0.0003 (0.0005)	train_time 0.0349 (0.0357)
record: (train_acc, test_acc) (0.6186000113487243, 0.625)
last accs (train_acc, test_acc) (0.6104000137448311, 0.6010000109672546)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.44it/s] 19%|#9        | 5/26 [00:00<00:00, 26.48it/s] 35%|###4      | 9/26 [00:00<00:00, 32.48it/s] 50%|#####     | 13/26 [00:00<00:00, 34.69it/s] 65%|######5   | 17/26 [00:00<00:00, 36.08it/s] 81%|########  | 21/26 [00:00<00:00, 36.84it/s]100%|##########| 26/26 [00:00<00:00, 38.48it/s]100%|##########| 26/26 [00:00<00:00, 32.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  24.15 ( 24.15)	train_acc   0.56 (  0.60)	train_minacc   0.76 (  0.75)	train_majacc   0.53 (  0.58)	train_corr   0.00 (  0.00)	l1 4.3067 (4.3262)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.87it/s] 27%|##6       | 7/26 [00:00<00:00, 30.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.26it/s] 46%|####6     | 12/26 [00:00<00:00, 35.67it/s] 69%|######9   | 18/26 [00:00<00:00, 43.21it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.21it/s] 92%|#########2| 24/26 [00:00<00:00, 44.64it/s]100%|##########| 26/26 [00:00<00:00, 36.12it/s]
Test: [   0/  26]	Loss 0.572 (0.572)	test_acc   0.62 (  0.62)	test_minacc   0.70 (  0.70)	test_majacc   0.60 (  0.60)	Loss_d 0.572 (0.572)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.560 (0.571)	test_acc   0.61 (  0.60)	test_minacc   0.73 (  0.73)	test_majacc   0.58 (  0.58)	Loss_d 0.560 (0.571)	test_acc_d   0.61 (  0.60)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.42 (  0.41)
Test: [  20/  26]	Loss 0.558 (0.562)	test_acc   0.62 (  0.61)	test_minacc   0.73 (  0.74)	test_majacc   0.60 (  0.59)	Loss_d 0.558 (0.562)	test_acc_d   0.62 (  0.61)	test_minacc_d   0.73 (  0.74)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.43 (  0.42)
Test: [  26/  26]	Loss 0.577 (0.563)	test_acc   0.57 (  0.61)	test_minacc   0.76 (  0.74)	test_majacc   0.54 (  0.59)	Loss_d 0.577 (0.563)	test_acc_d   0.57 (  0.61)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.54 (  0.59)	test_corr_d   0.38 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.35it/s]
Test: [  0/  1]	Loss 0.880 (0.880)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.60 (  0.60)	Loss_d 0.880 (0.880)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 0.880 (0.880)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.60 (  0.60)	Loss_d 0.880 (0.880)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.19 (  0.19)
Overall Timing[ 43/  1]	epoch_time 0.0363 (0.0364)	validation_time 0.0004 (0.0005)	train_time 0.0359 (0.0357)
record: (train_acc, test_acc) (0.6186000113487243, 0.625)
last accs (train_acc, test_acc) (0.6103000056147575, 0.6130000352859497)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 19%|#9        | 5/26 [00:00<00:00, 24.29it/s] 35%|###4      | 9/26 [00:00<00:00, 30.53it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.85it/s] 92%|#########2| 24/26 [00:00<00:00, 38.16it/s]100%|##########| 26/26 [00:00<00:00, 32.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.15 ( 24.15)	train_acc   0.57 (  0.61)	train_minacc   0.76 (  0.72)	train_majacc   0.54 (  0.59)	train_corr   0.00 (  0.00)	l1 4.3195 (4.3489)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.45it/s] 27%|##6       | 7/26 [00:00<00:00, 35.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.64it/s] 50%|#####     | 13/26 [00:00<00:00, 41.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.93it/s] 96%|#########6| 25/26 [00:00<00:00, 47.70it/s]100%|##########| 26/26 [00:00<00:00, 39.92it/s]
Test: [   0/  26]	Loss 0.577 (0.577)	test_acc   0.61 (  0.61)	test_minacc   0.72 (  0.72)	test_majacc   0.58 (  0.58)	Loss_d 0.577 (0.577)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.40 (  0.40)
Test: [  10/  26]	Loss 0.566 (0.578)	test_acc   0.61 (  0.59)	test_minacc   0.76 (  0.74)	test_majacc   0.58 (  0.57)	Loss_d 0.566 (0.578)	test_acc_d   0.61 (  0.59)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.40 (  0.38)
Test: [  20/  26]	Loss 0.562 (0.568)	test_acc   0.62 (  0.61)	test_minacc   0.73 (  0.75)	test_majacc   0.60 (  0.58)	Loss_d 0.562 (0.568)	test_acc_d   0.62 (  0.61)	test_minacc_d   0.73 (  0.75)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.41 (  0.39)
Test: [  26/  26]	Loss 0.580 (0.569)	test_acc   0.57 (  0.61)	test_minacc   0.76 (  0.75)	test_majacc   0.54 (  0.58)	Loss_d 0.580 (0.569)	test_acc_d   0.57 (  0.61)	test_minacc_d   0.76 (  0.75)	test_majacc_d   0.54 (  0.58)	test_corr_d   0.37 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.58it/s]
Test: [  0/  1]	Loss 0.872 (0.872)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.60 (  0.60)	Loss_d 0.872 (0.872)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 0.872 (0.872)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.60 (  0.60)	Loss_d 0.872 (0.872)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.16 (  0.16)
Overall Timing[ 44/  1]	epoch_time 0.0346 (0.0363)	validation_time 0.0003 (0.0005)	train_time 0.0342 (0.0357)
record: (train_acc, test_acc) (0.6186000113487243, 0.625)
last accs (train_acc, test_acc) (0.6052000094056129, 0.6210000514984131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.03it/s] 19%|#9        | 5/26 [00:00<00:00, 24.79it/s] 35%|###4      | 9/26 [00:00<00:00, 30.54it/s] 50%|#####     | 13/26 [00:00<00:00, 33.47it/s] 69%|######9   | 18/26 [00:00<00:00, 36.93it/s] 88%|########8 | 23/26 [00:00<00:00, 38.44it/s]100%|##########| 26/26 [00:00<00:00, 32.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.57 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  24.15 ( 24.15)	train_acc   0.56 (  0.60)	train_minacc   0.76 (  0.76)	train_majacc   0.53 (  0.58)	train_corr   0.00 (  0.00)	l1 4.2338 (4.2901)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.05it/s] 27%|##6       | 7/26 [00:00<00:00, 31.58it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.58it/s] 50%|#####     | 13/26 [00:00<00:00, 38.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.82it/s] 96%|#########6| 25/26 [00:00<00:00, 45.18it/s]100%|##########| 26/26 [00:00<00:00, 37.64it/s]
Test: [   0/  26]	Loss 0.564 (0.564)	test_acc   0.62 (  0.62)	test_minacc   0.71 (  0.71)	test_majacc   0.60 (  0.60)	Loss_d 0.564 (0.564)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.44 (  0.44)
Test: [  10/  26]	Loss 0.557 (0.566)	test_acc   0.62 (  0.61)	test_minacc   0.73 (  0.73)	test_majacc   0.60 (  0.59)	Loss_d 0.557 (0.566)	test_acc_d   0.62 (  0.61)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.43 (  0.41)
Test: [  20/  26]	Loss 0.548 (0.556)	test_acc   0.64 (  0.62)	test_minacc   0.73 (  0.74)	test_majacc   0.62 (  0.60)	Loss_d 0.548 (0.556)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.73 (  0.74)	test_majacc_d   0.62 (  0.60)	test_corr_d   0.44 (  0.43)
Test: [  26/  26]	Loss 0.565 (0.557)	test_acc   0.57 (  0.62)	test_minacc   0.76 (  0.74)	test_majacc   0.54 (  0.59)	Loss_d 0.565 (0.557)	test_acc_d   0.57 (  0.62)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.54 (  0.59)	test_corr_d   0.40 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.42it/s]
Test: [  0/  1]	Loss 0.884 (0.884)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.64 (  0.64)	Loss_d 0.884 (0.884)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 0.884 (0.884)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.64 (  0.64)	Loss_d 0.884 (0.884)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.19 (  0.19)
Overall Timing[ 45/  1]	epoch_time 0.0358 (0.0363)	validation_time 0.0003 (0.0005)	train_time 0.0355 (0.0357)
record: (train_acc, test_acc) (0.6186000113487243, 0.625)
last accs (train_acc, test_acc) (0.6162000101208687, 0.612000048160553)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.65it/s] 19%|#9        | 5/26 [00:00<00:01, 20.02it/s] 35%|###4      | 9/26 [00:00<00:00, 26.03it/s] 50%|#####     | 13/26 [00:00<00:00, 30.60it/s] 69%|######9   | 18/26 [00:00<00:00, 34.44it/s] 85%|########4 | 22/26 [00:00<00:00, 35.98it/s]100%|##########| 26/26 [00:00<00:00, 29.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.60 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.16 ( 24.16)	train_acc   0.60 (  0.62)	train_minacc   0.78 (  0.68)	train_majacc   0.57 (  0.61)	train_corr   0.00 (  0.00)	l1 4.3344 (4.3323)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.36it/s] 27%|##6       | 7/26 [00:00<00:00, 33.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.11it/s] 50%|#####     | 13/26 [00:00<00:00, 40.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.68it/s] 96%|#########6| 25/26 [00:00<00:00, 47.42it/s]100%|##########| 26/26 [00:00<00:00, 39.00it/s]
Test: [   0/  26]	Loss 0.592 (0.592)	test_acc   0.61 (  0.61)	test_minacc   0.71 (  0.71)	test_majacc   0.58 (  0.58)	Loss_d 0.592 (0.592)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.583 (0.593)	test_acc   0.62 (  0.60)	test_minacc   0.66 (  0.72)	test_majacc   0.61 (  0.57)	Loss_d 0.583 (0.593)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.66 (  0.72)	test_majacc_d   0.61 (  0.57)	test_corr_d   0.40 (  0.39)
Test: [  20/  26]	Loss 0.577 (0.584)	test_acc   0.63 (  0.61)	test_minacc   0.73 (  0.74)	test_majacc   0.61 (  0.59)	Loss_d 0.577 (0.584)	test_acc_d   0.63 (  0.61)	test_minacc_d   0.73 (  0.74)	test_majacc_d   0.61 (  0.59)	test_corr_d   0.42 (  0.40)
Test: [  26/  26]	Loss 0.597 (0.584)	test_acc   0.60 (  0.61)	test_minacc   0.78 (  0.74)	test_majacc   0.57 (  0.59)	Loss_d 0.597 (0.584)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.78 (  0.74)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.39 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.10it/s]
Test: [  0/  1]	Loss 0.854 (0.854)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.64 (  0.64)	Loss_d 0.854 (0.854)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 0.854 (0.854)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.64 (  0.64)	Loss_d 0.854 (0.854)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.16 (  0.16)
Overall Timing[ 46/  1]	epoch_time 0.0353 (0.0363)	validation_time 0.0004 (0.0005)	train_time 0.0349 (0.0357)
record: (train_acc, test_acc) (0.6186000113487243, 0.625)
last accs (train_acc, test_acc) (0.6105000081062317, 0.5980000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.39it/s] 19%|#9        | 5/26 [00:00<00:01, 19.60it/s] 35%|###4      | 9/26 [00:00<00:00, 27.10it/s] 50%|#####     | 13/26 [00:00<00:00, 30.74it/s] 65%|######5   | 17/26 [00:00<00:00, 33.46it/s] 81%|########  | 21/26 [00:00<00:00, 35.47it/s] 96%|#########6| 25/26 [00:00<00:00, 36.71it/s]100%|##########| 26/26 [00:00<00:00, 29.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.16 ( 24.16)	train_acc   0.57 (  0.60)	train_minacc   0.76 (  0.75)	train_majacc   0.54 (  0.58)	train_corr   0.00 (  0.00)	l1 4.4227 (4.3796)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.20it/s] 23%|##3       | 6/26 [00:00<00:00, 26.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.76it/s] 42%|####2     | 11/26 [00:00<00:00, 34.90it/s] 65%|######5   | 17/26 [00:00<00:00, 40.12it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.12it/s] 88%|########8 | 23/26 [00:00<00:00, 45.59it/s]100%|##########| 26/26 [00:00<00:00, 35.89it/s]
Test: [   0/  26]	Loss 0.574 (0.574)	test_acc   0.60 (  0.60)	test_minacc   0.70 (  0.70)	test_majacc   0.58 (  0.58)	Loss_d 0.574 (0.574)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.569 (0.578)	test_acc   0.61 (  0.59)	test_minacc   0.71 (  0.72)	test_majacc   0.59 (  0.57)	Loss_d 0.569 (0.578)	test_acc_d   0.61 (  0.59)	test_minacc_d   0.71 (  0.72)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.40 (  0.39)
Test: [  20/  26]	Loss 0.553 (0.567)	test_acc   0.63 (  0.61)	test_minacc   0.73 (  0.73)	test_majacc   0.61 (  0.58)	Loss_d 0.553 (0.567)	test_acc_d   0.63 (  0.61)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.61 (  0.58)	test_corr_d   0.43 (  0.41)
Test: [  26/  26]	Loss 0.574 (0.567)	test_acc   0.57 (  0.61)	test_minacc   0.76 (  0.74)	test_majacc   0.54 (  0.58)	Loss_d 0.574 (0.567)	test_acc_d   0.57 (  0.61)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.54 (  0.58)	test_corr_d   0.39 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.34it/s]
Test: [  0/  1]	Loss 0.897 (0.897)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.63 (  0.63)	Loss_d 0.897 (0.897)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.897 (0.897)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.63 (  0.63)	Loss_d 0.897 (0.897)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.18 (  0.18)
Overall Timing[ 47/  1]	epoch_time 0.0368 (0.0363)	validation_time 0.0004 (0.0005)	train_time 0.0365 (0.0357)
record: (train_acc, test_acc) (0.6186000113487243, 0.625)
last accs (train_acc, test_acc) (0.6061000165343284, 0.6150000095367432)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 19%|#9        | 5/26 [00:00<00:01, 20.85it/s] 35%|###4      | 9/26 [00:00<00:00, 27.38it/s] 50%|#####     | 13/26 [00:00<00:00, 30.29it/s] 69%|######9   | 18/26 [00:00<00:00, 34.35it/s] 88%|########8 | 23/26 [00:00<00:00, 36.37it/s]100%|##########| 26/26 [00:00<00:00, 29.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.57 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  24.16 ( 24.16)	train_acc   0.57 (  0.61)	train_minacc   0.78 (  0.75)	train_majacc   0.53 (  0.58)	train_corr   0.00 (  0.00)	l1 4.2436 (4.2714)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.80it/s] 27%|##6       | 7/26 [00:00<00:00, 36.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.01it/s] 46%|####6     | 12/26 [00:00<00:00, 38.78it/s] 69%|######9   | 18/26 [00:00<00:00, 44.12it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.12it/s] 92%|#########2| 24/26 [00:00<00:00, 46.96it/s]100%|##########| 26/26 [00:00<00:00, 39.20it/s]
Test: [   0/  26]	Loss 0.565 (0.565)	test_acc   0.63 (  0.63)	test_minacc   0.74 (  0.74)	test_majacc   0.60 (  0.60)	Loss_d 0.565 (0.565)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.563 (0.571)	test_acc   0.61 (  0.60)	test_minacc   0.75 (  0.74)	test_majacc   0.58 (  0.57)	Loss_d 0.563 (0.571)	test_acc_d   0.61 (  0.60)	test_minacc_d   0.75 (  0.74)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.40 (  0.39)
Test: [  20/  26]	Loss 0.543 (0.561)	test_acc   0.64 (  0.61)	test_minacc   0.76 (  0.75)	test_majacc   0.62 (  0.59)	Loss_d 0.543 (0.561)	test_acc_d   0.64 (  0.61)	test_minacc_d   0.76 (  0.75)	test_majacc_d   0.62 (  0.59)	test_corr_d   0.43 (  0.40)
Test: [  26/  26]	Loss 0.562 (0.560)	test_acc   0.57 (  0.61)	test_minacc   0.76 (  0.75)	test_majacc   0.54 (  0.59)	Loss_d 0.562 (0.560)	test_acc_d   0.57 (  0.61)	test_minacc_d   0.76 (  0.75)	test_majacc_d   0.54 (  0.59)	test_corr_d   0.38 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.99it/s]
Test: [  0/  1]	Loss 0.883 (0.883)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.60 (  0.60)	Loss_d 0.883 (0.883)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 0.883 (0.883)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.60 (  0.60)	Loss_d 0.883 (0.883)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.16 (  0.16)
Overall Timing[ 48/  1]	epoch_time 0.0364 (0.0363)	validation_time 0.0004 (0.0005)	train_time 0.0360 (0.0357)
record: (train_acc, test_acc) (0.6186000113487243, 0.625)
last accs (train_acc, test_acc) (0.6116000183224678, 0.6180000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.38it/s] 19%|#9        | 5/26 [00:00<00:00, 26.25it/s] 38%|###8      | 10/26 [00:00<00:00, 33.81it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.06it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.16it/s] 96%|#########6| 25/26 [00:00<00:00, 40.11it/s]100%|##########| 26/26 [00:00<00:00, 33.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  24.17 ( 24.16)	train_acc   0.61 (  0.62)	train_minacc   0.78 (  0.70)	train_majacc   0.58 (  0.60)	train_corr   0.00 (  0.00)	l1 4.4257 (4.3674)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.85it/s] 27%|##6       | 7/26 [00:00<00:00, 26.92it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.92it/s] 50%|#####     | 13/26 [00:00<00:00, 35.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.97it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.97it/s] 92%|#########2| 24/26 [00:00<00:00, 43.99it/s]100%|##########| 26/26 [00:00<00:00, 34.19it/s]
Test: [   0/  26]	Loss 0.587 (0.587)	test_acc   0.60 (  0.60)	test_minacc   0.71 (  0.71)	test_majacc   0.58 (  0.58)	Loss_d 0.587 (0.587)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.581 (0.591)	test_acc   0.62 (  0.59)	test_minacc   0.68 (  0.71)	test_majacc   0.61 (  0.57)	Loss_d 0.581 (0.591)	test_acc_d   0.62 (  0.59)	test_minacc_d   0.68 (  0.71)	test_majacc_d   0.61 (  0.57)	test_corr_d   0.40 (  0.39)
Test: [  20/  26]	Loss 0.566 (0.580)	test_acc   0.63 (  0.61)	test_minacc   0.73 (  0.74)	test_majacc   0.61 (  0.58)	Loss_d 0.566 (0.580)	test_acc_d   0.63 (  0.61)	test_minacc_d   0.73 (  0.74)	test_majacc_d   0.61 (  0.58)	test_corr_d   0.43 (  0.41)
Test: [  26/  26]	Loss 0.584 (0.578)	test_acc   0.61 (  0.61)	test_minacc   0.78 (  0.74)	test_majacc   0.58 (  0.59)	Loss_d 0.584 (0.578)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.78 (  0.74)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.40 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.63it/s]
Test: [  0/  1]	Loss 0.884 (0.884)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.62 (  0.62)	Loss_d 0.884 (0.884)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 0.884 (0.884)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.62 (  0.62)	Loss_d 0.884 (0.884)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.17 (  0.17)
Overall Timing[ 49/  1]	epoch_time 0.0354 (0.0363)	validation_time 0.0003 (0.0005)	train_time 0.0350 (0.0357)
record: (train_acc, test_acc) (0.6186000113487243, 0.625)
last accs (train_acc, test_acc) (0.610800008714199, 0.6030000448226929)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.102 MB of 0.102 MB uploadedwandb: \ 0.102 MB of 0.102 MB uploadedwandb: | 0.102 MB of 0.102 MB uploadedwandb: / 0.102 MB of 0.102 MB uploadedwandb: - 0.124 MB of 0.137 MB uploaded (0.003 MB deduped)wandb: \ 0.472 MB of 0.472 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▂▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/diagnostics/train_time_val █▂▁▂▁▂▁▁▂▁▁▂▁▁▂▂▁▁▂▁▁▁▁▂▁▁▁▂▁▁▁▁▁▁▁▂▂▁▂▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/Loss_avg ▆███▆▆▆▅████▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▂▁▂▁▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/Loss_d_avg ▆███▆▆▆▅████▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▂▁▂▁▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/Loss_d_val ▆███▆▆▆▅████▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▂▁▂▁▂▂▂▂▂▂▂
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/Loss_val ▆███▆▆▆▅████▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▂▁▂▁▂▂▂▂▂▂▂
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_acc_avg ▁▁▁▂▄▄▄▅▄▅▆▆█▇▇▇▇▇▇▇▇▇▇▇▇▅▇█████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_acc_d_avg ▁▁▁▂▄▄▄▅▄▅▆▆█▇▇▇▇▇▇▇▇▇▇▇▇▅▇█████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_acc_d_val ▁▁▁▂▄▄▄▅▄▅▆▆█▇▇▇▇▇▇▇▇▇▇▇▇▅▇█████████████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_acc_val ▁▁▁▂▄▄▄▅▄▅▆▆█▇▇▇▇▇▇▇▇▇▇▇▇▅▇█████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_corr_d_avg ███▇▆▆▆▅▆▅▄▄▁▂▃▃▃▃▃▃▂▂▂▂▂▃▂▂▂▂▂▃▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_corr_d_val ███▇▆▆▆▅▆▅▄▄▁▂▃▃▃▃▃▃▂▂▂▂▂▃▂▂▂▂▂▃▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_majacc_avg ██████████▇▇▂▂▃▃▃▃▃▃▃▃▃▂▂▅▄▃▃▂▂▃▁▁▁▁▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_majacc_d_avg ██████████▇▇▂▂▃▃▃▃▃▃▃▃▃▂▂▅▄▃▃▂▂▃▁▁▁▁▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_majacc_d_val ██████████▇▇▂▂▃▃▃▃▃▃▃▃▃▂▂▅▄▃▃▂▂▃▁▁▁▁▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_majacc_val ██████████▇▇▂▂▃▃▃▃▃▃▃▃▃▂▂▅▄▃▃▂▂▃▁▁▁▁▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_minacc_avg ▁▁▁▂▄▄▄▅▄▅▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▅▇█████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_minacc_d_avg ▁▁▁▂▄▄▄▅▄▅▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▅▇█████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_minacc_d_val ▁▁▁▂▄▄▄▅▄▅▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▅▇█████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_minacc_val ▁▁▁▂▄▄▄▅▄▅▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▅▇█████████████
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/Loss_avg █▆▆▆▅▅▅▅▅▅▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/Loss_val █▇▇▆▆▅▅▅▅▄▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/l1_avg ▇▆▇▇▇▇▇▇▇▇▇██▄▃▃▃▃▃▃▂▂▂▂▂▂▁▁▂▂▁▁▂▁▂▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/l1_val ▆▆▇▇█▇▇▇▇▇▇█▅▄▃▃▃▃▃▃▃▂▃▂▂▁▁▂▁▁▁▁▂▂▂▁▁▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_acc_avg ▆▇▇▇▇▇▇▇▇███▇▂▂▁▁▁▁▁▂▂▂▂▂▃▃▃▂▁▂▂▁▁▁▁▁▂▁▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_acc_val ▆▆▆▇▆▇▇▇████▂▂▂▂▁▁▁▁▁▂▂▃▂▄▂▂▃▂▂▂▁▁▁▁▁▂▁▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_majacc_avg ▇█████▇▇▇▇▇▇▆▂▂▁▁▁▁▁▂▂▂▂▂▂▃▂▂▁▂▂▁▁▁▁▁▂▁▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_majacc_val ████▇█▇▇██▇▇▂▂▂▁▁▁▁▁▁▂▂▂▂▄▂▁▃▂▂▂▁▁▁▁▁▂▁▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_minacc_avg ▂▁▁▁▂▃▄▄▅▆▆▇▇▇▇▇▇▇▇▇▇▇█▇█▇▇██████████▇█▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_minacc_val ▁▁▁▂▄▄▄▄▆▇██▇▇▆▇▆▆▆▆▆▇▇▇█▆███▇█▇▇▇▇▇▇█▇█
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_nll_avg ▇▄▄▄▃▃▂▂▂▂▁▁▃▇███████▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_nll_val ▅▅▄▃▃▂▂▂▂▁▁▁█▇▇▇█████▇██▇▆▇▇▆▆▇▆▇▇▇▇▇▇▇▇
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_penalty_avg █▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_penalty_val ▇█▇▅▂▃▂▃▂▂▂▂▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/weight_norm_avg ▁▅▆▆▆▆▆▆▆▆▇▇████████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/weight_norm_val ▁▃▄▄▄▄▄▄▅▅▆▆████████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/diagnostics/epoch_time_val 0.03539
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/diagnostics/train_time_val 0.03505
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/diagnostics/validation_time_val 0.00033
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/Loss_avg 0.88447
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/Loss_d_avg 0.88447
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/Loss_d_val 0.88447
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/Loss_val 0.88447
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_acc_avg 0.603
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_acc_d_avg 0.603
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_acc_d_val 0.603
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_acc_val 0.603
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_corr_d_avg 0.16571
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_corr_d_val 0.16571
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_majacc_avg 0.62
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_majacc_d_avg 0.62
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_majacc_d_val 0.62
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_majacc_val 0.62
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_minacc_avg 0.60111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_minacc_d_avg 0.60111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_minacc_d_val 0.60111
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/test/test_minacc_val 0.60111
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/Loss_avg 0.00016
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/Loss_val 0.00018
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/l1_avg 4.36745
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/l1_val 4.42571
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_acc_avg 0.6193
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_acc_val 0.612
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_majacc_avg 0.60463
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_majacc_val 0.58216
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_minacc_avg 0.70163
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_minacc_val 0.78378
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_nll_avg 0.56982
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_nll_val 0.58369
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_penalty_avg 0.0001
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/train_penalty_val 0.00013
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/weight_norm_avg 24.16472
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/weight_norm_val 24.16726
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/129/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/p6xsn8m5
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_194747-p6xsn8m5/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_195008-abe1tb9a
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/abe1tb9a
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1222
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5976, 3, 32, 32) (6024, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:35,  1.42s/it] 15%|#5        | 4/26 [00:01<00:06,  3.38it/s] 35%|###4      | 9/26 [00:01<00:01,  8.59it/s] 54%|#####3    | 14/26 [00:01<00:00, 13.94it/s] 73%|#######3  | 19/26 [00:01<00:00, 19.03it/s] 92%|#########2| 24/26 [00:02<00:00, 23.72it/s]100%|##########| 26/26 [00:02<00:00, 10.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.380 (0.625)	train_nll   0.38 (  0.62)	train_penalty   0.06 (  0.45)	weight_norm  20.86 ( 18.11)	train_acc   0.87 (  0.80)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.92)	train_corr   0.00 (  0.00)	l1 6.6994 (7.8831)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.74it/s] 27%|##6       | 7/26 [00:00<00:00, 34.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.08it/s] 50%|#####     | 13/26 [00:00<00:00, 39.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.74it/s] 96%|#########6| 25/26 [00:00<00:00, 46.36it/s]100%|##########| 26/26 [00:00<00:00, 38.76it/s]
Test: [   0/  26]	Loss 0.383 (0.383)	test_acc   0.86 (  0.86)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.383 (0.383)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.412 (0.415)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.412 (0.415)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.468 (0.424)	test_acc   0.82 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   0.98 (  0.99)	Loss_d 0.468 (0.424)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.97 (  0.98)
Test: [  26/  26]	Loss 0.375 (0.418)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.375 (0.418)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]
Test: [  0/  1]	Loss 1.847 (1.847)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.847 (1.847)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.847 (1.847)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.847 (1.847)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/130/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0700 (0.0700)	validation_time 0.0067 (0.0067)	train_time 0.0593 (0.0593)
record: (train_acc, test_acc) (0.846900025010109, 0.11100000888109207)
last accs (train_acc, test_acc) (0.846900025010109, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.72it/s] 19%|#9        | 5/26 [00:00<00:00, 23.52it/s] 35%|###4      | 9/26 [00:00<00:00, 28.86it/s] 50%|#####     | 13/26 [00:00<00:00, 32.76it/s] 69%|######9   | 18/26 [00:00<00:00, 36.07it/s] 88%|########8 | 23/26 [00:00<00:00, 37.93it/s]100%|##########| 26/26 [00:00<00:00, 31.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.367 (0.424)	train_nll   0.37 (  0.42)	train_penalty   0.05 (  0.06)	weight_norm  21.98 ( 21.64)	train_acc   0.88 (  0.85)	train_minacc   0.03 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.5417 (6.6083)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.29it/s] 31%|###       | 8/26 [00:00<00:00, 40.64it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.64it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.03it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.58it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.58it/s]100%|##########| 26/26 [00:00<00:00, 52.38it/s]100%|##########| 26/26 [00:00<00:00, 42.69it/s]
Test: [   0/  26]	Loss 0.383 (0.383)	test_acc   0.86 (  0.86)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.383 (0.383)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.399 (0.416)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.399 (0.416)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.452 (0.424)	test_acc   0.82 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.452 (0.424)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.99)
Test: [  26/  26]	Loss 0.365 (0.418)	test_acc   0.88 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.365 (0.418)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.02it/s]
Test: [  0/  1]	Loss 1.942 (1.942)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.942 (1.942)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.942 (1.942)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.942 (1.942)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Overall Timing[  1/  1]	epoch_time 0.0356 (0.0528)	validation_time 0.0003 (0.0035)	train_time 0.0352 (0.0473)
record: (train_acc, test_acc) (0.846900025010109, 0.11100000888109207)
last accs (train_acc, test_acc) (0.8484000251293182, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 19%|#9        | 5/26 [00:00<00:00, 23.74it/s] 35%|###4      | 9/26 [00:00<00:00, 30.45it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.22it/s] 92%|#########2| 24/26 [00:00<00:00, 38.35it/s]100%|##########| 26/26 [00:00<00:00, 31.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.356 (0.412)	train_nll   0.36 (  0.41)	train_penalty   0.05 (  0.06)	weight_norm  22.09 ( 22.05)	train_acc   0.88 (  0.85)	train_minacc   0.03 (  0.02)	train_majacc   1.00 (  1.00)	train_corr   0.00 (  0.00)	l1 6.3849 (6.4252)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.87it/s] 31%|###       | 8/26 [00:00<00:00, 41.12it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.12it/s] 50%|#####     | 13/26 [00:00<00:00, 42.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.45it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.45it/s] 96%|#########6| 25/26 [00:00<00:00, 47.66it/s]100%|##########| 26/26 [00:00<00:00, 41.72it/s]
Test: [   0/  26]	Loss 0.376 (0.376)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.376 (0.376)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.391 (0.404)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.391 (0.404)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
Test: [  20/  26]	Loss 0.437 (0.410)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.437 (0.410)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.352 (0.404)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.352 (0.404)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.94it/s]
Test: [  0/  1]	Loss 1.907 (1.907)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.907 (1.907)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.907 (1.907)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.907 (1.907)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Overall Timing[  2/  1]	epoch_time 0.0334 (0.0463)	validation_time 0.0004 (0.0025)	train_time 0.0330 (0.0425)
record: (train_acc, test_acc) (0.846900025010109, 0.11100000888109207)
last accs (train_acc, test_acc) (0.8488000260591507, 0.10200000554323196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.96it/s] 19%|#9        | 5/26 [00:00<00:01, 20.72it/s] 35%|###4      | 9/26 [00:00<00:00, 26.63it/s] 50%|#####     | 13/26 [00:00<00:00, 31.14it/s] 69%|######9   | 18/26 [00:00<00:00, 34.94it/s] 85%|########4 | 22/26 [00:00<00:00, 36.33it/s]100%|##########| 26/26 [00:00<00:00, 36.87it/s]100%|##########| 26/26 [00:00<00:00, 29.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.344 (0.403)	train_nll   0.34 (  0.40)	train_penalty   0.05 (  0.06)	weight_norm  22.12 ( 22.11)	train_acc   0.87 (  0.85)	train_minacc   0.00 (  0.02)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 6.3275 (6.3439)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.07it/s] 23%|##3       | 6/26 [00:00<00:00, 31.08it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.08it/s] 42%|####2     | 11/26 [00:00<00:00, 38.97it/s] 65%|######5   | 17/26 [00:00<00:00, 43.19it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.19it/s] 88%|########8 | 23/26 [00:00<00:00, 47.95it/s]100%|##########| 26/26 [00:00<00:00, 39.06it/s]
Test: [   0/  26]	Loss 0.375 (0.375)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.375 (0.375)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.380 (0.398)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.380 (0.398)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
Test: [  20/  26]	Loss 0.420 (0.401)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.420 (0.401)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.340 (0.395)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.340 (0.395)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.66it/s]
Test: [  0/  1]	Loss 1.908 (1.908)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.908 (1.908)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.908 (1.908)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.908 (1.908)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Overall Timing[  3/  1]	epoch_time 0.0360 (0.0437)	validation_time 0.0004 (0.0020)	train_time 0.0356 (0.0408)
record: (train_acc, test_acc) (0.846900025010109, 0.11100000888109207)
last accs (train_acc, test_acc) (0.8487000225782394, 0.10200000554323196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.23it/s] 19%|#9        | 5/26 [00:00<00:00, 24.27it/s] 38%|###8      | 10/26 [00:00<00:00, 32.11it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.81it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.99it/s] 92%|#########2| 24/26 [00:00<00:00, 38.83it/s]100%|##########| 26/26 [00:00<00:00, 32.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.330 (0.387)	train_nll   0.33 (  0.39)	train_penalty   0.04 (  0.05)	weight_norm  22.17 ( 22.14)	train_acc   0.87 (  0.85)	train_minacc   0.03 (  0.07)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 6.3975 (6.3750)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.67it/s] 31%|###       | 8/26 [00:00<00:00, 37.18it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.18it/s] 50%|#####     | 13/26 [00:00<00:00, 40.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.18it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.18it/s] 96%|#########6| 25/26 [00:00<00:00, 47.37it/s]100%|##########| 26/26 [00:00<00:00, 39.57it/s]
Test: [   0/  26]	Loss 0.345 (0.345)	test_acc   0.87 (  0.87)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 0.345 (0.345)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.346 (0.372)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.346 (0.372)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  20/  26]	Loss 0.376 (0.371)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.376 (0.371)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.311 (0.365)	test_acc   0.88 (  0.85)	test_minacc   0.06 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.311 (0.365)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.06 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.70it/s]
Test: [  0/  1]	Loss 1.842 (1.842)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.842 (1.842)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.842 (1.842)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.842 (1.842)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/130/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0351 (0.0420)	validation_time 0.0004 (0.0016)	train_time 0.0347 (0.0396)
record: (train_acc, test_acc) (0.8504000203609466, 0.11700000613927841)
last accs (train_acc, test_acc) (0.8504000203609466, 0.11700000613927841)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.92it/s] 23%|##3       | 6/26 [00:00<00:00, 29.37it/s] 42%|####2     | 11/26 [00:00<00:00, 35.27it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.89it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.52it/s] 96%|#########6| 25/26 [00:00<00:00, 39.71it/s]100%|##########| 26/26 [00:00<00:00, 33.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.315 (0.370)	train_nll   0.32 (  0.37)	train_penalty   0.04 (  0.04)	weight_norm  22.24 ( 22.21)	train_acc   0.88 (  0.85)	train_minacc   0.10 (  0.09)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.5529 (6.4563)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.04it/s] 31%|###       | 8/26 [00:00<00:00, 39.29it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.29it/s] 50%|#####     | 13/26 [00:00<00:00, 42.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.01it/s] 96%|#########6| 25/26 [00:00<00:00, 47.88it/s]100%|##########| 26/26 [00:00<00:00, 41.18it/s]
Test: [   0/  26]	Loss 0.324 (0.324)	test_acc   0.87 (  0.87)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 0.324 (0.324)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.333 (0.350)	test_acc   0.85 (  0.86)	test_minacc   0.05 (  0.13)	test_majacc   0.99 (  0.98)	Loss_d 0.333 (0.350)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.05 (  0.13)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.343 (0.349)	test_acc   0.84 (  0.85)	test_minacc   0.15 (  0.12)	test_majacc   0.98 (  0.99)	Loss_d 0.343 (0.349)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.15 (  0.12)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.305 (0.344)	test_acc   0.89 (  0.86)	test_minacc   0.16 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 0.305 (0.344)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.16 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.54it/s]
Test: [  0/  1]	Loss 1.907 (1.907)	test_acc   0.17 (  0.17)	test_minacc   0.09 (  0.09)	test_majacc   0.97 (  0.97)	Loss_d 1.907 (1.907)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.907 (1.907)	test_acc   0.17 (  0.17)	test_minacc   0.09 (  0.09)	test_majacc   0.97 (  0.97)	Loss_d 1.907 (1.907)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/130/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0334 (0.0406)	validation_time 0.0003 (0.0014)	train_time 0.0331 (0.0385)
record: (train_acc, test_acc) (0.857600028693676, 0.17400000989437103)
last accs (train_acc, test_acc) (0.857600028693676, 0.17400000989437103)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.21it/s] 23%|##3       | 6/26 [00:00<00:00, 28.71it/s] 42%|####2     | 11/26 [00:00<00:00, 34.54it/s] 62%|######1   | 16/26 [00:00<00:00, 37.84it/s] 81%|########  | 21/26 [00:00<00:00, 39.44it/s]100%|##########| 26/26 [00:00<00:00, 40.67it/s]100%|##########| 26/26 [00:00<00:00, 33.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.292 (0.352)	train_nll   0.29 (  0.35)	train_penalty   0.04 (  0.03)	weight_norm  22.33 ( 22.28)	train_acc   0.89 (  0.85)	train_minacc   0.16 (  0.20)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 6.6268 (6.5140)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.65it/s] 19%|#9        | 5/26 [00:00<00:00, 23.43it/s]                                               19%|#9        | 5/26 [00:00<00:00, 23.43it/s] 42%|####2     | 11/26 [00:00<00:00, 37.67it/s] 62%|######1   | 16/26 [00:00<00:00, 40.81it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.81it/s] 85%|########4 | 22/26 [00:00<00:00, 46.59it/s]100%|##########| 26/26 [00:00<00:00, 37.31it/s]
Test: [   0/  26]	Loss 0.307 (0.307)	test_acc   0.87 (  0.87)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 0.307 (0.307)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.315 (0.331)	test_acc   0.87 (  0.86)	test_minacc   0.13 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.315 (0.331)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.13 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.313 (0.330)	test_acc   0.85 (  0.86)	test_minacc   0.14 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.313 (0.330)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.14 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.273 (0.323)	test_acc   0.89 (  0.86)	test_minacc   0.16 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.273 (0.323)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.16 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.19it/s]
Test: [  0/  1]	Loss 2.006 (2.006)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.97 (  0.97)	Loss_d 2.006 (2.006)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 2.006 (2.006)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.97 (  0.97)	Loss_d 2.006 (2.006)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.86)
Overall Timing[  6/  1]	epoch_time 0.0340 (0.0396)	validation_time 0.0003 (0.0013)	train_time 0.0337 (0.0378)
record: (train_acc, test_acc) (0.857600028693676, 0.17400000989437103)
last accs (train_acc, test_acc) (0.8594000239372254, 0.16500000655651093)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.23it/s] 23%|##3       | 6/26 [00:00<00:00, 28.62it/s] 42%|####2     | 11/26 [00:00<00:00, 34.50it/s] 62%|######1   | 16/26 [00:00<00:00, 37.59it/s] 81%|########  | 21/26 [00:00<00:00, 39.09it/s]100%|##########| 26/26 [00:00<00:00, 40.52it/s]100%|##########| 26/26 [00:00<00:00, 34.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.275 (0.334)	train_nll   0.28 (  0.33)	train_penalty   0.04 (  0.03)	weight_norm  22.43 ( 22.38)	train_acc   0.90 (  0.86)	train_minacc   0.32 (  0.25)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 6.6302 (6.4645)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.66it/s] 27%|##6       | 7/26 [00:00<00:00, 33.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.99it/s] 50%|#####     | 13/26 [00:00<00:00, 41.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.96it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.96it/s] 96%|#########6| 25/26 [00:00<00:00, 47.65it/s]100%|##########| 26/26 [00:00<00:00, 39.43it/s]
Test: [   0/  26]	Loss 0.296 (0.296)	test_acc   0.88 (  0.88)	test_minacc   0.25 (  0.25)	test_majacc   0.98 (  0.98)	Loss_d 0.296 (0.296)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.307 (0.310)	test_acc   0.86 (  0.87)	test_minacc   0.18 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 0.307 (0.310)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.18 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.299 (0.311)	test_acc   0.86 (  0.87)	test_minacc   0.30 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 0.299 (0.311)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.30 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.255 (0.303)	test_acc   0.91 (  0.87)	test_minacc   0.35 (  0.25)	test_majacc   0.99 (  0.98)	Loss_d 0.255 (0.303)	test_acc_d   0.91 (  0.87)	test_minacc_d   0.35 (  0.25)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.91it/s]
Test: [  0/  1]	Loss 2.025 (2.025)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 2.025 (2.025)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 2.025 (2.025)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 2.025 (2.025)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.79 (  0.79)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/130/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0347 (0.0390)	validation_time 0.0004 (0.0011)	train_time 0.0343 (0.0374)
record: (train_acc, test_acc) (0.8698000207543373, 0.23900000751018524)
last accs (train_acc, test_acc) (0.8698000207543373, 0.23900000751018524)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 19%|#9        | 5/26 [00:00<00:00, 24.90it/s] 38%|###8      | 10/26 [00:00<00:00, 33.04it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.34it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.48it/s] 96%|#########6| 25/26 [00:00<00:00, 39.11it/s]100%|##########| 26/26 [00:00<00:00, 32.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.284 (0.317)	train_nll   0.28 (  0.32)	train_penalty   0.03 (  0.02)	weight_norm  22.55 ( 22.48)	train_acc   0.90 (  0.86)	train_minacc   0.42 (  0.29)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 6.6007 (6.3569)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.70it/s] 27%|##6       | 7/26 [00:00<00:00, 30.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.99it/s] 50%|#####     | 13/26 [00:00<00:00, 39.70it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.42it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.42it/s] 96%|#########6| 25/26 [00:00<00:00, 46.66it/s]100%|##########| 26/26 [00:00<00:00, 38.18it/s]
Test: [   0/  26]	Loss 0.279 (0.279)	test_acc   0.88 (  0.88)	test_minacc   0.35 (  0.35)	test_majacc   0.97 (  0.97)	Loss_d 0.279 (0.279)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.297 (0.295)	test_acc   0.87 (  0.87)	test_minacc   0.38 (  0.41)	test_majacc   0.95 (  0.96)	Loss_d 0.297 (0.295)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.38 (  0.41)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.88 (  0.87)
Test: [  20/  26]	Loss 0.265 (0.292)	test_acc   0.87 (  0.87)	test_minacc   0.47 (  0.42)	test_majacc   0.95 (  0.96)	Loss_d 0.265 (0.292)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.47 (  0.42)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.84 (  0.86)
Test: [  26/  26]	Loss 0.250 (0.284)	test_acc   0.93 (  0.88)	test_minacc   0.52 (  0.43)	test_majacc   0.99 (  0.96)	Loss_d 0.250 (0.284)	test_acc_d   0.93 (  0.88)	test_minacc_d   0.52 (  0.43)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.90 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.96it/s]
Test: [  0/  1]	Loss 1.870 (1.870)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.93 (  0.93)	Loss_d 1.870 (1.870)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.59 (  0.59)
Test: [  1/  1]	Loss 1.870 (1.870)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.93 (  0.93)	Loss_d 1.870 (1.870)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.59 (  0.59)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/130/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0345 (0.0385)	validation_time 0.0003 (0.0011)	train_time 0.0342 (0.0370)
record: (train_acc, test_acc) (0.8795000230073928, 0.3620000183582306)
last accs (train_acc, test_acc) (0.8795000230073928, 0.3620000183582306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 19%|#9        | 5/26 [00:00<00:00, 22.96it/s] 38%|###8      | 10/26 [00:00<00:00, 30.99it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.14it/s] 92%|#########2| 24/26 [00:00<00:00, 37.77it/s]100%|##########| 26/26 [00:00<00:00, 31.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.250 (0.304)	train_nll   0.25 (  0.30)	train_penalty   0.02 (  0.02)	weight_norm  22.68 ( 22.61)	train_acc   0.90 (  0.87)	train_minacc   0.32 (  0.37)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 6.4654 (6.3045)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 35%|###4      | 9/26 [00:00<00:00, 35.96it/s]                                               35%|###4      | 9/26 [00:00<00:00, 35.96it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.24it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.24it/s] 81%|########  | 21/26 [00:00<00:00, 45.67it/s]100%|##########| 26/26 [00:00<00:00, 39.06it/s]
Test: [   0/  26]	Loss 0.276 (0.276)	test_acc   0.87 (  0.87)	test_minacc   0.27 (  0.27)	test_majacc   0.97 (  0.97)	Loss_d 0.276 (0.276)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.302 (0.302)	test_acc   0.86 (  0.87)	test_minacc   0.27 (  0.31)	test_majacc   0.96 (  0.96)	Loss_d 0.302 (0.302)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.27 (  0.31)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.313 (0.303)	test_acc   0.85 (  0.86)	test_minacc   0.32 (  0.31)	test_majacc   0.96 (  0.97)	Loss_d 0.313 (0.303)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.32 (  0.31)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.86 (  0.88)
Test: [  26/  26]	Loss 0.223 (0.295)	test_acc   0.91 (  0.87)	test_minacc   0.29 (  0.32)	test_majacc   1.00 (  0.97)	Loss_d 0.223 (0.295)	test_acc_d   0.91 (  0.87)	test_minacc_d   0.29 (  0.32)	test_majacc_d   1.00 (  0.97)	test_corr_d   0.92 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.36it/s]
Test: [  0/  1]	Loss 2.036 (2.036)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.95 (  0.95)	Loss_d 2.036 (2.036)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 2.036 (2.036)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.95 (  0.95)	Loss_d 2.036 (2.036)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.69 (  0.69)
Overall Timing[  9/  1]	epoch_time 0.0365 (0.0383)	validation_time 0.0004 (0.0010)	train_time 0.0361 (0.0369)
record: (train_acc, test_acc) (0.8795000230073928, 0.3620000183582306)
last accs (train_acc, test_acc) (0.8700000240206719, 0.27400001883506775)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.76it/s] 23%|##3       | 6/26 [00:00<00:00, 27.08it/s] 42%|####2     | 11/26 [00:00<00:00, 33.56it/s] 62%|######1   | 16/26 [00:00<00:00, 36.77it/s] 81%|########  | 21/26 [00:00<00:00, 38.14it/s] 96%|#########6| 25/26 [00:00<00:00, 38.61it/s]100%|##########| 26/26 [00:00<00:00, 32.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.239 (0.291)	train_nll   0.24 (  0.29)	train_penalty   0.02 (  0.01)	weight_norm  22.83 ( 22.76)	train_acc   0.91 (  0.87)	train_minacc   0.42 (  0.39)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 6.5447 (6.3619)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.80it/s] 27%|##6       | 7/26 [00:00<00:00, 33.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.46it/s] 50%|#####     | 13/26 [00:00<00:00, 43.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.39it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.39it/s] 96%|#########6| 25/26 [00:00<00:00, 49.04it/s]100%|##########| 26/26 [00:00<00:00, 40.50it/s]
Test: [   0/  26]	Loss 0.261 (0.261)	test_acc   0.89 (  0.89)	test_minacc   0.47 (  0.47)	test_majacc   0.96 (  0.96)	Loss_d 0.261 (0.261)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.299 (0.303)	test_acc   0.86 (  0.87)	test_minacc   0.36 (  0.44)	test_majacc   0.94 (  0.95)	Loss_d 0.299 (0.303)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.87 (  0.86)
Test: [  20/  26]	Loss 0.298 (0.306)	test_acc   0.86 (  0.87)	test_minacc   0.44 (  0.43)	test_majacc   0.94 (  0.94)	Loss_d 0.298 (0.306)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.44 (  0.43)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.84 (  0.86)
Test: [  26/  26]	Loss 0.225 (0.298)	test_acc   0.92 (  0.87)	test_minacc   0.48 (  0.43)	test_majacc   0.98 (  0.95)	Loss_d 0.225 (0.298)	test_acc_d   0.92 (  0.87)	test_minacc_d   0.48 (  0.43)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.89 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.04it/s]
Test: [  0/  1]	Loss 2.046 (2.046)	test_acc   0.34 (  0.34)	test_minacc   0.28 (  0.28)	test_majacc   0.93 (  0.93)	Loss_d 2.046 (2.046)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 2.046 (2.046)	test_acc   0.34 (  0.34)	test_minacc   0.28 (  0.28)	test_majacc   0.93 (  0.93)	Loss_d 2.046 (2.046)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.63 (  0.63)
Overall Timing[ 10/  1]	epoch_time 0.0339 (0.0379)	validation_time 0.0003 (0.0009)	train_time 0.0336 (0.0366)
record: (train_acc, test_acc) (0.8795000230073928, 0.3620000183582306)
last accs (train_acc, test_acc) (0.869800019800663, 0.3440000116825104)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.53it/s] 19%|#9        | 5/26 [00:00<00:00, 21.99it/s] 35%|###4      | 9/26 [00:00<00:00, 29.20it/s] 50%|#####     | 13/26 [00:00<00:00, 32.39it/s] 69%|######9   | 18/26 [00:00<00:00, 36.01it/s] 88%|########8 | 23/26 [00:00<00:00, 37.86it/s]100%|##########| 26/26 [00:00<00:00, 30.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.233 (0.280)	train_nll   0.23 (  0.28)	train_penalty   0.02 (  0.01)	weight_norm  23.01 ( 22.92)	train_acc   0.92 (  0.88)	train_minacc   0.45 (  0.48)	train_majacc   0.98 (  0.95)	train_corr   0.00 (  0.00)	l1 6.4937 (6.5580)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 23%|##3       | 6/26 [00:00<00:00, 31.02it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.02it/s] 42%|####2     | 11/26 [00:00<00:00, 38.04it/s] 62%|######1   | 16/26 [00:00<00:00, 41.18it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.18it/s] 85%|########4 | 22/26 [00:00<00:00, 45.49it/s]100%|##########| 26/26 [00:00<00:00, 38.35it/s]
Test: [   0/  26]	Loss 0.237 (0.237)	test_acc   0.90 (  0.90)	test_minacc   0.47 (  0.47)	test_majacc   0.97 (  0.97)	Loss_d 0.237 (0.237)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.268 (0.272)	test_acc   0.88 (  0.88)	test_minacc   0.33 (  0.44)	test_majacc   0.98 (  0.96)	Loss_d 0.268 (0.272)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.33 (  0.44)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.89 (  0.87)
Test: [  20/  26]	Loss 0.279 (0.274)	test_acc   0.86 (  0.88)	test_minacc   0.38 (  0.44)	test_majacc   0.95 (  0.96)	Loss_d 0.279 (0.274)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.38 (  0.44)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.86 (  0.87)
Test: [  26/  26]	Loss 0.215 (0.267)	test_acc   0.92 (  0.89)	test_minacc   0.48 (  0.45)	test_majacc   0.99 (  0.96)	Loss_d 0.215 (0.267)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.48 (  0.45)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.91 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.03it/s]
Test: [  0/  1]	Loss 1.960 (1.960)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.95 (  0.95)	Loss_d 1.960 (1.960)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.66 (  0.66)
Test: [  1/  1]	Loss 1.960 (1.960)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.95 (  0.95)	Loss_d 1.960 (1.960)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.66 (  0.66)
Overall Timing[ 11/  1]	epoch_time 0.0347 (0.0377)	validation_time 0.0004 (0.0009)	train_time 0.0343 (0.0364)
record: (train_acc, test_acc) (0.8795000230073928, 0.3620000183582306)
last accs (train_acc, test_acc) (0.8867000235319138, 0.34200000762939453)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 19%|#9        | 5/26 [00:00<00:00, 21.41it/s] 35%|###4      | 9/26 [00:00<00:00, 28.09it/s] 50%|#####     | 13/26 [00:00<00:00, 32.22it/s] 69%|######9   | 18/26 [00:00<00:00, 35.81it/s] 88%|########8 | 23/26 [00:00<00:00, 37.93it/s]100%|##########| 26/26 [00:00<00:00, 30.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.209 (0.258)	train_nll   0.21 (  0.26)	train_penalty   0.02 (  0.01)	weight_norm  23.22 ( 23.12)	train_acc   0.93 (  0.89)	train_minacc   0.52 (  0.53)	train_majacc   0.99 (  0.95)	train_corr   0.00 (  0.00)	l1 6.7744 (6.9023)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.12it/s] 31%|###       | 8/26 [00:00<00:00, 40.41it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.41it/s] 50%|#####     | 13/26 [00:00<00:00, 42.06it/s] 77%|#######6  | 20/26 [00:00<00:00, 50.25it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 50.25it/s]100%|##########| 26/26 [00:00<00:00, 49.30it/s]100%|##########| 26/26 [00:00<00:00, 41.08it/s]
Test: [   0/  26]	Loss 0.226 (0.226)	test_acc   0.89 (  0.89)	test_minacc   0.42 (  0.42)	test_majacc   0.97 (  0.97)	Loss_d 0.226 (0.226)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.261 (0.246)	test_acc   0.88 (  0.89)	test_minacc   0.40 (  0.49)	test_majacc   0.96 (  0.96)	Loss_d 0.261 (0.246)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.40 (  0.49)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.87)
Test: [  20/  26]	Loss 0.238 (0.246)	test_acc   0.89 (  0.89)	test_minacc   0.53 (  0.49)	test_majacc   0.97 (  0.97)	Loss_d 0.238 (0.246)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.85 (  0.86)
Test: [  26/  26]	Loss 0.186 (0.240)	test_acc   0.94 (  0.90)	test_minacc   0.55 (  0.50)	test_majacc   0.99 (  0.97)	Loss_d 0.186 (0.240)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.90 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.95it/s]
Test: [  0/  1]	Loss 2.014 (2.014)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.89 (  0.89)	Loss_d 2.014 (2.014)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 2.014 (2.014)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.89 (  0.89)	Loss_d 2.014 (2.014)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.65 (  0.65)
Overall Timing[ 12/  1]	epoch_time 0.0345 (0.0374)	validation_time 0.0005 (0.0009)	train_time 0.0341 (0.0362)
record: (train_acc, test_acc) (0.8795000230073928, 0.3620000183582306)
last accs (train_acc, test_acc) (0.8976000235080719, 0.3150000274181366)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.66it/s] 19%|#9        | 5/26 [00:00<00:00, 25.21it/s] 38%|###8      | 10/26 [00:00<00:00, 32.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.35it/s] 92%|#########2| 24/26 [00:00<00:00, 38.47it/s]100%|##########| 26/26 [00:00<00:00, 32.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.206 (0.241)	train_nll   0.21 (  0.24)	train_penalty   0.01 (  0.01)	weight_norm  23.49 ( 23.35)	train_acc   0.92 (  0.90)	train_minacc   0.52 (  0.58)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 7.6470 (7.2170)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.91it/s] 31%|###       | 8/26 [00:00<00:00, 40.57it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.57it/s] 50%|#####     | 13/26 [00:00<00:00, 40.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.20it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.20it/s] 96%|#########6| 25/26 [00:00<00:00, 46.39it/s]100%|##########| 26/26 [00:00<00:00, 39.83it/s]
Test: [   0/  26]	Loss 0.232 (0.232)	test_acc   0.89 (  0.89)	test_minacc   0.69 (  0.69)	test_majacc   0.93 (  0.93)	Loss_d 0.232 (0.232)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.79 (  0.79)
Test: [  10/  26]	Loss 0.245 (0.257)	test_acc   0.88 (  0.89)	test_minacc   0.62 (  0.64)	test_majacc   0.93 (  0.93)	Loss_d 0.245 (0.257)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.62 (  0.64)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.78 (  0.77)
Test: [  20/  26]	Loss 0.201 (0.248)	test_acc   0.91 (  0.89)	test_minacc   0.82 (  0.67)	test_majacc   0.92 (  0.94)	Loss_d 0.201 (0.248)	test_acc_d   0.91 (  0.89)	test_minacc_d   0.82 (  0.67)	test_majacc_d   0.92 (  0.94)	test_corr_d   0.71 (  0.77)
Test: [  26/  26]	Loss 0.166 (0.238)	test_acc   0.94 (  0.90)	test_minacc   0.74 (  0.68)	test_majacc   0.97 (  0.94)	Loss_d 0.166 (0.238)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.74 (  0.68)	test_majacc_d   0.97 (  0.94)	test_corr_d   0.84 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.27it/s]
Test: [  0/  1]	Loss 2.186 (2.186)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.87 (  0.87)	Loss_d 2.186 (2.186)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.40 (  0.40)
Test: [  1/  1]	Loss 2.186 (2.186)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.87 (  0.87)	Loss_d 2.186 (2.186)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.40 (  0.40)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/130/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0343 (0.0372)	validation_time 0.0003 (0.0008)	train_time 0.0339 (0.0361)
record: (train_acc, test_acc) (0.9005000188946723, 0.4320000112056732)
last accs (train_acc, test_acc) (0.9005000188946723, 0.4320000112056732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.09it/s] 23%|##3       | 6/26 [00:00<00:00, 27.63it/s] 38%|###8      | 10/26 [00:00<00:00, 32.48it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.33it/s] 92%|#########2| 24/26 [00:00<00:00, 39.03it/s]100%|##########| 26/26 [00:00<00:00, 32.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.193 (0.234)	train_nll   0.19 (  0.23)	train_penalty   0.01 (  0.01)	weight_norm  23.81 ( 23.64)	train_acc   0.94 (  0.90)	train_minacc   0.61 (  0.59)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.6684 (7.2883)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 27%|##6       | 7/26 [00:00<00:00, 36.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.07it/s] 50%|#####     | 13/26 [00:00<00:00, 41.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.96it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.96it/s] 96%|#########6| 25/26 [00:00<00:00, 48.10it/s]100%|##########| 26/26 [00:00<00:00, 40.18it/s]
Test: [   0/  26]	Loss 0.205 (0.205)	test_acc   0.90 (  0.90)	test_minacc   0.64 (  0.64)	test_majacc   0.95 (  0.95)	Loss_d 0.205 (0.205)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.239 (0.249)	test_acc   0.90 (  0.90)	test_minacc   0.55 (  0.63)	test_majacc   0.96 (  0.94)	Loss_d 0.239 (0.249)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.55 (  0.63)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.82 (  0.79)
Test: [  20/  26]	Loss 0.188 (0.237)	test_acc   0.92 (  0.90)	test_minacc   0.79 (  0.65)	test_majacc   0.95 (  0.95)	Loss_d 0.188 (0.237)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.79 (  0.65)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.74 (  0.78)
Test: [  26/  26]	Loss 0.146 (0.226)	test_acc   0.95 (  0.91)	test_minacc   0.74 (  0.66)	test_majacc   0.98 (  0.95)	Loss_d 0.146 (0.226)	test_acc_d   0.95 (  0.91)	test_minacc_d   0.74 (  0.66)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.85 (  0.79)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.20it/s]
Test: [  0/  1]	Loss 2.384 (2.384)	test_acc   0.41 (  0.41)	test_minacc   0.35 (  0.35)	test_majacc   0.90 (  0.90)	Loss_d 2.384 (2.384)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.47 (  0.47)
Test: [  1/  1]	Loss 2.384 (2.384)	test_acc   0.41 (  0.41)	test_minacc   0.35 (  0.35)	test_majacc   0.90 (  0.90)	Loss_d 2.384 (2.384)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.47 (  0.47)
Overall Timing[ 14/  1]	epoch_time 0.0347 (0.0370)	validation_time 0.0004 (0.0008)	train_time 0.0343 (0.0360)
record: (train_acc, test_acc) (0.9005000188946723, 0.4320000112056732)
last accs (train_acc, test_acc) (0.9056000178456306, 0.40800002217292786)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 19%|#9        | 5/26 [00:00<00:00, 24.03it/s] 35%|###4      | 9/26 [00:00<00:00, 29.80it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.59it/s] 92%|#########2| 24/26 [00:00<00:00, 38.12it/s]100%|##########| 26/26 [00:00<00:00, 31.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.008 (0.097)	train_nll   0.29 (  0.28)	train_penalty   0.01 (  0.01)	weight_norm  24.11 ( 23.98)	train_acc   0.86 (  0.88)	train_minacc   0.71 (  0.65)	train_majacc   0.88 (  0.92)	train_corr   0.00 (  0.00)	l1 5.6478 (6.7260)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.21it/s] 31%|###       | 8/26 [00:00<00:00, 37.06it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.06it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.46it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.41it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.41it/s]100%|##########| 26/26 [00:00<00:00, 41.93it/s]
Test: [   0/  26]	Loss 0.330 (0.330)	test_acc   0.84 (  0.84)	test_minacc   0.87 (  0.87)	test_majacc   0.83 (  0.83)	Loss_d 0.330 (0.330)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.304 (0.341)	test_acc   0.86 (  0.83)	test_minacc   0.78 (  0.84)	test_majacc   0.88 (  0.83)	Loss_d 0.304 (0.341)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.78 (  0.84)	test_majacc_d   0.88 (  0.83)	test_corr_d   0.65 (  0.59)
Test: [  20/  26]	Loss 0.341 (0.344)	test_acc   0.83 (  0.83)	test_minacc   0.86 (  0.84)	test_majacc   0.82 (  0.83)	Loss_d 0.341 (0.344)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.86 (  0.84)	test_majacc_d   0.82 (  0.83)	test_corr_d   0.56 (  0.59)
Test: [  26/  26]	Loss 0.298 (0.347)	test_acc   0.86 (  0.83)	test_minacc   0.74 (  0.83)	test_majacc   0.87 (  0.83)	Loss_d 0.298 (0.347)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.74 (  0.83)	test_majacc_d   0.87 (  0.83)	test_corr_d   0.68 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.30it/s]
Test: [  0/  1]	Loss 1.137 (1.137)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.78 (  0.78)	Loss_d 1.137 (1.137)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.78 (  0.78)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 1.137 (1.137)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.78 (  0.78)	Loss_d 1.137 (1.137)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.78 (  0.78)	test_corr_d  -0.01 ( -0.01)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/130/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0358 (0.0369)	validation_time 0.0004 (0.0008)	train_time 0.0354 (0.0359)
record: (train_acc, test_acc) (0.8342000322341919, 0.6110000014305115)
last accs (train_acc, test_acc) (0.8342000322341919, 0.6110000014305115)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 19%|#9        | 5/26 [00:00<00:00, 23.76it/s] 35%|###4      | 9/26 [00:00<00:00, 29.33it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.21it/s] 69%|######9   | 18/26 [00:00<00:00, 35.25it/s] 85%|########4 | 22/26 [00:00<00:00, 36.57it/s]100%|##########| 26/26 [00:00<00:00, 31.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.003 (0.002)	train_nll   0.40 (  0.42)	train_penalty   0.00 (  0.00)	weight_norm  24.17 ( 24.16)	train_acc   0.80 (  0.78)	train_minacc   0.71 (  0.84)	train_majacc   0.81 (  0.77)	train_corr   0.00 (  0.00)	l1 5.3043 (5.4502)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.31it/s] 27%|##6       | 7/26 [00:00<00:00, 28.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.23it/s] 46%|####6     | 12/26 [00:00<00:00, 36.34it/s] 65%|######5   | 17/26 [00:00<00:00, 39.43it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.43it/s] 88%|########8 | 23/26 [00:00<00:00, 45.89it/s]100%|##########| 26/26 [00:00<00:00, 35.76it/s]
Test: [   0/  26]	Loss 0.442 (0.442)	test_acc   0.75 (  0.75)	test_minacc   0.85 (  0.85)	test_majacc   0.73 (  0.73)	Loss_d 0.442 (0.442)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.48 (  0.48)
Test: [  10/  26]	Loss 0.415 (0.438)	test_acc   0.78 (  0.76)	test_minacc   0.78 (  0.81)	test_majacc   0.78 (  0.75)	Loss_d 0.415 (0.438)	test_acc_d   0.78 (  0.76)	test_minacc_d   0.78 (  0.81)	test_majacc_d   0.78 (  0.75)	test_corr_d   0.56 (  0.51)
Test: [  20/  26]	Loss 0.414 (0.433)	test_acc   0.79 (  0.77)	test_minacc   0.86 (  0.81)	test_majacc   0.77 (  0.76)	Loss_d 0.414 (0.433)	test_acc_d   0.79 (  0.77)	test_minacc_d   0.86 (  0.81)	test_majacc_d   0.77 (  0.76)	test_corr_d   0.47 (  0.51)
Test: [  26/  26]	Loss 0.396 (0.433)	test_acc   0.80 (  0.77)	test_minacc   0.71 (  0.80)	test_majacc   0.81 (  0.76)	Loss_d 0.396 (0.433)	test_acc_d   0.80 (  0.77)	test_minacc_d   0.71 (  0.80)	test_majacc_d   0.81 (  0.76)	test_corr_d   0.63 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.24it/s]
Test: [  0/  1]	Loss 1.068 (1.068)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.74 (  0.74)	Loss_d 1.068 (1.068)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 1.068 (1.068)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.74 (  0.74)	Loss_d 1.068 (1.068)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.02 ( -0.02)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/130/checkpoints/model_best.pth
Overall Timing[ 16/  1]	epoch_time 0.0364 (0.0369)	validation_time 0.0003 (0.0007)	train_time 0.0360 (0.0359)
record: (train_acc, test_acc) (0.7707000287771225, 0.6270000338554382)
last accs (train_acc, test_acc) (0.7707000287771225, 0.6270000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.88it/s] 19%|#9        | 5/26 [00:00<00:00, 26.27it/s] 38%|###8      | 10/26 [00:00<00:00, 33.62it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.05it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.26it/s] 96%|#########6| 25/26 [00:00<00:00, 40.13it/s]100%|##########| 26/26 [00:00<00:00, 33.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.001 (0.001)	train_nll   0.42 (  0.45)	train_penalty   0.00 (  0.00)	weight_norm  24.18 ( 24.18)	train_acc   0.77 (  0.76)	train_minacc   0.71 (  0.84)	train_majacc   0.78 (  0.75)	train_corr   0.00 (  0.00)	l1 5.1934 (5.2358)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.78it/s] 23%|##3       | 6/26 [00:00<00:00, 29.56it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.56it/s] 46%|####6     | 12/26 [00:00<00:00, 38.35it/s] 69%|######9   | 18/26 [00:00<00:00, 45.49it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.49it/s] 92%|#########2| 24/26 [00:00<00:00, 46.35it/s]100%|##########| 26/26 [00:00<00:00, 38.92it/s]
Test: [   0/  26]	Loss 0.463 (0.463)	test_acc   0.73 (  0.73)	test_minacc   0.87 (  0.87)	test_majacc   0.70 (  0.70)	Loss_d 0.463 (0.463)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.434 (0.455)	test_acc   0.76 (  0.74)	test_minacc   0.78 (  0.84)	test_majacc   0.76 (  0.73)	Loss_d 0.434 (0.455)	test_acc_d   0.76 (  0.74)	test_minacc_d   0.78 (  0.84)	test_majacc_d   0.76 (  0.73)	test_corr_d   0.52 (  0.47)
Test: [  20/  26]	Loss 0.435 (0.448)	test_acc   0.76 (  0.75)	test_minacc   0.91 (  0.84)	test_majacc   0.73 (  0.73)	Loss_d 0.435 (0.448)	test_acc_d   0.76 (  0.75)	test_minacc_d   0.91 (  0.84)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.43 (  0.47)
Test: [  26/  26]	Loss 0.421 (0.448)	test_acc   0.77 (  0.75)	test_minacc   0.71 (  0.84)	test_majacc   0.78 (  0.74)	Loss_d 0.421 (0.448)	test_acc_d   0.77 (  0.75)	test_minacc_d   0.71 (  0.84)	test_majacc_d   0.78 (  0.74)	test_corr_d   0.58 (  0.48)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.33it/s]
Test: [  0/  1]	Loss 1.006 (1.006)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.74 (  0.74)	Loss_d 1.006 (1.006)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 1.006 (1.006)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.74 (  0.74)	Loss_d 1.006 (1.006)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.07 ( -0.07)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/130/checkpoints/model_best.pth
Overall Timing[ 17/  1]	epoch_time 0.0343 (0.0368)	validation_time 0.0004 (0.0007)	train_time 0.0339 (0.0358)
record: (train_acc, test_acc) (0.7518000285625458, 0.6600000262260437)
last accs (train_acc, test_acc) (0.7518000285625458, 0.6600000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.59it/s] 19%|#9        | 5/26 [00:00<00:00, 23.21it/s] 38%|###8      | 10/26 [00:00<00:00, 31.61it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.29it/s] 69%|######9   | 18/26 [00:00<00:00, 35.81it/s] 88%|########8 | 23/26 [00:00<00:00, 37.53it/s]100%|##########| 26/26 [00:00<00:00, 32.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.001 (0.001)	train_nll   0.41 (  0.45)	train_penalty   0.00 (  0.00)	weight_norm  24.18 ( 24.18)	train_acc   0.77 (  0.75)	train_minacc   0.71 (  0.84)	train_majacc   0.78 (  0.73)	train_corr   0.00 (  0.00)	l1 5.1133 (5.2191)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.49it/s] 27%|##6       | 7/26 [00:00<00:00, 25.89it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.89it/s] 50%|#####     | 13/26 [00:00<00:00, 34.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.95it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.95it/s] 96%|#########6| 25/26 [00:00<00:00, 44.40it/s]100%|##########| 26/26 [00:00<00:00, 34.28it/s]
Test: [   0/  26]	Loss 0.439 (0.439)	test_acc   0.76 (  0.76)	test_minacc   0.87 (  0.87)	test_majacc   0.74 (  0.74)	Loss_d 0.439 (0.439)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.49 (  0.49)
Test: [  10/  26]	Loss 0.423 (0.437)	test_acc   0.76 (  0.75)	test_minacc   0.76 (  0.82)	test_majacc   0.76 (  0.74)	Loss_d 0.423 (0.437)	test_acc_d   0.76 (  0.75)	test_minacc_d   0.76 (  0.82)	test_majacc_d   0.76 (  0.74)	test_corr_d   0.56 (  0.51)
Test: [  20/  26]	Loss 0.421 (0.430)	test_acc   0.76 (  0.76)	test_minacc   0.86 (  0.82)	test_majacc   0.74 (  0.75)	Loss_d 0.421 (0.430)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.86 (  0.82)	test_majacc_d   0.74 (  0.75)	test_corr_d   0.47 (  0.51)
Test: [  26/  26]	Loss 0.412 (0.431)	test_acc   0.77 (  0.76)	test_minacc   0.71 (  0.82)	test_majacc   0.78 (  0.75)	Loss_d 0.412 (0.431)	test_acc_d   0.77 (  0.76)	test_minacc_d   0.71 (  0.82)	test_majacc_d   0.78 (  0.75)	test_corr_d   0.61 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.84it/s]
Test: [  0/  1]	Loss 1.039 (1.039)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.74 (  0.74)	Loss_d 1.039 (1.039)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 1.039 (1.039)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.74 (  0.74)	Loss_d 1.039 (1.039)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.00 (  0.00)
Overall Timing[ 18/  1]	epoch_time 0.0351 (0.0367)	validation_time 0.0003 (0.0007)	train_time 0.0348 (0.0358)
record: (train_acc, test_acc) (0.7518000285625458, 0.6600000262260437)
last accs (train_acc, test_acc) (0.7622000325918198, 0.6370000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.70it/s] 19%|#9        | 5/26 [00:00<00:00, 21.44it/s] 35%|###4      | 9/26 [00:00<00:00, 28.31it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.23it/s] 92%|#########2| 24/26 [00:00<00:00, 38.15it/s]100%|##########| 26/26 [00:00<00:00, 31.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.42 (  0.44)	train_penalty   0.00 (  0.00)	weight_norm  24.19 ( 24.19)	train_acc   0.76 (  0.75)	train_minacc   0.74 (  0.83)	train_majacc   0.76 (  0.74)	train_corr   0.00 (  0.00)	l1 5.1881 (5.2476)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.17it/s] 27%|##6       | 7/26 [00:00<00:00, 33.58it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.58it/s] 50%|#####     | 13/26 [00:00<00:00, 40.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.77it/s] 96%|#########6| 25/26 [00:00<00:00, 46.60it/s]100%|##########| 26/26 [00:00<00:00, 38.68it/s]
Test: [   0/  26]	Loss 0.440 (0.440)	test_acc   0.76 (  0.76)	test_minacc   0.89 (  0.89)	test_majacc   0.73 (  0.73)	Loss_d 0.440 (0.440)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.48 (  0.48)
Test: [  10/  26]	Loss 0.419 (0.432)	test_acc   0.77 (  0.76)	test_minacc   0.76 (  0.83)	test_majacc   0.77 (  0.74)	Loss_d 0.419 (0.432)	test_acc_d   0.77 (  0.76)	test_minacc_d   0.76 (  0.83)	test_majacc_d   0.77 (  0.74)	test_corr_d   0.56 (  0.51)
Test: [  20/  26]	Loss 0.417 (0.425)	test_acc   0.76 (  0.76)	test_minacc   0.86 (  0.83)	test_majacc   0.74 (  0.75)	Loss_d 0.417 (0.425)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.86 (  0.83)	test_majacc_d   0.74 (  0.75)	test_corr_d   0.47 (  0.51)
Test: [  26/  26]	Loss 0.417 (0.426)	test_acc   0.77 (  0.76)	test_minacc   0.74 (  0.83)	test_majacc   0.77 (  0.75)	Loss_d 0.417 (0.426)	test_acc_d   0.77 (  0.76)	test_minacc_d   0.74 (  0.83)	test_majacc_d   0.77 (  0.75)	test_corr_d   0.60 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.58it/s]
Test: [  0/  1]	Loss 1.043 (1.043)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.73 (  0.73)	Loss_d 1.043 (1.043)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 1.043 (1.043)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.73 (  0.73)	Loss_d 1.043 (1.043)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 19/  1]	epoch_time 0.0344 (0.0366)	validation_time 0.0003 (0.0007)	train_time 0.0341 (0.0357)
record: (train_acc, test_acc) (0.7518000285625458, 0.6600000262260437)
last accs (train_acc, test_acc) (0.7635000290274621, 0.6350000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 19%|#9        | 5/26 [00:00<00:00, 22.94it/s] 38%|###8      | 10/26 [00:00<00:00, 31.10it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.42it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.85it/s] 96%|#########6| 25/26 [00:00<00:00, 38.01it/s]100%|##########| 26/26 [00:00<00:00, 31.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.43 (  0.44)	train_penalty   0.00 (  0.00)	weight_norm  24.19 ( 24.19)	train_acc   0.75 (  0.75)	train_minacc   0.68 (  0.83)	train_majacc   0.76 (  0.74)	train_corr   0.00 (  0.00)	l1 5.2378 (5.2777)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.77it/s] 23%|##3       | 6/26 [00:00<00:00, 33.04it/s]                                               23%|##3       | 6/26 [00:00<00:00, 33.04it/s] 46%|####6     | 12/26 [00:00<00:00, 42.79it/s] 65%|######5   | 17/26 [00:00<00:00, 43.41it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.41it/s] 88%|########8 | 23/26 [00:00<00:00, 48.65it/s]100%|##########| 26/26 [00:00<00:00, 39.87it/s]
Test: [   0/  26]	Loss 0.449 (0.449)	test_acc   0.75 (  0.75)	test_minacc   0.89 (  0.89)	test_majacc   0.72 (  0.72)	Loss_d 0.449 (0.449)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.47 (  0.47)
Test: [  10/  26]	Loss 0.421 (0.439)	test_acc   0.76 (  0.75)	test_minacc   0.76 (  0.82)	test_majacc   0.76 (  0.74)	Loss_d 0.421 (0.439)	test_acc_d   0.76 (  0.75)	test_minacc_d   0.76 (  0.82)	test_majacc_d   0.76 (  0.74)	test_corr_d   0.55 (  0.50)
Test: [  20/  26]	Loss 0.419 (0.430)	test_acc   0.76 (  0.76)	test_minacc   0.86 (  0.83)	test_majacc   0.74 (  0.75)	Loss_d 0.419 (0.430)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.86 (  0.83)	test_majacc_d   0.74 (  0.75)	test_corr_d   0.47 (  0.51)
Test: [  26/  26]	Loss 0.424 (0.431)	test_acc   0.75 (  0.76)	test_minacc   0.68 (  0.83)	test_majacc   0.76 (  0.75)	Loss_d 0.424 (0.431)	test_acc_d   0.75 (  0.76)	test_minacc_d   0.68 (  0.83)	test_majacc_d   0.76 (  0.75)	test_corr_d   0.59 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.14it/s]
Test: [  0/  1]	Loss 1.059 (1.059)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.73 (  0.73)	Loss_d 1.059 (1.059)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 1.059 (1.059)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.73 (  0.73)	Loss_d 1.059 (1.059)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 20/  1]	epoch_time 0.0353 (0.0365)	validation_time 0.0004 (0.0007)	train_time 0.0349 (0.0356)
record: (train_acc, test_acc) (0.7518000285625458, 0.6600000262260437)
last accs (train_acc, test_acc) (0.7593000285625457, 0.6350000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.77it/s] 19%|#9        | 5/26 [00:00<00:00, 25.67it/s] 38%|###8      | 10/26 [00:00<00:00, 33.64it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.84it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.82it/s] 96%|#########6| 25/26 [00:00<00:00, 39.09it/s]100%|##########| 26/26 [00:00<00:00, 33.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.43 (  0.44)	train_penalty   0.00 (  0.00)	weight_norm  24.19 ( 24.19)	train_acc   0.74 (  0.75)	train_minacc   0.68 (  0.83)	train_majacc   0.75 (  0.74)	train_corr   0.00 (  0.00)	l1 5.2277 (5.2855)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.87it/s] 31%|###       | 8/26 [00:00<00:00, 38.32it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.32it/s] 50%|#####     | 13/26 [00:00<00:00, 42.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.70it/s] 96%|#########6| 25/26 [00:00<00:00, 47.54it/s]100%|##########| 26/26 [00:00<00:00, 40.97it/s]
Test: [   0/  26]	Loss 0.449 (0.449)	test_acc   0.75 (  0.75)	test_minacc   0.89 (  0.89)	test_majacc   0.73 (  0.73)	Loss_d 0.449 (0.449)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.47 (  0.47)
Test: [  10/  26]	Loss 0.425 (0.443)	test_acc   0.76 (  0.75)	test_minacc   0.78 (  0.82)	test_majacc   0.76 (  0.73)	Loss_d 0.425 (0.443)	test_acc_d   0.76 (  0.75)	test_minacc_d   0.78 (  0.82)	test_majacc_d   0.76 (  0.73)	test_corr_d   0.56 (  0.50)
Test: [  20/  26]	Loss 0.417 (0.432)	test_acc   0.76 (  0.76)	test_minacc   0.86 (  0.82)	test_majacc   0.74 (  0.75)	Loss_d 0.417 (0.432)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.86 (  0.82)	test_majacc_d   0.74 (  0.75)	test_corr_d   0.48 (  0.51)
Test: [  26/  26]	Loss 0.423 (0.432)	test_acc   0.74 (  0.76)	test_minacc   0.68 (  0.82)	test_majacc   0.75 (  0.75)	Loss_d 0.423 (0.432)	test_acc_d   0.74 (  0.76)	test_minacc_d   0.68 (  0.82)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.60 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.43it/s]
Test: [  0/  1]	Loss 1.072 (1.072)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.74 (  0.74)	Loss_d 1.072 (1.072)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 1.072 (1.072)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.74 (  0.74)	Loss_d 1.072 (1.072)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.01 (  0.01)
Overall Timing[ 21/  1]	epoch_time 0.0345 (0.0364)	validation_time 0.0004 (0.0007)	train_time 0.0341 (0.0356)
record: (train_acc, test_acc) (0.7518000285625458, 0.6600000262260437)
last accs (train_acc, test_acc) (0.7587000249028206, 0.6330000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.59it/s] 19%|#9        | 5/26 [00:00<00:00, 23.44it/s] 38%|###8      | 10/26 [00:00<00:00, 31.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.63it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.80it/s] 96%|#########6| 25/26 [00:00<00:00, 39.00it/s]100%|##########| 26/26 [00:00<00:00, 32.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.42 (  0.44)	train_penalty   0.00 (  0.00)	weight_norm  24.19 ( 24.19)	train_acc   0.76 (  0.75)	train_minacc   0.71 (  0.84)	train_majacc   0.77 (  0.73)	train_corr   0.00 (  0.00)	l1 5.2418 (5.3019)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.14it/s] 27%|##6       | 7/26 [00:00<00:00, 34.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.59it/s] 50%|#####     | 13/26 [00:00<00:00, 40.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.65it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.65it/s] 96%|#########6| 25/26 [00:00<00:00, 46.68it/s]100%|##########| 26/26 [00:00<00:00, 39.38it/s]
Test: [   0/  26]	Loss 0.444 (0.444)	test_acc   0.76 (  0.76)	test_minacc   0.89 (  0.89)	test_majacc   0.73 (  0.73)	Loss_d 0.444 (0.444)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.48 (  0.48)
Test: [  10/  26]	Loss 0.426 (0.441)	test_acc   0.77 (  0.75)	test_minacc   0.78 (  0.82)	test_majacc   0.77 (  0.73)	Loss_d 0.426 (0.441)	test_acc_d   0.77 (  0.75)	test_minacc_d   0.78 (  0.82)	test_majacc_d   0.77 (  0.73)	test_corr_d   0.56 (  0.51)
Test: [  20/  26]	Loss 0.410 (0.428)	test_acc   0.76 (  0.76)	test_minacc   0.86 (  0.83)	test_majacc   0.74 (  0.75)	Loss_d 0.410 (0.428)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.86 (  0.83)	test_majacc_d   0.74 (  0.75)	test_corr_d   0.49 (  0.52)
Test: [  26/  26]	Loss 0.420 (0.428)	test_acc   0.76 (  0.76)	test_minacc   0.71 (  0.83)	test_majacc   0.77 (  0.75)	Loss_d 0.420 (0.428)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.71 (  0.83)	test_majacc_d   0.77 (  0.75)	test_corr_d   0.60 (  0.53)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.73it/s]
Test: [  0/  1]	Loss 1.079 (1.079)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.74 (  0.74)	Loss_d 1.079 (1.079)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 1.079 (1.079)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.74 (  0.74)	Loss_d 1.079 (1.079)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.02 (  0.02)
Overall Timing[ 22/  1]	epoch_time 0.0361 (0.0364)	validation_time 0.0003 (0.0006)	train_time 0.0358 (0.0356)
record: (train_acc, test_acc) (0.7518000285625458, 0.6600000262260437)
last accs (train_acc, test_acc) (0.7609000339508056, 0.6340000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.01it/s] 23%|##3       | 6/26 [00:00<00:00, 26.91it/s] 38%|###8      | 10/26 [00:00<00:00, 32.12it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.49it/s] 88%|########8 | 23/26 [00:00<00:00, 36.78it/s]100%|##########| 26/26 [00:00<00:00, 32.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 5.174753189086914
set z to 4.916015529632568
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.43 (  0.44)	train_penalty   0.00 (  0.00)	weight_norm  24.20 ( 24.20)	train_acc   0.76 (  0.75)	train_minacc   0.71 (  0.83)	train_majacc   0.76 (  0.74)	train_corr   0.00 (  0.00)	l1 5.3071 (5.3346)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.26it/s] 23%|##3       | 6/26 [00:00<00:00, 32.36it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.36it/s] 42%|####2     | 11/26 [00:00<00:00, 39.69it/s] 65%|######5   | 17/26 [00:00<00:00, 43.07it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.07it/s] 88%|########8 | 23/26 [00:00<00:00, 47.23it/s]100%|##########| 26/26 [00:00<00:00, 38.44it/s]
Test: [   0/  26]	Loss 0.447 (0.447)	test_acc   0.75 (  0.75)	test_minacc   0.89 (  0.89)	test_majacc   0.73 (  0.73)	Loss_d 0.447 (0.447)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.48 (  0.48)
Test: [  10/  26]	Loss 0.430 (0.445)	test_acc   0.76 (  0.74)	test_minacc   0.80 (  0.82)	test_majacc   0.76 (  0.72)	Loss_d 0.430 (0.445)	test_acc_d   0.76 (  0.74)	test_minacc_d   0.80 (  0.82)	test_majacc_d   0.76 (  0.72)	test_corr_d   0.55 (  0.50)
Test: [  20/  26]	Loss 0.404 (0.429)	test_acc   0.78 (  0.76)	test_minacc   0.86 (  0.83)	test_majacc   0.76 (  0.74)	Loss_d 0.404 (0.429)	test_acc_d   0.78 (  0.76)	test_minacc_d   0.86 (  0.83)	test_majacc_d   0.76 (  0.74)	test_corr_d   0.49 (  0.52)
Test: [  26/  26]	Loss 0.422 (0.429)	test_acc   0.76 (  0.76)	test_minacc   0.71 (  0.83)	test_majacc   0.77 (  0.75)	Loss_d 0.422 (0.429)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.71 (  0.83)	test_majacc_d   0.77 (  0.75)	test_corr_d   0.60 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.82it/s]
Test: [  0/  1]	Loss 1.089 (1.089)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.74 (  0.74)	Loss_d 1.089 (1.089)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 1.089 (1.089)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.74 (  0.74)	Loss_d 1.089 (1.089)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.01 (  0.01)
Overall Timing[ 23/  1]	epoch_time 0.0367 (0.0364)	validation_time 0.0004 (0.0006)	train_time 0.0362 (0.0356)
record: (train_acc, test_acc) (0.7518000285625458, 0.6600000262260437)
last accs (train_acc, test_acc) (0.7587000340819359, 0.6330000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.19it/s] 23%|##3       | 6/26 [00:00<00:00, 27.47it/s] 38%|###8      | 10/26 [00:00<00:00, 31.91it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.37it/s] 69%|######9   | 18/26 [00:00<00:00, 34.62it/s] 88%|########8 | 23/26 [00:00<00:00, 36.74it/s]100%|##########| 26/26 [00:00<00:00, 31.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.43 (  0.44)	train_penalty   0.00 (  0.00)	weight_norm  24.20 ( 24.20)	train_acc   0.75 (  0.75)	train_minacc   0.71 (  0.83)	train_majacc   0.75 (  0.74)	train_corr   0.00 (  0.00)	l1 5.3999 (5.3754)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.34it/s] 27%|##6       | 7/26 [00:00<00:00, 33.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.48it/s] 46%|####6     | 12/26 [00:00<00:00, 39.47it/s] 65%|######5   | 17/26 [00:00<00:00, 39.84it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.84it/s] 88%|########8 | 23/26 [00:00<00:00, 44.86it/s]100%|##########| 26/26 [00:00<00:00, 37.04it/s]
Test: [   0/  26]	Loss 0.456 (0.456)	test_acc   0.74 (  0.74)	test_minacc   0.89 (  0.89)	test_majacc   0.72 (  0.72)	Loss_d 0.456 (0.456)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.47 (  0.47)
Test: [  10/  26]	Loss 0.441 (0.456)	test_acc   0.76 (  0.73)	test_minacc   0.84 (  0.83)	test_majacc   0.75 (  0.71)	Loss_d 0.441 (0.456)	test_acc_d   0.76 (  0.73)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.75 (  0.71)	test_corr_d   0.54 (  0.49)
Test: [  20/  26]	Loss 0.403 (0.437)	test_acc   0.77 (  0.75)	test_minacc   0.86 (  0.83)	test_majacc   0.75 (  0.74)	Loss_d 0.403 (0.437)	test_acc_d   0.77 (  0.75)	test_minacc_d   0.86 (  0.83)	test_majacc_d   0.75 (  0.74)	test_corr_d   0.49 (  0.51)
Test: [  26/  26]	Loss 0.425 (0.435)	test_acc   0.76 (  0.75)	test_minacc   0.71 (  0.83)	test_majacc   0.77 (  0.74)	Loss_d 0.425 (0.435)	test_acc_d   0.76 (  0.75)	test_minacc_d   0.71 (  0.83)	test_majacc_d   0.77 (  0.74)	test_corr_d   0.59 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.47it/s]
Test: [  0/  1]	Loss 1.107 (1.107)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.74 (  0.74)	Loss_d 1.107 (1.107)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 1.107 (1.107)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.74 (  0.74)	Loss_d 1.107 (1.107)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.00 (  0.00)
Overall Timing[ 24/  1]	epoch_time 0.0366 (0.0364)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0356)
record: (train_acc, test_acc) (0.7518000285625458, 0.6600000262260437)
last accs (train_acc, test_acc) (0.754100026011467, 0.6430000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.01it/s] 19%|#9        | 5/26 [00:00<00:00, 25.99it/s] 38%|###8      | 10/26 [00:00<00:00, 33.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.11it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.32it/s] 96%|#########6| 25/26 [00:00<00:00, 40.70it/s]100%|##########| 26/26 [00:00<00:00, 33.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.43 (  0.44)	train_penalty   0.00 (  0.00)	weight_norm  24.21 ( 24.21)	train_acc   0.75 (  0.75)	train_minacc   0.74 (  0.84)	train_majacc   0.75 (  0.73)	train_corr   0.00 (  0.00)	l1 5.5322 (5.4327)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.07it/s] 35%|###4      | 9/26 [00:00<00:00, 39.48it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.48it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.85it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.85it/s] 81%|########  | 21/26 [00:00<00:00, 47.90it/s]100%|##########| 26/26 [00:00<00:00, 42.13it/s]
Test: [   0/  26]	Loss 0.456 (0.456)	test_acc   0.75 (  0.75)	test_minacc   0.89 (  0.89)	test_majacc   0.73 (  0.73)	Loss_d 0.456 (0.456)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.47 (  0.47)
Test: [  10/  26]	Loss 0.456 (0.466)	test_acc   0.75 (  0.73)	test_minacc   0.80 (  0.83)	test_majacc   0.74 (  0.71)	Loss_d 0.456 (0.466)	test_acc_d   0.75 (  0.73)	test_minacc_d   0.80 (  0.83)	test_majacc_d   0.74 (  0.71)	test_corr_d   0.53 (  0.48)
Test: [  20/  26]	Loss 0.398 (0.444)	test_acc   0.77 (  0.75)	test_minacc   0.86 (  0.84)	test_majacc   0.75 (  0.73)	Loss_d 0.398 (0.444)	test_acc_d   0.77 (  0.75)	test_minacc_d   0.86 (  0.84)	test_majacc_d   0.75 (  0.73)	test_corr_d   0.50 (  0.50)
Test: [  26/  26]	Loss 0.424 (0.441)	test_acc   0.76 (  0.75)	test_minacc   0.71 (  0.84)	test_majacc   0.77 (  0.74)	Loss_d 0.424 (0.441)	test_acc_d   0.76 (  0.75)	test_minacc_d   0.71 (  0.84)	test_majacc_d   0.77 (  0.74)	test_corr_d   0.59 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.38it/s]
Test: [  0/  1]	Loss 1.143 (1.143)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.76 (  0.76)	Loss_d 1.143 (1.143)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 1.143 (1.143)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.76 (  0.76)	Loss_d 1.143 (1.143)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.00 (  0.00)
Overall Timing[ 25/  1]	epoch_time 0.0350 (0.0364)	validation_time 0.0003 (0.0006)	train_time 0.0346 (0.0356)
record: (train_acc, test_acc) (0.7518000285625458, 0.6600000262260437)
last accs (train_acc, test_acc) (0.7507000262141228, 0.6510000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.89it/s] 19%|#9        | 5/26 [00:00<00:00, 24.71it/s] 35%|###4      | 9/26 [00:00<00:00, 30.83it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.04it/s] 92%|#########2| 24/26 [00:00<00:00, 39.71it/s]100%|##########| 26/26 [00:00<00:00, 33.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.001 (0.001)	train_nll   0.44 (  0.45)	train_penalty   0.00 (  0.00)	weight_norm  24.23 ( 24.22)	train_acc   0.75 (  0.75)	train_minacc   0.81 (  0.85)	train_majacc   0.74 (  0.73)	train_corr   0.00 (  0.00)	l1 5.8041 (5.5169)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.92it/s] 27%|##6       | 7/26 [00:00<00:00, 36.85it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.85it/s] 50%|#####     | 13/26 [00:00<00:00, 41.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.90it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.90it/s] 96%|#########6| 25/26 [00:00<00:00, 48.18it/s]100%|##########| 26/26 [00:00<00:00, 38.72it/s]
Test: [   0/  26]	Loss 0.461 (0.461)	test_acc   0.74 (  0.74)	test_minacc   0.87 (  0.87)	test_majacc   0.71 (  0.71)	Loss_d 0.461 (0.461)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.46 (  0.46)
Test: [  10/  26]	Loss 0.484 (0.485)	test_acc   0.72 (  0.71)	test_minacc   0.78 (  0.82)	test_majacc   0.71 (  0.69)	Loss_d 0.484 (0.485)	test_acc_d   0.72 (  0.71)	test_minacc_d   0.78 (  0.82)	test_majacc_d   0.71 (  0.69)	test_corr_d   0.49 (  0.45)
Test: [  20/  26]	Loss 0.398 (0.462)	test_acc   0.78 (  0.73)	test_minacc   0.89 (  0.84)	test_majacc   0.76 (  0.72)	Loss_d 0.398 (0.462)	test_acc_d   0.78 (  0.73)	test_minacc_d   0.89 (  0.84)	test_majacc_d   0.76 (  0.72)	test_corr_d   0.48 (  0.47)
Test: [  26/  26]	Loss 0.427 (0.456)	test_acc   0.75 (  0.74)	test_minacc   0.74 (  0.84)	test_majacc   0.75 (  0.72)	Loss_d 0.427 (0.456)	test_acc_d   0.75 (  0.74)	test_minacc_d   0.74 (  0.84)	test_majacc_d   0.75 (  0.72)	test_corr_d   0.58 (  0.48)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.29it/s]
Test: [  0/  1]	Loss 1.171 (1.171)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.75 (  0.75)	Loss_d 1.171 (1.171)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 1.171 (1.171)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.75 (  0.75)	Loss_d 1.171 (1.171)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.04 ( -0.04)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/130/checkpoints/model_best.pth
Overall Timing[ 26/  1]	epoch_time 0.0359 (0.0363)	validation_time 0.0004 (0.0006)	train_time 0.0354 (0.0356)
record: (train_acc, test_acc) (0.7401000310778618, 0.6620000600814819)
last accs (train_acc, test_acc) (0.7401000310778618, 0.6620000600814819)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.77it/s] 19%|#9        | 5/26 [00:00<00:00, 23.53it/s] 35%|###4      | 9/26 [00:00<00:00, 29.96it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.30it/s] 92%|#########2| 24/26 [00:00<00:00, 39.20it/s]100%|##########| 26/26 [00:00<00:00, 31.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.001)	train_nll   0.46 (  0.46)	train_penalty   0.00 (  0.00)	weight_norm  24.24 ( 24.23)	train_acc   0.74 (  0.74)	train_minacc   0.81 (  0.84)	train_majacc   0.73 (  0.72)	train_corr   0.00 (  0.00)	l1 5.8691 (5.5176)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.46it/s] 27%|##6       | 7/26 [00:00<00:00, 36.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.39it/s] 50%|#####     | 13/26 [00:00<00:00, 42.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.11it/s] 96%|#########6| 25/26 [00:00<00:00, 47.88it/s]100%|##########| 26/26 [00:00<00:00, 39.90it/s]
Test: [   0/  26]	Loss 0.474 (0.474)	test_acc   0.70 (  0.70)	test_minacc   0.85 (  0.85)	test_majacc   0.67 (  0.67)	Loss_d 0.474 (0.474)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.530 (0.514)	test_acc   0.70 (  0.69)	test_minacc   0.80 (  0.85)	test_majacc   0.68 (  0.66)	Loss_d 0.530 (0.514)	test_acc_d   0.70 (  0.69)	test_minacc_d   0.80 (  0.85)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.42 (  0.40)
Test: [  20/  26]	Loss 0.433 (0.500)	test_acc   0.75 (  0.70)	test_minacc   0.89 (  0.85)	test_majacc   0.73 (  0.68)	Loss_d 0.433 (0.500)	test_acc_d   0.75 (  0.70)	test_minacc_d   0.89 (  0.85)	test_majacc_d   0.73 (  0.68)	test_corr_d   0.44 (  0.41)
Test: [  26/  26]	Loss 0.444 (0.491)	test_acc   0.75 (  0.71)	test_minacc   0.81 (  0.86)	test_majacc   0.74 (  0.69)	Loss_d 0.444 (0.491)	test_acc_d   0.75 (  0.71)	test_minacc_d   0.81 (  0.86)	test_majacc_d   0.74 (  0.69)	test_corr_d   0.56 (  0.43)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.33it/s]
Test: [  0/  1]	Loss 1.155 (1.155)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.73 (  0.73)	Loss_d 1.155 (1.155)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 1.155 (1.155)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.73 (  0.73)	Loss_d 1.155 (1.155)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.09 ( -0.09)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/130/checkpoints/model_best.pth
Overall Timing[ 27/  1]	epoch_time 0.0351 (0.0363)	validation_time 0.0004 (0.0006)	train_time 0.0347 (0.0356)
record: (train_acc, test_acc) (0.712900030374527, 0.6820000410079956)
last accs (train_acc, test_acc) (0.712900030374527, 0.6820000410079956)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.31it/s] 27%|##6       | 7/26 [00:00<00:00, 29.28it/s] 42%|####2     | 11/26 [00:00<00:00, 32.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.73it/s] 88%|########8 | 23/26 [00:00<00:00, 37.74it/s]100%|##########| 26/26 [00:00<00:00, 32.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.003 (0.002)	train_nll   0.39 (  0.42)	train_penalty   0.00 (  0.00)	weight_norm  24.26 ( 24.25)	train_acc   0.82 (  0.77)	train_minacc   0.58 (  0.80)	train_majacc   0.85 (  0.77)	train_corr   0.00 (  0.00)	l1 6.0162 (5.5989)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 27%|##6       | 7/26 [00:00<00:00, 31.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.52it/s] 50%|#####     | 13/26 [00:00<00:00, 37.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.47it/s] 96%|#########6| 25/26 [00:00<00:00, 44.83it/s]100%|##########| 26/26 [00:00<00:00, 36.80it/s]
Test: [   0/  26]	Loss 0.424 (0.424)	test_acc   0.78 (  0.78)	test_minacc   0.85 (  0.85)	test_majacc   0.77 (  0.77)	Loss_d 0.424 (0.424)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.51 (  0.51)
Test: [  10/  26]	Loss 0.492 (0.452)	test_acc   0.72 (  0.76)	test_minacc   0.76 (  0.82)	test_majacc   0.71 (  0.75)	Loss_d 0.492 (0.452)	test_acc_d   0.72 (  0.76)	test_minacc_d   0.76 (  0.82)	test_majacc_d   0.71 (  0.75)	test_corr_d   0.50 (  0.49)
Test: [  20/  26]	Loss 0.389 (0.446)	test_acc   0.79 (  0.76)	test_minacc   0.83 (  0.80)	test_majacc   0.79 (  0.76)	Loss_d 0.389 (0.446)	test_acc_d   0.79 (  0.76)	test_minacc_d   0.83 (  0.80)	test_majacc_d   0.79 (  0.76)	test_corr_d   0.53 (  0.50)
Test: [  26/  26]	Loss 0.363 (0.431)	test_acc   0.82 (  0.77)	test_minacc   0.61 (  0.80)	test_majacc   0.85 (  0.77)	Loss_d 0.363 (0.431)	test_acc_d   0.82 (  0.77)	test_minacc_d   0.61 (  0.80)	test_majacc_d   0.85 (  0.77)	test_corr_d   0.65 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.49it/s]
Test: [  0/  1]	Loss 1.175 (1.175)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.76 (  0.76)	Loss_d 1.175 (1.175)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.76 (  0.76)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 1.175 (1.175)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.76 (  0.76)	Loss_d 1.175 (1.175)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.76 (  0.76)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 28/  1]	epoch_time 0.0359 (0.0363)	validation_time 0.0003 (0.0006)	train_time 0.0356 (0.0356)
record: (train_acc, test_acc) (0.712900030374527, 0.6820000410079956)
last accs (train_acc, test_acc) (0.7747000251412391, 0.6410000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.66it/s] 19%|#9        | 5/26 [00:00<00:00, 21.82it/s] 35%|###4      | 9/26 [00:00<00:00, 28.95it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.29it/s] 92%|#########2| 24/26 [00:00<00:00, 38.16it/s]100%|##########| 26/26 [00:00<00:00, 29.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.001 (0.001)	train_nll   0.50 (  0.44)	train_penalty   0.00 (  0.00)	weight_norm  24.29 ( 24.28)	train_acc   0.68 (  0.75)	train_minacc   0.84 (  0.82)	train_majacc   0.66 (  0.74)	train_corr   0.00 (  0.00)	l1 5.3051 (5.3206)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.85it/s] 27%|##6       | 7/26 [00:00<00:00, 35.80it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.80it/s] 50%|#####     | 13/26 [00:00<00:00, 42.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.15it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.15it/s] 96%|#########6| 25/26 [00:00<00:00, 49.53it/s]100%|##########| 26/26 [00:00<00:00, 41.45it/s]
Test: [   0/  26]	Loss 0.531 (0.531)	test_acc   0.65 (  0.65)	test_minacc   0.91 (  0.91)	test_majacc   0.61 (  0.61)	Loss_d 0.531 (0.531)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.527 (0.555)	test_acc   0.67 (  0.65)	test_minacc   0.91 (  0.88)	test_majacc   0.63 (  0.61)	Loss_d 0.527 (0.555)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.91 (  0.88)	test_majacc_d   0.63 (  0.61)	test_corr_d   0.34 (  0.31)
Test: [  20/  26]	Loss 0.534 (0.551)	test_acc   0.67 (  0.65)	test_minacc   0.88 (  0.88)	test_majacc   0.63 (  0.61)	Loss_d 0.534 (0.551)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.63 (  0.61)	test_corr_d   0.31 (  0.31)
Test: [  26/  26]	Loss 0.510 (0.546)	test_acc   0.68 (  0.65)	test_minacc   0.84 (  0.88)	test_majacc   0.65 (  0.61)	Loss_d 0.510 (0.546)	test_acc_d   0.68 (  0.65)	test_minacc_d   0.84 (  0.88)	test_majacc_d   0.65 (  0.61)	test_corr_d   0.43 (  0.32)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.78it/s]
Test: [  0/  1]	Loss 1.018 (1.018)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.62 (  0.62)	Loss_d 1.018 (1.018)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 1.018 (1.018)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.62 (  0.62)	Loss_d 1.018 (1.018)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 29/  1]	epoch_time 0.0360 (0.0363)	validation_time 0.0004 (0.0006)	train_time 0.0355 (0.0356)
record: (train_acc, test_acc) (0.712900030374527, 0.6820000410079956)
last accs (train_acc, test_acc) (0.6546000204086304, 0.6620000600814819)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.54it/s] 15%|#5        | 4/26 [00:00<00:01, 18.59it/s] 31%|###       | 8/26 [00:00<00:00, 26.84it/s] 46%|####6     | 12/26 [00:00<00:00, 31.58it/s] 62%|######1   | 16/26 [00:00<00:00, 34.21it/s] 81%|########  | 21/26 [00:00<00:00, 36.53it/s] 96%|#########6| 25/26 [00:00<00:00, 36.91it/s]100%|##########| 26/26 [00:00<00:00, 30.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.003 (0.002)	train_nll   0.42 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  24.32 ( 24.30)	train_acc   0.74 (  0.71)	train_minacc   0.90 (  0.85)	train_majacc   0.72 (  0.68)	train_corr   0.00 (  0.00)	l1 5.1717 (5.0341)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.87it/s] 27%|##6       | 7/26 [00:00<00:00, 33.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.18it/s] 50%|#####     | 13/26 [00:00<00:00, 40.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.25it/s] 96%|#########6| 25/26 [00:00<00:00, 47.70it/s]100%|##########| 26/26 [00:00<00:00, 39.15it/s]
Test: [   0/  26]	Loss 0.415 (0.415)	test_acc   0.75 (  0.75)	test_minacc   0.93 (  0.93)	test_majacc   0.72 (  0.72)	Loss_d 0.415 (0.415)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.93 (  0.93)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.56 (  0.56)
Test: [  10/  26]	Loss 0.470 (0.481)	test_acc   0.72 (  0.69)	test_minacc   0.87 (  0.85)	test_majacc   0.70 (  0.66)	Loss_d 0.470 (0.481)	test_acc_d   0.72 (  0.69)	test_minacc_d   0.87 (  0.85)	test_majacc_d   0.70 (  0.66)	test_corr_d   0.54 (  0.53)
Test: [  20/  26]	Loss 0.444 (0.474)	test_acc   0.74 (  0.70)	test_minacc   0.88 (  0.87)	test_majacc   0.71 (  0.67)	Loss_d 0.444 (0.474)	test_acc_d   0.74 (  0.70)	test_minacc_d   0.88 (  0.87)	test_majacc_d   0.71 (  0.67)	test_corr_d   0.53 (  0.53)
Test: [  26/  26]	Loss 0.422 (0.471)	test_acc   0.74 (  0.70)	test_minacc   0.90 (  0.86)	test_majacc   0.72 (  0.67)	Loss_d 0.422 (0.471)	test_acc_d   0.74 (  0.70)	test_minacc_d   0.90 (  0.86)	test_majacc_d   0.72 (  0.67)	test_corr_d   0.63 (  0.54)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.02it/s]
Test: [  0/  1]	Loss 1.230 (1.230)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.74 (  0.74)	Loss_d 1.230 (1.230)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.230 (1.230)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.74 (  0.74)	Loss_d 1.230 (1.230)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.13 (  0.13)
Overall Timing[ 30/  1]	epoch_time 0.0360 (0.0363)	validation_time 0.0003 (0.0006)	train_time 0.0357 (0.0356)
record: (train_acc, test_acc) (0.712900030374527, 0.6820000410079956)
last accs (train_acc, test_acc) (0.6989000307917594, 0.6620000600814819)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s] 19%|#9        | 5/26 [00:00<00:00, 23.48it/s] 35%|###4      | 9/26 [00:00<00:00, 28.17it/s] 50%|#####     | 13/26 [00:00<00:00, 31.74it/s] 65%|######5   | 17/26 [00:00<00:00, 34.14it/s] 85%|########4 | 22/26 [00:00<00:00, 37.03it/s]100%|##########| 26/26 [00:00<00:00, 35.90it/s]100%|##########| 26/26 [00:00<00:00, 30.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.002)	train_nll   0.45 (  0.47)	train_penalty   0.00 (  0.00)	weight_norm  24.34 ( 24.33)	train_acc   0.72 (  0.70)	train_minacc   0.84 (  0.89)	train_majacc   0.71 (  0.66)	train_corr   0.00 (  0.00)	l1 5.5596 (5.1502)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 23%|##3       | 6/26 [00:00<00:00, 29.08it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.08it/s] 42%|####2     | 11/26 [00:00<00:00, 37.72it/s] 65%|######5   | 17/26 [00:00<00:00, 42.41it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.41it/s] 88%|########8 | 23/26 [00:00<00:00, 47.49it/s]100%|##########| 26/26 [00:00<00:00, 38.15it/s]
Test: [   0/  26]	Loss 0.490 (0.490)	test_acc   0.67 (  0.67)	test_minacc   0.93 (  0.93)	test_majacc   0.63 (  0.63)	Loss_d 0.490 (0.490)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.93 (  0.93)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.537 (0.508)	test_acc   0.65 (  0.66)	test_minacc   0.93 (  0.92)	test_majacc   0.60 (  0.62)	Loss_d 0.537 (0.508)	test_acc_d   0.65 (  0.66)	test_minacc_d   0.93 (  0.92)	test_majacc_d   0.60 (  0.62)	test_corr_d   0.38 (  0.38)
Test: [  20/  26]	Loss 0.484 (0.508)	test_acc   0.69 (  0.67)	test_minacc   0.89 (  0.90)	test_majacc   0.65 (  0.63)	Loss_d 0.484 (0.508)	test_acc_d   0.69 (  0.67)	test_minacc_d   0.89 (  0.90)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.40 (  0.38)
Test: [  26/  26]	Loss 0.447 (0.501)	test_acc   0.72 (  0.68)	test_minacc   0.84 (  0.91)	test_majacc   0.71 (  0.63)	Loss_d 0.447 (0.501)	test_acc_d   0.72 (  0.68)	test_minacc_d   0.84 (  0.91)	test_majacc_d   0.71 (  0.63)	test_corr_d   0.51 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.22it/s]
Test: [  0/  1]	Loss 1.064 (1.064)	test_acc   0.71 (  0.71)	test_minacc   0.71 (  0.71)	test_majacc   0.70 (  0.70)	Loss_d 1.064 (1.064)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 1.064 (1.064)	test_acc   0.71 (  0.71)	test_minacc   0.71 (  0.71)	test_majacc   0.70 (  0.70)	Loss_d 1.064 (1.064)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.06 ( -0.06)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/130/checkpoints/model_best.pth
Overall Timing[ 31/  1]	epoch_time 0.0364 (0.0363)	validation_time 0.0006 (0.0006)	train_time 0.0358 (0.0356)
record: (train_acc, test_acc) (0.6750000303387642, 0.7050000429153442)
last accs (train_acc, test_acc) (0.6750000303387642, 0.7050000429153442)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.46it/s] 19%|#9        | 5/26 [00:00<00:00, 21.96it/s] 35%|###4      | 9/26 [00:00<00:00, 27.60it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.21it/s] 69%|######9   | 18/26 [00:00<00:00, 33.68it/s] 88%|########8 | 23/26 [00:00<00:00, 35.71it/s]100%|##########| 26/26 [00:00<00:00, 30.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.001 (0.001)	train_nll   0.40 (  0.44)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.72 (  0.71)	train_minacc   0.84 (  0.86)	train_majacc   0.70 (  0.68)	train_corr   0.00 (  0.00)	l1 5.6121 (5.3117)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.43it/s] 27%|##6       | 7/26 [00:00<00:00, 35.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.09it/s] 42%|####2     | 11/26 [00:00<00:00, 36.76it/s] 65%|######5   | 17/26 [00:00<00:00, 44.82it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.82it/s] 88%|########8 | 23/26 [00:00<00:00, 49.41it/s]100%|##########| 26/26 [00:00<00:00, 39.42it/s]
Test: [   0/  26]	Loss 0.415 (0.415)	test_acc   0.72 (  0.72)	test_minacc   0.80 (  0.80)	test_majacc   0.70 (  0.70)	Loss_d 0.415 (0.415)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.54 (  0.54)
Test: [  10/  26]	Loss 0.482 (0.467)	test_acc   0.67 (  0.68)	test_minacc   0.78 (  0.82)	test_majacc   0.65 (  0.66)	Loss_d 0.482 (0.467)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.78 (  0.82)	test_majacc_d   0.65 (  0.66)	test_corr_d   0.52 (  0.51)
Test: [  20/  26]	Loss 0.441 (0.467)	test_acc   0.73 (  0.68)	test_minacc   0.82 (  0.83)	test_majacc   0.71 (  0.66)	Loss_d 0.441 (0.467)	test_acc_d   0.73 (  0.68)	test_minacc_d   0.82 (  0.83)	test_majacc_d   0.71 (  0.66)	test_corr_d   0.52 (  0.51)
Test: [  26/  26]	Loss 0.408 (0.461)	test_acc   0.72 (  0.69)	test_minacc   0.84 (  0.83)	test_majacc   0.70 (  0.66)	Loss_d 0.408 (0.461)	test_acc_d   0.72 (  0.69)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.70 (  0.66)	test_corr_d   0.61 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.35it/s]
Test: [  0/  1]	Loss 1.333 (1.333)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.72 (  0.72)	Loss_d 1.333 (1.333)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 1.333 (1.333)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.72 (  0.72)	Loss_d 1.333 (1.333)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.12 (  0.12)
Overall Timing[ 32/  1]	epoch_time 0.0351 (0.0362)	validation_time 0.0003 (0.0006)	train_time 0.0347 (0.0355)
record: (train_acc, test_acc) (0.6750000303387642, 0.7050000429153442)
last accs (train_acc, test_acc) (0.6882000291347503, 0.6600000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.97it/s] 19%|#9        | 5/26 [00:00<00:00, 23.89it/s] 35%|###4      | 9/26 [00:00<00:00, 30.55it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.49it/s] 92%|#########2| 24/26 [00:00<00:00, 38.97it/s]100%|##########| 26/26 [00:00<00:00, 32.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.001 (0.001)	train_nll   0.43 (  0.45)	train_penalty   0.00 (  0.00)	weight_norm  24.37 ( 24.36)	train_acc   0.70 (  0.69)	train_minacc   0.90 (  0.86)	train_majacc   0.67 (  0.66)	train_corr   0.00 (  0.00)	l1 5.3826 (5.3046)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.69it/s] 27%|##6       | 7/26 [00:00<00:00, 32.43it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.43it/s] 50%|#####     | 13/26 [00:00<00:00, 39.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.28it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.28it/s] 96%|#########6| 25/26 [00:00<00:00, 47.00it/s]100%|##########| 26/26 [00:00<00:00, 38.55it/s]
Test: [   0/  26]	Loss 0.425 (0.425)	test_acc   0.72 (  0.72)	test_minacc   0.93 (  0.93)	test_majacc   0.68 (  0.68)	Loss_d 0.425 (0.425)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.93 (  0.93)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.49 (  0.49)
Test: [  10/  26]	Loss 0.477 (0.462)	test_acc   0.67 (  0.68)	test_minacc   0.91 (  0.92)	test_majacc   0.63 (  0.63)	Loss_d 0.477 (0.462)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.47 (  0.47)
Test: [  20/  26]	Loss 0.474 (0.476)	test_acc   0.69 (  0.67)	test_minacc   0.89 (  0.89)	test_majacc   0.65 (  0.63)	Loss_d 0.474 (0.476)	test_acc_d   0.69 (  0.67)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.48 (  0.47)
Test: [  26/  26]	Loss 0.441 (0.473)	test_acc   0.69 (  0.67)	test_minacc   0.90 (  0.90)	test_majacc   0.66 (  0.63)	Loss_d 0.441 (0.473)	test_acc_d   0.69 (  0.67)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.54 (  0.47)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.57it/s]
Test: [  0/  1]	Loss 1.151 (1.151)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.72 (  0.72)	Loss_d 1.151 (1.151)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 1.151 (1.151)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.72 (  0.72)	Loss_d 1.151 (1.151)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.06 (  0.06)
Overall Timing[ 33/  1]	epoch_time 0.0353 (0.0362)	validation_time 0.0004 (0.0006)	train_time 0.0349 (0.0355)
record: (train_acc, test_acc) (0.6750000303387642, 0.7050000429153442)
last accs (train_acc, test_acc) (0.669200028181076, 0.6920000314712524)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 19%|#9        | 5/26 [00:00<00:00, 24.31it/s] 38%|###8      | 10/26 [00:00<00:00, 32.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.64it/s] 96%|#########6| 25/26 [00:00<00:00, 38.36it/s]100%|##########| 26/26 [00:00<00:00, 32.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.001 (0.001)	train_nll   0.44 (  0.47)	train_penalty   0.00 (  0.00)	weight_norm  24.39 ( 24.38)	train_acc   0.70 (  0.67)	train_minacc   0.81 (  0.87)	train_majacc   0.68 (  0.64)	train_corr   0.00 (  0.00)	l1 5.1572 (5.4352)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.61it/s] 35%|###4      | 9/26 [00:00<00:00, 41.32it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.77it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.77it/s] 81%|########  | 21/26 [00:00<00:00, 47.56it/s]100%|##########| 26/26 [00:00<00:00, 42.85it/s]
Test: [   0/  26]	Loss 0.437 (0.437)	test_acc   0.71 (  0.71)	test_minacc   0.89 (  0.89)	test_majacc   0.68 (  0.68)	Loss_d 0.437 (0.437)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.56 (  0.56)
Test: [  10/  26]	Loss 0.445 (0.436)	test_acc   0.70 (  0.71)	test_minacc   0.76 (  0.86)	test_majacc   0.69 (  0.68)	Loss_d 0.445 (0.436)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.76 (  0.86)	test_majacc_d   0.69 (  0.68)	test_corr_d   0.58 (  0.57)
Test: [  20/  26]	Loss 0.456 (0.448)	test_acc   0.70 (  0.70)	test_minacc   0.82 (  0.85)	test_majacc   0.68 (  0.67)	Loss_d 0.456 (0.448)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.82 (  0.85)	test_majacc_d   0.68 (  0.67)	test_corr_d   0.56 (  0.56)
Test: [  26/  26]	Loss 0.440 (0.448)	test_acc   0.69 (  0.69)	test_minacc   0.81 (  0.85)	test_majacc   0.68 (  0.67)	Loss_d 0.440 (0.448)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.81 (  0.85)	test_majacc_d   0.68 (  0.67)	test_corr_d   0.60 (  0.57)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.27it/s]
Test: [  0/  1]	Loss 1.198 (1.198)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.76 (  0.76)	Loss_d 1.198 (1.198)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 1.198 (1.198)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.76 (  0.76)	Loss_d 1.198 (1.198)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.19 (  0.19)
Overall Timing[ 34/  1]	epoch_time 0.0344 (0.0362)	validation_time 0.0003 (0.0006)	train_time 0.0340 (0.0355)
record: (train_acc, test_acc) (0.6750000303387642, 0.7050000429153442)
last accs (train_acc, test_acc) (0.6946000313162803, 0.6660000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.84it/s] 19%|#9        | 5/26 [00:00<00:00, 24.92it/s] 35%|###4      | 9/26 [00:00<00:00, 31.33it/s] 50%|#####     | 13/26 [00:00<00:00, 34.59it/s] 69%|######9   | 18/26 [00:00<00:00, 37.25it/s] 88%|########8 | 23/26 [00:00<00:00, 38.62it/s]100%|##########| 26/26 [00:00<00:00, 32.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.001)	train_nll   0.46 (  0.47)	train_penalty   0.00 (  0.00)	weight_norm  24.40 ( 24.40)	train_acc   0.66 (  0.67)	train_minacc   0.81 (  0.83)	train_majacc   0.63 (  0.64)	train_corr   0.00 (  0.00)	l1 5.0898 (5.5379)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.04it/s] 27%|##6       | 7/26 [00:00<00:00, 32.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.27it/s] 46%|####6     | 12/26 [00:00<00:00, 39.43it/s] 65%|######5   | 17/26 [00:00<00:00, 42.06it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.06it/s] 88%|########8 | 23/26 [00:00<00:00, 46.70it/s]100%|##########| 26/26 [00:00<00:00, 37.67it/s]
Test: [   0/  26]	Loss 0.451 (0.451)	test_acc   0.71 (  0.71)	test_minacc   0.84 (  0.84)	test_majacc   0.69 (  0.69)	Loss_d 0.451 (0.451)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.55 (  0.55)
Test: [  10/  26]	Loss 0.446 (0.450)	test_acc   0.69 (  0.69)	test_minacc   0.80 (  0.83)	test_majacc   0.68 (  0.67)	Loss_d 0.446 (0.450)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.80 (  0.83)	test_majacc_d   0.68 (  0.67)	test_corr_d   0.58 (  0.56)
Test: [  20/  26]	Loss 0.459 (0.454)	test_acc   0.69 (  0.69)	test_minacc   0.82 (  0.84)	test_majacc   0.66 (  0.67)	Loss_d 0.459 (0.454)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.82 (  0.84)	test_majacc_d   0.66 (  0.67)	test_corr_d   0.54 (  0.56)
Test: [  26/  26]	Loss 0.462 (0.455)	test_acc   0.65 (  0.69)	test_minacc   0.81 (  0.83)	test_majacc   0.63 (  0.66)	Loss_d 0.462 (0.455)	test_acc_d   0.65 (  0.69)	test_minacc_d   0.81 (  0.83)	test_majacc_d   0.63 (  0.66)	test_corr_d   0.59 (  0.56)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.45it/s]
Test: [  0/  1]	Loss 1.151 (1.151)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.76 (  0.76)	Loss_d 1.151 (1.151)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 1.151 (1.151)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.76 (  0.76)	Loss_d 1.151 (1.151)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.19 (  0.19)
Overall Timing[ 35/  1]	epoch_time 0.0347 (0.0361)	validation_time 0.0004 (0.0005)	train_time 0.0343 (0.0354)
record: (train_acc, test_acc) (0.6750000303387642, 0.7050000429153442)
last accs (train_acc, test_acc) (0.6876000357866288, 0.6670000553131104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.69it/s] 19%|#9        | 5/26 [00:00<00:00, 21.91it/s] 38%|###8      | 10/26 [00:00<00:00, 30.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.82it/s] 69%|######9   | 18/26 [00:00<00:00, 35.80it/s] 88%|########8 | 23/26 [00:00<00:00, 37.34it/s]100%|##########| 26/26 [00:00<00:00, 30.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.001)	train_nll   0.49 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  24.42 ( 24.41)	train_acc   0.63 (  0.66)	train_minacc   0.77 (  0.83)	train_majacc   0.61 (  0.63)	train_corr   0.00 (  0.00)	l1 5.5480 (5.4657)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.85it/s] 27%|##6       | 7/26 [00:00<00:00, 34.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.65it/s] 50%|#####     | 13/26 [00:00<00:00, 43.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.57it/s] 96%|#########6| 25/26 [00:00<00:00, 49.94it/s]100%|##########| 26/26 [00:00<00:00, 41.01it/s]
Test: [   0/  26]	Loss 0.492 (0.492)	test_acc   0.65 (  0.65)	test_minacc   0.78 (  0.78)	test_majacc   0.63 (  0.63)	Loss_d 0.492 (0.492)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.52 (  0.52)
Test: [  10/  26]	Loss 0.479 (0.488)	test_acc   0.65 (  0.65)	test_minacc   0.78 (  0.82)	test_majacc   0.63 (  0.62)	Loss_d 0.479 (0.488)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.78 (  0.82)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.53 (  0.52)
Test: [  20/  26]	Loss 0.468 (0.482)	test_acc   0.65 (  0.65)	test_minacc   0.85 (  0.82)	test_majacc   0.61 (  0.62)	Loss_d 0.468 (0.482)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.85 (  0.82)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.51 (  0.53)
Test: [  26/  26]	Loss 0.487 (0.482)	test_acc   0.64 (  0.65)	test_minacc   0.77 (  0.82)	test_majacc   0.62 (  0.62)	Loss_d 0.487 (0.482)	test_acc_d   0.64 (  0.65)	test_minacc_d   0.77 (  0.82)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.56 (  0.53)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.76it/s]
Test: [  0/  1]	Loss 1.232 (1.232)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.74 (  0.74)	Loss_d 1.232 (1.232)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 1.232 (1.232)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.74 (  0.74)	Loss_d 1.232 (1.232)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.18 (  0.18)
Overall Timing[ 36/  1]	epoch_time 0.0343 (0.0361)	validation_time 0.0004 (0.0005)	train_time 0.0339 (0.0354)
record: (train_acc, test_acc) (0.6750000303387642, 0.7050000429153442)
last accs (train_acc, test_acc) (0.6466000156402588, 0.6810000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.55it/s] 23%|##3       | 6/26 [00:00<00:00, 29.13it/s] 42%|####2     | 11/26 [00:00<00:00, 35.09it/s] 62%|######1   | 16/26 [00:00<00:00, 37.73it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.64it/s] 92%|#########2| 24/26 [00:00<00:00, 37.89it/s]100%|##########| 26/26 [00:00<00:00, 33.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.49 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  24.43 ( 24.42)	train_acc   0.60 (  0.64)	train_minacc   0.77 (  0.87)	train_majacc   0.58 (  0.60)	train_corr   0.00 (  0.00)	l1 5.6105 (5.3138)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.00it/s] 31%|###       | 8/26 [00:00<00:00, 39.40it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.40it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.00it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.00it/s]100%|##########| 26/26 [00:00<00:00, 52.43it/s]100%|##########| 26/26 [00:00<00:00, 42.43it/s]
Test: [   0/  26]	Loss 0.489 (0.489)	test_acc   0.63 (  0.63)	test_minacc   0.87 (  0.87)	test_majacc   0.59 (  0.59)	Loss_d 0.489 (0.489)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.47 (  0.47)
Test: [  10/  26]	Loss 0.502 (0.504)	test_acc   0.61 (  0.61)	test_minacc   0.87 (  0.87)	test_majacc   0.57 (  0.56)	Loss_d 0.502 (0.504)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.47 (  0.46)
Test: [  20/  26]	Loss 0.491 (0.502)	test_acc   0.64 (  0.62)	test_minacc   0.92 (  0.88)	test_majacc   0.58 (  0.57)	Loss_d 0.491 (0.502)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.92 (  0.88)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.45 (  0.47)
Test: [  26/  26]	Loss 0.492 (0.500)	test_acc   0.60 (  0.62)	test_minacc   0.77 (  0.89)	test_majacc   0.58 (  0.57)	Loss_d 0.492 (0.500)	test_acc_d   0.60 (  0.62)	test_minacc_d   0.77 (  0.89)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.53 (  0.47)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.12it/s]
Test: [  0/  1]	Loss 1.163 (1.163)	test_acc   0.71 (  0.71)	test_minacc   0.72 (  0.72)	test_majacc   0.68 (  0.68)	Loss_d 1.163 (1.163)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.163 (1.163)	test_acc   0.71 (  0.71)	test_minacc   0.72 (  0.72)	test_majacc   0.68 (  0.68)	Loss_d 1.163 (1.163)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.10 (  0.10)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/130/checkpoints/model_best.pth
Overall Timing[ 37/  1]	epoch_time 0.0337 (0.0360)	validation_time 0.0003 (0.0005)	train_time 0.0334 (0.0354)
record: (train_acc, test_acc) (0.6172000079154968, 0.7130000591278076)
last accs (train_acc, test_acc) (0.6172000079154968, 0.7130000591278076)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.26it/s] 19%|#9        | 5/26 [00:00<00:01, 18.79it/s] 35%|###4      | 9/26 [00:00<00:00, 26.34it/s] 50%|#####     | 13/26 [00:00<00:00, 30.12it/s] 69%|######9   | 18/26 [00:00<00:00, 34.50it/s] 88%|########8 | 23/26 [00:00<00:00, 36.57it/s]100%|##########| 26/26 [00:00<00:00, 29.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.47 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  24.43 ( 24.43)	train_acc   0.63 (  0.63)	train_minacc   0.84 (  0.88)	train_majacc   0.60 (  0.59)	train_corr   0.00 (  0.00)	l1 5.4535 (5.4056)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.72it/s] 27%|##6       | 7/26 [00:00<00:00, 32.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.32it/s] 50%|#####     | 13/26 [00:00<00:00, 38.96it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.53it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.53it/s] 96%|#########6| 25/26 [00:00<00:00, 46.02it/s]100%|##########| 26/26 [00:00<00:00, 38.00it/s]
Test: [   0/  26]	Loss 0.471 (0.471)	test_acc   0.64 (  0.64)	test_minacc   0.85 (  0.85)	test_majacc   0.60 (  0.60)	Loss_d 0.471 (0.471)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.491 (0.486)	test_acc   0.62 (  0.62)	test_minacc   0.89 (  0.88)	test_majacc   0.57 (  0.58)	Loss_d 0.491 (0.486)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.89 (  0.88)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.49 (  0.49)
Test: [  20/  26]	Loss 0.487 (0.489)	test_acc   0.64 (  0.63)	test_minacc   0.92 (  0.89)	test_majacc   0.58 (  0.58)	Loss_d 0.487 (0.489)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.92 (  0.89)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.47 (  0.49)
Test: [  26/  26]	Loss 0.471 (0.487)	test_acc   0.63 (  0.63)	test_minacc   0.84 (  0.89)	test_majacc   0.60 (  0.58)	Loss_d 0.471 (0.487)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.84 (  0.89)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.56 (  0.49)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.31it/s]
Test: [  0/  1]	Loss 1.162 (1.162)	test_acc   0.71 (  0.71)	test_minacc   0.72 (  0.72)	test_majacc   0.70 (  0.70)	Loss_d 1.162 (1.162)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 1.162 (1.162)	test_acc   0.71 (  0.71)	test_minacc   0.72 (  0.72)	test_majacc   0.70 (  0.70)	Loss_d 1.162 (1.162)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.12 (  0.12)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/130/checkpoints/model_best.pth
Overall Timing[ 38/  1]	epoch_time 0.0361 (0.0360)	validation_time 0.0004 (0.0005)	train_time 0.0357 (0.0354)
record: (train_acc, test_acc) (0.6261000120043755, 0.7140000462532043)
last accs (train_acc, test_acc) (0.6261000120043755, 0.7140000462532043)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.81it/s] 19%|#9        | 5/26 [00:00<00:00, 25.56it/s] 35%|###4      | 9/26 [00:00<00:00, 31.38it/s] 50%|#####     | 13/26 [00:00<00:00, 34.48it/s] 69%|######9   | 18/26 [00:00<00:00, 36.95it/s] 88%|########8 | 23/26 [00:00<00:00, 38.21it/s]100%|##########| 26/26 [00:00<00:00, 32.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.46 (  0.49)	train_penalty   0.00 (  0.00)	weight_norm  24.43 ( 24.43)	train_acc   0.64 (  0.63)	train_minacc   0.84 (  0.88)	train_majacc   0.62 (  0.59)	train_corr   0.00 (  0.00)	l1 5.3770 (5.5076)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.89it/s] 35%|###4      | 9/26 [00:00<00:00, 38.21it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.21it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.53it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.53it/s] 81%|########  | 21/26 [00:00<00:00, 47.23it/s]100%|##########| 26/26 [00:00<00:00, 42.03it/s]
Test: [   0/  26]	Loss 0.465 (0.465)	test_acc   0.64 (  0.64)	test_minacc   0.82 (  0.82)	test_majacc   0.61 (  0.61)	Loss_d 0.465 (0.465)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.53 (  0.53)
Test: [  10/  26]	Loss 0.475 (0.473)	test_acc   0.64 (  0.64)	test_minacc   0.82 (  0.84)	test_majacc   0.61 (  0.61)	Loss_d 0.475 (0.473)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.82 (  0.84)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.53 (  0.52)
Test: [  20/  26]	Loss 0.478 (0.476)	test_acc   0.66 (  0.64)	test_minacc   0.88 (  0.86)	test_majacc   0.61 (  0.60)	Loss_d 0.478 (0.476)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.88 (  0.86)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.50 (  0.52)
Test: [  26/  26]	Loss 0.461 (0.476)	test_acc   0.64 (  0.64)	test_minacc   0.84 (  0.86)	test_majacc   0.62 (  0.61)	Loss_d 0.461 (0.476)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.84 (  0.86)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.58 (  0.53)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 1.186 (1.186)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.72 (  0.72)	Loss_d 1.186 (1.186)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 1.186 (1.186)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.72 (  0.72)	Loss_d 1.186 (1.186)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.16 (  0.16)
Overall Timing[ 39/  1]	epoch_time 0.0348 (0.0360)	validation_time 0.0004 (0.0005)	train_time 0.0344 (0.0353)
record: (train_acc, test_acc) (0.6261000120043755, 0.7140000462532043)
last accs (train_acc, test_acc) (0.6430000116229058, 0.6990000605583191)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.05it/s] 19%|#9        | 5/26 [00:00<00:00, 22.84it/s] 35%|###4      | 9/26 [00:00<00:00, 29.54it/s] 50%|#####     | 13/26 [00:00<00:00, 33.20it/s] 69%|######9   | 18/26 [00:00<00:00, 36.03it/s] 88%|########8 | 23/26 [00:00<00:00, 37.64it/s]100%|##########| 26/26 [00:00<00:00, 31.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.47 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  24.43 ( 24.43)	train_acc   0.63 (  0.64)	train_minacc   0.77 (  0.85)	train_majacc   0.61 (  0.60)	train_corr   0.00 (  0.00)	l1 5.4555 (5.5587)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.51it/s] 35%|###4      | 9/26 [00:00<00:00, 38.61it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.61it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.69it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.69it/s] 81%|########  | 21/26 [00:00<00:00, 46.03it/s]100%|##########| 26/26 [00:00<00:00, 40.26it/s]
Test: [   0/  26]	Loss 0.473 (0.473)	test_acc   0.65 (  0.65)	test_minacc   0.82 (  0.82)	test_majacc   0.62 (  0.62)	Loss_d 0.473 (0.473)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.52 (  0.52)
Test: [  10/  26]	Loss 0.475 (0.476)	test_acc   0.64 (  0.64)	test_minacc   0.80 (  0.83)	test_majacc   0.61 (  0.61)	Loss_d 0.475 (0.476)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.80 (  0.83)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.53 (  0.52)
Test: [  20/  26]	Loss 0.477 (0.477)	test_acc   0.66 (  0.65)	test_minacc   0.86 (  0.84)	test_majacc   0.62 (  0.61)	Loss_d 0.477 (0.477)	test_acc_d   0.66 (  0.65)	test_minacc_d   0.86 (  0.84)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.50 (  0.52)
Test: [  26/  26]	Loss 0.469 (0.477)	test_acc   0.63 (  0.64)	test_minacc   0.77 (  0.84)	test_majacc   0.61 (  0.61)	Loss_d 0.469 (0.477)	test_acc_d   0.63 (  0.64)	test_minacc_d   0.77 (  0.84)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.57 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.93it/s]
Test: [  0/  1]	Loss 1.198 (1.198)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.72 (  0.72)	Loss_d 1.198 (1.198)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 1.198 (1.198)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.72 (  0.72)	Loss_d 1.198 (1.198)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.16 (  0.16)
Overall Timing[ 40/  1]	epoch_time 0.0355 (0.0360)	validation_time 0.0004 (0.0005)	train_time 0.0351 (0.0353)
record: (train_acc, test_acc) (0.6261000120043755, 0.7140000462532043)
last accs (train_acc, test_acc) (0.6442000190615654, 0.6860000491142273)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.77it/s] 19%|#9        | 5/26 [00:00<00:01, 20.26it/s] 38%|###8      | 10/26 [00:00<00:00, 29.35it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.93it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.59it/s] 96%|#########6| 25/26 [00:00<00:00, 37.76it/s]100%|##########| 26/26 [00:00<00:00, 30.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.48 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  24.43 ( 24.43)	train_acc   0.64 (  0.64)	train_minacc   0.81 (  0.85)	train_majacc   0.61 (  0.60)	train_corr   0.00 (  0.00)	l1 5.5805 (5.5187)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.76it/s] 27%|##6       | 7/26 [00:00<00:00, 36.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.37it/s] 50%|#####     | 13/26 [00:00<00:00, 41.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.04it/s] 96%|#########6| 25/26 [00:00<00:00, 48.20it/s]100%|##########| 26/26 [00:00<00:00, 40.04it/s]
Test: [   0/  26]	Loss 0.480 (0.480)	test_acc   0.64 (  0.64)	test_minacc   0.82 (  0.82)	test_majacc   0.61 (  0.61)	Loss_d 0.480 (0.480)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.51 (  0.51)
Test: [  10/  26]	Loss 0.483 (0.486)	test_acc   0.64 (  0.64)	test_minacc   0.84 (  0.84)	test_majacc   0.61 (  0.60)	Loss_d 0.483 (0.486)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.52 (  0.50)
Test: [  20/  26]	Loss 0.479 (0.485)	test_acc   0.65 (  0.64)	test_minacc   0.86 (  0.85)	test_majacc   0.61 (  0.60)	Loss_d 0.479 (0.485)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.86 (  0.85)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.49 (  0.51)
Test: [  26/  26]	Loss 0.476 (0.484)	test_acc   0.64 (  0.64)	test_minacc   0.81 (  0.85)	test_majacc   0.62 (  0.60)	Loss_d 0.476 (0.484)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.81 (  0.85)	test_majacc_d   0.62 (  0.60)	test_corr_d   0.56 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.07it/s]
Test: [  0/  1]	Loss 1.211 (1.211)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.72 (  0.72)	Loss_d 1.211 (1.211)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.211 (1.211)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.72 (  0.72)	Loss_d 1.211 (1.211)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.15 (  0.15)
Overall Timing[ 41/  1]	epoch_time 0.0350 (0.0359)	validation_time 0.0003 (0.0005)	train_time 0.0346 (0.0353)
record: (train_acc, test_acc) (0.6261000120043755, 0.7140000462532043)
last accs (train_acc, test_acc) (0.6390000151395798, 0.6950000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 23%|##3       | 6/26 [00:00<00:00, 26.18it/s] 42%|####2     | 11/26 [00:00<00:00, 33.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.13it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.95it/s] 92%|#########2| 24/26 [00:00<00:00, 37.64it/s]100%|##########| 26/26 [00:00<00:00, 31.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.47 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  24.43 ( 24.43)	train_acc   0.62 (  0.64)	train_minacc   0.84 (  0.87)	train_majacc   0.58 (  0.60)	train_corr   0.00 (  0.00)	l1 5.5731 (5.4888)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.92it/s] 31%|###       | 8/26 [00:00<00:00, 40.07it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.07it/s] 50%|#####     | 13/26 [00:00<00:00, 41.52it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.05it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.05it/s] 96%|#########6| 25/26 [00:00<00:00, 47.99it/s]100%|##########| 26/26 [00:00<00:00, 40.75it/s]
Test: [   0/  26]	Loss 0.476 (0.476)	test_acc   0.64 (  0.64)	test_minacc   0.87 (  0.87)	test_majacc   0.60 (  0.60)	Loss_d 0.476 (0.476)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.485 (0.486)	test_acc   0.63 (  0.63)	test_minacc   0.87 (  0.86)	test_majacc   0.59 (  0.59)	Loss_d 0.485 (0.486)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.87 (  0.86)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.50 (  0.50)
Test: [  20/  26]	Loss 0.483 (0.486)	test_acc   0.64 (  0.63)	test_minacc   0.89 (  0.87)	test_majacc   0.59 (  0.59)	Loss_d 0.483 (0.486)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.48 (  0.50)
Test: [  26/  26]	Loss 0.474 (0.485)	test_acc   0.62 (  0.63)	test_minacc   0.84 (  0.87)	test_majacc   0.58 (  0.59)	Loss_d 0.474 (0.485)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.84 (  0.87)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.56 (  0.50)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.10it/s]
Test: [  0/  1]	Loss 1.199 (1.199)	test_acc   0.71 (  0.71)	test_minacc   0.71 (  0.71)	test_majacc   0.71 (  0.71)	Loss_d 1.199 (1.199)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.199 (1.199)	test_acc   0.71 (  0.71)	test_minacc   0.71 (  0.71)	test_majacc   0.71 (  0.71)	Loss_d 1.199 (1.199)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.13 (  0.13)
Overall Timing[ 42/  1]	epoch_time 0.0346 (0.0359)	validation_time 0.0003 (0.0005)	train_time 0.0342 (0.0353)
record: (train_acc, test_acc) (0.6261000120043755, 0.7140000462532043)
last accs (train_acc, test_acc) (0.6321000099778176, 0.7080000042915344)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.92it/s] 19%|#9        | 5/26 [00:00<00:00, 23.86it/s] 35%|###4      | 9/26 [00:00<00:00, 30.52it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.54it/s] 92%|#########2| 24/26 [00:00<00:00, 39.41it/s]100%|##########| 26/26 [00:00<00:00, 32.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.47 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  24.43 ( 24.43)	train_acc   0.63 (  0.64)	train_minacc   0.84 (  0.87)	train_majacc   0.60 (  0.59)	train_corr   0.00 (  0.00)	l1 5.5166 (5.5139)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.81it/s] 27%|##6       | 7/26 [00:00<00:00, 36.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.48it/s] 50%|#####     | 13/26 [00:00<00:00, 41.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.86it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.86it/s] 96%|#########6| 25/26 [00:00<00:00, 47.73it/s]100%|##########| 26/26 [00:00<00:00, 40.83it/s]
Test: [   0/  26]	Loss 0.470 (0.470)	test_acc   0.65 (  0.65)	test_minacc   0.85 (  0.85)	test_majacc   0.61 (  0.61)	Loss_d 0.470 (0.470)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.51 (  0.51)
Test: [  10/  26]	Loss 0.481 (0.480)	test_acc   0.63 (  0.63)	test_minacc   0.87 (  0.86)	test_majacc   0.59 (  0.59)	Loss_d 0.481 (0.480)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.87 (  0.86)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.51 (  0.50)
Test: [  20/  26]	Loss 0.481 (0.482)	test_acc   0.64 (  0.63)	test_minacc   0.89 (  0.87)	test_majacc   0.59 (  0.59)	Loss_d 0.481 (0.482)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.49 (  0.50)
Test: [  26/  26]	Loss 0.467 (0.481)	test_acc   0.63 (  0.63)	test_minacc   0.84 (  0.87)	test_majacc   0.60 (  0.59)	Loss_d 0.467 (0.481)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.84 (  0.87)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.57 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.18it/s]
Test: [  0/  1]	Loss 1.197 (1.197)	test_acc   0.71 (  0.71)	test_minacc   0.71 (  0.71)	test_majacc   0.72 (  0.72)	Loss_d 1.197 (1.197)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.197 (1.197)	test_acc   0.71 (  0.71)	test_minacc   0.71 (  0.71)	test_majacc   0.72 (  0.72)	Loss_d 1.197 (1.197)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.14 (  0.14)
Overall Timing[ 43/  1]	epoch_time 0.0353 (0.0359)	validation_time 0.0004 (0.0005)	train_time 0.0349 (0.0353)
record: (train_acc, test_acc) (0.6261000120043755, 0.7140000462532043)
last accs (train_acc, test_acc) (0.6345000068545341, 0.7070000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.85it/s] 19%|#9        | 5/26 [00:00<00:00, 24.97it/s] 35%|###4      | 9/26 [00:00<00:00, 30.41it/s] 50%|#####     | 13/26 [00:00<00:00, 33.61it/s] 69%|######9   | 18/26 [00:00<00:00, 36.45it/s] 88%|########8 | 23/26 [00:00<00:00, 37.78it/s]100%|##########| 26/26 [00:00<00:00, 32.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.46 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  24.43 ( 24.44)	train_acc   0.64 (  0.63)	train_minacc   0.84 (  0.87)	train_majacc   0.61 (  0.59)	train_corr   0.00 (  0.00)	l1 5.4971 (5.5467)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.87it/s] 27%|##6       | 7/26 [00:00<00:00, 33.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.93it/s] 42%|####2     | 11/26 [00:00<00:00, 36.09it/s] 65%|######5   | 17/26 [00:00<00:00, 44.01it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.01it/s] 88%|########8 | 23/26 [00:00<00:00, 45.23it/s]100%|##########| 26/26 [00:00<00:00, 39.85it/s]
Test: [   0/  26]	Loss 0.469 (0.469)	test_acc   0.65 (  0.65)	test_minacc   0.85 (  0.85)	test_majacc   0.61 (  0.61)	Loss_d 0.469 (0.469)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.52 (  0.52)
Test: [  10/  26]	Loss 0.477 (0.477)	test_acc   0.64 (  0.64)	test_minacc   0.85 (  0.86)	test_majacc   0.60 (  0.60)	Loss_d 0.477 (0.477)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.85 (  0.86)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.52 (  0.51)
Test: [  20/  26]	Loss 0.478 (0.479)	test_acc   0.65 (  0.64)	test_minacc   0.88 (  0.87)	test_majacc   0.60 (  0.60)	Loss_d 0.478 (0.479)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.88 (  0.87)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.49 (  0.51)
Test: [  26/  26]	Loss 0.465 (0.478)	test_acc   0.64 (  0.64)	test_minacc   0.84 (  0.87)	test_majacc   0.61 (  0.60)	Loss_d 0.465 (0.478)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.84 (  0.87)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.57 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.48it/s]
Test: [  0/  1]	Loss 1.203 (1.203)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.72 (  0.72)	Loss_d 1.203 (1.203)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.203 (1.203)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.72 (  0.72)	Loss_d 1.203 (1.203)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.15 (  0.15)
Overall Timing[ 44/  1]	epoch_time 0.0359 (0.0359)	validation_time 0.0004 (0.0005)	train_time 0.0354 (0.0353)
record: (train_acc, test_acc) (0.6261000120043755, 0.7140000462532043)
last accs (train_acc, test_acc) (0.6408000113368034, 0.7020000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.47it/s] 19%|#9        | 5/26 [00:00<00:00, 22.42it/s] 35%|###4      | 9/26 [00:00<00:00, 28.75it/s] 50%|#####     | 13/26 [00:00<00:00, 32.68it/s] 69%|######9   | 18/26 [00:00<00:00, 35.92it/s] 85%|########4 | 22/26 [00:00<00:00, 36.95it/s]100%|##########| 26/26 [00:00<00:00, 30.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.47 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  24.44 ( 24.44)	train_acc   0.64 (  0.64)	train_minacc   0.84 (  0.87)	train_majacc   0.61 (  0.60)	train_corr   0.00 (  0.00)	l1 5.5270 (5.5564)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.72it/s] 27%|##6       | 7/26 [00:00<00:00, 35.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.35it/s] 46%|####6     | 12/26 [00:00<00:00, 39.93it/s] 65%|######5   | 17/26 [00:00<00:00, 40.62it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.62it/s] 88%|########8 | 23/26 [00:00<00:00, 45.83it/s]100%|##########| 26/26 [00:00<00:00, 37.91it/s]
Test: [   0/  26]	Loss 0.472 (0.472)	test_acc   0.65 (  0.65)	test_minacc   0.84 (  0.84)	test_majacc   0.61 (  0.61)	Loss_d 0.472 (0.472)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.51 (  0.51)
Test: [  10/  26]	Loss 0.478 (0.479)	test_acc   0.64 (  0.64)	test_minacc   0.84 (  0.85)	test_majacc   0.60 (  0.60)	Loss_d 0.478 (0.479)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.84 (  0.85)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.52 (  0.51)
Test: [  20/  26]	Loss 0.477 (0.479)	test_acc   0.65 (  0.64)	test_minacc   0.88 (  0.86)	test_majacc   0.61 (  0.60)	Loss_d 0.477 (0.479)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.88 (  0.86)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.50 (  0.51)
Test: [  26/  26]	Loss 0.467 (0.479)	test_acc   0.63 (  0.64)	test_minacc   0.81 (  0.86)	test_majacc   0.61 (  0.60)	Loss_d 0.467 (0.479)	test_acc_d   0.63 (  0.64)	test_minacc_d   0.81 (  0.86)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.57 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.04it/s]
Test: [  0/  1]	Loss 1.208 (1.208)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.71 (  0.71)	Loss_d 1.208 (1.208)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.208 (1.208)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.71 (  0.71)	Loss_d 1.208 (1.208)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.15 (  0.15)
Overall Timing[ 45/  1]	epoch_time 0.0373 (0.0359)	validation_time 0.0004 (0.0005)	train_time 0.0369 (0.0353)
record: (train_acc, test_acc) (0.6261000120043755, 0.7140000462532043)
last accs (train_acc, test_acc) (0.6408000099658966, 0.6990000605583191)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.97it/s] 27%|##6       | 7/26 [00:00<00:00, 31.50it/s] 46%|####6     | 12/26 [00:00<00:00, 36.63it/s] 65%|######5   | 17/26 [00:00<00:00, 38.77it/s] 85%|########4 | 22/26 [00:00<00:00, 40.43it/s]100%|##########| 26/26 [00:00<00:00, 35.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.47 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  24.44 ( 24.44)	train_acc   0.63 (  0.64)	train_minacc   0.81 (  0.86)	train_majacc   0.61 (  0.60)	train_corr   0.00 (  0.00)	l1 5.5670 (5.5456)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.21it/s] 27%|##6       | 7/26 [00:00<00:00, 28.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.41it/s] 50%|#####     | 13/26 [00:00<00:00, 36.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.73it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.73it/s] 96%|#########6| 25/26 [00:00<00:00, 45.24it/s]100%|##########| 26/26 [00:00<00:00, 36.30it/s]
Test: [   0/  26]	Loss 0.474 (0.474)	test_acc   0.65 (  0.65)	test_minacc   0.87 (  0.87)	test_majacc   0.61 (  0.61)	Loss_d 0.474 (0.474)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.51 (  0.51)
Test: [  10/  26]	Loss 0.480 (0.481)	test_acc   0.64 (  0.64)	test_minacc   0.85 (  0.86)	test_majacc   0.60 (  0.60)	Loss_d 0.480 (0.481)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.85 (  0.86)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.52 (  0.51)
Test: [  20/  26]	Loss 0.478 (0.481)	test_acc   0.65 (  0.64)	test_minacc   0.88 (  0.86)	test_majacc   0.60 (  0.60)	Loss_d 0.478 (0.481)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.88 (  0.86)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.49 (  0.51)
Test: [  26/  26]	Loss 0.470 (0.481)	test_acc   0.63 (  0.64)	test_minacc   0.81 (  0.86)	test_majacc   0.61 (  0.60)	Loss_d 0.470 (0.481)	test_acc_d   0.63 (  0.64)	test_minacc_d   0.81 (  0.86)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.57 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 1.211 (1.211)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.71 (  0.71)	Loss_d 1.211 (1.211)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.211 (1.211)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.71 (  0.71)	Loss_d 1.211 (1.211)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.14 (  0.14)
Overall Timing[ 46/  1]	epoch_time 0.0357 (0.0359)	validation_time 0.0003 (0.0005)	train_time 0.0353 (0.0353)
record: (train_acc, test_acc) (0.6261000120043755, 0.7140000462532043)
last accs (train_acc, test_acc) (0.6391000065803528, 0.6990000605583191)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.63it/s] 19%|#9        | 5/26 [00:00<00:00, 22.72it/s] 35%|###4      | 9/26 [00:00<00:00, 28.74it/s] 50%|#####     | 13/26 [00:00<00:00, 32.04it/s] 65%|######5   | 17/26 [00:00<00:00, 33.86it/s] 81%|########  | 21/26 [00:00<00:00, 35.42it/s] 96%|#########6| 25/26 [00:00<00:00, 36.76it/s]100%|##########| 26/26 [00:00<00:00, 30.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.47 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  24.44 ( 24.44)	train_acc   0.64 (  0.64)	train_minacc   0.84 (  0.87)	train_majacc   0.61 (  0.60)	train_corr   0.00 (  0.00)	l1 5.5732 (5.5367)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.97it/s] 27%|##6       | 7/26 [00:00<00:00, 34.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.81it/s] 50%|#####     | 13/26 [00:00<00:00, 40.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.49it/s] 96%|#########6| 25/26 [00:00<00:00, 47.61it/s]100%|##########| 26/26 [00:00<00:00, 38.34it/s]
Test: [   0/  26]	Loss 0.472 (0.472)	test_acc   0.65 (  0.65)	test_minacc   0.87 (  0.87)	test_majacc   0.61 (  0.61)	Loss_d 0.472 (0.472)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.51 (  0.51)
Test: [  10/  26]	Loss 0.481 (0.482)	test_acc   0.63 (  0.64)	test_minacc   0.85 (  0.86)	test_majacc   0.59 (  0.60)	Loss_d 0.481 (0.482)	test_acc_d   0.63 (  0.64)	test_minacc_d   0.85 (  0.86)	test_majacc_d   0.59 (  0.60)	test_corr_d   0.51 (  0.50)
Test: [  20/  26]	Loss 0.479 (0.482)	test_acc   0.65 (  0.64)	test_minacc   0.89 (  0.87)	test_majacc   0.60 (  0.59)	Loss_d 0.479 (0.482)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.49 (  0.50)
Test: [  26/  26]	Loss 0.469 (0.481)	test_acc   0.64 (  0.64)	test_minacc   0.84 (  0.87)	test_majacc   0.61 (  0.60)	Loss_d 0.469 (0.481)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.84 (  0.87)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.56 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.47it/s]
Test: [  0/  1]	Loss 1.209 (1.209)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.72 (  0.72)	Loss_d 1.209 (1.209)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.209 (1.209)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.72 (  0.72)	Loss_d 1.209 (1.209)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.14 (  0.14)
Overall Timing[ 47/  1]	epoch_time 0.0354 (0.0359)	validation_time 0.0003 (0.0005)	train_time 0.0351 (0.0353)
record: (train_acc, test_acc) (0.6261000120043755, 0.7140000462532043)
last accs (train_acc, test_acc) (0.6366000092625618, 0.7040000557899475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 19%|#9        | 5/26 [00:00<00:00, 25.53it/s] 35%|###4      | 9/26 [00:00<00:00, 31.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.66it/s] 69%|######9   | 18/26 [00:00<00:00, 37.05it/s] 88%|########8 | 23/26 [00:00<00:00, 38.37it/s]100%|##########| 26/26 [00:00<00:00, 32.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.47 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  24.44 ( 24.44)	train_acc   0.63 (  0.64)	train_minacc   0.84 (  0.87)	train_majacc   0.60 (  0.60)	train_corr   0.00 (  0.00)	l1 5.5546 (5.5452)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.90it/s] 35%|###4      | 9/26 [00:00<00:00, 43.08it/s]                                               35%|###4      | 9/26 [00:00<00:00, 43.08it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.70it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.70it/s] 81%|########  | 21/26 [00:00<00:00, 48.66it/s]100%|##########| 26/26 [00:00<00:00, 41.84it/s]
Test: [   0/  26]	Loss 0.470 (0.470)	test_acc   0.65 (  0.65)	test_minacc   0.87 (  0.87)	test_majacc   0.61 (  0.61)	Loss_d 0.470 (0.470)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.51 (  0.51)
Test: [  10/  26]	Loss 0.479 (0.479)	test_acc   0.63 (  0.64)	test_minacc   0.85 (  0.86)	test_majacc   0.59 (  0.60)	Loss_d 0.479 (0.479)	test_acc_d   0.63 (  0.64)	test_minacc_d   0.85 (  0.86)	test_majacc_d   0.59 (  0.60)	test_corr_d   0.51 (  0.51)
Test: [  20/  26]	Loss 0.478 (0.480)	test_acc   0.65 (  0.64)	test_minacc   0.89 (  0.87)	test_majacc   0.60 (  0.60)	Loss_d 0.478 (0.480)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.89 (  0.87)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.49 (  0.51)
Test: [  26/  26]	Loss 0.466 (0.479)	test_acc   0.63 (  0.64)	test_minacc   0.84 (  0.87)	test_majacc   0.60 (  0.60)	Loss_d 0.466 (0.479)	test_acc_d   0.63 (  0.64)	test_minacc_d   0.84 (  0.87)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.57 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.38it/s]
Test: [  0/  1]	Loss 1.209 (1.209)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.72 (  0.72)	Loss_d 1.209 (1.209)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.209 (1.209)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.72 (  0.72)	Loss_d 1.209 (1.209)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.14 (  0.14)
Overall Timing[ 48/  1]	epoch_time 0.0356 (0.0359)	validation_time 0.0004 (0.0005)	train_time 0.0352 (0.0353)
record: (train_acc, test_acc) (0.6261000120043755, 0.7140000462532043)
last accs (train_acc, test_acc) (0.6372000078558921, 0.7010000348091125)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.09it/s] 19%|#9        | 5/26 [00:00<00:01, 19.51it/s] 35%|###4      | 9/26 [00:00<00:00, 26.72it/s] 50%|#####     | 13/26 [00:00<00:00, 30.87it/s] 69%|######9   | 18/26 [00:00<00:00, 34.32it/s] 88%|########8 | 23/26 [00:00<00:00, 36.10it/s]100%|##########| 26/26 [00:00<00:00, 29.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.46 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  24.44 ( 24.44)	train_acc   0.64 (  0.64)	train_minacc   0.84 (  0.87)	train_majacc   0.61 (  0.60)	train_corr   0.00 (  0.00)	l1 5.5405 (5.5612)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.14it/s] 27%|##6       | 7/26 [00:00<00:00, 32.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.33it/s] 50%|#####     | 13/26 [00:00<00:00, 41.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.73it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.73it/s] 92%|#########2| 24/26 [00:00<00:00, 45.19it/s]100%|##########| 26/26 [00:00<00:00, 38.63it/s]
Test: [   0/  26]	Loss 0.469 (0.469)	test_acc   0.65 (  0.65)	test_minacc   0.87 (  0.87)	test_majacc   0.62 (  0.62)	Loss_d 0.469 (0.469)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.51 (  0.51)
Test: [  10/  26]	Loss 0.477 (0.477)	test_acc   0.64 (  0.64)	test_minacc   0.85 (  0.86)	test_majacc   0.60 (  0.60)	Loss_d 0.477 (0.477)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.85 (  0.86)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.52 (  0.51)
Test: [  20/  26]	Loss 0.477 (0.478)	test_acc   0.65 (  0.64)	test_minacc   0.88 (  0.87)	test_majacc   0.60 (  0.60)	Loss_d 0.477 (0.478)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.88 (  0.87)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.49 (  0.51)
Test: [  26/  26]	Loss 0.464 (0.477)	test_acc   0.64 (  0.64)	test_minacc   0.84 (  0.87)	test_majacc   0.61 (  0.60)	Loss_d 0.464 (0.477)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.84 (  0.87)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.57 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.84it/s]
Test: [  0/  1]	Loss 1.211 (1.211)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.72 (  0.72)	Loss_d 1.211 (1.211)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.211 (1.211)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.72 (  0.72)	Loss_d 1.211 (1.211)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.14 (  0.14)
Overall Timing[ 49/  1]	epoch_time 0.0353 (0.0359)	validation_time 0.0004 (0.0005)	train_time 0.0349 (0.0353)
record: (train_acc, test_acc) (0.6261000120043755, 0.7140000462532043)
last accs (train_acc, test_acc) (0.6401000102162361, 0.7000000476837158)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.103 MB of 0.103 MB uploadedwandb: \ 0.103 MB of 0.103 MB uploadedwandb: | 0.103 MB of 0.103 MB uploadedwandb: / 0.103 MB of 0.103 MB uploadedwandb: - 0.126 MB of 0.138 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▂▂▁▁▁▁▂▂▁▁▁▁▁▂▁▁▁▁▂▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/diagnostics/train_time_val █▂▁▂▁▁▁▁▁▁▁▁▂▂▁▁▂▁▂▂▁▂▁▂▂▂▁▂▁▁▁▂▂▁▁▂▂▂▂▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/Loss_avg ▆▇▆▆▆▇▇▆▇▇▇█▂▁▁▁▁▁▁▁▂▂▂▂▂▁▃▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/Loss_d_avg ▆▇▆▆▆▇▇▆▇▇▇█▂▁▁▁▁▁▁▁▂▂▂▂▂▁▃▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/Loss_d_val ▆▇▆▆▆▇▇▆▇▇▇█▂▁▁▁▁▁▁▁▂▂▂▂▂▁▃▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/Loss_val ▆▇▆▆▆▇▇▆▇▇▇█▂▁▁▁▁▁▁▁▂▂▂▂▂▁▃▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_acc_avg ▁▁▁▁▂▂▃▄▄▄▃▅▇▇▇▇▇▇▇▇▇▇█▇▇█▇█▇███████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_acc_d_avg ▁▁▁▁▂▂▃▄▄▄▃▅▇▇▇▇▇▇▇▇▇▇█▇▇█▇█▇███████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_acc_d_val ▁▁▁▁▂▂▃▄▄▄▃▅▇▇▇▇▇▇▇▇▇▇█▇▇█▇█▇███████████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_acc_val ▁▁▁▁▂▂▃▄▄▄▃▅▇▇▇▇▇▇▇▇▇▇█▇▇█▇█▇███████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_corr_d_avg ████▇▇▇▅▆▆▆▄▂▁▁▂▂▂▂▂▂▁▁▁▂▁▂▂▃▃▂▂▃▃▂▂▃▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_corr_d_val ████▇▇▇▅▆▆▆▄▂▁▁▂▂▂▂▂▂▁▁▁▂▁▂▂▃▃▂▂▃▃▂▂▃▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_majacc_avg ████▇▇▇▆▆▇▆▅▃▂▂▂▂▂▂▂▃▃▂▃▂▁▂▂▃▂▁▁▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_majacc_d_avg ████▇▇▇▆▆▇▆▅▃▂▂▂▂▂▂▂▃▃▂▃▂▁▂▂▃▂▁▁▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_majacc_d_val ████▇▇▇▆▆▇▆▅▃▂▂▂▂▂▂▂▃▃▂▃▂▁▂▂▃▂▁▁▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_majacc_val ████▇▇▇▆▆▇▆▅▃▂▂▂▂▂▂▂▃▃▂▃▂▁▂▂▃▂▁▁▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_minacc_avg ▁▁▁▁▂▂▃▄▄▄▃▅▇▇▇▇▇▇▇▇▇▇█▇▇█▇█▇███████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_minacc_d_avg ▁▁▁▁▂▂▃▄▄▄▃▅▇▇▇▇▇▇▇▇▇▇█▇▇█▇█▇███████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_minacc_d_val ▁▁▁▁▂▂▃▄▄▄▃▅▇▇▇▇▇▇▇▇▇▇█▇▇█▇█▇███████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_minacc_val ▁▁▁▁▂▂▃▄▄▄▃▅▇▇▇▇▇▇▇▇▇▇█▇▇█▇█▇███████████
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/Loss_avg █▆▆▆▅▅▅▅▄▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/Loss_val ███▇▇▆▆▆▅▅▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/l1_avg █▅▄▄▄▅▅▄▄▅▆▆▅▂▁▁▂▂▂▂▂▂▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/l1_val ▅▅▅▄▅▅▅▅▅▅▆█▃▂▁▁▁▁▁▂▂▃▃▄▁▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_acc_avg ▅▇▇▇▇▇▇▇▇███▇▅▄▄▄▄▄▄▄▄▄▅▃▃▃▃▂▂▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_acc_val ▇▇▇▇▇▇▇▇▇███▆▅▅▄▄▄▄▄▄▄▄▆▄▄▃▃▂▂▁▂▂▂▁▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_majacc_avg ▇█████▇▇▇▇▇▇▇▄▄▃▄▄▄▄▃▃▃▄▃▂▃▂▂▂▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_majacc_val ████████████▆▅▄▄▄▄▄▄▄▄▃▆▃▃▃▃▂▁▁▁▂▂▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_minacc_avg ▁▁▁▁▂▂▃▃▄▅▅▆▆██████████▇█████▇██████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_minacc_val ▁▁▁▁▂▂▃▄▄▅▅▅▇▇▇▇▆▆▇▇▇▇▇▅█▇▇█▇▇▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_nll_avg █▄▄▄▃▃▃▂▂▂▁▁▂▄▅▅▅▅▅▅▅▅▅▄▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_nll_val ▅▅▅▄▄▃▃▃▂▂▁▁▃▆▆▆▆▆▆▆▆▇▇▆▆▇▆▆▇██▇▇██▇▇▇▇▇
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_penalty_avg █▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_penalty_val █▆▆▆▆▆▅▄▃▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/weight_norm_avg ▁▅▅▅▆▆▆▆▆▆▇▇▇███████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/weight_norm_val ▁▃▃▃▄▄▄▄▅▅▆▆▇▇██████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/diagnostics/epoch_time_val 0.03532
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/diagnostics/train_time_val 0.0349
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/diagnostics/validation_time_val 0.0004
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/Loss_avg 1.21108
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/Loss_d_avg 1.21108
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/Loss_d_val 1.21108
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/Loss_val 1.21108
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_acc_avg 0.7
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_acc_d_avg 0.7
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_acc_d_val 0.7
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_acc_val 0.7
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_corr_d_avg 0.1421
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_corr_d_val 0.1421
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_majacc_avg 0.72
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_majacc_d_avg 0.72
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_majacc_d_val 0.72
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_majacc_val 0.72
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_minacc_avg 0.69778
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_minacc_d_avg 0.69778
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_minacc_d_val 0.69778
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/test/test_minacc_val 0.69778
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/Loss_avg 5e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/Loss_val 5e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/l1_avg 5.56123
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/l1_val 5.54048
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_acc_avg 0.638
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_acc_val 0.636
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_majacc_avg 0.59703
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_majacc_val 0.60731
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_minacc_avg 0.86945
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_minacc_val 0.83871
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_nll_avg 0.47885
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_nll_val 0.46398
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/weight_norm_avg 24.43536
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/weight_norm_val 24.43516
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/130/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/abe1tb9a
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_195008-abe1tb9a/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_195229-1bycmw3f
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/1bycmw3f
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1201
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5995, 3, 32, 32) (6005, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:36,  1.46s/it] 19%|#9        | 5/26 [00:01<00:05,  4.18it/s] 35%|###4      | 9/26 [00:01<00:02,  8.04it/s] 50%|#####     | 13/26 [00:01<00:01, 12.34it/s] 69%|######9   | 18/26 [00:01<00:00, 17.94it/s] 88%|########8 | 23/26 [00:02<00:00, 23.01it/s]100%|##########| 26/26 [00:02<00:00, 10.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.406 (0.538)	train_nll   0.41 (  0.54)	train_penalty   0.04 (  0.23)	weight_norm  20.80 ( 18.10)	train_acc   0.85 (  0.81)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.94)	train_corr   0.00 (  0.00)	l1 7.3510 (8.6292)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 27%|##6       | 7/26 [00:00<00:00, 33.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.90it/s] 46%|####6     | 12/26 [00:00<00:00, 40.10it/s] 65%|######5   | 17/26 [00:00<00:00, 41.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.42it/s] 88%|########8 | 23/26 [00:00<00:00, 47.08it/s]100%|##########| 26/26 [00:00<00:00, 38.84it/s]
Test: [   0/  26]	Loss 0.409 (0.409)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.409 (0.409)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.441 (0.409)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.441 (0.409)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.446 (0.415)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.446 (0.415)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.408 (0.419)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.408 (0.419)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]
Test: [  0/  1]	Loss 1.486 (1.486)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.486 (1.486)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.486 (1.486)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.486 (1.486)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/131/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0702 (0.0702)	validation_time 0.0067 (0.0067)	train_time 0.0615 (0.0615)
record: (train_acc, test_acc) (0.8469000252485275, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8469000252485275, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 19%|#9        | 5/26 [00:00<00:00, 23.81it/s] 35%|###4      | 9/26 [00:00<00:00, 29.44it/s] 50%|#####     | 13/26 [00:00<00:00, 33.16it/s] 69%|######9   | 18/26 [00:00<00:00, 36.22it/s] 85%|########4 | 22/26 [00:00<00:00, 37.11it/s]100%|##########| 26/26 [00:00<00:00, 37.64it/s]100%|##########| 26/26 [00:00<00:00, 31.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.398 (0.412)	train_nll   0.40 (  0.41)	train_penalty   0.03 (  0.06)	weight_norm  21.88 ( 21.55)	train_acc   0.84 (  0.85)	train_minacc   0.08 (  0.01)	train_majacc   0.98 (  1.00)	train_corr   0.00 (  0.00)	l1 7.0295 (7.1708)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.36it/s] 27%|##6       | 7/26 [00:00<00:00, 33.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.03it/s] 50%|#####     | 13/26 [00:00<00:00, 39.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.25it/s] 96%|#########6| 25/26 [00:00<00:00, 45.66it/s]100%|##########| 26/26 [00:00<00:00, 38.40it/s]
Test: [   0/  26]	Loss 0.389 (0.389)	test_acc   0.85 (  0.85)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.389 (0.389)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.425 (0.397)	test_acc   0.83 (  0.85)	test_minacc   0.08 (  0.08)	test_majacc   0.97 (  0.98)	Loss_d 0.425 (0.397)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.443 (0.400)	test_acc   0.83 (  0.85)	test_minacc   0.06 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 0.443 (0.400)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.06 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.392 (0.402)	test_acc   0.85 (  0.85)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.98)	Loss_d 0.392 (0.402)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.00it/s]
Test: [  0/  1]	Loss 1.532 (1.532)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.532 (1.532)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.532 (1.532)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.532 (1.532)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/131/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0347 (0.0524)	validation_time 0.0004 (0.0036)	train_time 0.0343 (0.0479)
record: (train_acc, test_acc) (0.8472000231146812, 0.13600000739097595)
last accs (train_acc, test_acc) (0.8472000231146812, 0.13600000739097595)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.85it/s] 19%|#9        | 5/26 [00:00<00:00, 25.55it/s] 38%|###8      | 10/26 [00:00<00:00, 33.05it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.11it/s] 69%|######9   | 18/26 [00:00<00:00, 36.39it/s] 88%|########8 | 23/26 [00:00<00:00, 37.16it/s]100%|##########| 26/26 [00:00<00:00, 32.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.402 (0.395)	train_nll   0.40 (  0.39)	train_penalty   0.03 (  0.05)	weight_norm  22.00 ( 21.96)	train_acc   0.84 (  0.85)	train_minacc   0.16 (  0.03)	train_majacc   0.95 (  0.99)	train_corr   0.00 (  0.00)	l1 6.7374 (6.8976)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.66it/s] 31%|###       | 8/26 [00:00<00:00, 39.30it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.30it/s] 50%|#####     | 13/26 [00:00<00:00, 41.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.59it/s] 96%|#########6| 25/26 [00:00<00:00, 47.23it/s]100%|##########| 26/26 [00:00<00:00, 40.59it/s]
Test: [   0/  26]	Loss 0.355 (0.355)	test_acc   0.86 (  0.86)	test_minacc   0.28 (  0.28)	test_majacc   0.96 (  0.96)	Loss_d 0.355 (0.355)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.397 (0.366)	test_acc   0.83 (  0.86)	test_minacc   0.16 (  0.19)	test_majacc   0.96 (  0.97)	Loss_d 0.397 (0.366)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.16 (  0.19)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.402 (0.371)	test_acc   0.81 (  0.85)	test_minacc   0.06 (  0.18)	test_majacc   0.96 (  0.97)	Loss_d 0.402 (0.371)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.06 (  0.18)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.355 (0.372)	test_acc   0.85 (  0.85)	test_minacc   0.11 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.355 (0.372)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.11 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.07it/s]
Test: [  0/  1]	Loss 1.500 (1.500)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.500 (1.500)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.500 (1.500)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.500 (1.500)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/131/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0348 (0.0466)	validation_time 0.0006 (0.0026)	train_time 0.0342 (0.0433)
record: (train_acc, test_acc) (0.8470000194311142, 0.18000000715255737)
last accs (train_acc, test_acc) (0.8470000194311142, 0.18000000715255737)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.07it/s] 19%|#9        | 5/26 [00:00<00:01, 20.85it/s] 35%|###4      | 9/26 [00:00<00:00, 27.31it/s] 50%|#####     | 13/26 [00:00<00:00, 31.63it/s] 69%|######9   | 18/26 [00:00<00:00, 34.98it/s] 85%|########4 | 22/26 [00:00<00:00, 36.45it/s]100%|##########| 26/26 [00:00<00:00, 37.21it/s]100%|##########| 26/26 [00:00<00:00, 29.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.350 (0.373)	train_nll   0.35 (  0.37)	train_penalty   0.01 (  0.04)	weight_norm  22.06 ( 22.03)	train_acc   0.85 (  0.85)	train_minacc   0.32 (  0.10)	train_majacc   0.94 (  0.98)	train_corr   0.00 (  0.00)	l1 6.5452 (6.7028)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.31it/s] 27%|##6       | 7/26 [00:00<00:00, 28.04it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.04it/s] 46%|####6     | 12/26 [00:00<00:00, 34.54it/s] 69%|######9   | 18/26 [00:00<00:00, 40.47it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.47it/s] 92%|#########2| 24/26 [00:00<00:00, 45.11it/s]100%|##########| 26/26 [00:00<00:00, 35.97it/s]
Test: [   0/  26]	Loss 0.335 (0.335)	test_acc   0.87 (  0.87)	test_minacc   0.52 (  0.52)	test_majacc   0.93 (  0.93)	Loss_d 0.335 (0.335)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.368 (0.356)	test_acc   0.84 (  0.85)	test_minacc   0.40 (  0.39)	test_majacc   0.92 (  0.92)	Loss_d 0.368 (0.356)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.40 (  0.39)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.84 (  0.83)
Test: [  20/  26]	Loss 0.367 (0.357)	test_acc   0.85 (  0.85)	test_minacc   0.42 (  0.40)	test_majacc   0.93 (  0.92)	Loss_d 0.367 (0.357)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.42 (  0.40)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.83 (  0.83)
Test: [  26/  26]	Loss 0.330 (0.357)	test_acc   0.88 (  0.85)	test_minacc   0.51 (  0.41)	test_majacc   0.94 (  0.92)	Loss_d 0.330 (0.357)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.51 (  0.41)	test_majacc_d   0.94 (  0.92)	test_corr_d   0.85 (  0.83)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 1.465 (1.465)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 1.465 (1.465)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.71 (  0.71)
Test: [  1/  1]	Loss 1.465 (1.465)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 1.465 (1.465)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.71 (  0.71)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/131/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0352 (0.0437)	validation_time 0.0004 (0.0020)	train_time 0.0348 (0.0412)
record: (train_acc, test_acc) (0.8455000218153, 0.30800002813339233)
last accs (train_acc, test_acc) (0.8455000218153, 0.30800002813339233)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.92it/s] 23%|##3       | 6/26 [00:00<00:00, 28.00it/s] 38%|###8      | 10/26 [00:00<00:00, 31.85it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.07it/s] 69%|######9   | 18/26 [00:00<00:00, 36.01it/s] 85%|########4 | 22/26 [00:00<00:00, 37.13it/s]100%|##########| 26/26 [00:00<00:00, 37.85it/s]100%|##########| 26/26 [00:00<00:00, 32.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.309 (0.354)	train_nll   0.31 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm  22.14 ( 22.10)	train_acc   0.88 (  0.85)	train_minacc   0.54 (  0.18)	train_majacc   0.93 (  0.97)	train_corr   0.00 (  0.00)	l1 6.5961 (6.4816)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.91it/s] 27%|##6       | 7/26 [00:00<00:00, 34.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.38it/s] 50%|#####     | 13/26 [00:00<00:00, 41.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.87it/s] 96%|#########6| 25/26 [00:00<00:00, 47.56it/s]100%|##########| 26/26 [00:00<00:00, 40.39it/s]
Test: [   0/  26]	Loss 0.293 (0.293)	test_acc   0.89 (  0.89)	test_minacc   0.64 (  0.64)	test_majacc   0.93 (  0.93)	Loss_d 0.293 (0.293)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.80 (  0.80)
Test: [  10/  26]	Loss 0.352 (0.326)	test_acc   0.84 (  0.86)	test_minacc   0.50 (  0.52)	test_majacc   0.90 (  0.91)	Loss_d 0.352 (0.326)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.81 (  0.81)
Test: [  20/  26]	Loss 0.336 (0.328)	test_acc   0.86 (  0.85)	test_minacc   0.52 (  0.52)	test_majacc   0.92 (  0.91)	Loss_d 0.336 (0.328)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.81 (  0.81)
Test: [  26/  26]	Loss 0.287 (0.327)	test_acc   0.87 (  0.86)	test_minacc   0.57 (  0.52)	test_majacc   0.92 (  0.92)	Loss_d 0.287 (0.327)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.83 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.78it/s]
Test: [  0/  1]	Loss 1.585 (1.585)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.95 (  0.95)	Loss_d 1.585 (1.585)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.64 (  0.64)
Test: [  1/  1]	Loss 1.585 (1.585)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.95 (  0.95)	Loss_d 1.585 (1.585)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.64 (  0.64)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/131/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0341 (0.0418)	validation_time 0.0004 (0.0017)	train_time 0.0337 (0.0397)
record: (train_acc, test_acc) (0.8561000198125839, 0.33900001645088196)
last accs (train_acc, test_acc) (0.8561000198125839, 0.33900001645088196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.31it/s] 23%|##3       | 6/26 [00:00<00:00, 26.48it/s] 42%|####2     | 11/26 [00:00<00:00, 33.09it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.31it/s] 88%|########8 | 23/26 [00:00<00:00, 36.49it/s]100%|##########| 26/26 [00:00<00:00, 31.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.275 (0.331)	train_nll   0.28 (  0.33)	train_penalty   0.01 (  0.03)	weight_norm  22.22 ( 22.18)	train_acc   0.90 (  0.86)	train_minacc   0.54 (  0.25)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 6.5931 (6.3875)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.36it/s] 27%|##6       | 7/26 [00:00<00:00, 36.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.16it/s] 50%|#####     | 13/26 [00:00<00:00, 41.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.73it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.73it/s] 96%|#########6| 25/26 [00:00<00:00, 47.70it/s]100%|##########| 26/26 [00:00<00:00, 40.74it/s]
Test: [   0/  26]	Loss 0.276 (0.276)	test_acc   0.88 (  0.88)	test_minacc   0.64 (  0.64)	test_majacc   0.92 (  0.92)	Loss_d 0.276 (0.276)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.345 (0.307)	test_acc   0.83 (  0.86)	test_minacc   0.52 (  0.56)	test_majacc   0.89 (  0.91)	Loss_d 0.345 (0.307)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.89 (  0.91)	test_corr_d   0.79 (  0.80)
Test: [  20/  26]	Loss 0.328 (0.309)	test_acc   0.85 (  0.86)	test_minacc   0.55 (  0.56)	test_majacc   0.91 (  0.91)	Loss_d 0.328 (0.309)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.80 (  0.80)
Test: [  26/  26]	Loss 0.249 (0.308)	test_acc   0.90 (  0.86)	test_minacc   0.65 (  0.57)	test_majacc   0.94 (  0.91)	Loss_d 0.249 (0.308)	test_acc_d   0.90 (  0.86)	test_minacc_d   0.65 (  0.57)	test_majacc_d   0.94 (  0.91)	test_corr_d   0.83 (  0.80)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.89it/s]
Test: [  0/  1]	Loss 1.602 (1.602)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.95 (  0.95)	Loss_d 1.602 (1.602)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.61 (  0.61)
Test: [  1/  1]	Loss 1.602 (1.602)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.95 (  0.95)	Loss_d 1.602 (1.602)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.61 (  0.61)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/131/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0350 (0.0407)	validation_time 0.0003 (0.0015)	train_time 0.0346 (0.0388)
record: (train_acc, test_acc) (0.8627000228762627, 0.367000013589859)
last accs (train_acc, test_acc) (0.8627000228762627, 0.367000013589859)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 19%|#9        | 5/26 [00:00<00:00, 22.94it/s] 35%|###4      | 9/26 [00:00<00:00, 29.83it/s] 50%|#####     | 13/26 [00:00<00:00, 31.99it/s] 65%|######5   | 17/26 [00:00<00:00, 34.34it/s] 81%|########  | 21/26 [00:00<00:00, 35.49it/s] 96%|#########6| 25/26 [00:00<00:00, 36.78it/s]100%|##########| 26/26 [00:00<00:00, 30.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.270 (0.314)	train_nll   0.27 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.32 ( 22.27)	train_acc   0.86 (  0.87)	train_minacc   0.43 (  0.34)	train_majacc   0.93 (  0.96)	train_corr   0.00 (  0.00)	l1 6.4850 (6.4895)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.48it/s] 27%|##6       | 7/26 [00:00<00:00, 32.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.30it/s] 50%|#####     | 13/26 [00:00<00:00, 38.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.54it/s] 96%|#########6| 25/26 [00:00<00:00, 45.70it/s]100%|##########| 26/26 [00:00<00:00, 38.49it/s]
Test: [   0/  26]	Loss 0.254 (0.254)	test_acc   0.89 (  0.89)	test_minacc   0.66 (  0.66)	test_majacc   0.94 (  0.94)	Loss_d 0.254 (0.254)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.79 (  0.79)
Test: [  10/  26]	Loss 0.325 (0.277)	test_acc   0.85 (  0.89)	test_minacc   0.53 (  0.62)	test_majacc   0.91 (  0.93)	Loss_d 0.325 (0.277)	test_acc_d   0.85 (  0.89)	test_minacc_d   0.53 (  0.62)	test_majacc_d   0.91 (  0.93)	test_corr_d   0.77 (  0.79)
Test: [  20/  26]	Loss 0.288 (0.279)	test_acc   0.88 (  0.88)	test_minacc   0.59 (  0.61)	test_majacc   0.93 (  0.93)	Loss_d 0.288 (0.279)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.59 (  0.61)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.79 (  0.79)
Test: [  26/  26]	Loss 0.237 (0.279)	test_acc   0.89 (  0.88)	test_minacc   0.59 (  0.62)	test_majacc   0.94 (  0.93)	Loss_d 0.237 (0.279)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.59 (  0.62)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.82 (  0.79)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.93it/s]
Test: [  0/  1]	Loss 1.560 (1.560)	test_acc   0.43 (  0.43)	test_minacc   0.37 (  0.37)	test_majacc   0.93 (  0.93)	Loss_d 1.560 (1.560)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.46 (  0.46)
Test: [  1/  1]	Loss 1.560 (1.560)	test_acc   0.43 (  0.43)	test_minacc   0.37 (  0.37)	test_majacc   0.93 (  0.93)	Loss_d 1.560 (1.560)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.46 (  0.46)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/131/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0357 (0.0399)	validation_time 0.0003 (0.0013)	train_time 0.0353 (0.0383)
record: (train_acc, test_acc) (0.8834000223875046, 0.4300000071525574)
last accs (train_acc, test_acc) (0.8834000223875046, 0.4300000071525574)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.91it/s] 19%|#9        | 5/26 [00:00<00:00, 22.17it/s] 35%|###4      | 9/26 [00:00<00:00, 29.09it/s] 50%|#####     | 13/26 [00:00<00:00, 32.98it/s] 69%|######9   | 18/26 [00:00<00:00, 36.16it/s] 88%|########8 | 23/26 [00:00<00:00, 37.52it/s]100%|##########| 26/26 [00:00<00:00, 31.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.274 (0.310)	train_nll   0.27 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.44 ( 22.38)	train_acc   0.90 (  0.87)	train_minacc   0.59 (  0.35)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 6.4593 (6.5759)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.29it/s] 27%|##6       | 7/26 [00:00<00:00, 35.89it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.89it/s] 50%|#####     | 13/26 [00:00<00:00, 41.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.87it/s] 96%|#########6| 25/26 [00:00<00:00, 47.35it/s]100%|##########| 26/26 [00:00<00:00, 40.29it/s]
Test: [   0/  26]	Loss 0.279 (0.279)	test_acc   0.89 (  0.89)	test_minacc   0.66 (  0.66)	test_majacc   0.93 (  0.93)	Loss_d 0.279 (0.279)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.80 (  0.80)
Test: [  10/  26]	Loss 0.341 (0.293)	test_acc   0.86 (  0.88)	test_minacc   0.60 (  0.60)	test_majacc   0.91 (  0.92)	Loss_d 0.341 (0.293)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.78 (  0.80)
Test: [  20/  26]	Loss 0.314 (0.295)	test_acc   0.85 (  0.87)	test_minacc   0.55 (  0.60)	test_majacc   0.91 (  0.92)	Loss_d 0.314 (0.295)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.55 (  0.60)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.78 (  0.80)
Test: [  26/  26]	Loss 0.242 (0.293)	test_acc   0.92 (  0.88)	test_minacc   0.73 (  0.61)	test_majacc   0.95 (  0.92)	Loss_d 0.242 (0.293)	test_acc_d   0.92 (  0.88)	test_minacc_d   0.73 (  0.61)	test_majacc_d   0.95 (  0.92)	test_corr_d   0.81 (  0.80)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.51it/s]
Test: [  0/  1]	Loss 1.672 (1.672)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.94 (  0.94)	Loss_d 1.672 (1.672)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.55 (  0.55)
Test: [  1/  1]	Loss 1.672 (1.672)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.94 (  0.94)	Loss_d 1.672 (1.672)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.55 (  0.55)
Overall Timing[  7/  1]	epoch_time 0.0345 (0.0393)	validation_time 0.0004 (0.0012)	train_time 0.0340 (0.0378)
record: (train_acc, test_acc) (0.8834000223875046, 0.4300000071525574)
last accs (train_acc, test_acc) (0.8763000229001046, 0.4010000228881836)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.03it/s] 19%|#9        | 5/26 [00:00<00:00, 23.90it/s] 35%|###4      | 9/26 [00:00<00:00, 29.09it/s] 50%|#####     | 13/26 [00:00<00:00, 32.48it/s] 65%|######5   | 17/26 [00:00<00:00, 34.81it/s] 85%|########4 | 22/26 [00:00<00:00, 36.88it/s]100%|##########| 26/26 [00:00<00:00, 31.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.224 (0.294)	train_nll   0.22 (  0.29)	train_penalty   0.01 (  0.02)	weight_norm  22.58 ( 22.51)	train_acc   0.91 (  0.87)	train_minacc   0.62 (  0.42)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 6.4164 (6.5992)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.84it/s] 35%|###4      | 9/26 [00:00<00:00, 40.72it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.72it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.28it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.28it/s] 81%|########  | 21/26 [00:00<00:00, 48.11it/s]100%|##########| 26/26 [00:00<00:00, 42.84it/s]
Test: [   0/  26]	Loss 0.232 (0.232)	test_acc   0.92 (  0.92)	test_minacc   0.83 (  0.83)	test_majacc   0.93 (  0.93)	Loss_d 0.232 (0.232)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.75 (  0.75)
Test: [  10/  26]	Loss 0.331 (0.263)	test_acc   0.86 (  0.90)	test_minacc   0.68 (  0.72)	test_majacc   0.90 (  0.93)	Loss_d 0.331 (0.263)	test_acc_d   0.86 (  0.90)	test_minacc_d   0.68 (  0.72)	test_majacc_d   0.90 (  0.93)	test_corr_d   0.72 (  0.76)
Test: [  20/  26]	Loss 0.268 (0.265)	test_acc   0.91 (  0.89)	test_minacc   0.72 (  0.71)	test_majacc   0.94 (  0.92)	Loss_d 0.268 (0.265)	test_acc_d   0.91 (  0.89)	test_minacc_d   0.72 (  0.71)	test_majacc_d   0.94 (  0.92)	test_corr_d   0.76 (  0.76)
Test: [  26/  26]	Loss 0.195 (0.263)	test_acc   0.92 (  0.89)	test_minacc   0.76 (  0.71)	test_majacc   0.95 (  0.93)	Loss_d 0.195 (0.263)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.76 (  0.71)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.79 (  0.76)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.55it/s]
Test: [  0/  1]	Loss 1.590 (1.590)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.93 (  0.93)	Loss_d 1.590 (1.590)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.45 (  0.45)
Test: [  1/  1]	Loss 1.590 (1.590)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.93 (  0.93)	Loss_d 1.590 (1.590)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.45 (  0.45)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/131/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0344 (0.0387)	validation_time 0.0006 (0.0011)	train_time 0.0338 (0.0373)
record: (train_acc, test_acc) (0.8936000126600265, 0.43300002813339233)
last accs (train_acc, test_acc) (0.8936000126600265, 0.43300002813339233)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.97it/s] 19%|#9        | 5/26 [00:00<00:00, 25.68it/s] 35%|###4      | 9/26 [00:00<00:00, 30.83it/s] 50%|#####     | 13/26 [00:00<00:00, 33.89it/s] 65%|######5   | 17/26 [00:00<00:00, 35.94it/s] 85%|########4 | 22/26 [00:00<00:00, 37.71it/s]100%|##########| 26/26 [00:00<00:00, 32.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.221 (0.273)	train_nll   0.22 (  0.27)	train_penalty   0.01 (  0.01)	weight_norm  22.77 ( 22.67)	train_acc   0.92 (  0.89)	train_minacc   0.70 (  0.50)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 6.2418 (6.9889)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.10it/s] 27%|##6       | 7/26 [00:00<00:00, 34.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.76it/s] 50%|#####     | 13/26 [00:00<00:00, 40.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.15it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.15it/s] 96%|#########6| 25/26 [00:00<00:00, 47.14it/s]100%|##########| 26/26 [00:00<00:00, 39.59it/s]
Test: [   0/  26]	Loss 0.235 (0.235)	test_acc   0.91 (  0.91)	test_minacc   0.72 (  0.72)	test_majacc   0.94 (  0.94)	Loss_d 0.235 (0.235)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.79 (  0.79)
Test: [  10/  26]	Loss 0.308 (0.254)	test_acc   0.85 (  0.90)	test_minacc   0.60 (  0.68)	test_majacc   0.90 (  0.93)	Loss_d 0.308 (0.254)	test_acc_d   0.85 (  0.90)	test_minacc_d   0.60 (  0.68)	test_majacc_d   0.90 (  0.93)	test_corr_d   0.76 (  0.79)
Test: [  20/  26]	Loss 0.262 (0.254)	test_acc   0.91 (  0.90)	test_minacc   0.66 (  0.68)	test_majacc   0.95 (  0.94)	Loss_d 0.262 (0.254)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.66 (  0.68)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.78 (  0.79)
Test: [  26/  26]	Loss 0.189 (0.254)	test_acc   0.93 (  0.90)	test_minacc   0.78 (  0.69)	test_majacc   0.96 (  0.94)	Loss_d 0.189 (0.254)	test_acc_d   0.93 (  0.90)	test_minacc_d   0.78 (  0.69)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.80 (  0.79)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.09it/s]
Test: [  0/  1]	Loss 1.576 (1.576)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.95 (  0.95)	Loss_d 1.576 (1.576)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.55 (  0.55)
Test: [  1/  1]	Loss 1.576 (1.576)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.95 (  0.95)	Loss_d 1.576 (1.576)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.55 (  0.55)
Overall Timing[  9/  1]	epoch_time 0.0342 (0.0383)	validation_time 0.0004 (0.0011)	train_time 0.0338 (0.0370)
record: (train_acc, test_acc) (0.8936000126600265, 0.43300002813339233)
last accs (train_acc, test_acc) (0.8994000243544579, 0.37800002098083496)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.53it/s] 19%|#9        | 5/26 [00:00<00:00, 25.79it/s] 35%|###4      | 9/26 [00:00<00:00, 31.51it/s] 50%|#####     | 13/26 [00:00<00:00, 33.77it/s] 69%|######9   | 18/26 [00:00<00:00, 36.42it/s] 85%|########4 | 22/26 [00:00<00:00, 37.45it/s]100%|##########| 26/26 [00:00<00:00, 37.77it/s]100%|##########| 26/26 [00:00<00:00, 32.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.267 (0.267)	train_nll   0.27 (  0.27)	train_penalty   0.01 (  0.01)	weight_norm  23.02 ( 22.88)	train_acc   0.91 (  0.89)	train_minacc   0.49 (  0.51)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 5.9669 (7.2769)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.18it/s] 27%|##6       | 7/26 [00:00<00:00, 27.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.48it/s] 50%|#####     | 13/26 [00:00<00:00, 37.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.60it/s] 96%|#########6| 25/26 [00:00<00:00, 45.65it/s]100%|##########| 26/26 [00:00<00:00, 36.52it/s]
Test: [   0/  26]	Loss 0.275 (0.275)	test_acc   0.90 (  0.90)	test_minacc   0.50 (  0.50)	test_majacc   0.97 (  0.97)	Loss_d 0.275 (0.275)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.296 (0.274)	test_acc   0.87 (  0.89)	test_minacc   0.47 (  0.50)	test_majacc   0.95 (  0.96)	Loss_d 0.296 (0.274)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.83 (  0.83)
Test: [  20/  26]	Loss 0.300 (0.272)	test_acc   0.89 (  0.89)	test_minacc   0.52 (  0.50)	test_majacc   0.96 (  0.96)	Loss_d 0.300 (0.272)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.83 (  0.83)
Test: [  26/  26]	Loss 0.233 (0.272)	test_acc   0.93 (  0.89)	test_minacc   0.57 (  0.50)	test_majacc   1.00 (  0.96)	Loss_d 0.233 (0.272)	test_acc_d   0.93 (  0.89)	test_minacc_d   0.57 (  0.50)	test_majacc_d   1.00 (  0.96)	test_corr_d   0.84 (  0.83)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.98it/s]
Test: [  0/  1]	Loss 1.641 (1.641)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.641 (1.641)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.641 (1.641)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.641 (1.641)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.75 (  0.75)
Overall Timing[ 10/  1]	epoch_time 0.0358 (0.0380)	validation_time 0.0003 (0.0010)	train_time 0.0354 (0.0368)
record: (train_acc, test_acc) (0.8936000126600265, 0.43300002813339233)
last accs (train_acc, test_acc) (0.8903000214099884, 0.24900001287460327)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.33it/s] 19%|#9        | 5/26 [00:00<00:00, 24.57it/s] 35%|###4      | 9/26 [00:00<00:00, 30.99it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.07it/s] 92%|#########2| 24/26 [00:00<00:00, 37.97it/s]100%|##########| 26/26 [00:00<00:00, 32.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.216 (0.257)	train_nll   0.22 (  0.26)	train_penalty   0.01 (  0.01)	weight_norm  23.31 ( 23.17)	train_acc   0.92 (  0.90)	train_minacc   0.65 (  0.57)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 6.4402 (7.1620)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.71it/s] 27%|##6       | 7/26 [00:00<00:00, 36.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.45it/s] 50%|#####     | 13/26 [00:00<00:00, 41.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.79it/s] 96%|#########6| 25/26 [00:00<00:00, 48.02it/s]100%|##########| 26/26 [00:00<00:00, 40.62it/s]
Test: [   0/  26]	Loss 0.249 (0.249)	test_acc   0.90 (  0.90)	test_minacc   0.53 (  0.53)	test_majacc   0.96 (  0.96)	Loss_d 0.249 (0.249)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.290 (0.249)	test_acc   0.88 (  0.90)	test_minacc   0.52 (  0.52)	test_majacc   0.95 (  0.96)	Loss_d 0.290 (0.249)	test_acc_d   0.88 (  0.90)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.83 (  0.85)
Test: [  20/  26]	Loss 0.245 (0.243)	test_acc   0.90 (  0.90)	test_minacc   0.52 (  0.54)	test_majacc   0.97 (  0.96)	Loss_d 0.245 (0.243)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.85 (  0.85)
Test: [  26/  26]	Loss 0.190 (0.243)	test_acc   0.92 (  0.90)	test_minacc   0.59 (  0.55)	test_majacc   0.98 (  0.97)	Loss_d 0.190 (0.243)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.59 (  0.55)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.84 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.93it/s]
Test: [  0/  1]	Loss 1.834 (1.834)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.99 (  0.99)	Loss_d 1.834 (1.834)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 1.834 (1.834)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.99 (  0.99)	Loss_d 1.834 (1.834)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.67 (  0.67)
Overall Timing[ 11/  1]	epoch_time 0.0349 (0.0378)	validation_time 0.0004 (0.0009)	train_time 0.0344 (0.0366)
record: (train_acc, test_acc) (0.8936000126600265, 0.43300002813339233)
last accs (train_acc, test_acc) (0.9032000176906586, 0.320000022649765)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.68it/s] 19%|#9        | 5/26 [00:00<00:00, 21.98it/s] 35%|###4      | 9/26 [00:00<00:00, 29.10it/s] 50%|#####     | 13/26 [00:00<00:00, 32.58it/s] 65%|######5   | 17/26 [00:00<00:00, 34.42it/s] 81%|########  | 21/26 [00:00<00:00, 35.80it/s] 96%|#########6| 25/26 [00:00<00:00, 36.94it/s]100%|##########| 26/26 [00:00<00:00, 30.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.183 (0.223)	train_nll   0.18 (  0.22)	train_penalty   0.00 (  0.01)	weight_norm  23.62 ( 23.46)	train_acc   0.92 (  0.91)	train_minacc   0.70 (  0.63)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 7.7939 (7.7141)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.08it/s] 23%|##3       | 6/26 [00:00<00:00, 30.49it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.49it/s] 42%|####2     | 11/26 [00:00<00:00, 38.64it/s] 65%|######5   | 17/26 [00:00<00:00, 41.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.70it/s] 88%|########8 | 23/26 [00:00<00:00, 46.83it/s]100%|##########| 26/26 [00:00<00:00, 38.61it/s]
Test: [   0/  26]	Loss 0.241 (0.241)	test_acc   0.92 (  0.92)	test_minacc   0.66 (  0.66)	test_majacc   0.97 (  0.97)	Loss_d 0.241 (0.241)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.247 (0.217)	test_acc   0.91 (  0.91)	test_minacc   0.61 (  0.61)	test_majacc   0.97 (  0.96)	Loss_d 0.247 (0.217)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.82 (  0.83)
Test: [  20/  26]	Loss 0.182 (0.210)	test_acc   0.93 (  0.92)	test_minacc   0.69 (  0.63)	test_majacc   0.97 (  0.97)	Loss_d 0.182 (0.210)	test_acc_d   0.93 (  0.92)	test_minacc_d   0.69 (  0.63)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.81 (  0.82)
Test: [  26/  26]	Loss 0.132 (0.208)	test_acc   0.96 (  0.92)	test_minacc   0.78 (  0.64)	test_majacc   0.99 (  0.97)	Loss_d 0.132 (0.208)	test_acc_d   0.96 (  0.92)	test_minacc_d   0.78 (  0.64)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.83 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.44it/s]
Test: [  0/  1]	Loss 2.170 (2.170)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.99 (  0.99)	Loss_d 2.170 (2.170)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.54 (  0.54)
Test: [  1/  1]	Loss 2.170 (2.170)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.99 (  0.99)	Loss_d 2.170 (2.170)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.54 (  0.54)
Overall Timing[ 12/  1]	epoch_time 0.0357 (0.0376)	validation_time 0.0004 (0.0009)	train_time 0.0352 (0.0365)
record: (train_acc, test_acc) (0.8936000126600265, 0.43300002813339233)
last accs (train_acc, test_acc) (0.9187000218033791, 0.3830000162124634)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.94it/s] 19%|#9        | 5/26 [00:00<00:00, 22.01it/s] 35%|###4      | 9/26 [00:00<00:00, 27.85it/s] 50%|#####     | 13/26 [00:00<00:00, 31.58it/s] 65%|######5   | 17/26 [00:00<00:00, 34.12it/s] 81%|########  | 21/26 [00:00<00:00, 35.76it/s] 96%|#########6| 25/26 [00:00<00:00, 37.03it/s]100%|##########| 26/26 [00:00<00:00, 30.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.118 (0.209)	train_nll   0.12 (  0.21)	train_penalty   0.00 (  0.01)	weight_norm  24.00 ( 23.82)	train_acc   0.96 (  0.92)	train_minacc   0.95 (  0.66)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 8.2822 (7.6956)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.10it/s] 23%|##3       | 6/26 [00:00<00:00, 31.79it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.79it/s] 42%|####2     | 11/26 [00:00<00:00, 39.46it/s] 65%|######5   | 17/26 [00:00<00:00, 42.56it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.56it/s] 88%|########8 | 23/26 [00:00<00:00, 47.38it/s]100%|##########| 26/26 [00:00<00:00, 38.98it/s]
Test: [   0/  26]	Loss 0.196 (0.196)	test_acc   0.92 (  0.92)	test_minacc   0.76 (  0.76)	test_majacc   0.95 (  0.95)	Loss_d 0.196 (0.196)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.226 (0.174)	test_acc   0.90 (  0.93)	test_minacc   0.73 (  0.78)	test_majacc   0.93 (  0.96)	Loss_d 0.226 (0.174)	test_acc_d   0.90 (  0.93)	test_minacc_d   0.73 (  0.78)	test_majacc_d   0.93 (  0.96)	test_corr_d   0.75 (  0.77)
Test: [  20/  26]	Loss 0.121 (0.162)	test_acc   0.96 (  0.94)	test_minacc   0.88 (  0.80)	test_majacc   0.98 (  0.96)	Loss_d 0.121 (0.162)	test_acc_d   0.96 (  0.94)	test_minacc_d   0.88 (  0.80)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.74 (  0.77)
Test: [  26/  26]	Loss 0.077 (0.158)	test_acc   0.99 (  0.94)	test_minacc   1.00 (  0.80)	test_majacc   0.99 (  0.97)	Loss_d 0.077 (0.158)	test_acc_d   0.99 (  0.94)	test_minacc_d   1.00 (  0.80)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.76 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.67it/s]
Test: [  0/  1]	Loss 2.323 (2.323)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.96 (  0.96)	Loss_d 2.323 (2.323)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.44 (  0.44)
Test: [  1/  1]	Loss 2.323 (2.323)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.96 (  0.96)	Loss_d 2.323 (2.323)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.44 (  0.44)
Overall Timing[ 13/  1]	epoch_time 0.0360 (0.0375)	validation_time 0.0004 (0.0009)	train_time 0.0356 (0.0365)
record: (train_acc, test_acc) (0.8936000126600265, 0.43300002813339233)
last accs (train_acc, test_acc) (0.9406000218391418, 0.42000001668930054)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.47it/s] 19%|#9        | 5/26 [00:00<00:01, 19.93it/s] 35%|###4      | 9/26 [00:00<00:00, 27.24it/s] 50%|#####     | 13/26 [00:00<00:00, 30.29it/s] 65%|######5   | 17/26 [00:00<00:00, 32.14it/s] 81%|########  | 21/26 [00:00<00:00, 33.95it/s] 96%|#########6| 25/26 [00:00<00:00, 35.57it/s]100%|##########| 26/26 [00:00<00:00, 28.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.112 (0.175)	train_nll   0.11 (  0.18)	train_penalty   0.00 (  0.00)	weight_norm  24.37 ( 24.19)	train_acc   0.95 (  0.93)	train_minacc   0.84 (  0.73)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 8.8614 (8.4759)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.33it/s] 27%|##6       | 7/26 [00:00<00:00, 35.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.19it/s] 50%|#####     | 13/26 [00:00<00:00, 40.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.89it/s] 96%|#########6| 25/26 [00:00<00:00, 47.22it/s]100%|##########| 26/26 [00:00<00:00, 40.12it/s]
Test: [   0/  26]	Loss 0.159 (0.159)	test_acc   0.94 (  0.94)	test_minacc   0.81 (  0.81)	test_majacc   0.97 (  0.97)	Loss_d 0.159 (0.159)	test_acc_d   0.94 (  0.94)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.199 (0.155)	test_acc   0.93 (  0.94)	test_minacc   0.79 (  0.81)	test_majacc   0.96 (  0.96)	Loss_d 0.199 (0.155)	test_acc_d   0.93 (  0.94)	test_minacc_d   0.79 (  0.81)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.73 (  0.75)
Test: [  20/  26]	Loss 0.112 (0.143)	test_acc   0.96 (  0.95)	test_minacc   0.88 (  0.81)	test_majacc   0.98 (  0.97)	Loss_d 0.112 (0.143)	test_acc_d   0.96 (  0.95)	test_minacc_d   0.88 (  0.81)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.73 (  0.76)
Test: [  26/  26]	Loss 0.050 (0.134)	test_acc   1.00 (  0.95)	test_minacc   1.00 (  0.83)	test_majacc   1.00 (  0.97)	Loss_d 0.050 (0.134)	test_acc_d   1.00 (  0.95)	test_minacc_d   1.00 (  0.83)	test_majacc_d   1.00 (  0.97)	test_corr_d   0.74 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.92it/s]
Test: [  0/  1]	Loss 2.652 (2.652)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.91 (  0.91)	Loss_d 2.652 (2.652)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.45 (  0.45)
Test: [  1/  1]	Loss 2.652 (2.652)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.91 (  0.91)	Loss_d 2.652 (2.652)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.45 (  0.45)
Overall Timing[ 14/  1]	epoch_time 0.0359 (0.0374)	validation_time 0.0003 (0.0008)	train_time 0.0356 (0.0364)
record: (train_acc, test_acc) (0.8936000126600265, 0.43300002813339233)
last accs (train_acc, test_acc) (0.9504000146985054, 0.3960000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.22it/s] 23%|##3       | 6/26 [00:00<00:00, 24.27it/s] 38%|###8      | 10/26 [00:00<00:00, 30.21it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.12it/s] 92%|#########2| 24/26 [00:00<00:00, 37.58it/s]100%|##########| 26/26 [00:00<00:00, 31.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.012 (0.069)	train_nll   0.22 (  0.22)	train_penalty   0.01 (  0.00)	weight_norm  24.72 ( 24.57)	train_acc   0.92 (  0.91)	train_minacc   0.95 (  0.75)	train_majacc   0.92 (  0.94)	train_corr   0.00 (  0.00)	l1 6.9020 (8.2098)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.62it/s] 27%|##6       | 7/26 [00:00<00:00, 36.14it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.14it/s] 50%|#####     | 13/26 [00:00<00:00, 41.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.70it/s] 96%|#########6| 25/26 [00:00<00:00, 47.85it/s]100%|##########| 26/26 [00:00<00:00, 40.54it/s]
Test: [   0/  26]	Loss 0.288 (0.288)	test_acc   0.88 (  0.88)	test_minacc   0.83 (  0.83)	test_majacc   0.89 (  0.89)	Loss_d 0.288 (0.288)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.348 (0.301)	test_acc   0.86 (  0.87)	test_minacc   0.81 (  0.87)	test_majacc   0.87 (  0.87)	Loss_d 0.348 (0.301)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.81 (  0.87)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.60 (  0.61)
Test: [  20/  26]	Loss 0.318 (0.304)	test_acc   0.85 (  0.87)	test_minacc   0.83 (  0.86)	test_majacc   0.86 (  0.87)	Loss_d 0.318 (0.304)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.83 (  0.86)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.58 (  0.61)
Test: [  26/  26]	Loss 0.242 (0.303)	test_acc   0.92 (  0.87)	test_minacc   0.95 (  0.86)	test_majacc   0.91 (  0.88)	Loss_d 0.242 (0.303)	test_acc_d   0.92 (  0.87)	test_minacc_d   0.95 (  0.86)	test_majacc_d   0.91 (  0.88)	test_corr_d   0.66 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.76it/s]
Test: [  0/  1]	Loss 1.442 (1.442)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.85 (  0.85)	Loss_d 1.442 (1.442)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 1.442 (1.442)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.85 (  0.85)	Loss_d 1.442 (1.442)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.18 (  0.18)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/131/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0345 (0.0372)	validation_time 0.0003 (0.0008)	train_time 0.0342 (0.0363)
record: (train_acc, test_acc) (0.8722000266313553, 0.527999997138977)
last accs (train_acc, test_acc) (0.8722000266313553, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.25it/s] 19%|#9        | 5/26 [00:00<00:01, 19.42it/s] 35%|###4      | 9/26 [00:00<00:00, 26.82it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.40it/s] 69%|######9   | 18/26 [00:00<00:00, 34.76it/s] 88%|########8 | 23/26 [00:00<00:00, 36.76it/s]100%|##########| 26/26 [00:00<00:00, 29.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.003 (0.003)	train_nll   0.24 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  24.79 ( 24.77)	train_acc   0.88 (  0.85)	train_minacc   0.81 (  0.83)	train_majacc   0.89 (  0.85)	train_corr   0.00 (  0.00)	l1 6.3397 (6.6131)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.76it/s] 27%|##6       | 7/26 [00:00<00:00, 34.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.74it/s] 50%|#####     | 13/26 [00:00<00:00, 40.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.60it/s] 96%|#########6| 25/26 [00:00<00:00, 47.14it/s]100%|##########| 26/26 [00:00<00:00, 39.96it/s]
Test: [   0/  26]	Loss 0.281 (0.281)	test_acc   0.86 (  0.86)	test_minacc   0.76 (  0.76)	test_majacc   0.87 (  0.87)	Loss_d 0.281 (0.281)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.324 (0.272)	test_acc   0.84 (  0.87)	test_minacc   0.76 (  0.81)	test_majacc   0.86 (  0.88)	Loss_d 0.324 (0.272)	test_acc_d   0.84 (  0.87)	test_minacc_d   0.76 (  0.81)	test_majacc_d   0.86 (  0.88)	test_corr_d   0.67 (  0.70)
Test: [  20/  26]	Loss 0.274 (0.275)	test_acc   0.86 (  0.87)	test_minacc   0.77 (  0.79)	test_majacc   0.88 (  0.88)	Loss_d 0.274 (0.275)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.77 (  0.79)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.68 (  0.70)
Test: [  26/  26]	Loss 0.245 (0.277)	test_acc   0.88 (  0.87)	test_minacc   0.81 (  0.79)	test_majacc   0.89 (  0.88)	Loss_d 0.245 (0.277)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.81 (  0.79)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.72 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 1.567 (1.567)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.90 (  0.90)	Loss_d 1.567 (1.567)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 1.567 (1.567)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.90 (  0.90)	Loss_d 1.567 (1.567)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.30 (  0.30)
Overall Timing[ 16/  1]	epoch_time 0.0364 (0.0372)	validation_time 0.0006 (0.0008)	train_time 0.0357 (0.0362)
record: (train_acc, test_acc) (0.8722000266313553, 0.527999997138977)
last accs (train_acc, test_acc) (0.8672000207304954, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.36it/s] 19%|#9        | 5/26 [00:00<00:00, 26.54it/s] 38%|###8      | 10/26 [00:00<00:00, 34.06it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.18it/s] 69%|######9   | 18/26 [00:00<00:00, 37.41it/s] 88%|########8 | 23/26 [00:00<00:00, 38.34it/s]100%|##########| 26/26 [00:00<00:00, 33.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.002 (0.002)	train_nll   0.34 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  24.81 ( 24.80)	train_acc   0.84 (  0.85)	train_minacc   0.84 (  0.83)	train_majacc   0.84 (  0.85)	train_corr   0.00 (  0.00)	l1 6.6975 (6.5376)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.98it/s] 27%|##6       | 7/26 [00:00<00:00, 34.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.88it/s] 46%|####6     | 12/26 [00:00<00:00, 38.37it/s] 69%|######9   | 18/26 [00:00<00:00, 45.54it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.54it/s] 92%|#########2| 24/26 [00:00<00:00, 46.17it/s]100%|##########| 26/26 [00:00<00:00, 39.52it/s]
Test: [   0/  26]	Loss 0.362 (0.362)	test_acc   0.78 (  0.78)	test_minacc   0.76 (  0.76)	test_majacc   0.79 (  0.79)	Loss_d 0.362 (0.362)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.327 (0.335)	test_acc   0.83 (  0.82)	test_minacc   0.79 (  0.83)	test_majacc   0.84 (  0.82)	Loss_d 0.327 (0.335)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.79 (  0.83)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.62 (  0.60)
Test: [  20/  26]	Loss 0.316 (0.340)	test_acc   0.82 (  0.82)	test_minacc   0.81 (  0.82)	test_majacc   0.82 (  0.82)	Loss_d 0.316 (0.340)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.81 (  0.82)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.59 (  0.60)
Test: [  26/  26]	Loss 0.333 (0.338)	test_acc   0.84 (  0.82)	test_minacc   0.84 (  0.82)	test_majacc   0.84 (  0.82)	Loss_d 0.333 (0.338)	test_acc_d   0.84 (  0.82)	test_minacc_d   0.84 (  0.82)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.62 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.35it/s]
Test: [  0/  1]	Loss 1.631 (1.631)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.84 (  0.84)	Loss_d 1.631 (1.631)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 1.631 (1.631)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.84 (  0.84)	Loss_d 1.631 (1.631)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.18 (  0.18)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/131/checkpoints/model_best.pth
Overall Timing[ 17/  1]	epoch_time 0.0333 (0.0369)	validation_time 0.0003 (0.0008)	train_time 0.0330 (0.0361)
record: (train_acc, test_acc) (0.8188000286221504, 0.5730000138282776)
last accs (train_acc, test_acc) (0.8188000286221504, 0.5730000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.79it/s] 19%|#9        | 5/26 [00:00<00:00, 25.96it/s] 35%|###4      | 9/26 [00:00<00:00, 31.40it/s] 50%|#####     | 13/26 [00:00<00:00, 34.49it/s] 69%|######9   | 18/26 [00:00<00:00, 36.81it/s] 88%|########8 | 23/26 [00:00<00:00, 38.06it/s]100%|##########| 26/26 [00:00<00:00, 32.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.001 (0.001)	train_nll   0.27 (  0.31)	train_penalty   0.00 (  0.00)	weight_norm  24.81 ( 24.81)	train_acc   0.86 (  0.83)	train_minacc   0.86 (  0.85)	train_majacc   0.86 (  0.83)	train_corr   0.00 (  0.00)	l1 6.6509 (6.5850)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.82it/s] 35%|###4      | 9/26 [00:00<00:00, 41.52it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.52it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.89it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.89it/s] 81%|########  | 21/26 [00:00<00:00, 46.78it/s]100%|##########| 26/26 [00:00<00:00, 42.86it/s]
Test: [   0/  26]	Loss 0.305 (0.305)	test_acc   0.83 (  0.83)	test_minacc   0.88 (  0.88)	test_majacc   0.82 (  0.82)	Loss_d 0.305 (0.305)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.60 (  0.60)
Test: [  10/  26]	Loss 0.327 (0.308)	test_acc   0.83 (  0.83)	test_minacc   0.82 (  0.87)	test_majacc   0.83 (  0.83)	Loss_d 0.327 (0.308)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.82 (  0.87)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.61 (  0.61)
Test: [  20/  26]	Loss 0.314 (0.311)	test_acc   0.83 (  0.83)	test_minacc   0.86 (  0.86)	test_majacc   0.83 (  0.83)	Loss_d 0.314 (0.311)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.59 (  0.61)
Test: [  26/  26]	Loss 0.275 (0.309)	test_acc   0.86 (  0.84)	test_minacc   0.86 (  0.87)	test_majacc   0.86 (  0.83)	Loss_d 0.275 (0.309)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.86 (  0.87)	test_majacc_d   0.86 (  0.83)	test_corr_d   0.66 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.39it/s]
Test: [  0/  1]	Loss 1.558 (1.558)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.86 (  0.86)	Loss_d 1.558 (1.558)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.558 (1.558)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.86 (  0.86)	Loss_d 1.558 (1.558)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.14 (  0.14)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/131/checkpoints/model_best.pth
Overall Timing[ 18/  1]	epoch_time 0.0342 (0.0368)	validation_time 0.0005 (0.0008)	train_time 0.0337 (0.0359)
record: (train_acc, test_acc) (0.8351000229716301, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8351000229716301, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.63it/s] 19%|#9        | 5/26 [00:00<00:00, 22.93it/s] 35%|###4      | 9/26 [00:00<00:00, 29.10it/s] 50%|#####     | 13/26 [00:00<00:00, 32.83it/s] 65%|######5   | 17/26 [00:00<00:00, 34.87it/s] 81%|########  | 21/26 [00:00<00:00, 36.51it/s] 96%|#########6| 25/26 [00:00<00:00, 37.25it/s]100%|##########| 26/26 [00:00<00:00, 31.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.001 (0.000)	train_nll   0.29 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  24.81 ( 24.81)	train_acc   0.86 (  0.84)	train_minacc   0.84 (  0.85)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 6.8195 (6.6951)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.15it/s] 31%|###       | 8/26 [00:00<00:00, 40.89it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.89it/s] 50%|#####     | 13/26 [00:00<00:00, 42.98it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.55it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.55it/s] 96%|#########6| 25/26 [00:00<00:00, 48.20it/s]100%|##########| 26/26 [00:00<00:00, 41.96it/s]
Test: [   0/  26]	Loss 0.311 (0.311)	test_acc   0.83 (  0.83)	test_minacc   0.84 (  0.84)	test_majacc   0.82 (  0.82)	Loss_d 0.311 (0.311)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.62 (  0.62)
Test: [  10/  26]	Loss 0.322 (0.304)	test_acc   0.83 (  0.84)	test_minacc   0.84 (  0.86)	test_majacc   0.83 (  0.83)	Loss_d 0.322 (0.304)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.84 (  0.86)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.62 (  0.62)
Test: [  20/  26]	Loss 0.318 (0.312)	test_acc   0.82 (  0.83)	test_minacc   0.86 (  0.85)	test_majacc   0.82 (  0.83)	Loss_d 0.318 (0.312)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.86 (  0.85)	test_majacc_d   0.82 (  0.83)	test_corr_d   0.59 (  0.62)
Test: [  26/  26]	Loss 0.292 (0.312)	test_acc   0.86 (  0.83)	test_minacc   0.84 (  0.85)	test_majacc   0.86 (  0.83)	Loss_d 0.292 (0.312)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.84 (  0.85)	test_majacc_d   0.86 (  0.83)	test_corr_d   0.66 (  0.62)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.14it/s]
Test: [  0/  1]	Loss 1.620 (1.620)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.87 (  0.87)	Loss_d 1.620 (1.620)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 1.620 (1.620)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.87 (  0.87)	Loss_d 1.620 (1.620)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.16 (  0.16)
Overall Timing[ 19/  1]	epoch_time 0.0345 (0.0367)	validation_time 0.0004 (0.0007)	train_time 0.0340 (0.0358)
record: (train_acc, test_acc) (0.8351000229716301, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8341000193357467, 0.5879999995231628)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02, 10.00it/s] 19%|#9        | 5/26 [00:00<00:00, 26.50it/s] 35%|###4      | 9/26 [00:00<00:00, 32.14it/s] 50%|#####     | 13/26 [00:00<00:00, 34.21it/s] 65%|######5   | 17/26 [00:00<00:00, 35.81it/s] 81%|########  | 21/26 [00:00<00:00, 37.10it/s] 96%|#########6| 25/26 [00:00<00:00, 37.71it/s]100%|##########| 26/26 [00:00<00:00, 32.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  24.82 ( 24.82)	train_acc   0.87 (  0.84)	train_minacc   0.89 (  0.85)	train_majacc   0.86 (  0.83)	train_corr   0.00 (  0.00)	l1 6.6955 (6.6747)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.62it/s] 31%|###       | 8/26 [00:00<00:00, 39.97it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.97it/s] 50%|#####     | 13/26 [00:00<00:00, 41.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.92it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.92it/s] 96%|#########6| 25/26 [00:00<00:00, 48.17it/s]100%|##########| 26/26 [00:00<00:00, 41.78it/s]
Test: [   0/  26]	Loss 0.311 (0.311)	test_acc   0.83 (  0.83)	test_minacc   0.88 (  0.88)	test_majacc   0.82 (  0.82)	Loss_d 0.311 (0.311)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.322 (0.307)	test_acc   0.84 (  0.84)	test_minacc   0.85 (  0.88)	test_majacc   0.83 (  0.83)	Loss_d 0.322 (0.307)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.85 (  0.88)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.61 (  0.61)
Test: [  20/  26]	Loss 0.328 (0.317)	test_acc   0.81 (  0.83)	test_minacc   0.86 (  0.86)	test_majacc   0.80 (  0.82)	Loss_d 0.328 (0.317)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.57 (  0.61)
Test: [  26/  26]	Loss 0.285 (0.316)	test_acc   0.87 (  0.83)	test_minacc   0.89 (  0.86)	test_majacc   0.86 (  0.82)	Loss_d 0.285 (0.316)	test_acc_d   0.87 (  0.83)	test_minacc_d   0.89 (  0.86)	test_majacc_d   0.86 (  0.82)	test_corr_d   0.65 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.25it/s]
Test: [  0/  1]	Loss 1.583 (1.583)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.84 (  0.84)	Loss_d 1.583 (1.583)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.583 (1.583)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.84 (  0.84)	Loss_d 1.583 (1.583)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.14 (  0.14)
Overall Timing[ 20/  1]	epoch_time 0.0348 (0.0366)	validation_time 0.0004 (0.0007)	train_time 0.0343 (0.0358)
record: (train_acc, test_acc) (0.8351000229716301, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8303000269532204, 0.593000054359436)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 19%|#9        | 5/26 [00:00<00:00, 22.30it/s] 35%|###4      | 9/26 [00:00<00:00, 28.66it/s] 50%|#####     | 13/26 [00:00<00:00, 32.48it/s] 65%|######5   | 17/26 [00:00<00:00, 34.77it/s] 81%|########  | 21/26 [00:00<00:00, 35.82it/s] 96%|#########6| 25/26 [00:00<00:00, 36.15it/s]100%|##########| 26/26 [00:00<00:00, 30.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  24.82 ( 24.82)	train_acc   0.87 (  0.84)	train_minacc   0.89 (  0.85)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 6.7286 (6.6942)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.97it/s] 27%|##6       | 7/26 [00:00<00:00, 34.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.56it/s] 50%|#####     | 13/26 [00:00<00:00, 43.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.69it/s] 96%|#########6| 25/26 [00:00<00:00, 48.38it/s]100%|##########| 26/26 [00:00<00:00, 40.81it/s]
Test: [   0/  26]	Loss 0.296 (0.296)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.83)	test_majacc   0.84 (  0.84)	Loss_d 0.296 (0.296)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.64 (  0.64)
Test: [  10/  26]	Loss 0.310 (0.285)	test_acc   0.85 (  0.85)	test_minacc   0.85 (  0.87)	test_majacc   0.84 (  0.85)	Loss_d 0.310 (0.285)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.85 (  0.87)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.63 (  0.64)
Test: [  20/  26]	Loss 0.318 (0.299)	test_acc   0.81 (  0.84)	test_minacc   0.84 (  0.85)	test_majacc   0.80 (  0.84)	Loss_d 0.318 (0.299)	test_acc_d   0.81 (  0.84)	test_minacc_d   0.84 (  0.85)	test_majacc_d   0.80 (  0.84)	test_corr_d   0.59 (  0.64)
Test: [  26/  26]	Loss 0.276 (0.299)	test_acc   0.87 (  0.84)	test_minacc   0.89 (  0.85)	test_majacc   0.86 (  0.84)	Loss_d 0.276 (0.299)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.89 (  0.85)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.67 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.97it/s]
Test: [  0/  1]	Loss 1.631 (1.631)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.86 (  0.86)	Loss_d 1.631 (1.631)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 1.631 (1.631)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.86 (  0.86)	Loss_d 1.631 (1.631)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.18 (  0.18)
Overall Timing[ 21/  1]	epoch_time 0.0342 (0.0365)	validation_time 0.0003 (0.0007)	train_time 0.0339 (0.0357)
record: (train_acc, test_acc) (0.8351000229716301, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8412000204920769, 0.5840000510215759)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.84it/s] 19%|#9        | 5/26 [00:00<00:00, 22.98it/s] 35%|###4      | 9/26 [00:00<00:00, 29.12it/s] 50%|#####     | 13/26 [00:00<00:00, 32.68it/s] 65%|######5   | 17/26 [00:00<00:00, 34.34it/s] 81%|########  | 21/26 [00:00<00:00, 36.02it/s] 96%|#########6| 25/26 [00:00<00:00, 36.98it/s]100%|##########| 26/26 [00:00<00:00, 30.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  24.82 ( 24.82)	train_acc   0.86 (  0.84)	train_minacc   0.86 (  0.84)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 6.6830 (6.7310)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 27%|##6       | 7/26 [00:00<00:00, 30.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.13it/s] 50%|#####     | 13/26 [00:00<00:00, 37.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.69it/s] 96%|#########6| 25/26 [00:00<00:00, 44.70it/s]100%|##########| 26/26 [00:00<00:00, 36.86it/s]
Test: [   0/  26]	Loss 0.287 (0.287)	test_acc   0.84 (  0.84)	test_minacc   0.81 (  0.81)	test_majacc   0.85 (  0.85)	Loss_d 0.287 (0.287)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.289 (0.274)	test_acc   0.85 (  0.86)	test_minacc   0.84 (  0.85)	test_majacc   0.85 (  0.86)	Loss_d 0.289 (0.274)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.84 (  0.85)	test_majacc_d   0.85 (  0.86)	test_corr_d   0.65 (  0.66)
Test: [  20/  26]	Loss 0.316 (0.290)	test_acc   0.81 (  0.85)	test_minacc   0.83 (  0.83)	test_majacc   0.80 (  0.85)	Loss_d 0.316 (0.290)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.80 (  0.85)	test_corr_d   0.61 (  0.66)
Test: [  26/  26]	Loss 0.277 (0.292)	test_acc   0.86 (  0.85)	test_minacc   0.86 (  0.83)	test_majacc   0.86 (  0.85)	Loss_d 0.277 (0.292)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.86 (  0.83)	test_majacc_d   0.86 (  0.85)	test_corr_d   0.68 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.70it/s]
Test: [  0/  1]	Loss 1.674 (1.674)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.88 (  0.88)	Loss_d 1.674 (1.674)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 1.674 (1.674)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.88 (  0.88)	Loss_d 1.674 (1.674)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.23 (  0.23)
Overall Timing[ 22/  1]	epoch_time 0.0363 (0.0365)	validation_time 0.0006 (0.0007)	train_time 0.0357 (0.0357)
record: (train_acc, test_acc) (0.8351000229716301, 0.5960000157356262)
last accs (train_acc, test_acc) (0.846200021147728, 0.5700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.71it/s] 19%|#9        | 5/26 [00:00<00:00, 23.75it/s] 35%|###4      | 9/26 [00:00<00:00, 30.56it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.13it/s] 69%|######9   | 18/26 [00:00<00:00, 36.64it/s] 88%|########8 | 23/26 [00:00<00:00, 38.02it/s]100%|##########| 26/26 [00:00<00:00, 32.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 6.823570251464844
set z to 6.482391738891601
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.001 (0.000)	train_nll   0.26 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  24.82 ( 24.82)	train_acc   0.87 (  0.84)	train_minacc   0.86 (  0.83)	train_majacc   0.87 (  0.85)	train_corr   0.00 (  0.00)	l1 6.6005 (6.8046)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.21it/s] 27%|##6       | 7/26 [00:00<00:00, 35.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.25it/s] 50%|#####     | 13/26 [00:00<00:00, 41.09it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.04it/s] 96%|#########6| 25/26 [00:00<00:00, 47.69it/s]100%|##########| 26/26 [00:00<00:00, 39.96it/s]
Test: [   0/  26]	Loss 0.274 (0.274)	test_acc   0.85 (  0.85)	test_minacc   0.83 (  0.83)	test_majacc   0.85 (  0.85)	Loss_d 0.274 (0.274)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.276 (0.255)	test_acc   0.86 (  0.87)	test_minacc   0.85 (  0.86)	test_majacc   0.86 (  0.87)	Loss_d 0.276 (0.255)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.85 (  0.86)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.68 (  0.69)
Test: [  20/  26]	Loss 0.300 (0.267)	test_acc   0.83 (  0.86)	test_minacc   0.81 (  0.84)	test_majacc   0.83 (  0.87)	Loss_d 0.300 (0.267)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.81 (  0.84)	test_majacc_d   0.83 (  0.87)	test_corr_d   0.64 (  0.69)
Test: [  26/  26]	Loss 0.265 (0.271)	test_acc   0.87 (  0.86)	test_minacc   0.86 (  0.84)	test_majacc   0.87 (  0.86)	Loss_d 0.265 (0.271)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.86 (  0.84)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.47it/s]
Test: [  0/  1]	Loss 1.686 (1.686)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.88 (  0.88)	Loss_d 1.686 (1.686)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 1.686 (1.686)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.88 (  0.88)	Loss_d 1.686 (1.686)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.28 (  0.28)
Overall Timing[ 23/  1]	epoch_time 0.0354 (0.0364)	validation_time 0.0004 (0.0007)	train_time 0.0350 (0.0356)
record: (train_acc, test_acc) (0.8351000229716301, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8594000240564347, 0.5540000200271606)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.76it/s] 19%|#9        | 5/26 [00:00<00:00, 25.04it/s] 35%|###4      | 9/26 [00:00<00:00, 31.47it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.52it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.38it/s] 92%|#########2| 24/26 [00:00<00:00, 38.53it/s]100%|##########| 26/26 [00:00<00:00, 32.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.001 (0.001)	train_nll   0.26 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.83 ( 24.83)	train_acc   0.86 (  0.85)	train_minacc   0.78 (  0.83)	train_majacc   0.88 (  0.85)	train_corr   0.00 (  0.00)	l1 6.6038 (6.9543)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.67it/s] 31%|###       | 8/26 [00:00<00:00, 36.45it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.45it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.08it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.94it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.94it/s]100%|##########| 26/26 [00:00<00:00, 50.18it/s]100%|##########| 26/26 [00:00<00:00, 41.58it/s]
Test: [   0/  26]	Loss 0.265 (0.265)	test_acc   0.85 (  0.85)	test_minacc   0.78 (  0.78)	test_majacc   0.87 (  0.87)	Loss_d 0.265 (0.265)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.249 (0.241)	test_acc   0.89 (  0.89)	test_minacc   0.82 (  0.84)	test_majacc   0.91 (  0.89)	Loss_d 0.249 (0.241)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.82 (  0.84)	test_majacc_d   0.91 (  0.89)	test_corr_d   0.73 (  0.73)
Test: [  20/  26]	Loss 0.276 (0.247)	test_acc   0.85 (  0.88)	test_minacc   0.81 (  0.83)	test_majacc   0.86 (  0.89)	Loss_d 0.276 (0.247)	test_acc_d   0.85 (  0.88)	test_minacc_d   0.81 (  0.83)	test_majacc_d   0.86 (  0.89)	test_corr_d   0.70 (  0.73)
Test: [  26/  26]	Loss 0.258 (0.253)	test_acc   0.86 (  0.88)	test_minacc   0.78 (  0.82)	test_majacc   0.88 (  0.89)	Loss_d 0.258 (0.253)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.78 (  0.82)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.74 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.29it/s]
Test: [  0/  1]	Loss 1.767 (1.767)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.90 (  0.90)	Loss_d 1.767 (1.767)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.38 (  0.38)
Test: [  1/  1]	Loss 1.767 (1.767)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.90 (  0.90)	Loss_d 1.767 (1.767)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.38 (  0.38)
Overall Timing[ 24/  1]	epoch_time 0.0340 (0.0363)	validation_time 0.0003 (0.0007)	train_time 0.0337 (0.0356)
record: (train_acc, test_acc) (0.8351000229716301, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8775000227689743, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.14it/s] 19%|#9        | 5/26 [00:00<00:01, 20.48it/s] 35%|###4      | 9/26 [00:00<00:00, 27.21it/s] 50%|#####     | 13/26 [00:00<00:00, 31.56it/s] 65%|######5   | 17/26 [00:00<00:00, 34.33it/s] 85%|########4 | 22/26 [00:00<00:00, 36.89it/s]100%|##########| 26/26 [00:00<00:00, 30.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.001)	train_nll   0.25 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.84 ( 24.84)	train_acc   0.88 (  0.86)	train_minacc   0.70 (  0.83)	train_majacc   0.91 (  0.86)	train_corr   0.00 (  0.00)	l1 6.9139 (7.2320)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.70it/s] 23%|##3       | 6/26 [00:00<00:00, 33.09it/s]                                               23%|##3       | 6/26 [00:00<00:00, 33.09it/s] 46%|####6     | 12/26 [00:00<00:00, 44.67it/s] 65%|######5   | 17/26 [00:00<00:00, 45.31it/s]                                                65%|######5   | 17/26 [00:00<00:00, 45.31it/s] 88%|########8 | 23/26 [00:00<00:00, 48.17it/s]100%|##########| 26/26 [00:00<00:00, 40.83it/s]
Test: [   0/  26]	Loss 0.264 (0.264)	test_acc   0.86 (  0.86)	test_minacc   0.72 (  0.72)	test_majacc   0.89 (  0.89)	Loss_d 0.264 (0.264)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.243 (0.235)	test_acc   0.89 (  0.89)	test_minacc   0.76 (  0.81)	test_majacc   0.91 (  0.91)	Loss_d 0.243 (0.235)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.76 (  0.81)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.77 (  0.77)
Test: [  20/  26]	Loss 0.246 (0.232)	test_acc   0.88 (  0.89)	test_minacc   0.80 (  0.80)	test_majacc   0.90 (  0.91)	Loss_d 0.246 (0.232)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.75 (  0.77)
Test: [  26/  26]	Loss 0.245 (0.237)	test_acc   0.88 (  0.89)	test_minacc   0.70 (  0.79)	test_majacc   0.91 (  0.91)	Loss_d 0.245 (0.237)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.70 (  0.79)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.78 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.37it/s]
Test: [  0/  1]	Loss 1.924 (1.924)	test_acc   0.48 (  0.48)	test_minacc   0.43 (  0.43)	test_majacc   0.92 (  0.92)	Loss_d 1.924 (1.924)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.47 (  0.47)
Test: [  1/  1]	Loss 1.924 (1.924)	test_acc   0.48 (  0.48)	test_minacc   0.43 (  0.43)	test_majacc   0.92 (  0.92)	Loss_d 1.924 (1.924)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.47 (  0.47)
Overall Timing[ 25/  1]	epoch_time 0.0343 (0.0363)	validation_time 0.0003 (0.0007)	train_time 0.0340 (0.0355)
record: (train_acc, test_acc) (0.8351000229716301, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8898000263571739, 0.47600001096725464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 19%|#9        | 5/26 [00:00<00:00, 24.89it/s] 38%|###8      | 10/26 [00:00<00:00, 32.56it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.70it/s] 88%|########8 | 23/26 [00:00<00:00, 37.13it/s]100%|##########| 26/26 [00:00<00:00, 31.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.004 (0.002)	train_nll   0.29 (  0.26)	train_penalty   0.00 (  0.00)	weight_norm  24.86 ( 24.85)	train_acc   0.85 (  0.87)	train_minacc   0.68 (  0.82)	train_majacc   0.88 (  0.88)	train_corr   0.00 (  0.00)	l1 8.0210 (7.6030)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.41it/s] 31%|###       | 8/26 [00:00<00:00, 39.15it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.15it/s] 50%|#####     | 13/26 [00:00<00:00, 41.29it/s] 69%|######9   | 18/26 [00:00<00:00, 44.06it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.06it/s] 92%|#########2| 24/26 [00:00<00:00, 48.63it/s]100%|##########| 26/26 [00:00<00:00, 40.10it/s]
Test: [   0/  26]	Loss 0.286 (0.286)	test_acc   0.85 (  0.85)	test_minacc   0.79 (  0.79)	test_majacc   0.86 (  0.86)	Loss_d 0.286 (0.286)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.285 (0.283)	test_acc   0.85 (  0.85)	test_minacc   0.76 (  0.79)	test_majacc   0.87 (  0.86)	Loss_d 0.285 (0.283)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.76 (  0.79)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.71 (  0.72)
Test: [  20/  26]	Loss 0.237 (0.266)	test_acc   0.90 (  0.86)	test_minacc   0.86 (  0.80)	test_majacc   0.90 (  0.87)	Loss_d 0.237 (0.266)	test_acc_d   0.90 (  0.86)	test_minacc_d   0.86 (  0.80)	test_majacc_d   0.90 (  0.87)	test_corr_d   0.72 (  0.73)
Test: [  26/  26]	Loss 0.263 (0.265)	test_acc   0.86 (  0.86)	test_minacc   0.73 (  0.80)	test_majacc   0.89 (  0.88)	Loss_d 0.263 (0.265)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.73 (  0.80)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.75 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.35it/s]
Test: [  0/  1]	Loss 2.133 (2.133)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.89 (  0.89)	Loss_d 2.133 (2.133)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.37 (  0.37)
Test: [  1/  1]	Loss 2.133 (2.133)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.89 (  0.89)	Loss_d 2.133 (2.133)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.37 (  0.37)
Overall Timing[ 26/  1]	epoch_time 0.0351 (0.0362)	validation_time 0.0003 (0.0006)	train_time 0.0347 (0.0355)
record: (train_acc, test_acc) (0.8351000229716301, 0.5960000157356262)
last accs (train_acc, test_acc) (0.8647000235319138, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.82it/s] 31%|###       | 8/26 [00:00<00:00, 33.60it/s] 46%|####6     | 12/26 [00:00<00:00, 35.17it/s] 62%|######1   | 16/26 [00:00<00:00, 36.43it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.06it/s] 92%|#########2| 24/26 [00:00<00:00, 37.70it/s]100%|##########| 26/26 [00:00<00:00, 33.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.004 (0.001)	train_nll   0.30 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.88 ( 24.87)	train_acc   0.83 (  0.84)	train_minacc   1.00 (  0.86)	train_majacc   0.80 (  0.84)	train_corr   0.00 (  0.00)	l1 7.7910 (7.4642)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.45it/s] 27%|##6       | 7/26 [00:00<00:00, 34.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.73it/s] 46%|####6     | 12/26 [00:00<00:00, 39.81it/s] 69%|######9   | 18/26 [00:00<00:00, 45.73it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.73it/s] 92%|#########2| 24/26 [00:00<00:00, 46.35it/s]100%|##########| 26/26 [00:00<00:00, 38.14it/s]
Test: [   0/  26]	Loss 0.353 (0.353)	test_acc   0.78 (  0.78)	test_minacc   0.88 (  0.88)	test_majacc   0.76 (  0.76)	Loss_d 0.353 (0.353)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.56 (  0.56)
Test: [  10/  26]	Loss 0.379 (0.360)	test_acc   0.78 (  0.80)	test_minacc   0.82 (  0.88)	test_majacc   0.78 (  0.79)	Loss_d 0.379 (0.360)	test_acc_d   0.78 (  0.80)	test_minacc_d   0.82 (  0.88)	test_majacc_d   0.78 (  0.79)	test_corr_d   0.60 (  0.60)
Test: [  20/  26]	Loss 0.323 (0.358)	test_acc   0.83 (  0.80)	test_minacc   0.91 (  0.88)	test_majacc   0.81 (  0.78)	Loss_d 0.323 (0.358)	test_acc_d   0.83 (  0.80)	test_minacc_d   0.91 (  0.88)	test_majacc_d   0.81 (  0.78)	test_corr_d   0.59 (  0.60)
Test: [  26/  26]	Loss 0.285 (0.350)	test_acc   0.84 (  0.80)	test_minacc   1.00 (  0.89)	test_majacc   0.81 (  0.79)	Loss_d 0.285 (0.350)	test_acc_d   0.84 (  0.80)	test_minacc_d   1.00 (  0.89)	test_majacc_d   0.81 (  0.79)	test_corr_d   0.62 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.74it/s]
Test: [  0/  1]	Loss 1.891 (1.891)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.84 (  0.84)	Loss_d 1.891 (1.891)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 1.891 (1.891)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.84 (  0.84)	Loss_d 1.891 (1.891)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.17 (  0.17)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/131/checkpoints/model_best.pth
Overall Timing[ 27/  1]	epoch_time 0.0366 (0.0362)	validation_time 0.0004 (0.0006)	train_time 0.0362 (0.0355)
record: (train_acc, test_acc) (0.800900028526783, 0.6130000352859497)
last accs (train_acc, test_acc) (0.800900028526783, 0.6130000352859497)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.20it/s] 23%|##3       | 6/26 [00:00<00:00, 26.93it/s] 38%|###8      | 10/26 [00:00<00:00, 30.96it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.70it/s] 69%|######9   | 18/26 [00:00<00:00, 35.47it/s] 88%|########8 | 23/26 [00:00<00:00, 37.13it/s]100%|##########| 26/26 [00:00<00:00, 32.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.001 (0.002)	train_nll   0.26 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.90 ( 24.89)	train_acc   0.86 (  0.85)	train_minacc   0.92 (  0.80)	train_majacc   0.85 (  0.86)	train_corr   0.00 (  0.00)	l1 7.7603 (7.4898)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.40it/s] 27%|##6       | 7/26 [00:00<00:00, 34.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.47it/s] 50%|#####     | 13/26 [00:00<00:00, 39.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.89it/s] 96%|#########6| 25/26 [00:00<00:00, 46.81it/s]100%|##########| 26/26 [00:00<00:00, 39.32it/s]
Test: [   0/  26]	Loss 0.298 (0.298)	test_acc   0.81 (  0.81)	test_minacc   0.76 (  0.76)	test_majacc   0.82 (  0.82)	Loss_d 0.298 (0.298)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.329 (0.308)	test_acc   0.83 (  0.83)	test_minacc   0.81 (  0.78)	test_majacc   0.84 (  0.84)	Loss_d 0.329 (0.308)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.81 (  0.78)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.65 (  0.68)
Test: [  20/  26]	Loss 0.262 (0.306)	test_acc   0.87 (  0.83)	test_minacc   0.81 (  0.78)	test_majacc   0.88 (  0.84)	Loss_d 0.262 (0.306)	test_acc_d   0.87 (  0.83)	test_minacc_d   0.81 (  0.78)	test_majacc_d   0.88 (  0.84)	test_corr_d   0.70 (  0.68)
Test: [  26/  26]	Loss 0.265 (0.304)	test_acc   0.84 (  0.83)	test_minacc   0.84 (  0.78)	test_majacc   0.85 (  0.84)	Loss_d 0.265 (0.304)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.84 (  0.78)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.99it/s]
Test: [  0/  1]	Loss 1.769 (1.769)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.89 (  0.89)	Loss_d 1.769 (1.769)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.769 (1.769)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.89 (  0.89)	Loss_d 1.769 (1.769)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.14 (  0.14)
Overall Timing[ 28/  1]	epoch_time 0.0343 (0.0362)	validation_time 0.0004 (0.0006)	train_time 0.0339 (0.0354)
record: (train_acc, test_acc) (0.800900028526783, 0.6130000352859497)
last accs (train_acc, test_acc) (0.8317000247836113, 0.5760000348091125)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 19%|#9        | 5/26 [00:00<00:00, 24.16it/s] 35%|###4      | 9/26 [00:00<00:00, 30.11it/s] 50%|#####     | 13/26 [00:00<00:00, 33.70it/s] 65%|######5   | 17/26 [00:00<00:00, 35.65it/s] 85%|########4 | 22/26 [00:00<00:00, 37.77it/s]100%|##########| 26/26 [00:00<00:00, 31.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.002 (0.001)	train_nll   0.23 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.91 ( 24.91)	train_acc   0.89 (  0.86)	train_minacc   0.92 (  0.83)	train_majacc   0.88 (  0.86)	train_corr   0.00 (  0.00)	l1 8.0489 (7.7193)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.89it/s] 27%|##6       | 7/26 [00:00<00:00, 30.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.33it/s] 50%|#####     | 13/26 [00:00<00:00, 37.86it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.36it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.36it/s] 96%|#########6| 25/26 [00:00<00:00, 46.02it/s]100%|##########| 26/26 [00:00<00:00, 37.60it/s]
Test: [   0/  26]	Loss 0.262 (0.262)	test_acc   0.87 (  0.87)	test_minacc   0.84 (  0.84)	test_majacc   0.88 (  0.88)	Loss_d 0.262 (0.262)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.304 (0.270)	test_acc   0.86 (  0.86)	test_minacc   0.84 (  0.85)	test_majacc   0.87 (  0.86)	Loss_d 0.304 (0.270)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.84 (  0.85)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.68 (  0.70)
Test: [  20/  26]	Loss 0.261 (0.280)	test_acc   0.88 (  0.86)	test_minacc   0.84 (  0.83)	test_majacc   0.89 (  0.86)	Loss_d 0.261 (0.280)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.89 (  0.86)	test_corr_d   0.70 (  0.70)
Test: [  26/  26]	Loss 0.241 (0.278)	test_acc   0.88 (  0.86)	test_minacc   0.92 (  0.83)	test_majacc   0.87 (  0.86)	Loss_d 0.241 (0.278)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.92 (  0.83)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.71 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.53it/s]
Test: [  0/  1]	Loss 1.940 (1.940)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.91 (  0.91)	Loss_d 1.940 (1.940)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 1.940 (1.940)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.91 (  0.91)	Loss_d 1.940 (1.940)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.22 (  0.22)
Overall Timing[ 29/  1]	epoch_time 0.0339 (0.0361)	validation_time 0.0003 (0.0006)	train_time 0.0336 (0.0354)
record: (train_acc, test_acc) (0.800900028526783, 0.6130000352859497)
last accs (train_acc, test_acc) (0.8573000257611275, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.73it/s] 19%|#9        | 5/26 [00:00<00:00, 26.83it/s] 38%|###8      | 10/26 [00:00<00:00, 34.21it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.27it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.70it/s] 96%|#########6| 25/26 [00:00<00:00, 39.21it/s]100%|##########| 26/26 [00:00<00:00, 33.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.003 (0.001)	train_nll   0.24 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.92 ( 24.92)	train_acc   0.88 (  0.86)	train_minacc   0.97 (  0.84)	train_majacc   0.86 (  0.86)	train_corr   0.00 (  0.00)	l1 7.7533 (8.0396)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.22it/s] 27%|##6       | 7/26 [00:00<00:00, 37.87it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.87it/s] 50%|#####     | 13/26 [00:00<00:00, 43.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.13it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.13it/s] 96%|#########6| 25/26 [00:00<00:00, 48.48it/s]100%|##########| 26/26 [00:00<00:00, 41.09it/s]
Test: [   0/  26]	Loss 0.289 (0.289)	test_acc   0.82 (  0.82)	test_minacc   0.88 (  0.88)	test_majacc   0.81 (  0.81)	Loss_d 0.289 (0.289)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.281 (0.259)	test_acc   0.85 (  0.85)	test_minacc   0.94 (  0.94)	test_majacc   0.84 (  0.84)	Loss_d 0.281 (0.259)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.68 (  0.70)
Test: [  20/  26]	Loss 0.284 (0.269)	test_acc   0.85 (  0.85)	test_minacc   0.91 (  0.92)	test_majacc   0.83 (  0.84)	Loss_d 0.284 (0.269)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.83 (  0.84)	test_corr_d   0.69 (  0.69)
Test: [  26/  26]	Loss 0.249 (0.271)	test_acc   0.86 (  0.85)	test_minacc   0.97 (  0.92)	test_majacc   0.84 (  0.84)	Loss_d 0.249 (0.271)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.43it/s]
Test: [  0/  1]	Loss 1.892 (1.892)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.86 (  0.86)	Loss_d 1.892 (1.892)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 1.892 (1.892)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.86 (  0.86)	Loss_d 1.892 (1.892)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.23 (  0.23)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/131/checkpoints/model_best.pth
Overall Timing[ 30/  1]	epoch_time 0.0345 (0.0360)	validation_time 0.0004 (0.0006)	train_time 0.0341 (0.0353)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.77it/s] 19%|#9        | 5/26 [00:00<00:00, 25.56it/s] 38%|###8      | 10/26 [00:00<00:00, 33.37it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.36it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.50it/s] 96%|#########6| 25/26 [00:00<00:00, 38.95it/s]100%|##########| 26/26 [00:00<00:00, 33.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.001 (0.001)	train_nll   0.25 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.93 ( 24.93)	train_acc   0.88 (  0.83)	train_minacc   0.97 (  0.92)	train_majacc   0.86 (  0.82)	train_corr   0.00 (  0.00)	l1 7.8396 (8.1088)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.28it/s] 27%|##6       | 7/26 [00:00<00:00, 35.10it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.10it/s] 50%|#####     | 13/26 [00:00<00:00, 41.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.14it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.14it/s] 96%|#########6| 25/26 [00:00<00:00, 47.07it/s]100%|##########| 26/26 [00:00<00:00, 39.76it/s]
Test: [   0/  26]	Loss 0.284 (0.284)	test_acc   0.83 (  0.83)	test_minacc   0.81 (  0.81)	test_majacc   0.83 (  0.83)	Loss_d 0.284 (0.284)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.256 (0.259)	test_acc   0.86 (  0.85)	test_minacc   0.92 (  0.89)	test_majacc   0.85 (  0.85)	Loss_d 0.256 (0.259)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.92 (  0.89)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.73 (  0.73)
Test: [  20/  26]	Loss 0.262 (0.261)	test_acc   0.86 (  0.86)	test_minacc   0.91 (  0.90)	test_majacc   0.86 (  0.85)	Loss_d 0.262 (0.261)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.91 (  0.90)	test_majacc_d   0.86 (  0.85)	test_corr_d   0.74 (  0.74)
Test: [  26/  26]	Loss 0.252 (0.264)	test_acc   0.88 (  0.86)	test_minacc   0.97 (  0.89)	test_majacc   0.86 (  0.85)	Loss_d 0.252 (0.264)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.97 (  0.89)	test_majacc_d   0.86 (  0.85)	test_corr_d   0.74 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.78it/s]
Test: [  0/  1]	Loss 2.025 (2.025)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.87 (  0.87)	Loss_d 2.025 (2.025)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.34 (  0.34)
Test: [  1/  1]	Loss 2.025 (2.025)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.87 (  0.87)	Loss_d 2.025 (2.025)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.34 (  0.34)
Overall Timing[ 31/  1]	epoch_time 0.0340 (0.0360)	validation_time 0.0004 (0.0006)	train_time 0.0335 (0.0353)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.856600022315979, 0.5850000381469727)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.47it/s] 19%|#9        | 5/26 [00:00<00:00, 23.77it/s] 35%|###4      | 9/26 [00:00<00:00, 29.24it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.24it/s] 69%|######9   | 18/26 [00:00<00:00, 36.09it/s] 85%|########4 | 22/26 [00:00<00:00, 36.95it/s]100%|##########| 26/26 [00:00<00:00, 37.71it/s]100%|##########| 26/26 [00:00<00:00, 31.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.001)	train_nll   0.26 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.94 ( 24.94)	train_acc   0.86 (  0.85)	train_minacc   0.97 (  0.90)	train_majacc   0.85 (  0.84)	train_corr   0.00 (  0.00)	l1 8.5367 (8.1809)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.20it/s] 23%|##3       | 6/26 [00:00<00:00, 28.54it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.54it/s] 42%|####2     | 11/26 [00:00<00:00, 37.17it/s] 65%|######5   | 17/26 [00:00<00:00, 40.60it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.60it/s] 85%|########4 | 22/26 [00:00<00:00, 43.38it/s]100%|##########| 26/26 [00:00<00:00, 36.69it/s]
Test: [   0/  26]	Loss 0.311 (0.311)	test_acc   0.79 (  0.79)	test_minacc   0.81 (  0.81)	test_majacc   0.79 (  0.79)	Loss_d 0.311 (0.311)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.283 (0.294)	test_acc   0.85 (  0.83)	test_minacc   0.89 (  0.88)	test_majacc   0.85 (  0.82)	Loss_d 0.283 (0.294)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.89 (  0.88)	test_majacc_d   0.85 (  0.82)	test_corr_d   0.70 (  0.69)
Test: [  20/  26]	Loss 0.273 (0.287)	test_acc   0.86 (  0.84)	test_minacc   0.92 (  0.89)	test_majacc   0.85 (  0.83)	Loss_d 0.273 (0.287)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.92 (  0.89)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.69 (  0.69)
Test: [  26/  26]	Loss 0.261 (0.287)	test_acc   0.86 (  0.84)	test_minacc   0.97 (  0.90)	test_majacc   0.85 (  0.83)	Loss_d 0.261 (0.287)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.97 (  0.90)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.65it/s]
Test: [  0/  1]	Loss 2.187 (2.187)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.84 (  0.84)	Loss_d 2.187 (2.187)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.187 (2.187)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.84 (  0.84)	Loss_d 2.187 (2.187)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.29 (  0.29)
Overall Timing[ 32/  1]	epoch_time 0.0366 (0.0360)	validation_time 0.0003 (0.0006)	train_time 0.0362 (0.0353)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8395000273585319, 0.6000000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.55it/s] 19%|#9        | 5/26 [00:00<00:00, 23.80it/s] 35%|###4      | 9/26 [00:00<00:00, 29.95it/s] 50%|#####     | 13/26 [00:00<00:00, 33.59it/s] 65%|######5   | 17/26 [00:00<00:00, 35.48it/s] 85%|########4 | 22/26 [00:00<00:00, 37.62it/s]100%|##########| 26/26 [00:00<00:00, 38.06it/s]100%|##########| 26/26 [00:00<00:00, 31.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.94)	train_acc   0.85 (  0.85)	train_minacc   0.95 (  0.90)	train_majacc   0.84 (  0.84)	train_corr   0.00 (  0.00)	l1 8.3527 (8.1825)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.60it/s] 19%|#9        | 5/26 [00:00<00:00, 26.66it/s]                                               19%|#9        | 5/26 [00:00<00:00, 26.66it/s] 42%|####2     | 11/26 [00:00<00:00, 40.09it/s] 62%|######1   | 16/26 [00:00<00:00, 41.38it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.38it/s] 85%|########4 | 22/26 [00:00<00:00, 46.55it/s]100%|##########| 26/26 [00:00<00:00, 38.66it/s]
Test: [   0/  26]	Loss 0.276 (0.276)	test_acc   0.82 (  0.82)	test_minacc   0.95 (  0.95)	test_majacc   0.80 (  0.80)	Loss_d 0.276 (0.276)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.95 (  0.95)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.296 (0.275)	test_acc   0.83 (  0.83)	test_minacc   0.89 (  0.92)	test_majacc   0.82 (  0.82)	Loss_d 0.296 (0.275)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.89 (  0.92)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.69 (  0.69)
Test: [  20/  26]	Loss 0.271 (0.280)	test_acc   0.84 (  0.83)	test_minacc   0.91 (  0.91)	test_majacc   0.83 (  0.82)	Loss_d 0.271 (0.280)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.70 (  0.69)
Test: [  26/  26]	Loss 0.250 (0.279)	test_acc   0.85 (  0.84)	test_minacc   0.95 (  0.91)	test_majacc   0.84 (  0.82)	Loss_d 0.250 (0.279)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.95 (  0.91)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.71 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.22it/s]
Test: [  0/  1]	Loss 2.118 (2.118)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.87 (  0.87)	Loss_d 2.118 (2.118)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 2.118 (2.118)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.87 (  0.87)	Loss_d 2.118 (2.118)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.28 (  0.28)
Overall Timing[ 33/  1]	epoch_time 0.0361 (0.0360)	validation_time 0.0004 (0.0006)	train_time 0.0357 (0.0353)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8356000238060951, 0.6180000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.75it/s] 19%|#9        | 5/26 [00:00<00:00, 22.48it/s] 35%|###4      | 9/26 [00:00<00:00, 29.32it/s] 50%|#####     | 13/26 [00:00<00:00, 32.69it/s] 65%|######5   | 17/26 [00:00<00:00, 35.08it/s] 81%|########  | 21/26 [00:00<00:00, 35.67it/s] 96%|#########6| 25/26 [00:00<00:00, 36.60it/s]100%|##########| 26/26 [00:00<00:00, 30.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.24 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.88 (  0.84)	train_minacc   0.97 (  0.90)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 8.1373 (8.3697)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.24it/s] 31%|###       | 8/26 [00:00<00:00, 40.08it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.08it/s] 50%|#####     | 13/26 [00:00<00:00, 41.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.62it/s] 96%|#########6| 25/26 [00:00<00:00, 46.88it/s]100%|##########| 26/26 [00:00<00:00, 41.05it/s]
Test: [   0/  26]	Loss 0.266 (0.266)	test_acc   0.83 (  0.83)	test_minacc   0.91 (  0.91)	test_majacc   0.82 (  0.82)	Loss_d 0.266 (0.266)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.265 (0.257)	test_acc   0.86 (  0.85)	test_minacc   0.92 (  0.92)	test_majacc   0.84 (  0.84)	Loss_d 0.265 (0.257)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.72 (  0.73)
Test: [  20/  26]	Loss 0.259 (0.260)	test_acc   0.88 (  0.86)	test_minacc   0.91 (  0.91)	test_majacc   0.87 (  0.85)	Loss_d 0.259 (0.260)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.87 (  0.85)	test_corr_d   0.74 (  0.73)
Test: [  26/  26]	Loss 0.243 (0.261)	test_acc   0.88 (  0.86)	test_minacc   0.97 (  0.91)	test_majacc   0.86 (  0.84)	Loss_d 0.243 (0.261)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.97 (  0.91)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.74 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.76it/s]
Test: [  0/  1]	Loss 2.082 (2.082)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.88 (  0.88)	Loss_d 2.082 (2.082)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.082 (2.082)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.88 (  0.88)	Loss_d 2.082 (2.082)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.33 (  0.33)
Overall Timing[ 34/  1]	epoch_time 0.0349 (0.0360)	validation_time 0.0003 (0.0006)	train_time 0.0345 (0.0353)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8550000200867653, 0.6040000319480896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.01it/s] 19%|#9        | 5/26 [00:00<00:00, 25.06it/s] 38%|###8      | 10/26 [00:00<00:00, 32.33it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.64it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.82it/s] 92%|#########2| 24/26 [00:00<00:00, 38.34it/s]100%|##########| 26/26 [00:00<00:00, 32.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.26 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.86 (  0.85)	train_minacc   0.95 (  0.92)	train_majacc   0.84 (  0.84)	train_corr   0.00 (  0.00)	l1 8.5324 (8.4131)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.37it/s] 27%|##6       | 7/26 [00:00<00:00, 35.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.38it/s] 46%|####6     | 12/26 [00:00<00:00, 40.44it/s] 65%|######5   | 17/26 [00:00<00:00, 40.72it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.72it/s] 88%|########8 | 23/26 [00:00<00:00, 45.83it/s]100%|##########| 26/26 [00:00<00:00, 38.85it/s]
Test: [   0/  26]	Loss 0.291 (0.291)	test_acc   0.81 (  0.81)	test_minacc   0.84 (  0.84)	test_majacc   0.81 (  0.81)	Loss_d 0.291 (0.291)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.272 (0.277)	test_acc   0.85 (  0.84)	test_minacc   0.92 (  0.91)	test_majacc   0.84 (  0.82)	Loss_d 0.272 (0.277)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.92 (  0.91)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.71 (  0.71)
Test: [  20/  26]	Loss 0.274 (0.277)	test_acc   0.86 (  0.84)	test_minacc   0.91 (  0.91)	test_majacc   0.85 (  0.83)	Loss_d 0.274 (0.277)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.71 (  0.71)
Test: [  26/  26]	Loss 0.263 (0.278)	test_acc   0.86 (  0.84)	test_minacc   0.95 (  0.91)	test_majacc   0.84 (  0.83)	Loss_d 0.263 (0.278)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.95 (  0.91)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.22it/s]
Test: [  0/  1]	Loss 2.160 (2.160)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.87 (  0.87)	Loss_d 2.160 (2.160)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 2.160 (2.160)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.87 (  0.87)	Loss_d 2.160 (2.160)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.30 (  0.30)
Overall Timing[ 35/  1]	epoch_time 0.0360 (0.0360)	validation_time 0.0004 (0.0006)	train_time 0.0356 (0.0353)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8434000247120857, 0.5940000414848328)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.61it/s] 27%|##6       | 7/26 [00:00<00:00, 30.85it/s] 46%|####6     | 12/26 [00:00<00:00, 35.43it/s] 65%|######5   | 17/26 [00:00<00:00, 37.47it/s] 85%|########4 | 22/26 [00:00<00:00, 38.46it/s]100%|##########| 26/26 [00:00<00:00, 38.58it/s]100%|##########| 26/26 [00:00<00:00, 33.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.26 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.86 (  0.84)	train_minacc   0.97 (  0.91)	train_majacc   0.84 (  0.83)	train_corr   0.00 (  0.00)	l1 8.4785 (8.3670)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.85it/s] 23%|##3       | 6/26 [00:00<00:00, 30.08it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.08it/s] 42%|####2     | 11/26 [00:00<00:00, 37.23it/s] 65%|######5   | 17/26 [00:00<00:00, 41.19it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.19it/s] 88%|########8 | 23/26 [00:00<00:00, 46.81it/s]100%|##########| 26/26 [00:00<00:00, 37.97it/s]
Test: [   0/  26]	Loss 0.283 (0.283)	test_acc   0.82 (  0.82)	test_minacc   0.95 (  0.95)	test_majacc   0.80 (  0.80)	Loss_d 0.283 (0.283)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.95 (  0.95)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.281 (0.277)	test_acc   0.84 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.83 (  0.82)	Loss_d 0.281 (0.277)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.69 (  0.69)
Test: [  20/  26]	Loss 0.271 (0.279)	test_acc   0.85 (  0.84)	test_minacc   0.91 (  0.92)	test_majacc   0.84 (  0.82)	Loss_d 0.271 (0.279)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.70 (  0.70)
Test: [  26/  26]	Loss 0.257 (0.279)	test_acc   0.86 (  0.84)	test_minacc   0.97 (  0.92)	test_majacc   0.84 (  0.82)	Loss_d 0.257 (0.279)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.71 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.42it/s]
Test: [  0/  1]	Loss 2.095 (2.095)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.86 (  0.86)	Loss_d 2.095 (2.095)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 2.095 (2.095)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.86 (  0.86)	Loss_d 2.095 (2.095)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.25 (  0.25)
Overall Timing[ 36/  1]	epoch_time 0.0352 (0.0359)	validation_time 0.0004 (0.0006)	train_time 0.0347 (0.0353)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.838600024998188, 0.6210000514984131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.93it/s] 19%|#9        | 5/26 [00:00<00:00, 25.59it/s] 38%|###8      | 10/26 [00:00<00:00, 33.00it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.39it/s] 69%|######9   | 18/26 [00:00<00:00, 35.98it/s] 85%|########4 | 22/26 [00:00<00:00, 37.22it/s]100%|##########| 26/26 [00:00<00:00, 37.77it/s]100%|##########| 26/26 [00:00<00:00, 32.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.87 (  0.84)	train_minacc   0.97 (  0.91)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 8.3326 (8.4257)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.72it/s] 27%|##6       | 7/26 [00:00<00:00, 35.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.01it/s] 46%|####6     | 12/26 [00:00<00:00, 40.31it/s] 65%|######5   | 17/26 [00:00<00:00, 43.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.70it/s] 88%|########8 | 23/26 [00:00<00:00, 48.80it/s]100%|##########| 26/26 [00:00<00:00, 39.82it/s]
Test: [   0/  26]	Loss 0.277 (0.277)	test_acc   0.83 (  0.83)	test_minacc   0.91 (  0.91)	test_majacc   0.81 (  0.81)	Loss_d 0.277 (0.277)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.275 (0.266)	test_acc   0.85 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.275 (0.266)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.71 (  0.72)
Test: [  20/  26]	Loss 0.267 (0.269)	test_acc   0.85 (  0.85)	test_minacc   0.91 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.267 (0.269)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.72 (  0.72)
Test: [  26/  26]	Loss 0.251 (0.270)	test_acc   0.87 (  0.85)	test_minacc   0.97 (  0.92)	test_majacc   0.85 (  0.83)	Loss_d 0.251 (0.270)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.73 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.45it/s]
Test: [  0/  1]	Loss 2.103 (2.103)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.88 (  0.88)	Loss_d 2.103 (2.103)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 2.103 (2.103)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.88 (  0.88)	Loss_d 2.103 (2.103)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.30 (  0.30)
Overall Timing[ 37/  1]	epoch_time 0.0356 (0.0359)	validation_time 0.0003 (0.0006)	train_time 0.0353 (0.0353)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.846900025010109, 0.6040000319480896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.06it/s] 19%|#9        | 5/26 [00:00<00:00, 21.05it/s] 35%|###4      | 9/26 [00:00<00:00, 27.94it/s] 50%|#####     | 13/26 [00:00<00:00, 31.76it/s] 65%|######5   | 17/26 [00:00<00:00, 34.39it/s] 81%|########  | 21/26 [00:00<00:00, 36.07it/s] 96%|#########6| 25/26 [00:00<00:00, 37.25it/s]100%|##########| 26/26 [00:00<00:00, 30.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.86 (  0.84)	train_minacc   0.97 (  0.92)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 8.4282 (8.4293)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.34it/s] 27%|##6       | 7/26 [00:00<00:00, 34.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.03it/s] 50%|#####     | 13/26 [00:00<00:00, 39.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.84it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.84it/s] 96%|#########6| 25/26 [00:00<00:00, 45.95it/s]100%|##########| 26/26 [00:00<00:00, 39.51it/s]
Test: [   0/  26]	Loss 0.281 (0.281)	test_acc   0.82 (  0.82)	test_minacc   0.91 (  0.91)	test_majacc   0.81 (  0.81)	Loss_d 0.281 (0.281)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.273 (0.269)	test_acc   0.85 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.273 (0.269)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.71 (  0.71)
Test: [  20/  26]	Loss 0.267 (0.270)	test_acc   0.85 (  0.85)	test_minacc   0.91 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.267 (0.270)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.72 (  0.72)
Test: [  26/  26]	Loss 0.252 (0.270)	test_acc   0.87 (  0.85)	test_minacc   0.97 (  0.92)	test_majacc   0.85 (  0.83)	Loss_d 0.252 (0.270)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.81it/s]
Test: [  0/  1]	Loss 2.123 (2.123)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.123 (2.123)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.123 (2.123)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.123 (2.123)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Overall Timing[ 38/  1]	epoch_time 0.0350 (0.0359)	validation_time 0.0004 (0.0006)	train_time 0.0346 (0.0353)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8469000282883644, 0.6100000143051147)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.42it/s] 23%|##3       | 6/26 [00:00<00:00, 27.51it/s] 38%|###8      | 10/26 [00:00<00:00, 31.85it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.66it/s] 69%|######9   | 18/26 [00:00<00:00, 35.47it/s] 85%|########4 | 22/26 [00:00<00:00, 36.89it/s]100%|##########| 26/26 [00:00<00:00, 37.60it/s]100%|##########| 26/26 [00:00<00:00, 32.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.86 (  0.85)	train_minacc   0.97 (  0.92)	train_majacc   0.84 (  0.83)	train_corr   0.00 (  0.00)	l1 8.4544 (8.4069)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.77it/s] 27%|##6       | 7/26 [00:00<00:00, 37.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.12it/s] 50%|#####     | 13/26 [00:00<00:00, 41.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.87it/s] 96%|#########6| 25/26 [00:00<00:00, 47.91it/s]100%|##########| 26/26 [00:00<00:00, 40.61it/s]
Test: [   0/  26]	Loss 0.281 (0.281)	test_acc   0.82 (  0.82)	test_minacc   0.91 (  0.91)	test_majacc   0.81 (  0.81)	Loss_d 0.281 (0.281)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.276 (0.271)	test_acc   0.85 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.83 (  0.83)	Loss_d 0.276 (0.271)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.71)
Test: [  20/  26]	Loss 0.269 (0.272)	test_acc   0.85 (  0.84)	test_minacc   0.91 (  0.92)	test_majacc   0.83 (  0.83)	Loss_d 0.269 (0.272)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.71 (  0.71)
Test: [  26/  26]	Loss 0.254 (0.273)	test_acc   0.86 (  0.84)	test_minacc   0.97 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.254 (0.273)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.66it/s]
Test: [  0/  1]	Loss 2.123 (2.123)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.123 (2.123)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 2.123 (2.123)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.123 (2.123)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.28 (  0.28)
Overall Timing[ 39/  1]	epoch_time 0.0340 (0.0359)	validation_time 0.0004 (0.0006)	train_time 0.0335 (0.0352)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8434000245928764, 0.6110000014305115)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.09it/s] 19%|#9        | 5/26 [00:00<00:00, 21.14it/s] 38%|###8      | 10/26 [00:00<00:00, 29.67it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.58it/s] 88%|########8 | 23/26 [00:00<00:00, 36.82it/s]100%|##########| 26/26 [00:00<00:00, 30.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.87 (  0.85)	train_minacc   0.97 (  0.92)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 8.4097 (8.4247)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.98it/s] 35%|###4      | 9/26 [00:00<00:00, 40.24it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.34it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.34it/s] 81%|########  | 21/26 [00:00<00:00, 46.70it/s]100%|##########| 26/26 [00:00<00:00, 41.95it/s]
Test: [   0/  26]	Loss 0.279 (0.279)	test_acc   0.82 (  0.82)	test_minacc   0.91 (  0.91)	test_majacc   0.81 (  0.81)	Loss_d 0.279 (0.279)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.275 (0.268)	test_acc   0.85 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.83 (  0.83)	Loss_d 0.275 (0.268)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.71)
Test: [  20/  26]	Loss 0.267 (0.270)	test_acc   0.85 (  0.84)	test_minacc   0.91 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.267 (0.270)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.72 (  0.72)
Test: [  26/  26]	Loss 0.251 (0.270)	test_acc   0.87 (  0.85)	test_minacc   0.97 (  0.92)	test_majacc   0.85 (  0.83)	Loss_d 0.251 (0.270)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.07it/s]
Test: [  0/  1]	Loss 2.120 (2.120)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.120 (2.120)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.120 (2.120)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.120 (2.120)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Overall Timing[ 40/  1]	epoch_time 0.0350 (0.0358)	validation_time 0.0004 (0.0006)	train_time 0.0347 (0.0352)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8458000271916389, 0.609000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.61it/s] 19%|#9        | 5/26 [00:00<00:00, 25.43it/s] 35%|###4      | 9/26 [00:00<00:00, 30.79it/s] 50%|#####     | 13/26 [00:00<00:00, 33.98it/s] 65%|######5   | 17/26 [00:00<00:00, 35.93it/s] 85%|########4 | 22/26 [00:00<00:00, 37.65it/s]100%|##########| 26/26 [00:00<00:00, 32.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.87 (  0.85)	train_minacc   0.97 (  0.92)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 8.4234 (8.4326)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.50it/s] 27%|##6       | 7/26 [00:00<00:00, 36.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.37it/s] 50%|#####     | 13/26 [00:00<00:00, 41.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.48it/s] 96%|#########6| 25/26 [00:00<00:00, 47.64it/s]100%|##########| 26/26 [00:00<00:00, 40.55it/s]
Test: [   0/  26]	Loss 0.278 (0.278)	test_acc   0.82 (  0.82)	test_minacc   0.91 (  0.91)	test_majacc   0.81 (  0.81)	Loss_d 0.278 (0.278)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.273 (0.267)	test_acc   0.85 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.273 (0.267)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.71 (  0.71)
Test: [  20/  26]	Loss 0.267 (0.269)	test_acc   0.85 (  0.85)	test_minacc   0.91 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.267 (0.269)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.72 (  0.72)
Test: [  26/  26]	Loss 0.252 (0.270)	test_acc   0.87 (  0.85)	test_minacc   0.97 (  0.92)	test_majacc   0.85 (  0.83)	Loss_d 0.252 (0.270)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.72 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.99it/s]
Test: [  0/  1]	Loss 2.129 (2.129)	test_acc   0.61 (  0.61)	test_minacc   0.57 (  0.57)	test_majacc   0.88 (  0.88)	Loss_d 2.129 (2.129)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.129 (2.129)	test_acc   0.61 (  0.61)	test_minacc   0.57 (  0.57)	test_majacc   0.88 (  0.88)	Loss_d 2.129 (2.129)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Overall Timing[ 41/  1]	epoch_time 0.0346 (0.0358)	validation_time 0.0004 (0.0006)	train_time 0.0342 (0.0352)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8463000283241272, 0.6050000190734863)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.49it/s] 19%|#9        | 5/26 [00:00<00:00, 23.11it/s] 35%|###4      | 9/26 [00:00<00:00, 29.16it/s] 50%|#####     | 13/26 [00:00<00:00, 31.71it/s] 65%|######5   | 17/26 [00:00<00:00, 33.82it/s] 81%|########  | 21/26 [00:00<00:00, 35.05it/s]100%|##########| 26/26 [00:00<00:00, 37.31it/s]100%|##########| 26/26 [00:00<00:00, 30.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.87 (  0.85)	train_minacc   0.97 (  0.92)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 8.4370 (8.4296)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.96it/s] 31%|###       | 8/26 [00:00<00:00, 42.38it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.38it/s] 50%|#####     | 13/26 [00:00<00:00, 42.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.71it/s] 96%|#########6| 25/26 [00:00<00:00, 49.18it/s]100%|##########| 26/26 [00:00<00:00, 41.94it/s]
Test: [   0/  26]	Loss 0.279 (0.279)	test_acc   0.82 (  0.82)	test_minacc   0.91 (  0.91)	test_majacc   0.81 (  0.81)	Loss_d 0.279 (0.279)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.274 (0.268)	test_acc   0.85 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.274 (0.268)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.70 (  0.71)
Test: [  20/  26]	Loss 0.267 (0.270)	test_acc   0.85 (  0.85)	test_minacc   0.91 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.267 (0.270)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.72 (  0.71)
Test: [  26/  26]	Loss 0.252 (0.270)	test_acc   0.87 (  0.85)	test_minacc   0.97 (  0.92)	test_majacc   0.85 (  0.83)	Loss_d 0.252 (0.270)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 30.18it/s]
Test: [  0/  1]	Loss 2.127 (2.127)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.127 (2.127)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.127 (2.127)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.127 (2.127)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Overall Timing[ 42/  1]	epoch_time 0.0338 (0.0358)	validation_time 0.0006 (0.0006)	train_time 0.0331 (0.0351)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8464000248312951, 0.6100000143051147)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.36it/s] 19%|#9        | 5/26 [00:00<00:00, 21.50it/s] 35%|###4      | 9/26 [00:00<00:00, 28.12it/s] 50%|#####     | 13/26 [00:00<00:00, 32.06it/s] 69%|######9   | 18/26 [00:00<00:00, 35.46it/s] 88%|########8 | 23/26 [00:00<00:00, 37.13it/s]100%|##########| 26/26 [00:00<00:00, 30.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.87 (  0.85)	train_minacc   0.97 (  0.92)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 8.4419 (8.4304)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 31%|###       | 8/26 [00:00<00:00, 36.93it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.93it/s] 50%|#####     | 13/26 [00:00<00:00, 39.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.61it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.61it/s] 96%|#########6| 25/26 [00:00<00:00, 46.68it/s]100%|##########| 26/26 [00:00<00:00, 39.24it/s]
Test: [   0/  26]	Loss 0.278 (0.278)	test_acc   0.82 (  0.82)	test_minacc   0.91 (  0.91)	test_majacc   0.81 (  0.81)	Loss_d 0.278 (0.278)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.274 (0.268)	test_acc   0.85 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.274 (0.268)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.70 (  0.71)
Test: [  20/  26]	Loss 0.266 (0.269)	test_acc   0.85 (  0.85)	test_minacc   0.91 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.266 (0.269)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.72 (  0.71)
Test: [  26/  26]	Loss 0.252 (0.270)	test_acc   0.87 (  0.85)	test_minacc   0.97 (  0.92)	test_majacc   0.85 (  0.83)	Loss_d 0.252 (0.270)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.95it/s]
Test: [  0/  1]	Loss 2.133 (2.133)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.133 (2.133)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.133 (2.133)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.133 (2.133)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Overall Timing[ 43/  1]	epoch_time 0.0354 (0.0358)	validation_time 0.0003 (0.0005)	train_time 0.0351 (0.0351)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8461000260114669, 0.6070000529289246)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.76it/s] 19%|#9        | 5/26 [00:00<00:00, 22.77it/s] 35%|###4      | 9/26 [00:00<00:00, 29.63it/s] 50%|#####     | 13/26 [00:00<00:00, 33.12it/s] 65%|######5   | 17/26 [00:00<00:00, 34.61it/s] 85%|########4 | 22/26 [00:00<00:00, 36.86it/s]100%|##########| 26/26 [00:00<00:00, 31.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.87 (  0.85)	train_minacc   0.97 (  0.92)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 8.4263 (8.4354)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 27%|##6       | 7/26 [00:00<00:00, 34.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.53it/s] 50%|#####     | 13/26 [00:00<00:00, 39.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.67it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.67it/s] 96%|#########6| 25/26 [00:00<00:00, 46.11it/s]100%|##########| 26/26 [00:00<00:00, 39.12it/s]
Test: [   0/  26]	Loss 0.277 (0.277)	test_acc   0.82 (  0.82)	test_minacc   0.91 (  0.91)	test_majacc   0.81 (  0.81)	Loss_d 0.277 (0.277)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.273 (0.267)	test_acc   0.85 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.273 (0.267)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.70 (  0.71)
Test: [  20/  26]	Loss 0.266 (0.268)	test_acc   0.85 (  0.85)	test_minacc   0.91 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.266 (0.268)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.72 (  0.72)
Test: [  26/  26]	Loss 0.251 (0.269)	test_acc   0.87 (  0.85)	test_minacc   0.97 (  0.92)	test_majacc   0.85 (  0.83)	Loss_d 0.251 (0.269)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.20it/s]
Test: [  0/  1]	Loss 2.130 (2.130)	test_acc   0.61 (  0.61)	test_minacc   0.57 (  0.57)	test_majacc   0.88 (  0.88)	Loss_d 2.130 (2.130)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.130 (2.130)	test_acc   0.61 (  0.61)	test_minacc   0.57 (  0.57)	test_majacc   0.88 (  0.88)	Loss_d 2.130 (2.130)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Overall Timing[ 44/  1]	epoch_time 0.0345 (0.0357)	validation_time 0.0004 (0.0005)	train_time 0.0341 (0.0351)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8470000261664391, 0.6050000190734863)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.31it/s] 23%|##3       | 6/26 [00:00<00:00, 28.48it/s] 38%|###8      | 10/26 [00:00<00:00, 32.79it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.01it/s] 69%|######9   | 18/26 [00:00<00:00, 36.65it/s] 88%|########8 | 23/26 [00:00<00:00, 38.43it/s]100%|##########| 26/26 [00:00<00:00, 33.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.87 (  0.85)	train_minacc   0.97 (  0.92)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 8.4403 (8.4394)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.65it/s] 27%|##6       | 7/26 [00:00<00:00, 34.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.27it/s] 50%|#####     | 13/26 [00:00<00:00, 41.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.96it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.96it/s] 96%|#########6| 25/26 [00:00<00:00, 47.70it/s]100%|##########| 26/26 [00:00<00:00, 39.58it/s]
Test: [   0/  26]	Loss 0.277 (0.277)	test_acc   0.82 (  0.82)	test_minacc   0.91 (  0.91)	test_majacc   0.81 (  0.81)	Loss_d 0.277 (0.277)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.272 (0.267)	test_acc   0.86 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.272 (0.267)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.71 (  0.71)
Test: [  20/  26]	Loss 0.265 (0.268)	test_acc   0.85 (  0.85)	test_minacc   0.91 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.265 (0.268)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.72 (  0.72)
Test: [  26/  26]	Loss 0.251 (0.269)	test_acc   0.87 (  0.85)	test_minacc   0.97 (  0.92)	test_majacc   0.85 (  0.83)	Loss_d 0.251 (0.269)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.72 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.03it/s]
Test: [  0/  1]	Loss 2.137 (2.137)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.137 (2.137)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.137 (2.137)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.137 (2.137)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Overall Timing[ 45/  1]	epoch_time 0.0336 (0.0357)	validation_time 0.0004 (0.0005)	train_time 0.0332 (0.0351)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8471000296473503, 0.6060000061988831)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 19%|#9        | 5/26 [00:00<00:00, 22.03it/s] 35%|###4      | 9/26 [00:00<00:00, 29.22it/s] 50%|#####     | 13/26 [00:00<00:00, 33.14it/s] 65%|######5   | 17/26 [00:00<00:00, 35.04it/s] 81%|########  | 21/26 [00:00<00:00, 36.64it/s]100%|##########| 26/26 [00:00<00:00, 38.79it/s]100%|##########| 26/26 [00:00<00:00, 31.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.87 (  0.85)	train_minacc   0.97 (  0.92)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 8.4425 (8.4375)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.04it/s] 23%|##3       | 6/26 [00:00<00:00, 31.95it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.95it/s] 42%|####2     | 11/26 [00:00<00:00, 39.90it/s] 65%|######5   | 17/26 [00:00<00:00, 43.27it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.27it/s] 88%|########8 | 23/26 [00:00<00:00, 48.38it/s]100%|##########| 26/26 [00:00<00:00, 39.45it/s]
Test: [   0/  26]	Loss 0.277 (0.277)	test_acc   0.82 (  0.82)	test_minacc   0.91 (  0.91)	test_majacc   0.81 (  0.81)	Loss_d 0.277 (0.277)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.273 (0.267)	test_acc   0.85 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.273 (0.267)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.70 (  0.71)
Test: [  20/  26]	Loss 0.265 (0.268)	test_acc   0.85 (  0.85)	test_minacc   0.91 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.265 (0.268)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.72 (  0.72)
Test: [  26/  26]	Loss 0.251 (0.269)	test_acc   0.87 (  0.85)	test_minacc   0.97 (  0.92)	test_majacc   0.85 (  0.83)	Loss_d 0.251 (0.269)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.73it/s]
Test: [  0/  1]	Loss 2.135 (2.135)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.135 (2.135)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.135 (2.135)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.135 (2.135)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Overall Timing[ 46/  1]	epoch_time 0.0364 (0.0357)	validation_time 0.0004 (0.0005)	train_time 0.0360 (0.0351)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.847200023829937, 0.609000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.15it/s] 19%|#9        | 5/26 [00:00<00:00, 24.73it/s] 35%|###4      | 9/26 [00:00<00:00, 29.96it/s] 50%|#####     | 13/26 [00:00<00:00, 33.33it/s] 65%|######5   | 17/26 [00:00<00:00, 33.61it/s] 81%|########  | 21/26 [00:00<00:00, 34.33it/s]100%|##########| 26/26 [00:00<00:00, 36.98it/s]100%|##########| 26/26 [00:00<00:00, 31.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.87 (  0.85)	train_minacc   0.97 (  0.92)	train_majacc   0.85 (  0.84)	train_corr   0.00 (  0.00)	l1 8.4453 (8.4417)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.10it/s] 31%|###       | 8/26 [00:00<00:00, 40.67it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.67it/s] 50%|#####     | 13/26 [00:00<00:00, 42.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.27it/s] 96%|#########6| 25/26 [00:00<00:00, 47.95it/s]100%|##########| 26/26 [00:00<00:00, 42.06it/s]
Test: [   0/  26]	Loss 0.276 (0.276)	test_acc   0.82 (  0.82)	test_minacc   0.91 (  0.91)	test_majacc   0.81 (  0.81)	Loss_d 0.276 (0.276)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.272 (0.266)	test_acc   0.85 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.272 (0.266)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.71 (  0.71)
Test: [  20/  26]	Loss 0.265 (0.268)	test_acc   0.85 (  0.85)	test_minacc   0.91 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.265 (0.268)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.72 (  0.72)
Test: [  26/  26]	Loss 0.251 (0.268)	test_acc   0.87 (  0.85)	test_minacc   0.97 (  0.92)	test_majacc   0.85 (  0.83)	Loss_d 0.251 (0.268)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.55it/s]
Test: [  0/  1]	Loss 2.140 (2.140)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.140 (2.140)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.140 (2.140)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.140 (2.140)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Overall Timing[ 47/  1]	epoch_time 0.0358 (0.0357)	validation_time 0.0004 (0.0005)	train_time 0.0354 (0.0351)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8472000308036804, 0.6060000061988831)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.44it/s] 19%|#9        | 5/26 [00:00<00:00, 25.57it/s] 35%|###4      | 9/26 [00:00<00:00, 31.78it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.45it/s] 88%|########8 | 23/26 [00:00<00:00, 38.08it/s]100%|##########| 26/26 [00:00<00:00, 32.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.87 (  0.85)	train_minacc   0.97 (  0.92)	train_majacc   0.85 (  0.84)	train_corr   0.00 (  0.00)	l1 8.4396 (8.4427)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.88it/s] 23%|##3       | 6/26 [00:00<00:00, 32.97it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.97it/s] 42%|####2     | 11/26 [00:00<00:00, 39.43it/s] 65%|######5   | 17/26 [00:00<00:00, 42.56it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.56it/s] 88%|########8 | 23/26 [00:00<00:00, 47.27it/s]100%|##########| 26/26 [00:00<00:00, 39.24it/s]
Test: [   0/  26]	Loss 0.276 (0.276)	test_acc   0.82 (  0.82)	test_minacc   0.91 (  0.91)	test_majacc   0.81 (  0.81)	Loss_d 0.276 (0.276)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.272 (0.266)	test_acc   0.85 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.272 (0.266)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.71 (  0.71)
Test: [  20/  26]	Loss 0.264 (0.267)	test_acc   0.85 (  0.85)	test_minacc   0.91 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.264 (0.267)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.72 (  0.72)
Test: [  26/  26]	Loss 0.250 (0.268)	test_acc   0.87 (  0.85)	test_minacc   0.97 (  0.92)	test_majacc   0.85 (  0.84)	Loss_d 0.250 (0.268)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.72 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.01it/s]
Test: [  0/  1]	Loss 2.139 (2.139)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.139 (2.139)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.139 (2.139)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.58)	test_majacc   0.88 (  0.88)	Loss_d 2.139 (2.139)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Overall Timing[ 48/  1]	epoch_time 0.0346 (0.0357)	validation_time 0.0004 (0.0005)	train_time 0.0343 (0.0351)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8480000307559967, 0.6070000529289246)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.32it/s] 19%|#9        | 5/26 [00:00<00:00, 22.64it/s] 35%|###4      | 9/26 [00:00<00:00, 28.65it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.56it/s] 92%|#########2| 24/26 [00:00<00:00, 38.43it/s]100%|##########| 26/26 [00:00<00:00, 31.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.95 ( 24.95)	train_acc   0.87 (  0.85)	train_minacc   0.97 (  0.92)	train_majacc   0.85 (  0.84)	train_corr   0.00 (  0.00)	l1 8.4485 (8.4478)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.14it/s] 27%|##6       | 7/26 [00:00<00:00, 36.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.09it/s] 50%|#####     | 13/26 [00:00<00:00, 41.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.94it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.94it/s] 96%|#########6| 25/26 [00:00<00:00, 47.01it/s]100%|##########| 26/26 [00:00<00:00, 40.67it/s]
Test: [   0/  26]	Loss 0.275 (0.275)	test_acc   0.82 (  0.82)	test_minacc   0.91 (  0.91)	test_majacc   0.81 (  0.81)	Loss_d 0.275 (0.275)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.271 (0.266)	test_acc   0.86 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.85 (  0.83)	Loss_d 0.271 (0.266)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.71 (  0.71)
Test: [  20/  26]	Loss 0.264 (0.267)	test_acc   0.85 (  0.85)	test_minacc   0.91 (  0.92)	test_majacc   0.84 (  0.84)	Loss_d 0.264 (0.267)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.72 (  0.72)
Test: [  26/  26]	Loss 0.250 (0.268)	test_acc   0.87 (  0.85)	test_minacc   0.97 (  0.92)	test_majacc   0.85 (  0.84)	Loss_d 0.250 (0.268)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.72 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.34it/s]
Test: [  0/  1]	Loss 2.144 (2.144)	test_acc   0.61 (  0.61)	test_minacc   0.57 (  0.57)	test_majacc   0.88 (  0.88)	Loss_d 2.144 (2.144)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.144 (2.144)	test_acc   0.61 (  0.61)	test_minacc   0.57 (  0.57)	test_majacc   0.88 (  0.88)	Loss_d 2.144 (2.144)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.29 (  0.29)
Overall Timing[ 49/  1]	epoch_time 0.0356 (0.0357)	validation_time 0.0005 (0.0005)	train_time 0.0351 (0.0351)
record: (train_acc, test_acc) (0.8485000277757645, 0.6230000257492065)
last accs (train_acc, test_acc) (0.8481000342369079, 0.6050000190734863)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.103 MB of 0.103 MB uploadedwandb: \ 0.103 MB of 0.103 MB uploadedwandb: | 0.126 MB of 0.131 MB uploaded (0.003 MB deduped)wandb: / 0.472 MB of 0.472 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▂▁▂▁▁▁▁▂▁▁▁▂▁▁▁▂▂▂▁▁▁▁▁▁▁▁▂▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/diagnostics/train_time_val █▁▁▁▁▂▁▁▂▁▂▂▁▂▁▁▁▁▂▁▁▁▂▁▁▁▂▂▂▁▂▁▁▁▁▂▁▂▂▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/Loss_avg ▁▂▁▁▂▂▃▂▃▄▇█▁▂▂▂▂▂▃▃▅▆▅▄▅▆▇▆▇▆▆▆▆▆▆▆▇▇▇▇
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/Loss_d_avg ▁▂▁▁▂▂▃▂▃▄▇█▁▂▂▂▂▂▃▃▅▆▅▄▅▆▇▆▇▆▆▆▆▆▆▆▇▇▇▇
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/Loss_d_val ▁▂▁▁▂▂▃▂▃▄▇█▁▂▂▂▂▂▃▃▅▆▅▄▅▆▇▆▇▆▆▆▆▆▆▆▇▇▇▇
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/Loss_val ▁▂▁▁▂▂▃▂▃▄▇█▁▂▂▂▂▂▃▃▅▆▅▄▅▆▇▆▇▆▆▆▆▆▆▆▇▇▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_acc_avg ▁▁▂▄▅▅▅▅▃▄▅▅▇▇▇██▇▇▇▆▆█▇█▇██████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_acc_d_avg ▁▁▂▄▅▅▅▅▃▄▅▅▇▇▇██▇▇▇▆▆█▇█▇██████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_acc_d_val ▁▁▂▄▅▅▅▅▃▄▅▅▇▇▇██▇▇▇▆▆█▇█▇██████████████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_acc_val ▁▁▂▄▅▅▅▅▃▄▅▅▇▇▇██▇▇▇▆▆█▇█▇██████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_corr_d_avg ██▇▆▅▄▅▄▆▆▄▄▁▂▁▁▁▁▂▂▄▃▁▁▂▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_corr_d_val ██▇▆▅▄▅▄▆▆▄▄▁▂▁▁▁▁▂▂▄▃▁▁▂▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_majacc_avg ███▆▆▅▅▅▇██▆▁▄▁▂▁▂▃▃▄▃▁▃▂▂▁▂▂▂▃▃▃▃▃▃▃▃▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_majacc_d_avg ███▆▆▅▅▅▇██▆▁▄▁▂▁▂▃▃▄▃▁▃▂▂▁▂▂▂▃▃▃▃▃▃▃▃▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_majacc_d_val ███▆▆▅▅▅▇██▆▁▄▁▂▁▂▃▃▄▃▁▃▂▂▁▂▂▂▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_majacc_val ███▆▆▅▅▅▇██▆▁▄▁▂▁▂▃▃▄▃▁▃▂▂▁▂▂▂▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_minacc_avg ▁▁▂▄▅▅▅▅▃▄▅▅▇▇▇██▇▇▇▆▆█▇█▇██████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_minacc_d_avg ▁▁▂▄▅▅▅▅▃▄▅▅▇▇▇██▇▇▇▆▆█▇█▇██████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_minacc_d_val ▁▁▂▄▅▅▅▅▃▄▅▅▇▇▇██▇▇▇▆▆█▇█▇██████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_minacc_val ▁▁▂▄▅▅▅▅▃▄▅▅▇▇▇██▇▇▇▆▆█▇█▇██████████████
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/Loss_avg █▆▆▆▅▅▅▅▄▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/Loss_val ███▇▆▆▆▅▆▅▄▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/l1_avg █▃▃▂▁▁▂▂▄▃▅▅▇▂▁▂▂▂▂▂▄▅▄▄▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/l1_val ▅▄▃▃▃▂▂▂▁▂▆▇▄▂▃▃▃▃▃▃▄▇▆▆▆▆█▇██▇█████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_acc_avg ▁▄▄▄▅▅▅▅▆▇███▄▄▃▃▃▃▃▄▅▃▄▄▃▄▃▄▃▃▃▃▃▃▄▄▄▄▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_acc_val ▂▂▁▂▅▃▅▅▅▆▆█▆▄▁▃▃▃▃▃▄▂▁▃▄▃▃▂▂▂▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_majacc_avg ▆██▇▇▇▇▆▆▆▇▇▆▂▂▂▂▂▂▂▃▃▂▃▃▁▂▂▂▂▁▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_majacc_val █▇▆▆▇▆▆▇█▇▇▇▅▄▂▃▃▃▃▃▅▄▁▃▃▃▃▂▂▂▃▃▃▃▃▃▃▃▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_minacc_avg ▁▁▁▂▃▄▄▄▅▅▆▆▇▇▇▇▇▇▇▇▇▇█▇▇███████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_minacc_val ▁▂▂▃▅▄▅▅▄▆▆██▇▇▇▇▇▇▇▆▆█▇████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_nll_avg █▅▅▄▄▃▃▃▂▂▁▁▁▃▃▃▃▃▃▃▂▂▃▃▂▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_nll_val ███▇▅▅▅▄▅▃▃▁▄▄▆▅▅▅▅▅▄▅▅▄▄▄▅▄▅▄▄▄▄▄▄▄▄▄▄▄
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_penalty_avg █▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_penalty_val █▆▅▃▂▂▂▂▃▂▁▂▃▂▁▁▁▁▁▁▁▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/weight_norm_avg ▁▅▅▅▅▅▅▆▆▆▆▇████████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/weight_norm_val ▁▃▃▃▃▄▄▄▅▅▆▆████████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/diagnostics/epoch_time_val 0.03556
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/diagnostics/train_time_val 0.0351
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/diagnostics/validation_time_val 0.00045
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/Loss_avg 2.14388
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/Loss_d_avg 2.14388
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/Loss_d_val 2.14388
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/Loss_val 2.14388
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_acc_avg 0.605
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_acc_d_avg 0.605
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_acc_d_val 0.605
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_acc_val 0.605
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_corr_d_avg 0.29453
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_corr_d_val 0.29453
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_majacc_avg 0.88
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_majacc_d_avg 0.88
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_majacc_d_val 0.88
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_majacc_val 0.88
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_minacc_avg 0.57444
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_minacc_d_avg 0.57444
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_minacc_d_val 0.57444
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/test/test_minacc_val 0.57444
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/Loss_avg 3e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/Loss_val 3e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/l1_avg 8.44783
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/l1_val 8.44851
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_acc_avg 0.848
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_acc_val 0.872
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_majacc_avg 0.83578
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_majacc_val 0.85446
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_minacc_avg 0.91697
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_minacc_val 0.97297
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_nll_avg 0.26782
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_nll_val 0.25023
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/weight_norm_avg 24.95288
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/weight_norm_val 24.95285
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/131/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/1bycmw3f
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_195229-1bycmw3f/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_195446-l704n1t8
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/l704n1t8
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1164
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6032, 3, 32, 32) (5968, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:34,  1.39s/it] 19%|#9        | 5/26 [00:01<00:04,  4.36it/s] 35%|###4      | 9/26 [00:01<00:02,  8.44it/s] 50%|#####     | 13/26 [00:01<00:01, 12.83it/s] 69%|######9   | 18/26 [00:01<00:00, 18.37it/s] 88%|########8 | 23/26 [00:01<00:00, 23.21it/s]100%|##########| 26/26 [00:02<00:00, 10.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.461 (0.603)	train_nll   0.46 (  0.60)	train_penalty   0.09 (  0.34)	weight_norm  20.96 ( 18.13)	train_acc   0.84 (  0.77)	train_minacc   0.02 (  0.13)	train_majacc   1.00 (  0.89)	train_corr   0.00 (  0.00)	l1 8.1527 (7.7703)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.51it/s] 23%|##3       | 6/26 [00:00<00:00, 32.64it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.64it/s] 46%|####6     | 12/26 [00:00<00:00, 42.76it/s] 65%|######5   | 17/26 [00:00<00:00, 43.54it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.54it/s] 88%|########8 | 23/26 [00:00<00:00, 48.60it/s]100%|##########| 26/26 [00:00<00:00, 40.04it/s]
Test: [   0/  26]	Loss 0.397 (0.397)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.397 (0.397)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.442 (0.413)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.442 (0.413)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.432 (0.415)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.432 (0.415)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.431 (0.416)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.431 (0.416)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]
Test: [  0/  1]	Loss 1.791 (1.791)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.791 (1.791)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.791 (1.791)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.791 (1.791)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0692 (0.0692)	validation_time 0.0067 (0.0067)	train_time 0.0609 (0.0609)
record: (train_acc, test_acc) (0.8455000272393227, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8455000272393227, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.84it/s] 19%|#9        | 5/26 [00:00<00:00, 27.26it/s] 35%|###4      | 9/26 [00:00<00:00, 32.23it/s] 50%|#####     | 13/26 [00:00<00:00, 34.74it/s] 65%|######5   | 17/26 [00:00<00:00, 36.46it/s] 85%|########4 | 22/26 [00:00<00:00, 38.04it/s]100%|##########| 26/26 [00:00<00:00, 32.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.447 (0.418)	train_nll   0.45 (  0.42)	train_penalty   0.08 (  0.06)	weight_norm  22.12 ( 21.76)	train_acc   0.84 (  0.85)	train_minacc   0.05 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 8.5130 (8.4124)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.93it/s] 23%|##3       | 6/26 [00:00<00:00, 28.52it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.52it/s] 46%|####6     | 12/26 [00:00<00:00, 39.86it/s] 69%|######9   | 18/26 [00:00<00:00, 43.05it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.05it/s] 92%|#########2| 24/26 [00:00<00:00, 47.34it/s]100%|##########| 26/26 [00:00<00:00, 38.90it/s]
Test: [   0/  26]	Loss 0.378 (0.378)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.378 (0.378)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.424 (0.392)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.424 (0.392)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.411 (0.397)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.411 (0.397)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.414 (0.399)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.414 (0.399)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.85it/s]
Test: [  0/  1]	Loss 1.867 (1.867)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.867 (1.867)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.867 (1.867)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.867 (1.867)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0347 (0.0519)	validation_time 0.0004 (0.0036)	train_time 0.0342 (0.0475)
record: (train_acc, test_acc) (0.8471000280976295, 0.10600000619888306)
last accs (train_acc, test_acc) (0.8471000280976295, 0.10600000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 19%|#9        | 5/26 [00:00<00:00, 22.75it/s] 38%|###8      | 10/26 [00:00<00:00, 31.09it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.51it/s] 69%|######9   | 18/26 [00:00<00:00, 35.43it/s] 88%|########8 | 23/26 [00:00<00:00, 37.19it/s]100%|##########| 26/26 [00:00<00:00, 30.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.430 (0.405)	train_nll   0.43 (  0.40)	train_penalty   0.06 (  0.05)	weight_norm  22.25 ( 22.21)	train_acc   0.84 (  0.85)	train_minacc   0.07 (  0.04)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 8.1883 (8.3066)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.71it/s] 23%|##3       | 6/26 [00:00<00:00, 31.88it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.88it/s] 46%|####6     | 12/26 [00:00<00:00, 42.73it/s] 69%|######9   | 18/26 [00:00<00:00, 44.89it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.89it/s] 92%|#########2| 24/26 [00:00<00:00, 49.06it/s]100%|##########| 26/26 [00:00<00:00, 40.72it/s]
Test: [   0/  26]	Loss 0.364 (0.364)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.364 (0.364)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.409 (0.365)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.409 (0.365)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.388 (0.371)	test_acc   0.85 (  0.85)	test_minacc   0.08 (  0.03)	test_majacc   0.99 (  1.00)	Loss_d 0.388 (0.371)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.08 (  0.03)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.387 (0.373)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.387 (0.373)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.00it/s]
Test: [  0/  1]	Loss 1.825 (1.825)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.98 (  0.98)	Loss_d 1.825 (1.825)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.825 (1.825)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.98 (  0.98)	Loss_d 1.825 (1.825)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0337 (0.0459)	validation_time 0.0004 (0.0025)	train_time 0.0333 (0.0428)
record: (train_acc, test_acc) (0.8500000202059745, 0.11500000208616257)
last accs (train_acc, test_acc) (0.8500000202059745, 0.11500000208616257)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.34it/s] 23%|##3       | 6/26 [00:00<00:00, 27.40it/s] 38%|###8      | 10/26 [00:00<00:00, 32.52it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.05it/s] 69%|######9   | 18/26 [00:00<00:00, 36.52it/s] 85%|########4 | 22/26 [00:00<00:00, 37.02it/s]100%|##########| 26/26 [00:00<00:00, 37.87it/s]100%|##########| 26/26 [00:00<00:00, 32.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.398 (0.373)	train_nll   0.40 (  0.37)	train_penalty   0.04 (  0.04)	weight_norm  22.31 ( 22.28)	train_acc   0.83 (  0.85)	train_minacc   0.20 (  0.12)	train_majacc   0.95 (  0.98)	train_corr   0.00 (  0.00)	l1 7.9992 (8.0293)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.80it/s] 23%|##3       | 6/26 [00:00<00:00, 29.05it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.05it/s] 46%|####6     | 12/26 [00:00<00:00, 39.41it/s] 69%|######9   | 18/26 [00:00<00:00, 42.14it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.14it/s] 92%|#########2| 24/26 [00:00<00:00, 47.22it/s]100%|##########| 26/26 [00:00<00:00, 38.28it/s]
Test: [   0/  26]	Loss 0.351 (0.351)	test_acc   0.86 (  0.86)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 0.351 (0.351)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.372 (0.342)	test_acc   0.83 (  0.86)	test_minacc   0.11 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 0.372 (0.342)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.11 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.357 (0.346)	test_acc   0.84 (  0.86)	test_minacc   0.17 (  0.16)	test_majacc   0.97 (  0.98)	Loss_d 0.357 (0.346)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.17 (  0.16)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.369 (0.348)	test_acc   0.84 (  0.86)	test_minacc   0.22 (  0.17)	test_majacc   0.97 (  0.98)	Loss_d 0.369 (0.348)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.22 (  0.17)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.93it/s]
Test: [  0/  1]	Loss 1.608 (1.608)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.608 (1.608)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.608 (1.608)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.608 (1.608)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0342 (0.0429)	validation_time 0.0006 (0.0020)	train_time 0.0336 (0.0405)
record: (train_acc, test_acc) (0.8557000280022621, 0.22300000488758087)
last accs (train_acc, test_acc) (0.8557000280022621, 0.22300000488758087)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.94it/s] 19%|#9        | 5/26 [00:00<00:00, 24.96it/s] 35%|###4      | 9/26 [00:00<00:00, 30.98it/s] 50%|#####     | 13/26 [00:00<00:00, 34.31it/s] 65%|######5   | 17/26 [00:00<00:00, 36.26it/s] 81%|########  | 21/26 [00:00<00:00, 37.45it/s] 96%|#########6| 25/26 [00:00<00:00, 37.84it/s]100%|##########| 26/26 [00:00<00:00, 32.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.360 (0.347)	train_nll   0.36 (  0.35)	train_penalty   0.03 (  0.03)	weight_norm  22.36 ( 22.33)	train_acc   0.84 (  0.85)	train_minacc   0.12 (  0.20)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 7.8069 (7.8753)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s] 27%|##6       | 7/26 [00:00<00:00, 31.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.24it/s] 46%|####6     | 12/26 [00:00<00:00, 38.31it/s] 65%|######5   | 17/26 [00:00<00:00, 40.58it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.58it/s] 88%|########8 | 23/26 [00:00<00:00, 46.04it/s]100%|##########| 26/26 [00:00<00:00, 36.88it/s]
Test: [   0/  26]	Loss 0.318 (0.318)	test_acc   0.87 (  0.87)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.318 (0.318)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.353 (0.322)	test_acc   0.84 (  0.87)	test_minacc   0.14 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 0.353 (0.322)	test_acc_d   0.84 (  0.87)	test_minacc_d   0.14 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.338 (0.331)	test_acc   0.86 (  0.86)	test_minacc   0.21 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 0.338 (0.331)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.21 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.344 (0.332)	test_acc   0.84 (  0.86)	test_minacc   0.12 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 0.344 (0.332)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.12 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.51it/s]
Test: [  0/  1]	Loss 1.579 (1.579)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   1.00 (  1.00)	Loss_d 1.579 (1.579)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.579 (1.579)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   1.00 (  1.00)	Loss_d 1.579 (1.579)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.75 (  0.75)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0343 (0.0412)	validation_time 0.0003 (0.0017)	train_time 0.0340 (0.0392)
record: (train_acc, test_acc) (0.8619000272154808, 0.25300002098083496)
last accs (train_acc, test_acc) (0.8619000272154808, 0.25300002098083496)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.47it/s] 19%|#9        | 5/26 [00:00<00:00, 26.01it/s] 35%|###4      | 9/26 [00:00<00:00, 31.50it/s] 50%|#####     | 13/26 [00:00<00:00, 30.74it/s] 69%|######9   | 18/26 [00:00<00:00, 34.70it/s] 85%|########4 | 22/26 [00:00<00:00, 36.16it/s]100%|##########| 26/26 [00:00<00:00, 31.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.334 (0.333)	train_nll   0.33 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm  22.43 ( 22.40)	train_acc   0.86 (  0.86)	train_minacc   0.24 (  0.23)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 7.8325 (7.8578)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.49it/s] 27%|##6       | 7/26 [00:00<00:00, 36.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.39it/s] 50%|#####     | 13/26 [00:00<00:00, 44.93it/s] 69%|######9   | 18/26 [00:00<00:00, 43.69it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.69it/s] 92%|#########2| 24/26 [00:00<00:00, 48.67it/s]100%|##########| 26/26 [00:00<00:00, 41.41it/s]
Test: [   0/  26]	Loss 0.316 (0.316)	test_acc   0.86 (  0.86)	test_minacc   0.13 (  0.13)	test_majacc   0.97 (  0.97)	Loss_d 0.316 (0.316)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.337 (0.311)	test_acc   0.85 (  0.87)	test_minacc   0.20 (  0.23)	test_majacc   0.98 (  0.98)	Loss_d 0.337 (0.311)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.20 (  0.23)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.310 (0.314)	test_acc   0.86 (  0.86)	test_minacc   0.21 (  0.22)	test_majacc   0.99 (  0.98)	Loss_d 0.310 (0.314)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.21 (  0.22)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.318 (0.315)	test_acc   0.86 (  0.86)	test_minacc   0.22 (  0.21)	test_majacc   0.98 (  0.98)	Loss_d 0.318 (0.315)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.22 (  0.21)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.51it/s]
Test: [  0/  1]	Loss 1.557 (1.557)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.99 (  0.99)	Loss_d 1.557 (1.557)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.557 (1.557)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.99 (  0.99)	Loss_d 1.557 (1.557)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.73 (  0.73)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0357 (0.0403)	validation_time 0.0004 (0.0015)	train_time 0.0353 (0.0386)
record: (train_acc, test_acc) (0.864200021147728, 0.26600000262260437)
last accs (train_acc, test_acc) (0.864200021147728, 0.26600000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.54it/s] 19%|#9        | 5/26 [00:00<00:01, 20.36it/s] 35%|###4      | 9/26 [00:00<00:00, 27.84it/s] 50%|#####     | 13/26 [00:00<00:00, 31.70it/s] 65%|######5   | 17/26 [00:00<00:00, 34.28it/s] 81%|########  | 21/26 [00:00<00:00, 35.32it/s] 96%|#########6| 25/26 [00:00<00:00, 36.67it/s]100%|##########| 26/26 [00:00<00:00, 29.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.341 (0.331)	train_nll   0.34 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm  22.53 ( 22.48)	train_acc   0.86 (  0.86)	train_minacc   0.32 (  0.23)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 7.6239 (7.7623)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.06it/s] 27%|##6       | 7/26 [00:00<00:00, 22.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 22.12it/s] 50%|#####     | 13/26 [00:00<00:00, 32.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.16it/s] 96%|#########6| 25/26 [00:00<00:00, 44.03it/s]100%|##########| 26/26 [00:00<00:00, 32.88it/s]
Test: [   0/  26]	Loss 0.314 (0.314)	test_acc   0.85 (  0.85)	test_minacc   0.25 (  0.25)	test_majacc   0.95 (  0.95)	Loss_d 0.314 (0.314)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.332 (0.307)	test_acc   0.87 (  0.87)	test_minacc   0.33 (  0.33)	test_majacc   0.98 (  0.96)	Loss_d 0.332 (0.307)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.305 (0.309)	test_acc   0.88 (  0.87)	test_minacc   0.33 (  0.31)	test_majacc   0.98 (  0.96)	Loss_d 0.305 (0.309)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.33 (  0.31)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.91 (  0.89)
Test: [  26/  26]	Loss 0.325 (0.311)	test_acc   0.86 (  0.87)	test_minacc   0.34 (  0.31)	test_majacc   0.97 (  0.97)	Loss_d 0.325 (0.311)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.34 (  0.31)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.26it/s]
Test: [  0/  1]	Loss 1.462 (1.462)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.97 (  0.97)	Loss_d 1.462 (1.462)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.64 (  0.64)
Test: [  1/  1]	Loss 1.462 (1.462)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.97 (  0.97)	Loss_d 1.462 (1.462)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.64 (  0.64)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0360 (0.0397)	validation_time 0.0004 (0.0013)	train_time 0.0356 (0.0381)
record: (train_acc, test_acc) (0.8664000245928765, 0.34800001978874207)
last accs (train_acc, test_acc) (0.8664000245928765, 0.34800001978874207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.18it/s] 19%|#9        | 5/26 [00:00<00:00, 26.41it/s] 38%|###8      | 10/26 [00:00<00:00, 34.01it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.03it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.64it/s] 92%|#########2| 24/26 [00:00<00:00, 38.85it/s]100%|##########| 26/26 [00:00<00:00, 33.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.305 (0.320)	train_nll   0.30 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm  22.65 ( 22.59)	train_acc   0.87 (  0.86)	train_minacc   0.27 (  0.28)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 7.4518 (7.6756)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.10it/s] 31%|###       | 8/26 [00:00<00:00, 39.41it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.41it/s] 50%|#####     | 13/26 [00:00<00:00, 41.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.05it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.05it/s] 96%|#########6| 25/26 [00:00<00:00, 47.38it/s]100%|##########| 26/26 [00:00<00:00, 40.62it/s]
Test: [   0/  26]	Loss 0.300 (0.300)	test_acc   0.86 (  0.86)	test_minacc   0.23 (  0.23)	test_majacc   0.96 (  0.96)	Loss_d 0.300 (0.300)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.335 (0.300)	test_acc   0.85 (  0.87)	test_minacc   0.29 (  0.30)	test_majacc   0.96 (  0.97)	Loss_d 0.335 (0.300)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.29 (  0.30)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.88 (  0.89)
Test: [  20/  26]	Loss 0.302 (0.298)	test_acc   0.87 (  0.87)	test_minacc   0.27 (  0.29)	test_majacc   0.98 (  0.97)	Loss_d 0.302 (0.298)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.27 (  0.29)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.89)
Test: [  26/  26]	Loss 0.297 (0.299)	test_acc   0.87 (  0.87)	test_minacc   0.29 (  0.30)	test_majacc   0.99 (  0.97)	Loss_d 0.297 (0.299)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.29 (  0.30)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.88 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.51it/s]
Test: [  0/  1]	Loss 1.479 (1.479)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 1.479 (1.479)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 1.479 (1.479)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 1.479 (1.479)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.67 (  0.67)
Overall Timing[  7/  1]	epoch_time 0.0362 (0.0393)	validation_time 0.0003 (0.0012)	train_time 0.0359 (0.0378)
record: (train_acc, test_acc) (0.8664000245928765, 0.34800001978874207)
last accs (train_acc, test_acc) (0.8677000260949135, 0.3110000193119049)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.98it/s] 19%|#9        | 5/26 [00:00<00:00, 24.15it/s] 35%|###4      | 9/26 [00:00<00:00, 30.82it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.73it/s] 92%|#########2| 24/26 [00:00<00:00, 39.06it/s]100%|##########| 26/26 [00:00<00:00, 32.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.278 (0.308)	train_nll   0.28 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.76 ( 22.71)	train_acc   0.88 (  0.86)	train_minacc   0.34 (  0.33)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.3201 (7.5420)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.84it/s] 35%|###4      | 9/26 [00:00<00:00, 41.07it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.07it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.13it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.13it/s] 81%|########  | 21/26 [00:00<00:00, 47.30it/s]100%|##########| 26/26 [00:00<00:00, 42.18it/s]
Test: [   0/  26]	Loss 0.281 (0.281)	test_acc   0.86 (  0.86)	test_minacc   0.27 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 0.281 (0.281)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.324 (0.288)	test_acc   0.84 (  0.88)	test_minacc   0.29 (  0.40)	test_majacc   0.95 (  0.96)	Loss_d 0.324 (0.288)	test_acc_d   0.84 (  0.88)	test_minacc_d   0.29 (  0.40)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.86 (  0.87)
Test: [  20/  26]	Loss 0.278 (0.291)	test_acc   0.88 (  0.87)	test_minacc   0.43 (  0.40)	test_majacc   0.97 (  0.96)	Loss_d 0.278 (0.291)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.43 (  0.40)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.88 (  0.87)
Test: [  26/  26]	Loss 0.274 (0.291)	test_acc   0.87 (  0.88)	test_minacc   0.39 (  0.40)	test_majacc   0.97 (  0.96)	Loss_d 0.274 (0.291)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.39 (  0.40)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.87 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.83it/s]
Test: [  0/  1]	Loss 1.460 (1.460)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.99 (  0.99)	Loss_d 1.460 (1.460)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.60 (  0.60)
Test: [  1/  1]	Loss 1.460 (1.460)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.99 (  0.99)	Loss_d 1.460 (1.460)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.60 (  0.60)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0361 (0.0389)	validation_time 0.0004 (0.0011)	train_time 0.0357 (0.0376)
record: (train_acc, test_acc) (0.8755000256299973, 0.3760000169277191)
last accs (train_acc, test_acc) (0.8755000256299973, 0.3760000169277191)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.13it/s] 19%|#9        | 5/26 [00:00<00:00, 26.20it/s] 35%|###4      | 9/26 [00:00<00:00, 32.09it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.14it/s] 92%|#########2| 24/26 [00:00<00:00, 38.88it/s]100%|##########| 26/26 [00:00<00:00, 32.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.276 (0.296)	train_nll   0.28 (  0.30)	train_penalty   0.01 (  0.01)	weight_norm  22.90 ( 22.83)	train_acc   0.90 (  0.87)	train_minacc   0.56 (  0.39)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.3187 (7.5018)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 27%|##6       | 7/26 [00:00<00:00, 30.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.64it/s] 50%|#####     | 13/26 [00:00<00:00, 38.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.37it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.37it/s] 96%|#########6| 25/26 [00:00<00:00, 46.96it/s]100%|##########| 26/26 [00:00<00:00, 37.84it/s]
Test: [   0/  26]	Loss 0.267 (0.267)	test_acc   0.87 (  0.87)	test_minacc   0.44 (  0.44)	test_majacc   0.93 (  0.93)	Loss_d 0.267 (0.267)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.297 (0.267)	test_acc   0.85 (  0.89)	test_minacc   0.45 (  0.55)	test_majacc   0.94 (  0.95)	Loss_d 0.297 (0.267)	test_acc_d   0.85 (  0.89)	test_minacc_d   0.45 (  0.55)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.82 (  0.83)
Test: [  20/  26]	Loss 0.257 (0.267)	test_acc   0.90 (  0.88)	test_minacc   0.54 (  0.54)	test_majacc   0.97 (  0.95)	Loss_d 0.257 (0.267)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.85 (  0.83)
Test: [  26/  26]	Loss 0.253 (0.266)	test_acc   0.90 (  0.89)	test_minacc   0.56 (  0.54)	test_majacc   0.96 (  0.95)	Loss_d 0.253 (0.266)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.56 (  0.54)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.83 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.68it/s]
Test: [  0/  1]	Loss 1.446 (1.446)	test_acc   0.45 (  0.45)	test_minacc   0.39 (  0.39)	test_majacc   0.94 (  0.94)	Loss_d 1.446 (1.446)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.45 (  0.45)
Test: [  1/  1]	Loss 1.446 (1.446)	test_acc   0.45 (  0.45)	test_minacc   0.39 (  0.39)	test_majacc   0.94 (  0.94)	Loss_d 1.446 (1.446)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.45 (  0.45)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0337 (0.0384)	validation_time 0.0004 (0.0010)	train_time 0.0332 (0.0372)
record: (train_acc, test_acc) (0.8861000201106072, 0.4490000307559967)
last accs (train_acc, test_acc) (0.8861000201106072, 0.4490000307559967)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.42it/s] 19%|#9        | 5/26 [00:00<00:01, 19.83it/s] 35%|###4      | 9/26 [00:00<00:00, 26.53it/s] 50%|#####     | 13/26 [00:00<00:00, 30.00it/s] 65%|######5   | 17/26 [00:00<00:00, 33.00it/s] 85%|########4 | 22/26 [00:00<00:00, 36.34it/s]100%|##########| 26/26 [00:00<00:00, 29.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.247 (0.286)	train_nll   0.25 (  0.29)	train_penalty   0.01 (  0.01)	weight_norm  23.07 ( 22.99)	train_acc   0.92 (  0.88)	train_minacc   0.54 (  0.44)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 7.4042 (7.4593)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.58it/s] 27%|##6       | 7/26 [00:00<00:00, 33.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.09it/s] 50%|#####     | 13/26 [00:00<00:00, 39.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.97it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.97it/s] 96%|#########6| 25/26 [00:00<00:00, 47.28it/s]100%|##########| 26/26 [00:00<00:00, 39.00it/s]
Test: [   0/  26]	Loss 0.256 (0.256)	test_acc   0.88 (  0.88)	test_minacc   0.40 (  0.40)	test_majacc   0.95 (  0.95)	Loss_d 0.256 (0.256)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.294 (0.248)	test_acc   0.87 (  0.89)	test_minacc   0.53 (  0.54)	test_majacc   0.94 (  0.95)	Loss_d 0.294 (0.248)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.53 (  0.54)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.82 (  0.85)
Test: [  20/  26]	Loss 0.239 (0.247)	test_acc   0.90 (  0.89)	test_minacc   0.54 (  0.55)	test_majacc   0.97 (  0.95)	Loss_d 0.239 (0.247)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.86 (  0.85)
Test: [  26/  26]	Loss 0.221 (0.245)	test_acc   0.94 (  0.89)	test_minacc   0.71 (  0.55)	test_majacc   0.99 (  0.96)	Loss_d 0.221 (0.245)	test_acc_d   0.94 (  0.89)	test_minacc_d   0.71 (  0.55)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.83 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.96it/s]
Test: [  0/  1]	Loss 1.567 (1.567)	test_acc   0.43 (  0.43)	test_minacc   0.37 (  0.37)	test_majacc   0.96 (  0.96)	Loss_d 1.567 (1.567)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.48 (  0.48)
Test: [  1/  1]	Loss 1.567 (1.567)	test_acc   0.43 (  0.43)	test_minacc   0.37 (  0.37)	test_majacc   0.96 (  0.96)	Loss_d 1.567 (1.567)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.48 (  0.48)
Overall Timing[ 10/  1]	epoch_time 0.0350 (0.0381)	validation_time 0.0003 (0.0010)	train_time 0.0347 (0.0369)
record: (train_acc, test_acc) (0.8861000201106072, 0.4490000307559967)
last accs (train_acc, test_acc) (0.8946000204086304, 0.4300000071525574)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.65it/s] 19%|#9        | 5/26 [00:00<00:00, 26.35it/s] 38%|###8      | 10/26 [00:00<00:00, 33.68it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.29it/s] 92%|#########2| 24/26 [00:00<00:00, 38.84it/s]100%|##########| 26/26 [00:00<00:00, 33.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.250 (0.263)	train_nll   0.25 (  0.26)	train_penalty   0.00 (  0.01)	weight_norm  23.28 ( 23.17)	train_acc   0.90 (  0.89)	train_minacc   0.61 (  0.53)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 7.6079 (7.6340)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.69it/s] 35%|###4      | 9/26 [00:00<00:00, 40.77it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.77it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.76it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.76it/s] 81%|########  | 21/26 [00:00<00:00, 48.08it/s]100%|##########| 26/26 [00:00<00:00, 42.93it/s]
Test: [   0/  26]	Loss 0.249 (0.249)	test_acc   0.89 (  0.89)	test_minacc   0.56 (  0.56)	test_majacc   0.94 (  0.94)	Loss_d 0.249 (0.249)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.260 (0.242)	test_acc   0.88 (  0.90)	test_minacc   0.61 (  0.66)	test_majacc   0.93 (  0.94)	Loss_d 0.260 (0.242)	test_acc_d   0.88 (  0.90)	test_minacc_d   0.61 (  0.66)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.79 (  0.81)
Test: [  20/  26]	Loss 0.228 (0.240)	test_acc   0.91 (  0.90)	test_minacc   0.63 (  0.67)	test_majacc   0.96 (  0.94)	Loss_d 0.228 (0.240)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.63 (  0.67)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.82 (  0.81)
Test: [  26/  26]	Loss 0.226 (0.239)	test_acc   0.92 (  0.90)	test_minacc   0.76 (  0.67)	test_majacc   0.95 (  0.94)	Loss_d 0.226 (0.239)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.76 (  0.67)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.80 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.14it/s]
Test: [  0/  1]	Loss 1.536 (1.536)	test_acc   0.50 (  0.50)	test_minacc   0.45 (  0.45)	test_majacc   0.94 (  0.94)	Loss_d 1.536 (1.536)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.39 (  0.39)
Test: [  1/  1]	Loss 1.536 (1.536)	test_acc   0.50 (  0.50)	test_minacc   0.45 (  0.45)	test_majacc   0.94 (  0.94)	Loss_d 1.536 (1.536)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.39 (  0.39)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0345 (0.0378)	validation_time 0.0004 (0.0009)	train_time 0.0341 (0.0367)
record: (train_acc, test_acc) (0.901200020134449, 0.4960000216960907)
last accs (train_acc, test_acc) (0.901200020134449, 0.4960000216960907)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 19%|#9        | 5/26 [00:00<00:00, 26.46it/s] 38%|###8      | 10/26 [00:00<00:00, 33.95it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.85it/s] 92%|#########2| 24/26 [00:00<00:00, 39.22it/s]100%|##########| 26/26 [00:00<00:00, 33.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.228 (0.260)	train_nll   0.23 (  0.26)	train_penalty   0.01 (  0.01)	weight_norm  23.54 ( 23.41)	train_acc   0.91 (  0.89)	train_minacc   0.59 (  0.54)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 7.6347 (7.8759)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.85it/s] 31%|###       | 8/26 [00:00<00:00, 39.40it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.40it/s] 50%|#####     | 13/26 [00:00<00:00, 42.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.39it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.39it/s] 96%|#########6| 25/26 [00:00<00:00, 48.62it/s]100%|##########| 26/26 [00:00<00:00, 41.48it/s]
Test: [   0/  26]	Loss 0.266 (0.266)	test_acc   0.89 (  0.89)	test_minacc   0.67 (  0.67)	test_majacc   0.92 (  0.92)	Loss_d 0.266 (0.266)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.297 (0.258)	test_acc   0.87 (  0.89)	test_minacc   0.62 (  0.65)	test_majacc   0.92 (  0.94)	Loss_d 0.297 (0.258)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.62 (  0.65)	test_majacc_d   0.92 (  0.94)	test_corr_d   0.77 (  0.81)
Test: [  20/  26]	Loss 0.215 (0.251)	test_acc   0.93 (  0.89)	test_minacc   0.68 (  0.66)	test_majacc   0.98 (  0.94)	Loss_d 0.215 (0.251)	test_acc_d   0.93 (  0.89)	test_minacc_d   0.68 (  0.66)	test_majacc_d   0.98 (  0.94)	test_corr_d   0.83 (  0.81)
Test: [  26/  26]	Loss 0.191 (0.248)	test_acc   0.96 (  0.90)	test_minacc   0.85 (  0.66)	test_majacc   0.98 (  0.94)	Loss_d 0.191 (0.248)	test_acc_d   0.96 (  0.90)	test_minacc_d   0.85 (  0.66)	test_majacc_d   0.98 (  0.94)	test_corr_d   0.81 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.74it/s]
Test: [  0/  1]	Loss 1.514 (1.514)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.94 (  0.94)	Loss_d 1.514 (1.514)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.41 (  0.41)
Test: [  1/  1]	Loss 1.514 (1.514)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.94 (  0.94)	Loss_d 1.514 (1.514)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.41 (  0.41)
Overall Timing[ 12/  1]	epoch_time 0.0343 (0.0375)	validation_time 0.0004 (0.0009)	train_time 0.0338 (0.0365)
record: (train_acc, test_acc) (0.901200020134449, 0.4960000216960907)
last accs (train_acc, test_acc) (0.897500019788742, 0.4700000286102295)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s] 19%|#9        | 5/26 [00:00<00:00, 23.74it/s] 35%|###4      | 9/26 [00:00<00:00, 29.71it/s] 50%|#####     | 13/26 [00:00<00:00, 32.98it/s] 65%|######5   | 17/26 [00:00<00:00, 35.01it/s] 81%|########  | 21/26 [00:00<00:00, 36.26it/s] 96%|#########6| 25/26 [00:00<00:00, 32.46it/s]100%|##########| 26/26 [00:00<00:00, 29.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.253 (0.250)	train_nll   0.25 (  0.25)	train_penalty   0.01 (  0.01)	weight_norm  23.85 ( 23.69)	train_acc   0.90 (  0.90)	train_minacc   0.56 (  0.58)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 7.8448 (7.9179)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.72it/s] 27%|##6       | 7/26 [00:00<00:00, 30.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.83it/s] 46%|####6     | 12/26 [00:00<00:00, 38.21it/s] 65%|######5   | 17/26 [00:00<00:00, 40.82it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.82it/s] 85%|########4 | 22/26 [00:00<00:00, 43.13it/s]100%|##########| 26/26 [00:00<00:00, 36.14it/s]
Test: [   0/  26]	Loss 0.241 (0.241)	test_acc   0.90 (  0.90)	test_minacc   0.46 (  0.46)	test_majacc   0.97 (  0.97)	Loss_d 0.241 (0.241)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.283 (0.250)	test_acc   0.88 (  0.90)	test_minacc   0.52 (  0.49)	test_majacc   0.96 (  0.97)	Loss_d 0.283 (0.250)	test_acc_d   0.88 (  0.90)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.86 (  0.87)
Test: [  20/  26]	Loss 0.229 (0.246)	test_acc   0.91 (  0.90)	test_minacc   0.51 (  0.51)	test_majacc   0.99 (  0.97)	Loss_d 0.229 (0.246)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.88 (  0.86)
Test: [  26/  26]	Loss 0.215 (0.243)	test_acc   0.92 (  0.90)	test_minacc   0.59 (  0.51)	test_majacc   0.98 (  0.97)	Loss_d 0.215 (0.243)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.59 (  0.51)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.85 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.97it/s]
Test: [  0/  1]	Loss 1.768 (1.768)	test_acc   0.40 (  0.40)	test_minacc   0.33 (  0.33)	test_majacc   0.96 (  0.96)	Loss_d 1.768 (1.768)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.55 (  0.55)
Test: [  1/  1]	Loss 1.768 (1.768)	test_acc   0.40 (  0.40)	test_minacc   0.33 (  0.33)	test_majacc   0.96 (  0.96)	Loss_d 1.768 (1.768)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.55 (  0.55)
Overall Timing[ 13/  1]	epoch_time 0.0380 (0.0375)	validation_time 0.0004 (0.0009)	train_time 0.0375 (0.0366)
record: (train_acc, test_acc) (0.901200020134449, 0.4960000216960907)
last accs (train_acc, test_acc) (0.9001000191569328, 0.3960000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.10it/s] 19%|#9        | 5/26 [00:00<00:00, 24.33it/s] 35%|###4      | 9/26 [00:00<00:00, 30.45it/s] 50%|#####     | 13/26 [00:00<00:00, 33.98it/s] 65%|######5   | 17/26 [00:00<00:00, 35.69it/s] 85%|########4 | 22/26 [00:00<00:00, 37.70it/s]100%|##########| 26/26 [00:00<00:00, 31.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.203 (0.225)	train_nll   0.20 (  0.22)	train_penalty   0.01 (  0.01)	weight_norm  24.18 ( 24.02)	train_acc   0.93 (  0.91)	train_minacc   0.63 (  0.63)	train_majacc   0.99 (  0.95)	train_corr   0.00 (  0.00)	l1 8.4450 (8.3023)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.50it/s] 31%|###       | 8/26 [00:00<00:00, 40.77it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.77it/s] 50%|#####     | 13/26 [00:00<00:00, 41.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.25it/s] 96%|#########6| 25/26 [00:00<00:00, 47.29it/s]100%|##########| 26/26 [00:00<00:00, 41.02it/s]
Test: [   0/  26]	Loss 0.218 (0.218)	test_acc   0.90 (  0.90)	test_minacc   0.69 (  0.69)	test_majacc   0.93 (  0.93)	Loss_d 0.218 (0.218)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.80 (  0.80)
Test: [  10/  26]	Loss 0.255 (0.245)	test_acc   0.90 (  0.90)	test_minacc   0.64 (  0.67)	test_majacc   0.95 (  0.94)	Loss_d 0.255 (0.245)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.64 (  0.67)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.77 (  0.78)
Test: [  20/  26]	Loss 0.178 (0.226)	test_acc   0.93 (  0.91)	test_minacc   0.65 (  0.68)	test_majacc   0.98 (  0.95)	Loss_d 0.178 (0.226)	test_acc_d   0.93 (  0.91)	test_minacc_d   0.65 (  0.68)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.81 (  0.78)
Test: [  26/  26]	Loss 0.158 (0.216)	test_acc   0.96 (  0.91)	test_minacc   0.83 (  0.70)	test_majacc   0.98 (  0.95)	Loss_d 0.158 (0.216)	test_acc_d   0.96 (  0.91)	test_minacc_d   0.83 (  0.70)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.78 (  0.78)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.43it/s]
Test: [  0/  1]	Loss 2.046 (2.046)	test_acc   0.47 (  0.47)	test_minacc   0.41 (  0.41)	test_majacc   0.95 (  0.95)	Loss_d 2.046 (2.046)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.35 (  0.35)
Test: [  1/  1]	Loss 2.046 (2.046)	test_acc   0.47 (  0.47)	test_minacc   0.41 (  0.41)	test_majacc   0.95 (  0.95)	Loss_d 2.046 (2.046)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.35 (  0.35)
Overall Timing[ 14/  1]	epoch_time 0.0359 (0.0374)	validation_time 0.0003 (0.0008)	train_time 0.0355 (0.0365)
record: (train_acc, test_acc) (0.901200020134449, 0.4960000216960907)
last accs (train_acc, test_acc) (0.9120000210404396, 0.46800002455711365)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 19%|#9        | 5/26 [00:00<00:00, 22.77it/s] 35%|###4      | 9/26 [00:00<00:00, 29.02it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.09it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.50it/s] 92%|#########2| 24/26 [00:00<00:00, 38.03it/s]100%|##########| 26/26 [00:00<00:00, 31.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.003 (0.092)	train_nll   0.37 (  0.26)	train_penalty   0.00 (  0.01)	weight_norm  24.50 ( 24.37)	train_acc   0.82 (  0.89)	train_minacc   0.83 (  0.68)	train_majacc   0.81 (  0.92)	train_corr   0.00 (  0.00)	l1 7.3937 (8.0317)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.99it/s] 27%|##6       | 7/26 [00:00<00:00, 34.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.66it/s] 50%|#####     | 13/26 [00:00<00:00, 41.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.50it/s] 96%|#########6| 25/26 [00:00<00:00, 47.79it/s]100%|##########| 26/26 [00:00<00:00, 40.07it/s]
Test: [   0/  26]	Loss 0.370 (0.370)	test_acc   0.82 (  0.82)	test_minacc   0.81 (  0.81)	test_majacc   0.82 (  0.82)	Loss_d 0.370 (0.370)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.58 (  0.58)
Test: [  10/  26]	Loss 0.357 (0.336)	test_acc   0.82 (  0.84)	test_minacc   0.89 (  0.88)	test_majacc   0.80 (  0.83)	Loss_d 0.357 (0.336)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.89 (  0.88)	test_majacc_d   0.80 (  0.83)	test_corr_d   0.51 (  0.56)
Test: [  20/  26]	Loss 0.348 (0.344)	test_acc   0.83 (  0.83)	test_minacc   0.86 (  0.87)	test_majacc   0.83 (  0.82)	Loss_d 0.348 (0.344)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.86 (  0.87)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.54 (  0.55)
Test: [  26/  26]	Loss 0.357 (0.349)	test_acc   0.82 (  0.83)	test_minacc   0.80 (  0.86)	test_majacc   0.82 (  0.82)	Loss_d 0.357 (0.349)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.80 (  0.86)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.55 (  0.55)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.54it/s]
Test: [  0/  1]	Loss 0.910 (0.910)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.79 (  0.79)	Loss_d 0.910 (0.910)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.79 (  0.79)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.910 (0.910)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.79 (  0.79)	Loss_d 0.910 (0.910)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.79 (  0.79)	test_corr_d  -0.12 ( -0.12)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0357 (0.0373)	validation_time 0.0006 (0.0008)	train_time 0.0351 (0.0364)
record: (train_acc, test_acc) (0.8296000272631645, 0.6620000600814819)
last accs (train_acc, test_acc) (0.8296000272631645, 0.6620000600814819)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.23it/s] 19%|#9        | 5/26 [00:00<00:01, 18.90it/s] 35%|###4      | 9/26 [00:00<00:00, 26.20it/s] 50%|#####     | 13/26 [00:00<00:00, 30.45it/s] 69%|######9   | 18/26 [00:00<00:00, 34.32it/s] 85%|########4 | 22/26 [00:00<00:00, 35.83it/s]100%|##########| 26/26 [00:00<00:00, 28.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.001 (0.003)	train_nll   0.36 (  0.36)	train_penalty   0.00 (  0.00)	weight_norm  24.57 ( 24.55)	train_acc   0.82 (  0.82)	train_minacc   0.71 (  0.81)	train_majacc   0.84 (  0.82)	train_corr   0.00 (  0.00)	l1 7.0599 (6.9641)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.45it/s] 23%|##3       | 6/26 [00:00<00:00, 32.38it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.38it/s] 46%|####6     | 12/26 [00:00<00:00, 42.33it/s] 65%|######5   | 17/26 [00:00<00:00, 42.56it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.56it/s] 88%|########8 | 23/26 [00:00<00:00, 47.77it/s]100%|##########| 26/26 [00:00<00:00, 39.05it/s]
Test: [   0/  26]	Loss 0.393 (0.393)	test_acc   0.80 (  0.80)	test_minacc   0.75 (  0.75)	test_majacc   0.80 (  0.80)	Loss_d 0.393 (0.393)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.60 (  0.60)
Test: [  10/  26]	Loss 0.348 (0.370)	test_acc   0.82 (  0.81)	test_minacc   0.82 (  0.79)	test_majacc   0.82 (  0.81)	Loss_d 0.348 (0.370)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.82 (  0.79)	test_majacc_d   0.82 (  0.81)	test_corr_d   0.59 (  0.59)
Test: [  20/  26]	Loss 0.380 (0.380)	test_acc   0.81 (  0.80)	test_minacc   0.76 (  0.77)	test_majacc   0.82 (  0.81)	Loss_d 0.380 (0.380)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.76 (  0.77)	test_majacc_d   0.82 (  0.81)	test_corr_d   0.60 (  0.59)
Test: [  26/  26]	Loss 0.364 (0.381)	test_acc   0.82 (  0.80)	test_minacc   0.71 (  0.76)	test_majacc   0.85 (  0.81)	Loss_d 0.364 (0.381)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.71 (  0.76)	test_majacc_d   0.85 (  0.81)	test_corr_d   0.62 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.15it/s]
Test: [  0/  1]	Loss 1.128 (1.128)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 1.128 (1.128)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 1.128 (1.128)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 1.128 (1.128)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.01 (  0.01)
Overall Timing[ 16/  1]	epoch_time 0.0350 (0.0372)	validation_time 0.0003 (0.0008)	train_time 0.0346 (0.0363)
record: (train_acc, test_acc) (0.8296000272631645, 0.6620000600814819)
last accs (train_acc, test_acc) (0.8032000292539596, 0.6300000548362732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.72it/s] 19%|#9        | 5/26 [00:00<00:00, 26.19it/s] 35%|###4      | 9/26 [00:00<00:00, 31.97it/s] 50%|#####     | 13/26 [00:00<00:00, 34.94it/s] 65%|######5   | 17/26 [00:00<00:00, 36.73it/s] 81%|########  | 21/26 [00:00<00:00, 37.77it/s] 96%|#########6| 25/26 [00:00<00:00, 38.28it/s]100%|##########| 26/26 [00:00<00:00, 32.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.004 (0.002)	train_nll   0.32 (  0.36)	train_penalty   0.00 (  0.00)	weight_norm  24.59 ( 24.58)	train_acc   0.84 (  0.82)	train_minacc   0.73 (  0.79)	train_majacc   0.86 (  0.82)	train_corr   0.00 (  0.00)	l1 6.6411 (6.8135)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.33it/s] 27%|##6       | 7/26 [00:00<00:00, 37.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.82it/s] 46%|####6     | 12/26 [00:00<00:00, 42.42it/s] 65%|######5   | 17/26 [00:00<00:00, 44.88it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.88it/s] 88%|########8 | 23/26 [00:00<00:00, 49.58it/s]100%|##########| 26/26 [00:00<00:00, 40.11it/s]
Test: [   0/  26]	Loss 0.348 (0.348)	test_acc   0.82 (  0.82)	test_minacc   0.81 (  0.81)	test_majacc   0.82 (  0.82)	Loss_d 0.348 (0.348)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.339 (0.355)	test_acc   0.83 (  0.82)	test_minacc   0.80 (  0.83)	test_majacc   0.84 (  0.82)	Loss_d 0.339 (0.355)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.80 (  0.83)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.61 (  0.61)
Test: [  20/  26]	Loss 0.358 (0.359)	test_acc   0.83 (  0.81)	test_minacc   0.84 (  0.82)	test_majacc   0.83 (  0.81)	Loss_d 0.358 (0.359)	test_acc_d   0.83 (  0.81)	test_minacc_d   0.84 (  0.82)	test_majacc_d   0.83 (  0.81)	test_corr_d   0.61 (  0.60)
Test: [  26/  26]	Loss 0.328 (0.359)	test_acc   0.83 (  0.81)	test_minacc   0.73 (  0.82)	test_majacc   0.85 (  0.81)	Loss_d 0.328 (0.359)	test_acc_d   0.83 (  0.81)	test_minacc_d   0.73 (  0.82)	test_majacc_d   0.85 (  0.81)	test_corr_d   0.64 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.81it/s]
Test: [  0/  1]	Loss 1.028 (1.028)	test_acc   0.66 (  0.66)	test_minacc   0.64 (  0.64)	test_majacc   0.79 (  0.79)	Loss_d 1.028 (1.028)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 1.028 (1.028)	test_acc   0.66 (  0.66)	test_minacc   0.64 (  0.64)	test_majacc   0.79 (  0.79)	Loss_d 1.028 (1.028)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.02 (  0.02)
Overall Timing[ 17/  1]	epoch_time 0.0343 (0.0370)	validation_time 0.0004 (0.0008)	train_time 0.0338 (0.0362)
record: (train_acc, test_acc) (0.8296000272631645, 0.6620000600814819)
last accs (train_acc, test_acc) (0.8135000241994857, 0.6580000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s] 19%|#9        | 5/26 [00:00<00:00, 22.13it/s] 35%|###4      | 9/26 [00:00<00:00, 28.40it/s] 50%|#####     | 13/26 [00:00<00:00, 32.32it/s] 69%|######9   | 18/26 [00:00<00:00, 34.66it/s] 85%|########4 | 22/26 [00:00<00:00, 35.86it/s]100%|##########| 26/26 [00:00<00:00, 36.70it/s]100%|##########| 26/26 [00:00<00:00, 29.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.001)	train_nll   0.37 (  0.37)	train_penalty   0.00 (  0.00)	weight_norm  24.60 ( 24.59)	train_acc   0.81 (  0.80)	train_minacc   0.71 (  0.81)	train_majacc   0.83 (  0.80)	train_corr   0.00 (  0.00)	l1 6.7388 (6.7955)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.01it/s] 23%|##3       | 6/26 [00:00<00:00, 29.80it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.80it/s] 46%|####6     | 12/26 [00:00<00:00, 40.46it/s] 69%|######9   | 18/26 [00:00<00:00, 42.91it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.91it/s] 92%|#########2| 24/26 [00:00<00:00, 47.06it/s]100%|##########| 26/26 [00:00<00:00, 39.23it/s]
Test: [   0/  26]	Loss 0.353 (0.353)	test_acc   0.81 (  0.81)	test_minacc   0.79 (  0.79)	test_majacc   0.81 (  0.81)	Loss_d 0.353 (0.353)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.62 (  0.62)
Test: [  10/  26]	Loss 0.353 (0.355)	test_acc   0.82 (  0.81)	test_minacc   0.80 (  0.82)	test_majacc   0.82 (  0.81)	Loss_d 0.353 (0.355)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.80 (  0.82)	test_majacc_d   0.82 (  0.81)	test_corr_d   0.60 (  0.61)
Test: [  20/  26]	Loss 0.364 (0.361)	test_acc   0.83 (  0.81)	test_minacc   0.81 (  0.81)	test_majacc   0.83 (  0.81)	Loss_d 0.364 (0.361)	test_acc_d   0.83 (  0.81)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.83 (  0.81)	test_corr_d   0.61 (  0.61)
Test: [  26/  26]	Loss 0.364 (0.363)	test_acc   0.81 (  0.81)	test_minacc   0.71 (  0.81)	test_majacc   0.83 (  0.81)	Loss_d 0.364 (0.363)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.71 (  0.81)	test_majacc_d   0.83 (  0.81)	test_corr_d   0.63 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.96it/s]
Test: [  0/  1]	Loss 1.081 (1.081)	test_acc   0.66 (  0.66)	test_minacc   0.64 (  0.64)	test_majacc   0.79 (  0.79)	Loss_d 1.081 (1.081)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 1.081 (1.081)	test_acc   0.66 (  0.66)	test_minacc   0.64 (  0.64)	test_majacc   0.79 (  0.79)	Loss_d 1.081 (1.081)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.03 (  0.03)
Overall Timing[ 18/  1]	epoch_time 0.0378 (0.0371)	validation_time 0.0003 (0.0007)	train_time 0.0374 (0.0362)
record: (train_acc, test_acc) (0.8296000272631645, 0.6620000600814819)
last accs (train_acc, test_acc) (0.8083000283241272, 0.6550000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 19%|#9        | 5/26 [00:00<00:00, 22.39it/s] 35%|###4      | 9/26 [00:00<00:00, 28.21it/s] 50%|#####     | 13/26 [00:00<00:00, 31.44it/s] 65%|######5   | 17/26 [00:00<00:00, 33.97it/s] 81%|########  | 21/26 [00:00<00:00, 35.64it/s] 96%|#########6| 25/26 [00:00<00:00, 36.32it/s]100%|##########| 26/26 [00:00<00:00, 29.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.36 (  0.36)	train_penalty   0.00 (  0.00)	weight_norm  24.60 ( 24.60)	train_acc   0.82 (  0.81)	train_minacc   0.76 (  0.82)	train_majacc   0.83 (  0.81)	train_corr   0.00 (  0.00)	l1 6.7595 (6.7670)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.22it/s] 31%|###       | 8/26 [00:00<00:00, 39.84it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.84it/s] 50%|#####     | 13/26 [00:00<00:00, 39.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.53it/s] 96%|#########6| 25/26 [00:00<00:00, 46.56it/s]100%|##########| 26/26 [00:00<00:00, 39.94it/s]
Test: [   0/  26]	Loss 0.356 (0.356)	test_acc   0.81 (  0.81)	test_minacc   0.79 (  0.79)	test_majacc   0.81 (  0.81)	Loss_d 0.356 (0.356)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.62 (  0.62)
Test: [  10/  26]	Loss 0.353 (0.357)	test_acc   0.81 (  0.81)	test_minacc   0.80 (  0.82)	test_majacc   0.81 (  0.80)	Loss_d 0.353 (0.357)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.80 (  0.82)	test_majacc_d   0.81 (  0.80)	test_corr_d   0.60 (  0.60)
Test: [  20/  26]	Loss 0.365 (0.362)	test_acc   0.83 (  0.81)	test_minacc   0.86 (  0.82)	test_majacc   0.82 (  0.80)	Loss_d 0.365 (0.362)	test_acc_d   0.83 (  0.81)	test_minacc_d   0.86 (  0.82)	test_majacc_d   0.82 (  0.80)	test_corr_d   0.60 (  0.60)
Test: [  26/  26]	Loss 0.358 (0.363)	test_acc   0.82 (  0.81)	test_minacc   0.76 (  0.82)	test_majacc   0.83 (  0.81)	Loss_d 0.358 (0.363)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.76 (  0.82)	test_majacc_d   0.83 (  0.81)	test_corr_d   0.62 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.81it/s]
Test: [  0/  1]	Loss 1.084 (1.084)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.80 (  0.80)	Loss_d 1.084 (1.084)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 1.084 (1.084)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.80 (  0.80)	Loss_d 1.084 (1.084)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.01 (  0.01)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[ 19/  1]	epoch_time 0.0358 (0.0370)	validation_time 0.0004 (0.0007)	train_time 0.0354 (0.0362)
record: (train_acc, test_acc) (0.8073000251054764, 0.6700000166893005)
last accs (train_acc, test_acc) (0.8073000251054764, 0.6700000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.18it/s] 19%|#9        | 5/26 [00:00<00:00, 23.71it/s] 35%|###4      | 9/26 [00:00<00:00, 29.87it/s] 50%|#####     | 13/26 [00:00<00:00, 33.57it/s] 65%|######5   | 17/26 [00:00<00:00, 35.55it/s] 81%|########  | 21/26 [00:00<00:00, 36.04it/s] 96%|#########6| 25/26 [00:00<00:00, 33.37it/s]100%|##########| 26/26 [00:00<00:00, 30.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.36 (  0.37)	train_penalty   0.00 (  0.00)	weight_norm  24.60 ( 24.60)	train_acc   0.81 (  0.80)	train_minacc   0.76 (  0.81)	train_majacc   0.82 (  0.80)	train_corr   0.00 (  0.00)	l1 6.7102 (6.7935)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.85it/s] 27%|##6       | 7/26 [00:00<00:00, 34.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.66it/s] 46%|####6     | 12/26 [00:00<00:00, 39.36it/s] 69%|######9   | 18/26 [00:00<00:00, 42.09it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.09it/s] 92%|#########2| 24/26 [00:00<00:00, 46.83it/s]100%|##########| 26/26 [00:00<00:00, 39.20it/s]
Test: [   0/  26]	Loss 0.352 (0.352)	test_acc   0.81 (  0.81)	test_minacc   0.79 (  0.79)	test_majacc   0.81 (  0.81)	Loss_d 0.352 (0.352)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.352 (0.355)	test_acc   0.82 (  0.81)	test_minacc   0.82 (  0.82)	test_majacc   0.81 (  0.81)	Loss_d 0.352 (0.355)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.61 (  0.61)
Test: [  20/  26]	Loss 0.365 (0.359)	test_acc   0.83 (  0.81)	test_minacc   0.87 (  0.83)	test_majacc   0.82 (  0.81)	Loss_d 0.365 (0.359)	test_acc_d   0.83 (  0.81)	test_minacc_d   0.87 (  0.83)	test_majacc_d   0.82 (  0.81)	test_corr_d   0.61 (  0.61)
Test: [  26/  26]	Loss 0.360 (0.361)	test_acc   0.81 (  0.81)	test_minacc   0.76 (  0.82)	test_majacc   0.82 (  0.81)	Loss_d 0.360 (0.361)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.76 (  0.82)	test_majacc_d   0.82 (  0.81)	test_corr_d   0.63 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.15it/s]
Test: [  0/  1]	Loss 1.072 (1.072)	test_acc   0.67 (  0.67)	test_minacc   0.65 (  0.65)	test_majacc   0.79 (  0.79)	Loss_d 1.072 (1.072)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 1.072 (1.072)	test_acc   0.67 (  0.67)	test_minacc   0.65 (  0.65)	test_majacc   0.79 (  0.79)	Loss_d 1.072 (1.072)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.03 (  0.03)
Overall Timing[ 20/  1]	epoch_time 0.0341 (0.0369)	validation_time 0.0004 (0.0007)	train_time 0.0337 (0.0361)
record: (train_acc, test_acc) (0.8073000251054764, 0.6700000166893005)
last accs (train_acc, test_acc) (0.8077000237107277, 0.6650000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.61it/s] 19%|#9        | 5/26 [00:00<00:00, 24.68it/s] 35%|###4      | 9/26 [00:00<00:00, 30.17it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.09it/s] 92%|#########2| 24/26 [00:00<00:00, 38.66it/s]100%|##########| 26/26 [00:00<00:00, 32.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.36 (  0.37)	train_penalty   0.00 (  0.00)	weight_norm  24.60 ( 24.60)	train_acc   0.81 (  0.80)	train_minacc   0.76 (  0.83)	train_majacc   0.82 (  0.80)	train_corr   0.00 (  0.00)	l1 6.7307 (6.7972)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.88it/s] 31%|###       | 8/26 [00:00<00:00, 40.53it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.53it/s] 50%|#####     | 13/26 [00:00<00:00, 42.73it/s] 69%|######9   | 18/26 [00:00<00:00, 44.36it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.36it/s] 92%|#########2| 24/26 [00:00<00:00, 48.75it/s]100%|##########| 26/26 [00:00<00:00, 41.62it/s]
Test: [   0/  26]	Loss 0.351 (0.351)	test_acc   0.81 (  0.81)	test_minacc   0.79 (  0.79)	test_majacc   0.81 (  0.81)	Loss_d 0.351 (0.351)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.64 (  0.64)
Test: [  10/  26]	Loss 0.347 (0.351)	test_acc   0.82 (  0.81)	test_minacc   0.82 (  0.82)	test_majacc   0.81 (  0.81)	Loss_d 0.347 (0.351)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.61 (  0.62)
Test: [  20/  26]	Loss 0.360 (0.354)	test_acc   0.83 (  0.81)	test_minacc   0.86 (  0.83)	test_majacc   0.82 (  0.81)	Loss_d 0.360 (0.354)	test_acc_d   0.83 (  0.81)	test_minacc_d   0.86 (  0.83)	test_majacc_d   0.82 (  0.81)	test_corr_d   0.61 (  0.61)
Test: [  26/  26]	Loss 0.362 (0.356)	test_acc   0.81 (  0.81)	test_minacc   0.76 (  0.82)	test_majacc   0.82 (  0.81)	Loss_d 0.362 (0.356)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.76 (  0.82)	test_majacc_d   0.82 (  0.81)	test_corr_d   0.63 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.44it/s]
Test: [  0/  1]	Loss 1.090 (1.090)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.79 (  0.79)	Loss_d 1.090 (1.090)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 1.090 (1.090)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.79 (  0.79)	Loss_d 1.090 (1.090)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.04 (  0.04)
Overall Timing[ 21/  1]	epoch_time 0.0357 (0.0368)	validation_time 0.0004 (0.0007)	train_time 0.0354 (0.0360)
record: (train_acc, test_acc) (0.8073000251054764, 0.6700000166893005)
last accs (train_acc, test_acc) (0.8110000233054161, 0.6600000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.42it/s] 19%|#9        | 5/26 [00:00<00:00, 26.07it/s] 38%|###8      | 10/26 [00:00<00:00, 33.72it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.28it/s] 69%|######9   | 18/26 [00:00<00:00, 36.15it/s] 85%|########4 | 22/26 [00:00<00:00, 37.36it/s]100%|##########| 26/26 [00:00<00:00, 32.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.36 (  0.36)	train_penalty   0.00 (  0.00)	weight_norm  24.60 ( 24.60)	train_acc   0.83 (  0.81)	train_minacc   0.78 (  0.83)	train_majacc   0.84 (  0.80)	train_corr   0.00 (  0.00)	l1 6.7297 (6.8180)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.93it/s] 23%|##3       | 6/26 [00:00<00:00, 31.69it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.69it/s] 46%|####6     | 12/26 [00:00<00:00, 42.33it/s] 65%|######5   | 17/26 [00:00<00:00, 43.18it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.18it/s] 88%|########8 | 23/26 [00:00<00:00, 47.81it/s]100%|##########| 26/26 [00:00<00:00, 39.48it/s]
Test: [   0/  26]	Loss 0.347 (0.347)	test_acc   0.80 (  0.80)	test_minacc   0.77 (  0.77)	test_majacc   0.80 (  0.80)	Loss_d 0.347 (0.347)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.64 (  0.64)
Test: [  10/  26]	Loss 0.339 (0.346)	test_acc   0.83 (  0.81)	test_minacc   0.83 (  0.82)	test_majacc   0.82 (  0.81)	Loss_d 0.339 (0.346)	test_acc_d   0.83 (  0.81)	test_minacc_d   0.83 (  0.82)	test_majacc_d   0.82 (  0.81)	test_corr_d   0.62 (  0.62)
Test: [  20/  26]	Loss 0.354 (0.347)	test_acc   0.83 (  0.82)	test_minacc   0.86 (  0.83)	test_majacc   0.83 (  0.82)	Loss_d 0.354 (0.347)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.86 (  0.83)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.62 (  0.62)
Test: [  26/  26]	Loss 0.357 (0.350)	test_acc   0.82 (  0.82)	test_minacc   0.78 (  0.82)	test_majacc   0.83 (  0.82)	Loss_d 0.357 (0.350)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.78 (  0.82)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.63 (  0.62)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.24it/s]
Test: [  0/  1]	Loss 1.100 (1.100)	test_acc   0.66 (  0.66)	test_minacc   0.64 (  0.64)	test_majacc   0.79 (  0.79)	Loss_d 1.100 (1.100)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 1.100 (1.100)	test_acc   0.66 (  0.66)	test_minacc   0.64 (  0.64)	test_majacc   0.79 (  0.79)	Loss_d 1.100 (1.100)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.05 (  0.05)
Overall Timing[ 22/  1]	epoch_time 0.0361 (0.0368)	validation_time 0.0003 (0.0007)	train_time 0.0358 (0.0360)
record: (train_acc, test_acc) (0.8073000251054764, 0.6700000166893005)
last accs (train_acc, test_acc) (0.8170000261068344, 0.6570000052452087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.37it/s] 27%|##6       | 7/26 [00:00<00:00, 30.54it/s] 42%|####2     | 11/26 [00:00<00:00, 34.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.30it/s] 88%|########8 | 23/26 [00:00<00:00, 37.29it/s]100%|##########| 26/26 [00:00<00:00, 33.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 6.757080078125
set z to 6.4192260742187495
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.35 (  0.36)	train_penalty   0.00 (  0.00)	weight_norm  24.60 ( 24.60)	train_acc   0.82 (  0.81)	train_minacc   0.78 (  0.83)	train_majacc   0.83 (  0.81)	train_corr   0.00 (  0.00)	l1 6.7237 (6.8465)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.65it/s] 23%|##3       | 6/26 [00:00<00:00, 29.55it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.55it/s] 46%|####6     | 12/26 [00:00<00:00, 37.51it/s] 69%|######9   | 18/26 [00:00<00:00, 44.90it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.90it/s] 92%|#########2| 24/26 [00:00<00:00, 46.20it/s]100%|##########| 26/26 [00:00<00:00, 38.50it/s]
Test: [   0/  26]	Loss 0.343 (0.343)	test_acc   0.80 (  0.80)	test_minacc   0.77 (  0.77)	test_majacc   0.80 (  0.80)	Loss_d 0.343 (0.343)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.332 (0.340)	test_acc   0.83 (  0.82)	test_minacc   0.83 (  0.82)	test_majacc   0.83 (  0.81)	Loss_d 0.332 (0.340)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.83 (  0.82)	test_majacc_d   0.83 (  0.81)	test_corr_d   0.63 (  0.63)
Test: [  20/  26]	Loss 0.346 (0.339)	test_acc   0.83 (  0.82)	test_minacc   0.86 (  0.83)	test_majacc   0.83 (  0.82)	Loss_d 0.346 (0.339)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.86 (  0.83)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.63 (  0.63)
Test: [  26/  26]	Loss 0.354 (0.342)	test_acc   0.82 (  0.82)	test_minacc   0.78 (  0.83)	test_majacc   0.83 (  0.82)	Loss_d 0.354 (0.342)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.78 (  0.83)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.64 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.05it/s]
Test: [  0/  1]	Loss 1.114 (1.114)	test_acc   0.65 (  0.65)	test_minacc   0.63 (  0.63)	test_majacc   0.79 (  0.79)	Loss_d 1.114 (1.114)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 1.114 (1.114)	test_acc   0.65 (  0.65)	test_minacc   0.63 (  0.63)	test_majacc   0.79 (  0.79)	Loss_d 1.114 (1.114)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.07 (  0.07)
Overall Timing[ 23/  1]	epoch_time 0.0361 (0.0368)	validation_time 0.0004 (0.0007)	train_time 0.0357 (0.0360)
record: (train_acc, test_acc) (0.8073000251054764, 0.6700000166893005)
last accs (train_acc, test_acc) (0.8212000235319138, 0.6490000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 19%|#9        | 5/26 [00:00<00:00, 23.19it/s] 35%|###4      | 9/26 [00:00<00:00, 29.25it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.28it/s] 92%|#########2| 24/26 [00:00<00:00, 37.94it/s]100%|##########| 26/26 [00:00<00:00, 31.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.35 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  24.60 ( 24.60)	train_acc   0.82 (  0.81)	train_minacc   0.76 (  0.83)	train_majacc   0.84 (  0.81)	train_corr   0.00 (  0.00)	l1 6.7356 (6.8741)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.63it/s] 27%|##6       | 7/26 [00:00<00:00, 32.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.76it/s] 50%|#####     | 13/26 [00:00<00:00, 38.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.56it/s] 96%|#########6| 25/26 [00:00<00:00, 46.60it/s]100%|##########| 26/26 [00:00<00:00, 38.55it/s]
Test: [   0/  26]	Loss 0.340 (0.340)	test_acc   0.80 (  0.80)	test_minacc   0.77 (  0.77)	test_majacc   0.80 (  0.80)	Loss_d 0.340 (0.340)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.324 (0.335)	test_acc   0.83 (  0.82)	test_minacc   0.85 (  0.82)	test_majacc   0.83 (  0.82)	Loss_d 0.324 (0.335)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.85 (  0.82)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.64 (  0.64)
Test: [  20/  26]	Loss 0.336 (0.330)	test_acc   0.84 (  0.83)	test_minacc   0.86 (  0.83)	test_majacc   0.83 (  0.83)	Loss_d 0.336 (0.330)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.86 (  0.83)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.64 (  0.65)
Test: [  26/  26]	Loss 0.351 (0.334)	test_acc   0.82 (  0.83)	test_minacc   0.76 (  0.82)	test_majacc   0.83 (  0.83)	Loss_d 0.351 (0.334)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.76 (  0.82)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.65 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.05it/s]
Test: [  0/  1]	Loss 1.136 (1.136)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.79 (  0.79)	Loss_d 1.136 (1.136)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 1.136 (1.136)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.79 (  0.79)	Loss_d 1.136 (1.136)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.09 (  0.09)
Overall Timing[ 24/  1]	epoch_time 0.0349 (0.0367)	validation_time 0.0003 (0.0006)	train_time 0.0346 (0.0360)
record: (train_acc, test_acc) (0.8073000251054764, 0.6700000166893005)
last accs (train_acc, test_acc) (0.8263000323176384, 0.6390000581741333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 19%|#9        | 5/26 [00:00<00:00, 23.51it/s] 35%|###4      | 9/26 [00:00<00:00, 29.54it/s] 50%|#####     | 13/26 [00:00<00:00, 33.17it/s] 65%|######5   | 17/26 [00:00<00:00, 35.45it/s] 85%|########4 | 22/26 [00:00<00:00, 37.58it/s]100%|##########| 26/26 [00:00<00:00, 37.92it/s]100%|##########| 26/26 [00:00<00:00, 31.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.35 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  24.61 ( 24.61)	train_acc   0.82 (  0.82)	train_minacc   0.76 (  0.83)	train_majacc   0.83 (  0.81)	train_corr   0.00 (  0.00)	l1 6.7495 (6.9026)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.46it/s] 27%|##6       | 7/26 [00:00<00:00, 30.72it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.72it/s] 50%|#####     | 13/26 [00:00<00:00, 39.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.45it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.45it/s] 96%|#########6| 25/26 [00:00<00:00, 46.45it/s]100%|##########| 26/26 [00:00<00:00, 37.82it/s]
Test: [   0/  26]	Loss 0.337 (0.337)	test_acc   0.81 (  0.81)	test_minacc   0.77 (  0.77)	test_majacc   0.81 (  0.81)	Loss_d 0.337 (0.337)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.317 (0.331)	test_acc   0.84 (  0.82)	test_minacc   0.83 (  0.82)	test_majacc   0.84 (  0.82)	Loss_d 0.317 (0.331)	test_acc_d   0.84 (  0.82)	test_minacc_d   0.83 (  0.82)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.65 (  0.65)
Test: [  20/  26]	Loss 0.323 (0.323)	test_acc   0.85 (  0.83)	test_minacc   0.86 (  0.82)	test_majacc   0.85 (  0.83)	Loss_d 0.323 (0.323)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.86 (  0.82)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.66 (  0.66)
Test: [  26/  26]	Loss 0.345 (0.326)	test_acc   0.82 (  0.83)	test_minacc   0.76 (  0.82)	test_majacc   0.83 (  0.83)	Loss_d 0.345 (0.326)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.76 (  0.82)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.66 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.25it/s]
Test: [  0/  1]	Loss 1.161 (1.161)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.79 (  0.79)	Loss_d 1.161 (1.161)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.161 (1.161)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.79 (  0.79)	Loss_d 1.161 (1.161)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.10 (  0.10)
Overall Timing[ 25/  1]	epoch_time 0.0355 (0.0366)	validation_time 0.0003 (0.0006)	train_time 0.0352 (0.0359)
record: (train_acc, test_acc) (0.8073000251054764, 0.6700000166893005)
last accs (train_acc, test_acc) (0.8308000285625458, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.64it/s] 19%|#9        | 5/26 [00:00<00:00, 26.58it/s] 35%|###4      | 9/26 [00:00<00:00, 31.56it/s] 50%|#####     | 13/26 [00:00<00:00, 34.47it/s] 65%|######5   | 17/26 [00:00<00:00, 36.41it/s] 81%|########  | 21/26 [00:00<00:00, 37.54it/s] 96%|#########6| 25/26 [00:00<00:00, 37.75it/s]100%|##########| 26/26 [00:00<00:00, 32.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.34 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  24.61 ( 24.61)	train_acc   0.82 (  0.82)	train_minacc   0.76 (  0.83)	train_majacc   0.83 (  0.82)	train_corr   0.00 (  0.00)	l1 6.7823 (6.9362)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.45it/s] 19%|#9        | 5/26 [00:00<00:00, 26.49it/s]                                               19%|#9        | 5/26 [00:00<00:00, 26.49it/s] 42%|####2     | 11/26 [00:00<00:00, 39.57it/s] 62%|######1   | 16/26 [00:00<00:00, 42.15it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.15it/s] 85%|########4 | 22/26 [00:00<00:00, 47.63it/s]100%|##########| 26/26 [00:00<00:00, 38.95it/s]
Test: [   0/  26]	Loss 0.333 (0.333)	test_acc   0.81 (  0.81)	test_minacc   0.77 (  0.77)	test_majacc   0.81 (  0.81)	Loss_d 0.333 (0.333)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.311 (0.328)	test_acc   0.84 (  0.82)	test_minacc   0.83 (  0.81)	test_majacc   0.85 (  0.82)	Loss_d 0.311 (0.328)	test_acc_d   0.84 (  0.82)	test_minacc_d   0.83 (  0.81)	test_majacc_d   0.85 (  0.82)	test_corr_d   0.66 (  0.66)
Test: [  20/  26]	Loss 0.308 (0.316)	test_acc   0.86 (  0.84)	test_minacc   0.84 (  0.82)	test_majacc   0.86 (  0.84)	Loss_d 0.308 (0.316)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.84 (  0.82)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.67 (  0.66)
Test: [  26/  26]	Loss 0.339 (0.319)	test_acc   0.82 (  0.83)	test_minacc   0.78 (  0.82)	test_majacc   0.83 (  0.84)	Loss_d 0.339 (0.319)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.78 (  0.82)	test_majacc_d   0.83 (  0.84)	test_corr_d   0.66 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.57it/s]
Test: [  0/  1]	Loss 1.195 (1.195)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.81 (  0.81)	Loss_d 1.195 (1.195)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 1.195 (1.195)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.81 (  0.81)	Loss_d 1.195 (1.195)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.11 (  0.11)
Overall Timing[ 26/  1]	epoch_time 0.0351 (0.0366)	validation_time 0.0004 (0.0006)	train_time 0.0347 (0.0359)
record: (train_acc, test_acc) (0.8073000251054764, 0.6700000166893005)
last accs (train_acc, test_acc) (0.8348000227212906, 0.6220000386238098)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 19%|#9        | 5/26 [00:00<00:01, 20.69it/s] 35%|###4      | 9/26 [00:00<00:00, 27.91it/s] 50%|#####     | 13/26 [00:00<00:00, 31.12it/s] 65%|######5   | 17/26 [00:00<00:00, 33.66it/s] 81%|########  | 21/26 [00:00<00:00, 33.10it/s] 96%|#########6| 25/26 [00:00<00:00, 35.12it/s]100%|##########| 26/26 [00:00<00:00, 28.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.34 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  24.62 ( 24.61)	train_acc   0.82 (  0.82)	train_minacc   0.78 (  0.83)	train_majacc   0.83 (  0.82)	train_corr   0.00 (  0.00)	l1 6.9009 (6.9808)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 27%|##6       | 7/26 [00:00<00:00, 36.85it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.85it/s] 46%|####6     | 12/26 [00:00<00:00, 41.04it/s] 65%|######5   | 17/26 [00:00<00:00, 43.34it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.34it/s] 88%|########8 | 23/26 [00:00<00:00, 48.47it/s]100%|##########| 26/26 [00:00<00:00, 39.57it/s]
Test: [   0/  26]	Loss 0.329 (0.329)	test_acc   0.81 (  0.81)	test_minacc   0.75 (  0.75)	test_majacc   0.82 (  0.82)	Loss_d 0.329 (0.329)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.309 (0.329)	test_acc   0.84 (  0.82)	test_minacc   0.83 (  0.80)	test_majacc   0.84 (  0.82)	Loss_d 0.309 (0.329)	test_acc_d   0.84 (  0.82)	test_minacc_d   0.83 (  0.80)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.66 (  0.66)
Test: [  20/  26]	Loss 0.289 (0.311)	test_acc   0.87 (  0.84)	test_minacc   0.87 (  0.83)	test_majacc   0.87 (  0.84)	Loss_d 0.289 (0.311)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.87 (  0.83)	test_majacc_d   0.87 (  0.84)	test_corr_d   0.68 (  0.67)
Test: [  26/  26]	Loss 0.331 (0.312)	test_acc   0.83 (  0.84)	test_minacc   0.78 (  0.83)	test_majacc   0.84 (  0.84)	Loss_d 0.331 (0.312)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.78 (  0.83)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.67 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.97it/s]
Test: [  0/  1]	Loss 1.247 (1.247)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.78 (  0.78)	Loss_d 1.247 (1.247)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 1.247 (1.247)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.78 (  0.78)	Loss_d 1.247 (1.247)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.11 (  0.11)
Overall Timing[ 27/  1]	epoch_time 0.0363 (0.0366)	validation_time 0.0004 (0.0006)	train_time 0.0358 (0.0359)
record: (train_acc, test_acc) (0.8073000251054764, 0.6700000166893005)
last accs (train_acc, test_acc) (0.8366000192165375, 0.6210000514984131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.77it/s] 19%|#9        | 5/26 [00:00<00:00, 24.22it/s] 35%|###4      | 9/26 [00:00<00:00, 28.47it/s] 50%|#####     | 13/26 [00:00<00:00, 30.90it/s] 65%|######5   | 17/26 [00:00<00:00, 32.68it/s] 81%|########  | 21/26 [00:00<00:00, 33.91it/s] 96%|#########6| 25/26 [00:00<00:00, 34.82it/s]100%|##########| 26/26 [00:00<00:00, 29.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.001 (0.001)	train_nll   0.33 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  24.63 ( 24.62)	train_acc   0.82 (  0.83)	train_minacc   0.80 (  0.83)	train_majacc   0.83 (  0.83)	train_corr   0.00 (  0.00)	l1 7.1558 (7.0501)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.99it/s] 27%|##6       | 7/26 [00:00<00:00, 37.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.08it/s] 50%|#####     | 13/26 [00:00<00:00, 43.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.03it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.03it/s] 96%|#########6| 25/26 [00:00<00:00, 48.32it/s]100%|##########| 26/26 [00:00<00:00, 41.39it/s]
Test: [   0/  26]	Loss 0.325 (0.325)	test_acc   0.82 (  0.82)	test_minacc   0.77 (  0.77)	test_majacc   0.83 (  0.83)	Loss_d 0.325 (0.325)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.319 (0.334)	test_acc   0.82 (  0.81)	test_minacc   0.82 (  0.79)	test_majacc   0.82 (  0.81)	Loss_d 0.319 (0.334)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.82 (  0.79)	test_majacc_d   0.82 (  0.81)	test_corr_d   0.65 (  0.65)
Test: [  20/  26]	Loss 0.267 (0.311)	test_acc   0.89 (  0.83)	test_minacc   0.89 (  0.82)	test_majacc   0.89 (  0.84)	Loss_d 0.267 (0.311)	test_acc_d   0.89 (  0.83)	test_minacc_d   0.89 (  0.82)	test_majacc_d   0.89 (  0.84)	test_corr_d   0.69 (  0.66)
Test: [  26/  26]	Loss 0.317 (0.309)	test_acc   0.84 (  0.84)	test_minacc   0.78 (  0.83)	test_majacc   0.85 (  0.84)	Loss_d 0.317 (0.309)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.78 (  0.83)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.67 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.44it/s]
Test: [  0/  1]	Loss 1.337 (1.337)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 1.337 (1.337)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 1.337 (1.337)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 1.337 (1.337)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.09 (  0.09)
Overall Timing[ 28/  1]	epoch_time 0.0362 (0.0366)	validation_time 0.0004 (0.0006)	train_time 0.0358 (0.0359)
record: (train_acc, test_acc) (0.8073000251054764, 0.6700000166893005)
last accs (train_acc, test_acc) (0.8365000254511833, 0.6240000128746033)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.34it/s] 23%|##3       | 6/26 [00:00<00:00, 27.77it/s] 38%|###8      | 10/26 [00:00<00:00, 31.50it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.39it/s] 92%|#########2| 24/26 [00:00<00:00, 38.01it/s]100%|##########| 26/26 [00:00<00:00, 32.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.003 (0.001)	train_nll   0.33 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  24.64 ( 24.63)	train_acc   0.84 (  0.84)	train_minacc   0.83 (  0.83)	train_majacc   0.84 (  0.85)	train_corr   0.00 (  0.00)	l1 7.6954 (7.1359)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.24it/s] 31%|###       | 8/26 [00:00<00:00, 40.00it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.00it/s] 50%|#####     | 13/26 [00:00<00:00, 43.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.59it/s] 96%|#########6| 25/26 [00:00<00:00, 48.29it/s]100%|##########| 26/26 [00:00<00:00, 41.35it/s]
Test: [   0/  26]	Loss 0.330 (0.330)	test_acc   0.82 (  0.82)	test_minacc   0.81 (  0.81)	test_majacc   0.83 (  0.83)	Loss_d 0.330 (0.330)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.352 (0.357)	test_acc   0.82 (  0.81)	test_minacc   0.82 (  0.80)	test_majacc   0.81 (  0.81)	Loss_d 0.352 (0.357)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.82 (  0.80)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.61 (  0.62)
Test: [  20/  26]	Loss 0.257 (0.330)	test_acc   0.89 (  0.83)	test_minacc   0.89 (  0.82)	test_majacc   0.89 (  0.83)	Loss_d 0.257 (0.330)	test_acc_d   0.89 (  0.83)	test_minacc_d   0.89 (  0.82)	test_majacc_d   0.89 (  0.83)	test_corr_d   0.67 (  0.63)
Test: [  26/  26]	Loss 0.307 (0.322)	test_acc   0.85 (  0.83)	test_minacc   0.83 (  0.83)	test_majacc   0.86 (  0.83)	Loss_d 0.307 (0.322)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.86 (  0.83)	test_corr_d   0.64 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.18it/s]
Test: [  0/  1]	Loss 1.455 (1.455)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.77 (  0.77)	Loss_d 1.455 (1.455)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 1.455 (1.455)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.77 (  0.77)	Loss_d 1.455 (1.455)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 29/  1]	epoch_time 0.0355 (0.0365)	validation_time 0.0003 (0.0006)	train_time 0.0351 (0.0359)
record: (train_acc, test_acc) (0.8073000251054764, 0.6700000166893005)
last accs (train_acc, test_acc) (0.8321000228524208, 0.6490000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.99it/s] 19%|#9        | 5/26 [00:00<00:00, 24.21it/s] 35%|###4      | 9/26 [00:00<00:00, 30.42it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.02it/s] 92%|#########2| 24/26 [00:00<00:00, 38.02it/s]100%|##########| 26/26 [00:00<00:00, 31.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.001 (0.002)	train_nll   0.26 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.67 ( 24.65)	train_acc   0.87 (  0.87)	train_minacc   0.80 (  0.82)	train_majacc   0.89 (  0.88)	train_corr   0.00 (  0.00)	l1 8.0926 (7.1782)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.53it/s] 35%|###4      | 9/26 [00:00<00:00, 40.16it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.16it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.49it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.49it/s] 81%|########  | 21/26 [00:00<00:00, 47.05it/s]100%|##########| 26/26 [00:00<00:00, 41.72it/s]
Test: [   0/  26]	Loss 0.277 (0.277)	test_acc   0.85 (  0.85)	test_minacc   0.81 (  0.81)	test_majacc   0.86 (  0.86)	Loss_d 0.277 (0.277)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.323 (0.314)	test_acc   0.83 (  0.84)	test_minacc   0.77 (  0.81)	test_majacc   0.84 (  0.84)	Loss_d 0.323 (0.314)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.77 (  0.81)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.65 (  0.66)
Test: [  20/  26]	Loss 0.258 (0.305)	test_acc   0.88 (  0.84)	test_minacc   0.84 (  0.82)	test_majacc   0.89 (  0.85)	Loss_d 0.258 (0.305)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.84 (  0.82)	test_majacc_d   0.89 (  0.85)	test_corr_d   0.70 (  0.67)
Test: [  26/  26]	Loss 0.261 (0.298)	test_acc   0.87 (  0.85)	test_minacc   0.80 (  0.82)	test_majacc   0.89 (  0.85)	Loss_d 0.261 (0.298)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.80 (  0.82)	test_majacc_d   0.89 (  0.85)	test_corr_d   0.68 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.06it/s]
Test: [  0/  1]	Loss 1.745 (1.745)	test_acc   0.65 (  0.65)	test_minacc   0.63 (  0.63)	test_majacc   0.84 (  0.84)	Loss_d 1.745 (1.745)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 1.745 (1.745)	test_acc   0.65 (  0.65)	test_minacc   0.63 (  0.63)	test_majacc   0.84 (  0.84)	Loss_d 1.745 (1.745)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.04 (  0.04)
Overall Timing[ 30/  1]	epoch_time 0.0353 (0.0365)	validation_time 0.0003 (0.0006)	train_time 0.0349 (0.0358)
record: (train_acc, test_acc) (0.8073000251054764, 0.6700000166893005)
last accs (train_acc, test_acc) (0.8480000214576722, 0.6540000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.61it/s] 23%|##3       | 6/26 [00:00<00:00, 25.34it/s] 42%|####2     | 11/26 [00:00<00:00, 31.95it/s] 62%|######1   | 16/26 [00:00<00:00, 35.63it/s] 81%|########  | 21/26 [00:00<00:00, 37.25it/s] 96%|#########6| 25/26 [00:00<00:00, 37.94it/s]100%|##########| 26/26 [00:00<00:00, 32.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.002)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.69 ( 24.68)	train_acc   0.84 (  0.85)	train_minacc   0.78 (  0.83)	train_majacc   0.85 (  0.86)	train_corr   0.00 (  0.00)	l1 7.4287 (7.5585)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.08it/s] 27%|##6       | 7/26 [00:00<00:00, 36.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.30it/s] 50%|#####     | 13/26 [00:00<00:00, 41.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.12it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.12it/s] 96%|#########6| 25/26 [00:00<00:00, 47.64it/s]100%|##########| 26/26 [00:00<00:00, 40.19it/s]
Test: [   0/  26]	Loss 0.310 (0.310)	test_acc   0.82 (  0.82)	test_minacc   0.88 (  0.88)	test_majacc   0.81 (  0.81)	Loss_d 0.310 (0.310)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.343 (0.317)	test_acc   0.81 (  0.82)	test_minacc   0.83 (  0.85)	test_majacc   0.80 (  0.81)	Loss_d 0.343 (0.317)	test_acc_d   0.81 (  0.82)	test_minacc_d   0.83 (  0.85)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.65 (  0.67)
Test: [  20/  26]	Loss 0.290 (0.320)	test_acc   0.84 (  0.81)	test_minacc   0.84 (  0.84)	test_majacc   0.84 (  0.81)	Loss_d 0.290 (0.320)	test_acc_d   0.84 (  0.81)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.84 (  0.81)	test_corr_d   0.70 (  0.67)
Test: [  26/  26]	Loss 0.278 (0.319)	test_acc   0.84 (  0.81)	test_minacc   0.78 (  0.84)	test_majacc   0.85 (  0.81)	Loss_d 0.278 (0.319)	test_acc_d   0.84 (  0.81)	test_minacc_d   0.78 (  0.84)	test_majacc_d   0.85 (  0.81)	test_corr_d   0.71 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.84it/s]
Test: [  0/  1]	Loss 1.691 (1.691)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.85 (  0.85)	Loss_d 1.691 (1.691)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 1.691 (1.691)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.85 (  0.85)	Loss_d 1.691 (1.691)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.21 (  0.21)
Overall Timing[ 31/  1]	epoch_time 0.0341 (0.0364)	validation_time 0.0004 (0.0006)	train_time 0.0337 (0.0358)
record: (train_acc, test_acc) (0.8073000251054764, 0.6700000166893005)
last accs (train_acc, test_acc) (0.8143000221252441, 0.6180000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.09it/s] 19%|#9        | 5/26 [00:00<00:00, 21.41it/s] 35%|###4      | 9/26 [00:00<00:00, 28.32it/s] 50%|#####     | 13/26 [00:00<00:00, 32.44it/s] 65%|######5   | 17/26 [00:00<00:00, 34.44it/s] 85%|########4 | 22/26 [00:00<00:00, 36.67it/s]100%|##########| 26/26 [00:00<00:00, 30.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.001)	train_nll   0.30 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  24.70 ( 24.70)	train_acc   0.85 (  0.83)	train_minacc   0.88 (  0.87)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 7.6404 (7.4549)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.45it/s] 35%|###4      | 9/26 [00:00<00:00, 38.00it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.00it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.58it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.58it/s] 81%|########  | 21/26 [00:00<00:00, 46.02it/s]100%|##########| 26/26 [00:00<00:00, 41.13it/s]
Test: [   0/  26]	Loss 0.288 (0.288)	test_acc   0.84 (  0.84)	test_minacc   0.88 (  0.88)	test_majacc   0.83 (  0.83)	Loss_d 0.288 (0.288)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.317 (0.293)	test_acc   0.82 (  0.83)	test_minacc   0.89 (  0.90)	test_majacc   0.80 (  0.82)	Loss_d 0.317 (0.293)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.89 (  0.90)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.63 (  0.65)
Test: [  20/  26]	Loss 0.279 (0.300)	test_acc   0.86 (  0.83)	test_minacc   0.86 (  0.88)	test_majacc   0.86 (  0.82)	Loss_d 0.279 (0.300)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.86 (  0.88)	test_majacc_d   0.86 (  0.82)	test_corr_d   0.69 (  0.66)
Test: [  26/  26]	Loss 0.304 (0.300)	test_acc   0.84 (  0.83)	test_minacc   0.88 (  0.88)	test_majacc   0.84 (  0.82)	Loss_d 0.304 (0.300)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.65 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.47it/s]
Test: [  0/  1]	Loss 1.570 (1.570)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.82 (  0.82)	Loss_d 1.570 (1.570)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 1.570 (1.570)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.82 (  0.82)	Loss_d 1.570 (1.570)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.07 (  0.07)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[ 32/  1]	epoch_time 0.0345 (0.0363)	validation_time 0.0003 (0.0006)	train_time 0.0341 (0.0357)
record: (train_acc, test_acc) (0.8292000284194946, 0.6810000538825989)
last accs (train_acc, test_acc) (0.8292000284194946, 0.6810000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.20it/s] 19%|#9        | 5/26 [00:00<00:00, 21.10it/s] 35%|###4      | 9/26 [00:00<00:00, 27.89it/s] 50%|#####     | 13/26 [00:00<00:00, 31.91it/s] 65%|######5   | 17/26 [00:00<00:00, 34.51it/s] 81%|########  | 21/26 [00:00<00:00, 36.16it/s] 96%|#########6| 25/26 [00:00<00:00, 37.11it/s]100%|##########| 26/26 [00:00<00:00, 30.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.002 (0.001)	train_nll   0.25 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.70 ( 24.70)	train_acc   0.87 (  0.84)	train_minacc   0.88 (  0.87)	train_majacc   0.87 (  0.84)	train_corr   0.00 (  0.00)	l1 7.3105 (7.5614)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.76it/s] 23%|##3       | 6/26 [00:00<00:00, 29.99it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.99it/s] 42%|####2     | 11/26 [00:00<00:00, 38.27it/s] 65%|######5   | 17/26 [00:00<00:00, 41.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.70it/s] 88%|########8 | 23/26 [00:00<00:00, 46.85it/s]100%|##########| 26/26 [00:00<00:00, 38.12it/s]
Test: [   0/  26]	Loss 0.254 (0.254)	test_acc   0.86 (  0.86)	test_minacc   0.87 (  0.87)	test_majacc   0.86 (  0.86)	Loss_d 0.254 (0.254)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.278 (0.269)	test_acc   0.84 (  0.85)	test_minacc   0.92 (  0.89)	test_majacc   0.82 (  0.84)	Loss_d 0.278 (0.269)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.92 (  0.89)	test_majacc_d   0.82 (  0.84)	test_corr_d   0.68 (  0.70)
Test: [  20/  26]	Loss 0.268 (0.274)	test_acc   0.86 (  0.85)	test_minacc   0.89 (  0.89)	test_majacc   0.85 (  0.84)	Loss_d 0.268 (0.274)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.72 (  0.70)
Test: [  26/  26]	Loss 0.272 (0.276)	test_acc   0.86 (  0.85)	test_minacc   0.88 (  0.89)	test_majacc   0.86 (  0.84)	Loss_d 0.272 (0.276)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.88 (  0.89)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.71 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.07it/s]
Test: [  0/  1]	Loss 1.507 (1.507)	test_acc   0.67 (  0.67)	test_minacc   0.65 (  0.65)	test_majacc   0.87 (  0.87)	Loss_d 1.507 (1.507)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.507 (1.507)	test_acc   0.67 (  0.67)	test_minacc   0.65 (  0.65)	test_majacc   0.87 (  0.87)	Loss_d 1.507 (1.507)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.15 (  0.15)
Overall Timing[ 33/  1]	epoch_time 0.0363 (0.0363)	validation_time 0.0004 (0.0006)	train_time 0.0358 (0.0357)
record: (train_acc, test_acc) (0.8292000284194946, 0.6810000538825989)
last accs (train_acc, test_acc) (0.8465000246167182, 0.6730000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.22it/s] 19%|#9        | 5/26 [00:00<00:00, 24.50it/s] 35%|###4      | 9/26 [00:00<00:00, 30.54it/s] 50%|#####     | 13/26 [00:00<00:00, 33.29it/s] 65%|######5   | 17/26 [00:00<00:00, 35.52it/s] 85%|########4 | 22/26 [00:00<00:00, 37.58it/s]100%|##########| 26/26 [00:00<00:00, 38.16it/s]100%|##########| 26/26 [00:00<00:00, 30.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.005 (0.001)	train_nll   0.33 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  24.71 ( 24.71)	train_acc   0.84 (  0.83)	train_minacc   0.83 (  0.88)	train_majacc   0.84 (  0.82)	train_corr   0.00 (  0.00)	l1 7.4632 (7.5459)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 15%|#5        | 4/26 [00:00<00:01, 18.54it/s] 35%|###4      | 9/26 [00:00<00:00, 30.71it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.71it/s] 58%|#####7    | 15/26 [00:00<00:00, 40.36it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.58it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.58it/s]100%|##########| 26/26 [00:00<00:00, 46.30it/s]100%|##########| 26/26 [00:00<00:00, 35.15it/s]
Test: [   0/  26]	Loss 0.265 (0.265)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.83)	test_majacc   0.84 (  0.84)	Loss_d 0.265 (0.265)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.283 (0.273)	test_acc   0.83 (  0.84)	test_minacc   0.92 (  0.89)	test_majacc   0.81 (  0.83)	Loss_d 0.283 (0.273)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.92 (  0.89)	test_majacc_d   0.81 (  0.83)	test_corr_d   0.68 (  0.71)
Test: [  20/  26]	Loss 0.276 (0.276)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.85 (  0.84)	Loss_d 0.276 (0.276)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.71 (  0.71)
Test: [  26/  26]	Loss 0.319 (0.280)	test_acc   0.85 (  0.84)	test_minacc   0.88 (  0.89)	test_majacc   0.85 (  0.83)	Loss_d 0.319 (0.280)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.88 (  0.89)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.70 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.93it/s]
Test: [  0/  1]	Loss 1.538 (1.538)	test_acc   0.67 (  0.67)	test_minacc   0.65 (  0.65)	test_majacc   0.88 (  0.88)	Loss_d 1.538 (1.538)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.538 (1.538)	test_acc   0.67 (  0.67)	test_minacc   0.65 (  0.65)	test_majacc   0.88 (  0.88)	Loss_d 1.538 (1.538)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.15 (  0.15)
Overall Timing[ 34/  1]	epoch_time 0.0358 (0.0363)	validation_time 0.0004 (0.0006)	train_time 0.0353 (0.0357)
record: (train_acc, test_acc) (0.8292000284194946, 0.6810000538825989)
last accs (train_acc, test_acc) (0.8419000315666199, 0.6730000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.05it/s] 19%|#9        | 5/26 [00:00<00:00, 25.84it/s] 35%|###4      | 9/26 [00:00<00:00, 31.25it/s] 50%|#####     | 13/26 [00:00<00:00, 33.96it/s] 65%|######5   | 17/26 [00:00<00:00, 35.84it/s] 81%|########  | 21/26 [00:00<00:00, 36.89it/s]100%|##########| 26/26 [00:00<00:00, 38.50it/s]100%|##########| 26/26 [00:00<00:00, 31.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.001)	train_nll   0.29 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  24.71 ( 24.71)	train_acc   0.85 (  0.83)	train_minacc   0.85 (  0.89)	train_majacc   0.85 (  0.82)	train_corr   0.00 (  0.00)	l1 7.3611 (7.4717)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.79it/s] 27%|##6       | 7/26 [00:00<00:00, 29.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.36it/s] 50%|#####     | 13/26 [00:00<00:00, 39.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.45it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.45it/s] 96%|#########6| 25/26 [00:00<00:00, 47.39it/s]100%|##########| 26/26 [00:00<00:00, 38.28it/s]
Test: [   0/  26]	Loss 0.306 (0.306)	test_acc   0.81 (  0.81)	test_minacc   0.83 (  0.83)	test_majacc   0.81 (  0.81)	Loss_d 0.306 (0.306)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.287 (0.294)	test_acc   0.85 (  0.83)	test_minacc   0.86 (  0.87)	test_majacc   0.85 (  0.82)	Loss_d 0.287 (0.294)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.86 (  0.87)	test_majacc_d   0.85 (  0.82)	test_corr_d   0.69 (  0.69)
Test: [  20/  26]	Loss 0.278 (0.290)	test_acc   0.86 (  0.83)	test_minacc   0.89 (  0.88)	test_majacc   0.85 (  0.83)	Loss_d 0.278 (0.290)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.89 (  0.88)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.71 (  0.70)
Test: [  26/  26]	Loss 0.291 (0.291)	test_acc   0.85 (  0.83)	test_minacc   0.85 (  0.88)	test_majacc   0.85 (  0.83)	Loss_d 0.291 (0.291)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.85 (  0.88)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.68 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.33it/s]
Test: [  0/  1]	Loss 1.526 (1.526)	test_acc   0.69 (  0.69)	test_minacc   0.67 (  0.67)	test_majacc   0.83 (  0.83)	Loss_d 1.526 (1.526)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.526 (1.526)	test_acc   0.69 (  0.69)	test_minacc   0.67 (  0.67)	test_majacc   0.83 (  0.83)	Loss_d 1.526 (1.526)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.10 (  0.10)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[ 35/  1]	epoch_time 0.0358 (0.0363)	validation_time 0.0003 (0.0006)	train_time 0.0354 (0.0357)
record: (train_acc, test_acc) (0.8331000297665596, 0.690000057220459)
last accs (train_acc, test_acc) (0.8331000297665596, 0.690000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 19%|#9        | 5/26 [00:00<00:00, 22.79it/s] 35%|###4      | 9/26 [00:00<00:00, 29.10it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.44it/s] 92%|#########2| 24/26 [00:00<00:00, 38.00it/s]100%|##########| 26/26 [00:00<00:00, 31.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.72 ( 24.72)	train_acc   0.85 (  0.83)	train_minacc   0.88 (  0.88)	train_majacc   0.84 (  0.83)	train_corr   0.00 (  0.00)	l1 7.4542 (7.4112)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 27%|##6       | 7/26 [00:00<00:00, 32.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.66it/s] 42%|####2     | 11/26 [00:00<00:00, 31.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.81it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.81it/s] 96%|#########6| 25/26 [00:00<00:00, 47.87it/s]100%|##########| 26/26 [00:00<00:00, 38.38it/s]
Test: [   0/  26]	Loss 0.295 (0.295)	test_acc   0.82 (  0.82)	test_minacc   0.88 (  0.88)	test_majacc   0.81 (  0.81)	Loss_d 0.295 (0.295)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.286 (0.289)	test_acc   0.85 (  0.83)	test_minacc   0.89 (  0.88)	test_majacc   0.84 (  0.82)	Loss_d 0.286 (0.289)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.89 (  0.88)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.67 (  0.68)
Test: [  20/  26]	Loss 0.265 (0.285)	test_acc   0.87 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.87 (  0.83)	Loss_d 0.265 (0.285)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.87 (  0.83)	test_corr_d   0.70 (  0.68)
Test: [  26/  26]	Loss 0.274 (0.286)	test_acc   0.85 (  0.84)	test_minacc   0.88 (  0.89)	test_majacc   0.84 (  0.83)	Loss_d 0.274 (0.286)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.88 (  0.89)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.01it/s]
Test: [  0/  1]	Loss 1.488 (1.488)	test_acc   0.69 (  0.69)	test_minacc   0.67 (  0.67)	test_majacc   0.84 (  0.84)	Loss_d 1.488 (1.488)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 1.488 (1.488)	test_acc   0.69 (  0.69)	test_minacc   0.67 (  0.67)	test_majacc   0.84 (  0.84)	Loss_d 1.488 (1.488)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.04 (  0.04)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[ 36/  1]	epoch_time 0.0354 (0.0363)	validation_time 0.0004 (0.0006)	train_time 0.0350 (0.0357)
record: (train_acc, test_acc) (0.8367000305056572, 0.6910000443458557)
last accs (train_acc, test_acc) (0.8367000305056572, 0.6910000443458557)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.53it/s] 19%|#9        | 5/26 [00:00<00:00, 22.81it/s] 35%|###4      | 9/26 [00:00<00:00, 28.94it/s] 50%|#####     | 13/26 [00:00<00:00, 31.83it/s] 65%|######5   | 17/26 [00:00<00:00, 33.26it/s] 81%|########  | 21/26 [00:00<00:00, 34.90it/s] 96%|#########6| 25/26 [00:00<00:00, 35.94it/s]100%|##########| 26/26 [00:00<00:00, 30.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.001 (0.000)	train_nll   0.29 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.72 ( 24.72)	train_acc   0.85 (  0.84)	train_minacc   0.88 (  0.88)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 7.5959 (7.4463)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.25it/s] 23%|##3       | 6/26 [00:00<00:00, 29.41it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.41it/s] 46%|####6     | 12/26 [00:00<00:00, 40.32it/s] 65%|######5   | 17/26 [00:00<00:00, 43.21it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.21it/s] 88%|########8 | 23/26 [00:00<00:00, 47.57it/s]100%|##########| 26/26 [00:00<00:00, 38.74it/s]
Test: [   0/  26]	Loss 0.295 (0.295)	test_acc   0.83 (  0.83)	test_minacc   0.88 (  0.88)	test_majacc   0.83 (  0.83)	Loss_d 0.295 (0.295)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.293 (0.293)	test_acc   0.84 (  0.83)	test_minacc   0.88 (  0.88)	test_majacc   0.83 (  0.82)	Loss_d 0.293 (0.293)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.83 (  0.82)	test_corr_d   0.66 (  0.67)
Test: [  20/  26]	Loss 0.264 (0.288)	test_acc   0.88 (  0.84)	test_minacc   0.89 (  0.88)	test_majacc   0.87 (  0.83)	Loss_d 0.264 (0.288)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.89 (  0.88)	test_majacc_d   0.87 (  0.83)	test_corr_d   0.70 (  0.68)
Test: [  26/  26]	Loss 0.282 (0.288)	test_acc   0.85 (  0.84)	test_minacc   0.88 (  0.89)	test_majacc   0.85 (  0.83)	Loss_d 0.282 (0.288)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.88 (  0.89)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.74it/s]
Test: [  0/  1]	Loss 1.542 (1.542)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.83 (  0.83)	Loss_d 1.542 (1.542)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 1.542 (1.542)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.83 (  0.83)	Loss_d 1.542 (1.542)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.03 (  0.03)
Overall Timing[ 37/  1]	epoch_time 0.0353 (0.0363)	validation_time 0.0004 (0.0005)	train_time 0.0349 (0.0357)
record: (train_acc, test_acc) (0.8367000305056572, 0.6910000443458557)
last accs (train_acc, test_acc) (0.8377000294923782, 0.6910000443458557)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.43it/s] 19%|#9        | 5/26 [00:00<00:00, 21.03it/s] 35%|###4      | 9/26 [00:00<00:00, 28.04it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.07it/s] 92%|#########2| 24/26 [00:00<00:00, 37.98it/s]100%|##########| 26/26 [00:00<00:00, 30.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.001 (0.000)	train_nll   0.25 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.72 ( 24.72)	train_acc   0.86 (  0.84)	train_minacc   0.90 (  0.89)	train_majacc   0.85 (  0.84)	train_corr   0.00 (  0.00)	l1 7.5800 (7.4659)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.72it/s] 27%|##6       | 7/26 [00:00<00:00, 36.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.47it/s] 50%|#####     | 13/26 [00:00<00:00, 41.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.28it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.28it/s] 96%|#########6| 25/26 [00:00<00:00, 46.68it/s]100%|##########| 26/26 [00:00<00:00, 39.78it/s]
Test: [   0/  26]	Loss 0.276 (0.276)	test_acc   0.84 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.83 (  0.83)	Loss_d 0.276 (0.276)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.288 (0.284)	test_acc   0.84 (  0.84)	test_minacc   0.91 (  0.90)	test_majacc   0.83 (  0.83)	Loss_d 0.288 (0.284)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.91 (  0.90)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.66 (  0.67)
Test: [  20/  26]	Loss 0.263 (0.284)	test_acc   0.87 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.87 (  0.83)	Loss_d 0.263 (0.284)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.87 (  0.83)	test_corr_d   0.70 (  0.68)
Test: [  26/  26]	Loss 0.252 (0.283)	test_acc   0.86 (  0.84)	test_minacc   0.90 (  0.89)	test_majacc   0.85 (  0.83)	Loss_d 0.252 (0.283)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.90 (  0.89)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.68 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.59it/s]
Test: [  0/  1]	Loss 1.500 (1.500)	test_acc   0.71 (  0.71)	test_minacc   0.69 (  0.69)	test_majacc   0.85 (  0.85)	Loss_d 1.500 (1.500)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 1.500 (1.500)	test_acc   0.71 (  0.71)	test_minacc   0.69 (  0.69)	test_majacc   0.85 (  0.85)	Loss_d 1.500 (1.500)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.01 (  0.01)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/132/checkpoints/model_best.pth
Overall Timing[ 38/  1]	epoch_time 0.0351 (0.0362)	validation_time 0.0004 (0.0005)	train_time 0.0347 (0.0356)
record: (train_acc, test_acc) (0.8418000223636627, 0.7090000510215759)
last accs (train_acc, test_acc) (0.8418000223636627, 0.7090000510215759)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 19%|#9        | 5/26 [00:00<00:00, 22.66it/s] 35%|###4      | 9/26 [00:00<00:00, 28.93it/s] 50%|#####     | 13/26 [00:00<00:00, 32.30it/s] 65%|######5   | 17/26 [00:00<00:00, 34.51it/s] 81%|########  | 21/26 [00:00<00:00, 35.85it/s] 96%|#########6| 25/26 [00:00<00:00, 36.95it/s]100%|##########| 26/26 [00:00<00:00, 30.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.72 ( 24.72)	train_acc   0.88 (  0.85)	train_minacc   0.90 (  0.89)	train_majacc   0.87 (  0.84)	train_corr   0.00 (  0.00)	l1 7.4960 (7.5620)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.52it/s] 27%|##6       | 7/26 [00:00<00:00, 37.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.29it/s] 46%|####6     | 12/26 [00:00<00:00, 42.33it/s] 65%|######5   | 17/26 [00:00<00:00, 42.80it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.80it/s] 88%|########8 | 23/26 [00:00<00:00, 47.45it/s]100%|##########| 26/26 [00:00<00:00, 39.50it/s]
Test: [   0/  26]	Loss 0.263 (0.263)	test_acc   0.86 (  0.86)	test_minacc   0.90 (  0.90)	test_majacc   0.85 (  0.85)	Loss_d 0.263 (0.263)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.276 (0.267)	test_acc   0.85 (  0.86)	test_minacc   0.91 (  0.90)	test_majacc   0.84 (  0.85)	Loss_d 0.276 (0.267)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.91 (  0.90)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.68 (  0.71)
Test: [  20/  26]	Loss 0.260 (0.270)	test_acc   0.87 (  0.85)	test_minacc   0.90 (  0.89)	test_majacc   0.87 (  0.85)	Loss_d 0.260 (0.270)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.90 (  0.89)	test_majacc_d   0.87 (  0.85)	test_corr_d   0.72 (  0.71)
Test: [  26/  26]	Loss 0.265 (0.271)	test_acc   0.87 (  0.85)	test_minacc   0.90 (  0.89)	test_majacc   0.87 (  0.84)	Loss_d 0.265 (0.271)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.90 (  0.89)	test_majacc_d   0.87 (  0.84)	test_corr_d   0.71 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.01it/s]
Test: [  0/  1]	Loss 1.542 (1.542)	test_acc   0.69 (  0.69)	test_minacc   0.67 (  0.67)	test_majacc   0.86 (  0.86)	Loss_d 1.542 (1.542)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 1.542 (1.542)	test_acc   0.69 (  0.69)	test_minacc   0.67 (  0.67)	test_majacc   0.86 (  0.86)	Loss_d 1.542 (1.542)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.08 (  0.08)
Overall Timing[ 39/  1]	epoch_time 0.0355 (0.0362)	validation_time 0.0004 (0.0005)	train_time 0.0351 (0.0356)
record: (train_acc, test_acc) (0.8418000223636627, 0.7090000510215759)
last accs (train_acc, test_acc) (0.852000028192997, 0.690000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.57it/s] 19%|#9        | 5/26 [00:00<00:01, 20.15it/s] 35%|###4      | 9/26 [00:00<00:00, 27.15it/s] 50%|#####     | 13/26 [00:00<00:00, 31.43it/s] 69%|######9   | 18/26 [00:00<00:00, 34.98it/s] 88%|########8 | 23/26 [00:00<00:00, 36.82it/s]100%|##########| 26/26 [00:00<00:00, 29.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.72 ( 24.72)	train_acc   0.87 (  0.84)	train_minacc   0.90 (  0.89)	train_majacc   0.86 (  0.83)	train_corr   0.00 (  0.00)	l1 7.4177 (7.5727)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.25it/s] 27%|##6       | 7/26 [00:00<00:00, 25.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.60it/s] 50%|#####     | 13/26 [00:00<00:00, 36.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.54it/s] 96%|#########6| 25/26 [00:00<00:00, 45.78it/s]100%|##########| 26/26 [00:00<00:00, 35.75it/s]
Test: [   0/  26]	Loss 0.276 (0.276)	test_acc   0.84 (  0.84)	test_minacc   0.87 (  0.87)	test_majacc   0.84 (  0.84)	Loss_d 0.276 (0.276)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.274 (0.280)	test_acc   0.85 (  0.84)	test_minacc   0.91 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.274 (0.280)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.91 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.69 (  0.70)
Test: [  20/  26]	Loss 0.270 (0.279)	test_acc   0.87 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.86 (  0.83)	Loss_d 0.270 (0.279)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.86 (  0.83)	test_corr_d   0.71 (  0.70)
Test: [  26/  26]	Loss 0.279 (0.282)	test_acc   0.87 (  0.84)	test_minacc   0.90 (  0.89)	test_majacc   0.86 (  0.83)	Loss_d 0.279 (0.282)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.90 (  0.89)	test_majacc_d   0.86 (  0.83)	test_corr_d   0.69 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.54it/s]
Test: [  0/  1]	Loss 1.499 (1.499)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.68)	test_majacc   0.85 (  0.85)	Loss_d 1.499 (1.499)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 1.499 (1.499)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.68)	test_majacc   0.85 (  0.85)	Loss_d 1.499 (1.499)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.08 (  0.08)
Overall Timing[ 40/  1]	epoch_time 0.0355 (0.0362)	validation_time 0.0004 (0.0005)	train_time 0.0352 (0.0356)
record: (train_acc, test_acc) (0.8418000223636627, 0.7090000510215759)
last accs (train_acc, test_acc) (0.8404000205397606, 0.6970000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.59it/s] 19%|#9        | 5/26 [00:00<00:00, 26.22it/s] 35%|###4      | 9/26 [00:00<00:00, 31.99it/s] 50%|#####     | 13/26 [00:00<00:00, 33.90it/s] 69%|######9   | 18/26 [00:00<00:00, 36.83it/s] 88%|########8 | 23/26 [00:00<00:00, 38.45it/s]100%|##########| 26/26 [00:00<00:00, 32.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.72 ( 24.72)	train_acc   0.86 (  0.84)	train_minacc   0.90 (  0.89)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 7.4630 (7.5250)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 23%|##3       | 6/26 [00:00<00:00, 28.59it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.59it/s] 42%|####2     | 11/26 [00:00<00:00, 37.49it/s] 65%|######5   | 17/26 [00:00<00:00, 42.10it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.10it/s] 88%|########8 | 23/26 [00:00<00:00, 46.74it/s]100%|##########| 26/26 [00:00<00:00, 37.45it/s]
Test: [   0/  26]	Loss 0.286 (0.286)	test_acc   0.83 (  0.83)	test_minacc   0.85 (  0.85)	test_majacc   0.83 (  0.83)	Loss_d 0.286 (0.286)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.277 (0.284)	test_acc   0.85 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.85 (  0.83)	Loss_d 0.277 (0.284)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.69 (  0.70)
Test: [  20/  26]	Loss 0.263 (0.280)	test_acc   0.87 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.87 (  0.83)	Loss_d 0.263 (0.280)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.87 (  0.83)	test_corr_d   0.72 (  0.70)
Test: [  26/  26]	Loss 0.282 (0.281)	test_acc   0.86 (  0.84)	test_minacc   0.90 (  0.89)	test_majacc   0.85 (  0.83)	Loss_d 0.282 (0.281)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.90 (  0.89)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.70 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.15it/s]
Test: [  0/  1]	Loss 1.526 (1.526)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.68)	test_majacc   0.87 (  0.87)	Loss_d 1.526 (1.526)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 1.526 (1.526)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.68)	test_majacc   0.87 (  0.87)	Loss_d 1.526 (1.526)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.08 (  0.08)
Overall Timing[ 41/  1]	epoch_time 0.0351 (0.0362)	validation_time 0.0005 (0.0005)	train_time 0.0346 (0.0356)
record: (train_acc, test_acc) (0.8418000223636627, 0.7090000510215759)
last accs (train_acc, test_acc) (0.8401000259518623, 0.6960000395774841)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.47it/s] 19%|#9        | 5/26 [00:00<00:01, 19.18it/s] 35%|###4      | 9/26 [00:00<00:00, 25.58it/s] 50%|#####     | 13/26 [00:00<00:00, 30.33it/s] 69%|######9   | 18/26 [00:00<00:00, 34.21it/s] 85%|########4 | 22/26 [00:00<00:00, 35.46it/s]100%|##########| 26/26 [00:00<00:00, 36.78it/s]100%|##########| 26/26 [00:00<00:00, 28.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.29 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.73 ( 24.72)	train_acc   0.86 (  0.84)	train_minacc   0.90 (  0.89)	train_majacc   0.85 (  0.83)	train_corr   0.00 (  0.00)	l1 7.6530 (7.4994)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.50it/s] 31%|###       | 8/26 [00:00<00:00, 41.70it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.70it/s] 50%|#####     | 13/26 [00:00<00:00, 43.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.25it/s] 96%|#########6| 25/26 [00:00<00:00, 48.54it/s]100%|##########| 26/26 [00:00<00:00, 42.13it/s]
Test: [   0/  26]	Loss 0.297 (0.297)	test_acc   0.83 (  0.83)	test_minacc   0.90 (  0.90)	test_majacc   0.82 (  0.82)	Loss_d 0.297 (0.297)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.289 (0.298)	test_acc   0.84 (  0.82)	test_minacc   0.86 (  0.89)	test_majacc   0.83 (  0.81)	Loss_d 0.289 (0.298)	test_acc_d   0.84 (  0.82)	test_minacc_d   0.86 (  0.89)	test_majacc_d   0.83 (  0.81)	test_corr_d   0.67 (  0.67)
Test: [  20/  26]	Loss 0.266 (0.292)	test_acc   0.86 (  0.83)	test_minacc   0.87 (  0.89)	test_majacc   0.86 (  0.82)	Loss_d 0.266 (0.292)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.87 (  0.89)	test_majacc_d   0.86 (  0.82)	test_corr_d   0.70 (  0.67)
Test: [  26/  26]	Loss 0.285 (0.292)	test_acc   0.86 (  0.83)	test_minacc   0.90 (  0.89)	test_majacc   0.85 (  0.82)	Loss_d 0.285 (0.292)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.90 (  0.89)	test_majacc_d   0.85 (  0.82)	test_corr_d   0.68 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.17it/s]
Test: [  0/  1]	Loss 1.555 (1.555)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.68)	test_majacc   0.84 (  0.84)	Loss_d 1.555 (1.555)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 1.555 (1.555)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.68)	test_majacc   0.84 (  0.84)	Loss_d 1.555 (1.555)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.03 (  0.03)
Overall Timing[ 42/  1]	epoch_time 0.0358 (0.0362)	validation_time 0.0004 (0.0005)	train_time 0.0354 (0.0356)
record: (train_acc, test_acc) (0.8418000223636627, 0.7090000510215759)
last accs (train_acc, test_acc) (0.8319000265598298, 0.6970000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.98it/s] 23%|##3       | 6/26 [00:00<00:00, 28.49it/s] 38%|###8      | 10/26 [00:00<00:00, 33.18it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.51it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.47it/s] 96%|#########6| 25/26 [00:00<00:00, 39.56it/s]100%|##########| 26/26 [00:00<00:00, 33.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.26 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.73 ( 24.72)	train_acc   0.87 (  0.84)	train_minacc   0.90 (  0.89)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.6719 (7.4601)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 27%|##6       | 7/26 [00:00<00:00, 33.42it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.42it/s] 50%|#####     | 13/26 [00:00<00:00, 39.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.99it/s] 96%|#########6| 25/26 [00:00<00:00, 46.89it/s]100%|##########| 26/26 [00:00<00:00, 38.65it/s]
Test: [   0/  26]	Loss 0.277 (0.277)	test_acc   0.84 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.83 (  0.83)	Loss_d 0.277 (0.277)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.285 (0.281)	test_acc   0.84 (  0.84)	test_minacc   0.91 (  0.90)	test_majacc   0.82 (  0.83)	Loss_d 0.285 (0.281)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.91 (  0.90)	test_majacc_d   0.82 (  0.83)	test_corr_d   0.66 (  0.68)
Test: [  20/  26]	Loss 0.261 (0.282)	test_acc   0.87 (  0.84)	test_minacc   0.89 (  0.90)	test_majacc   0.86 (  0.83)	Loss_d 0.261 (0.282)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.89 (  0.90)	test_majacc_d   0.86 (  0.83)	test_corr_d   0.70 (  0.68)
Test: [  26/  26]	Loss 0.256 (0.281)	test_acc   0.87 (  0.84)	test_minacc   0.90 (  0.90)	test_majacc   0.86 (  0.83)	Loss_d 0.256 (0.281)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.86 (  0.83)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.63it/s]
Test: [  0/  1]	Loss 1.566 (1.566)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.68)	test_majacc   0.85 (  0.85)	Loss_d 1.566 (1.566)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 1.566 (1.566)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.68)	test_majacc   0.85 (  0.85)	Loss_d 1.566 (1.566)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.02 (  0.02)
Overall Timing[ 43/  1]	epoch_time 0.0343 (0.0361)	validation_time 0.0003 (0.0005)	train_time 0.0340 (0.0355)
record: (train_acc, test_acc) (0.8418000223636627, 0.7090000510215759)
last accs (train_acc, test_acc) (0.8429000262022018, 0.6970000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.85it/s] 19%|#9        | 5/26 [00:00<00:01, 19.97it/s] 35%|###4      | 9/26 [00:00<00:00, 26.65it/s] 50%|#####     | 13/26 [00:00<00:00, 31.02it/s] 65%|######5   | 17/26 [00:00<00:00, 33.44it/s] 85%|########4 | 22/26 [00:00<00:00, 36.08it/s]100%|##########| 26/26 [00:00<00:00, 37.17it/s]100%|##########| 26/26 [00:00<00:00, 29.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.27)	train_penalty   0.00 (  0.00)	weight_norm  24.73 ( 24.73)	train_acc   0.88 (  0.85)	train_minacc   0.90 (  0.89)	train_majacc   0.88 (  0.84)	train_corr   0.00 (  0.00)	l1 7.4812 (7.5709)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 23%|##3       | 6/26 [00:00<00:00, 25.75it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.75it/s] 46%|####6     | 12/26 [00:00<00:00, 37.68it/s] 69%|######9   | 18/26 [00:00<00:00, 42.16it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.16it/s] 92%|#########2| 24/26 [00:00<00:00, 46.75it/s]100%|##########| 26/26 [00:00<00:00, 37.69it/s]
Test: [   0/  26]	Loss 0.263 (0.263)	test_acc   0.85 (  0.85)	test_minacc   0.92 (  0.92)	test_majacc   0.84 (  0.84)	Loss_d 0.263 (0.263)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.276 (0.265)	test_acc   0.85 (  0.86)	test_minacc   0.91 (  0.91)	test_majacc   0.84 (  0.85)	Loss_d 0.276 (0.265)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.69 (  0.71)
Test: [  20/  26]	Loss 0.259 (0.269)	test_acc   0.88 (  0.85)	test_minacc   0.90 (  0.90)	test_majacc   0.87 (  0.84)	Loss_d 0.259 (0.269)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.87 (  0.84)	test_corr_d   0.72 (  0.71)
Test: [  26/  26]	Loss 0.252 (0.270)	test_acc   0.88 (  0.85)	test_minacc   0.90 (  0.90)	test_majacc   0.88 (  0.84)	Loss_d 0.252 (0.270)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.88 (  0.84)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.80it/s]
Test: [  0/  1]	Loss 1.569 (1.569)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.68)	test_majacc   0.86 (  0.86)	Loss_d 1.569 (1.569)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 1.569 (1.569)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.68)	test_majacc   0.86 (  0.86)	Loss_d 1.569 (1.569)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.09 (  0.09)
Overall Timing[ 44/  1]	epoch_time 0.0355 (0.0361)	validation_time 0.0004 (0.0005)	train_time 0.0351 (0.0355)
record: (train_acc, test_acc) (0.8418000223636627, 0.7090000510215759)
last accs (train_acc, test_acc) (0.8535000227093696, 0.6950000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.26it/s] 19%|#9        | 5/26 [00:00<00:00, 25.32it/s] 35%|###4      | 9/26 [00:00<00:00, 31.66it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.70it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.40it/s] 92%|#########2| 24/26 [00:00<00:00, 38.88it/s]100%|##########| 26/26 [00:00<00:00, 32.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.26 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.73 ( 24.73)	train_acc   0.88 (  0.85)	train_minacc   0.90 (  0.90)	train_majacc   0.88 (  0.84)	train_corr   0.00 (  0.00)	l1 7.4356 (7.6405)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.55it/s] 31%|###       | 8/26 [00:00<00:00, 33.87it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.87it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.95it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.01it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.01it/s]100%|##########| 26/26 [00:00<00:00, 49.70it/s]100%|##########| 26/26 [00:00<00:00, 39.99it/s]
Test: [   0/  26]	Loss 0.265 (0.265)	test_acc   0.85 (  0.85)	test_minacc   0.87 (  0.87)	test_majacc   0.85 (  0.85)	Loss_d 0.265 (0.265)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.264 (0.266)	test_acc   0.85 (  0.85)	test_minacc   0.92 (  0.90)	test_majacc   0.84 (  0.84)	Loss_d 0.264 (0.266)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.92 (  0.90)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.71 (  0.72)
Test: [  20/  26]	Loss 0.258 (0.267)	test_acc   0.87 (  0.85)	test_minacc   0.89 (  0.90)	test_majacc   0.87 (  0.84)	Loss_d 0.258 (0.267)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.89 (  0.90)	test_majacc_d   0.87 (  0.84)	test_corr_d   0.74 (  0.72)
Test: [  26/  26]	Loss 0.262 (0.269)	test_acc   0.88 (  0.85)	test_minacc   0.90 (  0.90)	test_majacc   0.87 (  0.84)	Loss_d 0.262 (0.269)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.87 (  0.84)	test_corr_d   0.73 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.67it/s]
Test: [  0/  1]	Loss 1.580 (1.580)	test_acc   0.69 (  0.69)	test_minacc   0.67 (  0.67)	test_majacc   0.87 (  0.87)	Loss_d 1.580 (1.580)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.580 (1.580)	test_acc   0.69 (  0.69)	test_minacc   0.67 (  0.67)	test_majacc   0.87 (  0.87)	Loss_d 1.580 (1.580)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.13 (  0.13)
Overall Timing[ 45/  1]	epoch_time 0.0350 (0.0361)	validation_time 0.0003 (0.0005)	train_time 0.0346 (0.0355)
record: (train_acc, test_acc) (0.8418000223636627, 0.7090000510215759)
last accs (train_acc, test_acc) (0.8509000238180161, 0.6890000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 19%|#9        | 5/26 [00:00<00:00, 23.55it/s] 35%|###4      | 9/26 [00:00<00:00, 29.38it/s] 50%|#####     | 13/26 [00:00<00:00, 32.61it/s] 69%|######9   | 18/26 [00:00<00:00, 35.91it/s] 88%|########8 | 23/26 [00:00<00:00, 37.86it/s]100%|##########| 26/26 [00:00<00:00, 31.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.73 ( 24.73)	train_acc   0.86 (  0.84)	train_minacc   0.90 (  0.89)	train_majacc   0.86 (  0.83)	train_corr   0.00 (  0.00)	l1 7.5212 (7.6052)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.21it/s] 27%|##6       | 7/26 [00:00<00:00, 35.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.69it/s] 50%|#####     | 13/26 [00:00<00:00, 40.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.71it/s] 96%|#########6| 25/26 [00:00<00:00, 46.96it/s]100%|##########| 26/26 [00:00<00:00, 40.07it/s]
Test: [   0/  26]	Loss 0.283 (0.283)	test_acc   0.83 (  0.83)	test_minacc   0.85 (  0.85)	test_majacc   0.83 (  0.83)	Loss_d 0.283 (0.283)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.276 (0.285)	test_acc   0.85 (  0.83)	test_minacc   0.89 (  0.89)	test_majacc   0.84 (  0.82)	Loss_d 0.276 (0.285)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.70 (  0.70)
Test: [  20/  26]	Loss 0.262 (0.279)	test_acc   0.86 (  0.84)	test_minacc   0.87 (  0.90)	test_majacc   0.86 (  0.83)	Loss_d 0.262 (0.279)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.87 (  0.90)	test_majacc_d   0.86 (  0.83)	test_corr_d   0.73 (  0.71)
Test: [  26/  26]	Loss 0.279 (0.280)	test_acc   0.87 (  0.84)	test_minacc   0.90 (  0.90)	test_majacc   0.86 (  0.83)	Loss_d 0.279 (0.280)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.86 (  0.83)	test_corr_d   0.71 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.17it/s]
Test: [  0/  1]	Loss 1.572 (1.572)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.68)	test_majacc   0.86 (  0.86)	Loss_d 1.572 (1.572)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.572 (1.572)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.68)	test_majacc   0.86 (  0.86)	Loss_d 1.572 (1.572)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.10 (  0.10)
Overall Timing[ 46/  1]	epoch_time 0.0366 (0.0361)	validation_time 0.0004 (0.0005)	train_time 0.0362 (0.0355)
record: (train_acc, test_acc) (0.8418000223636627, 0.7090000510215759)
last accs (train_acc, test_acc) (0.8392000229358673, 0.6980000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s] 19%|#9        | 5/26 [00:00<00:00, 21.14it/s] 35%|###4      | 9/26 [00:00<00:00, 28.08it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.02it/s] 92%|#########2| 24/26 [00:00<00:00, 37.34it/s]100%|##########| 26/26 [00:00<00:00, 30.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.29 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.74 ( 24.74)	train_acc   0.85 (  0.84)	train_minacc   0.90 (  0.90)	train_majacc   0.84 (  0.82)	train_corr   0.00 (  0.00)	l1 7.7450 (7.5449)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.30it/s] 27%|##6       | 7/26 [00:00<00:00, 30.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.48it/s] 50%|#####     | 13/26 [00:00<00:00, 37.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.76it/s] 96%|#########6| 25/26 [00:00<00:00, 46.09it/s]100%|##########| 26/26 [00:00<00:00, 37.37it/s]
Test: [   0/  26]	Loss 0.296 (0.296)	test_acc   0.83 (  0.83)	test_minacc   0.92 (  0.92)	test_majacc   0.82 (  0.82)	Loss_d 0.296 (0.296)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.291 (0.301)	test_acc   0.82 (  0.82)	test_minacc   0.85 (  0.89)	test_majacc   0.81 (  0.81)	Loss_d 0.291 (0.301)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.85 (  0.89)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.67 (  0.67)
Test: [  20/  26]	Loss 0.267 (0.295)	test_acc   0.85 (  0.83)	test_minacc   0.86 (  0.89)	test_majacc   0.85 (  0.81)	Loss_d 0.267 (0.295)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.86 (  0.89)	test_majacc_d   0.85 (  0.81)	test_corr_d   0.70 (  0.67)
Test: [  26/  26]	Loss 0.283 (0.293)	test_acc   0.85 (  0.83)	test_minacc   0.90 (  0.89)	test_majacc   0.84 (  0.82)	Loss_d 0.283 (0.293)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.90 (  0.89)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.68 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.04it/s]
Test: [  0/  1]	Loss 1.588 (1.588)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.68)	test_majacc   0.85 (  0.85)	Loss_d 1.588 (1.588)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 1.588 (1.588)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.68)	test_majacc   0.85 (  0.85)	Loss_d 1.588 (1.588)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.03 (  0.03)
Overall Timing[ 47/  1]	epoch_time 0.0353 (0.0361)	validation_time 0.0004 (0.0005)	train_time 0.0349 (0.0355)
record: (train_acc, test_acc) (0.8418000223636627, 0.7090000510215759)
last accs (train_acc, test_acc) (0.8278000242710114, 0.6990000605583191)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.88it/s] 19%|#9        | 5/26 [00:00<00:00, 22.85it/s] 35%|###4      | 9/26 [00:00<00:00, 29.24it/s] 50%|#####     | 13/26 [00:00<00:00, 32.61it/s] 69%|######9   | 18/26 [00:00<00:00, 36.11it/s] 88%|########8 | 23/26 [00:00<00:00, 37.76it/s]100%|##########| 26/26 [00:00<00:00, 31.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.25 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.74 ( 24.74)	train_acc   0.88 (  0.84)	train_minacc   0.93 (  0.89)	train_majacc   0.87 (  0.83)	train_corr   0.00 (  0.00)	l1 7.6207 (7.4702)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 27%|##6       | 7/26 [00:00<00:00, 34.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.37it/s] 46%|####6     | 12/26 [00:00<00:00, 39.25it/s] 65%|######5   | 17/26 [00:00<00:00, 42.66it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.66it/s] 88%|########8 | 23/26 [00:00<00:00, 47.62it/s]100%|##########| 26/26 [00:00<00:00, 37.41it/s]
Test: [   0/  26]	Loss 0.280 (0.280)	test_acc   0.83 (  0.83)	test_minacc   0.90 (  0.90)	test_majacc   0.82 (  0.82)	Loss_d 0.280 (0.280)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.284 (0.281)	test_acc   0.84 (  0.84)	test_minacc   0.91 (  0.91)	test_majacc   0.82 (  0.83)	Loss_d 0.284 (0.281)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.82 (  0.83)	test_corr_d   0.67 (  0.68)
Test: [  20/  26]	Loss 0.266 (0.282)	test_acc   0.85 (  0.84)	test_minacc   0.87 (  0.90)	test_majacc   0.85 (  0.83)	Loss_d 0.266 (0.282)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.87 (  0.90)	test_majacc_d   0.85 (  0.83)	test_corr_d   0.70 (  0.68)
Test: [  26/  26]	Loss 0.254 (0.282)	test_acc   0.88 (  0.84)	test_minacc   0.93 (  0.90)	test_majacc   0.87 (  0.83)	Loss_d 0.254 (0.282)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.93 (  0.90)	test_majacc_d   0.87 (  0.83)	test_corr_d   0.70 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.16it/s]
Test: [  0/  1]	Loss 1.585 (1.585)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.85 (  0.85)	Loss_d 1.585 (1.585)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 1.585 (1.585)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.85 (  0.85)	Loss_d 1.585 (1.585)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.05 (  0.05)
Overall Timing[ 48/  1]	epoch_time 0.0359 (0.0361)	validation_time 0.0004 (0.0005)	train_time 0.0355 (0.0355)
record: (train_acc, test_acc) (0.8418000223636627, 0.7090000510215759)
last accs (train_acc, test_acc) (0.839000028014183, 0.6940000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.83it/s] 19%|#9        | 5/26 [00:00<00:00, 23.04it/s] 35%|###4      | 9/26 [00:00<00:00, 29.72it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.59it/s] 92%|#########2| 24/26 [00:00<00:00, 38.12it/s]100%|##########| 26/26 [00:00<00:00, 31.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.26 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.74 ( 24.74)	train_acc   0.87 (  0.84)	train_minacc   0.90 (  0.90)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.4234 (7.6001)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 27%|##6       | 7/26 [00:00<00:00, 33.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.81it/s] 50%|#####     | 13/26 [00:00<00:00, 39.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.30it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.30it/s] 96%|#########6| 25/26 [00:00<00:00, 46.31it/s]100%|##########| 26/26 [00:00<00:00, 38.64it/s]
Test: [   0/  26]	Loss 0.268 (0.268)	test_acc   0.85 (  0.85)	test_minacc   0.92 (  0.92)	test_majacc   0.84 (  0.84)	Loss_d 0.268 (0.268)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.277 (0.270)	test_acc   0.85 (  0.85)	test_minacc   0.89 (  0.91)	test_majacc   0.84 (  0.84)	Loss_d 0.277 (0.270)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.89 (  0.91)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.70 (  0.72)
Test: [  20/  26]	Loss 0.261 (0.271)	test_acc   0.88 (  0.85)	test_minacc   0.90 (  0.91)	test_majacc   0.87 (  0.84)	Loss_d 0.261 (0.271)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.90 (  0.91)	test_majacc_d   0.87 (  0.84)	test_corr_d   0.73 (  0.71)
Test: [  26/  26]	Loss 0.263 (0.272)	test_acc   0.87 (  0.85)	test_minacc   0.90 (  0.91)	test_majacc   0.86 (  0.84)	Loss_d 0.263 (0.272)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.90 (  0.91)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.19it/s]
Test: [  0/  1]	Loss 1.608 (1.608)	test_acc   0.68 (  0.68)	test_minacc   0.66 (  0.66)	test_majacc   0.86 (  0.86)	Loss_d 1.608 (1.608)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.608 (1.608)	test_acc   0.68 (  0.68)	test_minacc   0.66 (  0.66)	test_majacc   0.86 (  0.86)	Loss_d 1.608 (1.608)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.13 (  0.13)
Overall Timing[ 49/  1]	epoch_time 0.0361 (0.0361)	validation_time 0.0004 (0.0005)	train_time 0.0356 (0.0355)
record: (train_acc, test_acc) (0.8418000223636627, 0.7090000510215759)
last accs (train_acc, test_acc) (0.8500000246167183, 0.6780000329017639)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.102 MB of 0.102 MB uploadedwandb: \ 0.102 MB of 0.102 MB uploadedwandb: | 0.102 MB of 0.102 MB uploadedwandb: / 0.124 MB of 0.133 MB uploaded (0.003 MB deduped)wandb: - 0.043 MB of 0.472 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▂▁▁▁▂▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/diagnostics/train_time_val █▁▁▁▂▂▂▂▁▁▁▂▁▁▁▂▁▂▂▂▁▁▂▂▁▁▁▂▂▁▁▁▁▁▂▁▁▂▁▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/Loss_avg ▇██▆▆▅▅▅▆▆▅▇▁▃▂▂▂▂▂▂▃▃▃▄▇▇▆▅▆▅▆▅▅▆▆▆▆▆▆▆
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/Loss_d_avg ▇██▆▆▅▅▅▆▆▅▇▁▃▂▂▂▂▂▂▃▃▃▄▇▇▆▅▆▅▆▅▅▆▆▆▆▆▆▆
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/Loss_d_val ▇██▆▆▅▅▅▆▆▅▇▁▃▂▂▂▂▂▂▃▃▃▄▇▇▆▅▆▅▆▅▅▆▆▆▆▆▆▆
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/Loss_val ▇██▆▆▅▅▅▆▆▅▇▁▃▂▂▂▂▂▂▃▃▃▄▇▇▆▅▆▅▆▅▅▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_acc_avg ▁▁▁▂▃▄▃▄▅▆▅▄▇▇▇▇▇▇▇▇▇▇▇▇▇▇██████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_acc_d_avg ▁▁▁▂▃▄▃▄▅▆▅▄▇▇▇▇▇▇▇▇▇▇▇▇▇▇██████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_acc_d_val ▁▁▁▂▃▄▃▄▅▆▅▄▇▇▇▇▇▇▇▇▇▇▇▇▇▇██████████████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_acc_val ▁▁▁▂▃▄▃▄▅▆▅▄▇▇▇▇▇▇▇▇▇▇▇▇▇▇██████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_corr_d_avg ███▇▆▆▆▆▅▄▄▅▁▂▂▂▂▂▂▂▂▂▂▂▂▃▂▃▂▂▂▂▂▂▂▂▃▂▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_corr_d_val ███▇▆▆▆▆▅▄▄▅▁▂▂▂▂▂▂▂▂▂▂▂▂▃▂▃▂▂▂▂▂▂▂▂▃▂▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_majacc_avg ▇█▇▇█▇▇█▇▆▆▇▁▂▁▁▁▁▁▁▁▂▁▁▃▃▂▄▃▃▃▃▃▄▃▃▄▄▃▄
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_majacc_d_avg ▇█▇▇█▇▇█▇▆▆▇▁▂▁▁▁▁▁▁▁▂▁▁▃▃▂▄▃▃▃▃▃▄▃▃▄▄▃▄
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_majacc_d_val ▇█▇▇█▇▇█▇▆▆▇▁▂▁▁▁▁▁▁▁▂▁▁▃▃▂▄▃▃▃▃▃▄▃▃▄▄▃▄
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_majacc_val ▇█▇▇█▇▇█▇▆▆▇▁▂▁▁▁▁▁▁▁▂▁▁▃▃▂▄▃▃▃▃▃▄▃▃▄▄▃▄
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_minacc_avg ▁▁▁▂▃▄▃▄▅▅▅▄█▇▇▇██▇▇▇▇▇▇▇▇██████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_minacc_d_avg ▁▁▁▂▃▄▃▄▅▅▅▄█▇▇▇██▇▇▇▇▇▇▇▇██████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_minacc_d_val ▁▁▁▂▃▄▃▄▅▅▅▄█▇▇▇██▇▇▇▇▇▇▇▇██████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_minacc_val ▁▁▁▂▃▄▃▄▅▅▅▄█▇▇▇██▇▇▇▇▇▇▇▇██████████████
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/Loss_avg █▆▆▅▅▅▅▅▄▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/Loss_val ███▇▆▆▆▅▅▅▄▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/l1_avg ▅██▆▆▅▅▄▄▅▆▆▆▂▁▁▁▁▁▁▁▂▂▂▃▄▄▄▄▄▄▄▄▄▄▄▅▅▄▄
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/l1_val ▇█▇▆▅▅▄▄▄▅▅▆▄▃▁▁▁▁▁▁▁▂▂▃▆▄▅▄▄▄▅▅▄▄▅▅▄▄▅▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_acc_avg ▁▅▅▅▆▆▆▆▇████▄▄▃▃▃▃▃▃▄▄▄▇▆▄▅▄▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_acc_val ▃▃▃▂▅▄▅▅█▇▇▇▂▂▃▁▁▁▂▂▂▂▂▂▅▃▄▅▄▄▄▄▅▄▄▅▆▅▄▅
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_majacc_avg ▄██▇▇▇▇▇▇▇▇▆▅▂▂▁▁▁▁▁▁▂▂▂▄▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_majacc_val ███▆█▇█▇█▇▇▇▁▂▃▂▁▁▂▂▂▂▂▂▄▂▂▃▂▂▂▂▃▂▂▃▃▃▂▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_minacc_avg ▂▁▁▂▃▃▃▃▄▅▅▅▆▇▇▇▇▇▇▇▇▇▇▇▇▇██████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_minacc_val ▁▁▁▂▃▃▃▄▅▆▅▅▇▆▇▆▇▇▇▇▇▇▇▇▇▇██████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_nll_avg █▄▄▃▃▃▂▂▂▁▁▁▁▃▃▃▃▃▃▃▃▃▃▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_nll_val ██▇▆▄▄▃▂▂▂▁▂▅▅▄▅▅▅▅▅▅▄▄▄▂▂▃▂▃▂▃▂▃▃▃▂▂▃▃▂
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_penalty_avg █▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_penalty_val █▇▆▄▃▃▂▂▂▁▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/weight_norm_avg ▁▅▅▅▆▆▆▆▆▆▇▇████████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/weight_norm_val ▁▃▃▃▄▄▄▄▅▅▆▆████████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/diagnostics/epoch_time_val 0.03606
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/diagnostics/train_time_val 0.03563
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/diagnostics/validation_time_val 0.00039
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/Loss_avg 1.60785
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/Loss_d_avg 1.60785
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/Loss_d_val 1.60785
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/Loss_val 1.60785
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_acc_avg 0.678
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_acc_d_avg 0.678
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_acc_d_val 0.678
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_acc_val 0.678
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_corr_d_avg 0.12842
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_corr_d_val 0.12842
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_majacc_avg 0.86
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_majacc_d_avg 0.86
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_majacc_d_val 0.86
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_majacc_val 0.86
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_minacc_avg 0.65778
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_minacc_d_avg 0.65778
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_minacc_d_val 0.65778
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/test/test_minacc_val 0.65778
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/Loss_avg 0.00019
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/Loss_val 0.00018
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/l1_avg 7.60014
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/l1_val 7.42343
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_acc_avg 0.8447
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_acc_val 0.868
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_majacc_avg 0.8354
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_majacc_val 0.86124
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_minacc_avg 0.8969
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_minacc_val 0.90244
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_nll_avg 0.27808
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_nll_val 0.26241
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_penalty_avg 0.00016
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/train_penalty_val 0.00016
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/weight_norm_avg 24.74129
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/weight_norm_val 24.74
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/132/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/l704n1t8
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_195446-l704n1t8/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_195716-w589anmr
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/w589anmr
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1229
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5985, 3, 32, 32) (6015, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:35,  1.43s/it] 23%|##3       | 6/26 [00:01<00:03,  5.05it/s] 38%|###8      | 10/26 [00:01<00:01,  8.97it/s] 58%|#####7    | 15/26 [00:01<00:00, 14.14it/s] 77%|#######6  | 20/26 [00:01<00:00, 19.19it/s] 92%|#########2| 24/26 [00:02<00:00, 22.92it/s]100%|##########| 26/26 [00:02<00:00, 10.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.412 (0.562)	train_nll   0.41 (  0.56)	train_penalty   0.04 (  0.34)	weight_norm  20.83 ( 18.08)	train_acc   0.84 (  0.80)	train_minacc   0.00 (  0.09)	train_majacc   0.98 (  0.92)	train_corr   0.00 (  0.00)	l1 8.0702 (8.1549)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 19%|#9        | 5/26 [00:00<00:00, 24.56it/s] 38%|###8      | 10/26 [00:00<00:00, 34.85it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.85it/s] 62%|######1   | 16/26 [00:00<00:00, 41.96it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.96it/s] 85%|########4 | 22/26 [00:00<00:00, 46.38it/s]100%|##########| 26/26 [00:00<00:00, 37.46it/s]
Test: [   0/  26]	Loss 0.445 (0.445)	test_acc   0.82 (  0.82)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 0.445 (0.445)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.425 (0.434)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.05)	test_majacc   0.99 (  0.98)	Loss_d 0.425 (0.434)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.05)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.427 (0.425)	test_acc   0.84 (  0.84)	test_minacc   0.05 (  0.05)	test_majacc   0.97 (  0.98)	Loss_d 0.427 (0.425)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.413 (0.425)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 0.413 (0.425)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]
Test: [  0/  1]	Loss 1.457 (1.457)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 1.457 (1.457)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.457 (1.457)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 1.457 (1.457)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/133/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0696 (0.0696)	validation_time 0.0068 (0.0068)	train_time 0.0612 (0.0612)
record: (train_acc, test_acc) (0.840800022661686, 0.14100000262260437)
last accs (train_acc, test_acc) (0.840800022661686, 0.14100000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.43it/s] 19%|#9        | 5/26 [00:00<00:00, 26.86it/s] 35%|###4      | 9/26 [00:00<00:00, 32.36it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.56it/s] 92%|#########2| 24/26 [00:00<00:00, 40.24it/s]100%|##########| 26/26 [00:00<00:00, 33.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.377 (0.416)	train_nll   0.38 (  0.42)	train_penalty   0.03 (  0.06)	weight_norm  21.94 ( 21.60)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.02)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 8.1781 (8.2958)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.49it/s] 27%|##6       | 7/26 [00:00<00:00, 30.85it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.85it/s] 50%|#####     | 13/26 [00:00<00:00, 38.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.06it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.06it/s] 96%|#########6| 25/26 [00:00<00:00, 46.21it/s]100%|##########| 26/26 [00:00<00:00, 37.79it/s]
Test: [   0/  26]	Loss 0.425 (0.425)	test_acc   0.83 (  0.83)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.425 (0.425)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.413 (0.413)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.08)	test_majacc   0.99 (  0.98)	Loss_d 0.413 (0.413)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.08)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.92)
Test: [  20/  26]	Loss 0.400 (0.403)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 0.400 (0.403)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.377 (0.402)	test_acc   0.86 (  0.85)	test_minacc   0.11 (  0.09)	test_majacc   0.99 (  0.98)	Loss_d 0.377 (0.402)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.11 (  0.09)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.87it/s]
Test: [  0/  1]	Loss 1.484 (1.484)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.484 (1.484)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.484 (1.484)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.484 (1.484)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.86 (  0.86)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/133/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0338 (0.0517)	validation_time 0.0004 (0.0036)	train_time 0.0334 (0.0473)
record: (train_acc, test_acc) (0.845300023317337, 0.1600000113248825)
last accs (train_acc, test_acc) (0.845300023317337, 0.1600000113248825)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.56it/s] 19%|#9        | 5/26 [00:00<00:01, 18.43it/s] 35%|###4      | 9/26 [00:00<00:00, 25.80it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.66it/s] 92%|#########2| 24/26 [00:00<00:00, 36.77it/s]100%|##########| 26/26 [00:00<00:00, 28.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.339 (0.395)	train_nll   0.34 (  0.40)	train_penalty   0.02 (  0.05)	weight_norm  22.08 ( 22.03)	train_acc   0.86 (  0.85)	train_minacc   0.11 (  0.06)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 7.9607 (7.9957)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.68it/s] 27%|##6       | 7/26 [00:00<00:00, 35.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.02it/s] 50%|#####     | 13/26 [00:00<00:00, 41.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.10it/s] 96%|#########6| 25/26 [00:00<00:00, 47.66it/s]100%|##########| 26/26 [00:00<00:00, 39.13it/s]
Test: [   0/  26]	Loss 0.410 (0.410)	test_acc   0.84 (  0.84)	test_minacc   0.20 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 0.410 (0.410)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.393 (0.400)	test_acc   0.83 (  0.84)	test_minacc   0.07 (  0.17)	test_majacc   0.96 (  0.96)	Loss_d 0.393 (0.400)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.07 (  0.17)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.91 (  0.89)
Test: [  20/  26]	Loss 0.383 (0.386)	test_acc   0.84 (  0.84)	test_minacc   0.16 (  0.18)	test_majacc   0.96 (  0.96)	Loss_d 0.383 (0.386)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.16 (  0.18)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  26/  26]	Loss 0.333 (0.382)	test_acc   0.87 (  0.84)	test_minacc   0.22 (  0.19)	test_majacc   0.99 (  0.96)	Loss_d 0.333 (0.382)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.22 (  0.19)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.91 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.53it/s]
Test: [  0/  1]	Loss 1.659 (1.659)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.95 (  0.95)	Loss_d 1.659 (1.659)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.74 (  0.74)
Test: [  1/  1]	Loss 1.659 (1.659)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.95 (  0.95)	Loss_d 1.659 (1.659)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.74 (  0.74)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/133/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0346 (0.0460)	validation_time 0.0003 (0.0025)	train_time 0.0342 (0.0430)
record: (train_acc, test_acc) (0.8425000252723693, 0.24900001287460327)
last accs (train_acc, test_acc) (0.8425000252723693, 0.24900001287460327)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.93it/s] 19%|#9        | 5/26 [00:00<00:00, 23.54it/s] 35%|###4      | 9/26 [00:00<00:00, 29.12it/s] 50%|#####     | 13/26 [00:00<00:00, 32.81it/s] 65%|######5   | 17/26 [00:00<00:00, 34.49it/s] 81%|########  | 21/26 [00:00<00:00, 35.77it/s]100%|##########| 26/26 [00:00<00:00, 37.92it/s]100%|##########| 26/26 [00:00<00:00, 30.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.326 (0.374)	train_nll   0.33 (  0.37)	train_penalty   0.01 (  0.04)	weight_norm  22.13 ( 22.10)	train_acc   0.86 (  0.85)	train_minacc   0.14 (  0.09)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 7.8026 (7.6797)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.35it/s] 31%|###       | 8/26 [00:00<00:00, 33.50it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.50it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.03it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.42it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.42it/s]100%|##########| 26/26 [00:00<00:00, 49.91it/s]100%|##########| 26/26 [00:00<00:00, 39.88it/s]
Test: [   0/  26]	Loss 0.402 (0.402)	test_acc   0.85 (  0.85)	test_minacc   0.32 (  0.32)	test_majacc   0.96 (  0.96)	Loss_d 0.402 (0.402)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.376 (0.385)	test_acc   0.84 (  0.85)	test_minacc   0.12 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 0.376 (0.385)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.12 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.88)
Test: [  20/  26]	Loss 0.376 (0.369)	test_acc   0.85 (  0.85)	test_minacc   0.26 (  0.24)	test_majacc   0.95 (  0.96)	Loss_d 0.376 (0.369)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.26 (  0.24)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  26/  26]	Loss 0.317 (0.365)	test_acc   0.88 (  0.85)	test_minacc   0.24 (  0.24)	test_majacc   0.99 (  0.96)	Loss_d 0.317 (0.365)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.90 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.42it/s]
Test: [  0/  1]	Loss 1.638 (1.638)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.95 (  0.95)	Loss_d 1.638 (1.638)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.638 (1.638)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.95 (  0.95)	Loss_d 1.638 (1.638)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.69 (  0.69)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/133/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0349 (0.0432)	validation_time 0.0004 (0.0020)	train_time 0.0345 (0.0408)
record: (train_acc, test_acc) (0.8510000249743461, 0.289000004529953)
last accs (train_acc, test_acc) (0.8510000249743461, 0.289000004529953)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s] 19%|#9        | 5/26 [00:00<00:00, 26.63it/s] 35%|###4      | 9/26 [00:00<00:00, 32.01it/s] 50%|#####     | 13/26 [00:00<00:00, 34.61it/s] 65%|######5   | 17/26 [00:00<00:00, 36.31it/s] 85%|########4 | 22/26 [00:00<00:00, 38.33it/s]100%|##########| 26/26 [00:00<00:00, 32.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.294 (0.354)	train_nll   0.29 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm  22.18 ( 22.15)	train_acc   0.89 (  0.85)	train_minacc   0.43 (  0.15)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 7.6266 (7.6377)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.66it/s] 35%|###4      | 9/26 [00:00<00:00, 43.41it/s]                                               35%|###4      | 9/26 [00:00<00:00, 43.41it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.25it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.25it/s] 81%|########  | 21/26 [00:00<00:00, 49.04it/s]100%|##########| 26/26 [00:00<00:00, 42.84it/s]
Test: [   0/  26]	Loss 0.387 (0.387)	test_acc   0.83 (  0.83)	test_minacc   0.46 (  0.46)	test_majacc   0.91 (  0.91)	Loss_d 0.387 (0.387)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.345 (0.360)	test_acc   0.86 (  0.85)	test_minacc   0.39 (  0.40)	test_majacc   0.94 (  0.93)	Loss_d 0.345 (0.360)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.39 (  0.40)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.85 (  0.84)
Test: [  20/  26]	Loss 0.353 (0.343)	test_acc   0.86 (  0.86)	test_minacc   0.38 (  0.40)	test_majacc   0.94 (  0.94)	Loss_d 0.353 (0.343)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.38 (  0.40)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.83 (  0.84)
Test: [  26/  26]	Loss 0.281 (0.339)	test_acc   0.88 (  0.86)	test_minacc   0.46 (  0.41)	test_majacc   0.95 (  0.94)	Loss_d 0.281 (0.339)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.46 (  0.41)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.85 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.60it/s]
Test: [  0/  1]	Loss 1.474 (1.474)	test_acc   0.41 (  0.41)	test_minacc   0.35 (  0.35)	test_majacc   0.91 (  0.91)	Loss_d 1.474 (1.474)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.49 (  0.49)
Test: [  1/  1]	Loss 1.474 (1.474)	test_acc   0.41 (  0.41)	test_minacc   0.35 (  0.35)	test_majacc   0.91 (  0.91)	Loss_d 1.474 (1.474)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.49 (  0.49)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/133/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0367 (0.0419)	validation_time 0.0004 (0.0017)	train_time 0.0362 (0.0399)
record: (train_acc, test_acc) (0.8574000236392021, 0.4090000092983246)
last accs (train_acc, test_acc) (0.8574000236392021, 0.4090000092983246)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.57it/s] 19%|#9        | 5/26 [00:00<00:00, 26.45it/s] 35%|###4      | 9/26 [00:00<00:00, 32.34it/s] 50%|#####     | 13/26 [00:00<00:00, 35.19it/s] 65%|######5   | 17/26 [00:00<00:00, 36.80it/s] 81%|########  | 21/26 [00:00<00:00, 37.72it/s] 96%|#########6| 25/26 [00:00<00:00, 38.35it/s]100%|##########| 26/26 [00:00<00:00, 32.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.290 (0.338)	train_nll   0.29 (  0.34)	train_penalty   0.01 (  0.03)	weight_norm  22.24 ( 22.21)	train_acc   0.88 (  0.85)	train_minacc   0.24 (  0.20)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 7.3161 (7.4970)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 27%|##6       | 7/26 [00:00<00:00, 33.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.98it/s] 50%|#####     | 13/26 [00:00<00:00, 41.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.10it/s] 96%|#########6| 25/26 [00:00<00:00, 47.96it/s]100%|##########| 26/26 [00:00<00:00, 39.49it/s]
Test: [   0/  26]	Loss 0.366 (0.366)	test_acc   0.84 (  0.84)	test_minacc   0.43 (  0.43)	test_majacc   0.93 (  0.93)	Loss_d 0.366 (0.366)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.321 (0.334)	test_acc   0.87 (  0.85)	test_minacc   0.36 (  0.36)	test_majacc   0.96 (  0.95)	Loss_d 0.321 (0.334)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.88 (  0.86)
Test: [  20/  26]	Loss 0.324 (0.318)	test_acc   0.85 (  0.86)	test_minacc   0.34 (  0.37)	test_majacc   0.94 (  0.95)	Loss_d 0.324 (0.318)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.34 (  0.37)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  26/  26]	Loss 0.277 (0.317)	test_acc   0.87 (  0.86)	test_minacc   0.35 (  0.38)	test_majacc   0.96 (  0.95)	Loss_d 0.277 (0.317)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.35 (  0.38)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.88 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.73it/s]
Test: [  0/  1]	Loss 1.432 (1.432)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.91 (  0.91)	Loss_d 1.432 (1.432)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.56 (  0.56)
Test: [  1/  1]	Loss 1.432 (1.432)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.91 (  0.91)	Loss_d 1.432 (1.432)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.56 (  0.56)
Overall Timing[  5/  1]	epoch_time 0.0369 (0.0411)	validation_time 0.0003 (0.0014)	train_time 0.0365 (0.0394)
record: (train_acc, test_acc) (0.8574000236392021, 0.4090000092983246)
last accs (train_acc, test_acc) (0.8640000251531601, 0.3620000183582306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.08it/s] 19%|#9        | 5/26 [00:00<00:00, 24.38it/s] 35%|###4      | 9/26 [00:00<00:00, 30.11it/s] 50%|#####     | 13/26 [00:00<00:00, 33.69it/s] 65%|######5   | 17/26 [00:00<00:00, 35.84it/s] 81%|########  | 21/26 [00:00<00:00, 37.17it/s] 96%|#########6| 25/26 [00:00<00:00, 37.64it/s]100%|##########| 26/26 [00:00<00:00, 31.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.276 (0.327)	train_nll   0.28 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm  22.31 ( 22.28)	train_acc   0.88 (  0.86)	train_minacc   0.30 (  0.27)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.1410 (7.4311)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.06it/s] 23%|##3       | 6/26 [00:00<00:00, 26.41it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.41it/s] 42%|####2     | 11/26 [00:00<00:00, 35.57it/s] 62%|######1   | 16/26 [00:00<00:00, 38.23it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.23it/s] 85%|########4 | 22/26 [00:00<00:00, 44.37it/s]100%|##########| 26/26 [00:00<00:00, 35.59it/s]
Test: [   0/  26]	Loss 0.381 (0.381)	test_acc   0.84 (  0.84)	test_minacc   0.42 (  0.42)	test_majacc   0.93 (  0.93)	Loss_d 0.381 (0.381)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.321 (0.343)	test_acc   0.85 (  0.86)	test_minacc   0.27 (  0.35)	test_majacc   0.95 (  0.95)	Loss_d 0.321 (0.343)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.27 (  0.35)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.89 (  0.87)
Test: [  20/  26]	Loss 0.347 (0.329)	test_acc   0.85 (  0.86)	test_minacc   0.31 (  0.35)	test_majacc   0.95 (  0.95)	Loss_d 0.347 (0.329)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.31 (  0.35)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  26/  26]	Loss 0.265 (0.326)	test_acc   0.86 (  0.86)	test_minacc   0.35 (  0.37)	test_majacc   0.95 (  0.95)	Loss_d 0.265 (0.326)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.35 (  0.37)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.62it/s]
Test: [  0/  1]	Loss 1.533 (1.533)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.93 (  0.93)	Loss_d 1.533 (1.533)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.59 (  0.59)
Test: [  1/  1]	Loss 1.533 (1.533)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.93 (  0.93)	Loss_d 1.533 (1.533)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.59 (  0.59)
Overall Timing[  6/  1]	epoch_time 0.0370 (0.0405)	validation_time 0.0003 (0.0013)	train_time 0.0367 (0.0390)
record: (train_acc, test_acc) (0.8574000236392021, 0.4090000092983246)
last accs (train_acc, test_acc) (0.8610000249147415, 0.3840000033378601)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.77it/s] 19%|#9        | 5/26 [00:00<00:00, 22.55it/s] 35%|###4      | 9/26 [00:00<00:00, 29.60it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.22it/s] 92%|#########2| 24/26 [00:00<00:00, 37.94it/s]100%|##########| 26/26 [00:00<00:00, 31.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.246 (0.313)	train_nll   0.25 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.40 ( 22.36)	train_acc   0.88 (  0.87)	train_minacc   0.46 (  0.35)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 7.2562 (7.3597)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.71it/s] 23%|##3       | 6/26 [00:00<00:00, 32.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.76it/s] 46%|####6     | 12/26 [00:00<00:00, 42.43it/s] 65%|######5   | 17/26 [00:00<00:00, 43.78it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.78it/s] 88%|########8 | 23/26 [00:00<00:00, 48.83it/s]100%|##########| 26/26 [00:00<00:00, 39.63it/s]
Test: [   0/  26]	Loss 0.373 (0.373)	test_acc   0.84 (  0.84)	test_minacc   0.46 (  0.46)	test_majacc   0.92 (  0.92)	Loss_d 0.373 (0.373)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.317 (0.337)	test_acc   0.86 (  0.85)	test_minacc   0.39 (  0.43)	test_majacc   0.94 (  0.93)	Loss_d 0.317 (0.337)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.39 (  0.43)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.86 (  0.85)
Test: [  20/  26]	Loss 0.337 (0.317)	test_acc   0.85 (  0.86)	test_minacc   0.43 (  0.45)	test_majacc   0.93 (  0.93)	Loss_d 0.337 (0.317)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.43 (  0.45)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.84 (  0.85)
Test: [  26/  26]	Loss 0.242 (0.313)	test_acc   0.88 (  0.86)	test_minacc   0.51 (  0.46)	test_majacc   0.94 (  0.93)	Loss_d 0.242 (0.313)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.51 (  0.46)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.86 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.21it/s]
Test: [  0/  1]	Loss 1.590 (1.590)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.88 (  0.88)	Loss_d 1.590 (1.590)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.50 (  0.50)
Test: [  1/  1]	Loss 1.590 (1.590)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.88 (  0.88)	Loss_d 1.590 (1.590)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.50 (  0.50)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/133/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0368 (0.0400)	validation_time 0.0006 (0.0012)	train_time 0.0362 (0.0386)
record: (train_acc, test_acc) (0.8599000232815742, 0.43800002336502075)
last accs (train_acc, test_acc) (0.8599000232815742, 0.43800002336502075)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.05it/s] 19%|#9        | 5/26 [00:00<00:00, 23.34it/s] 35%|###4      | 9/26 [00:00<00:00, 29.35it/s] 50%|#####     | 13/26 [00:00<00:00, 33.23it/s] 65%|######5   | 17/26 [00:00<00:00, 35.11it/s] 85%|########4 | 22/26 [00:00<00:00, 37.16it/s]100%|##########| 26/26 [00:00<00:00, 30.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.254 (0.307)	train_nll   0.25 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.50 ( 22.45)	train_acc   0.89 (  0.87)	train_minacc   0.46 (  0.36)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.0773 (7.3314)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.19it/s] 27%|##6       | 7/26 [00:00<00:00, 32.80it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.80it/s] 50%|#####     | 13/26 [00:00<00:00, 42.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.99it/s] 96%|#########6| 25/26 [00:00<00:00, 48.53it/s]100%|##########| 26/26 [00:00<00:00, 40.48it/s]
Test: [   0/  26]	Loss 0.360 (0.360)	test_acc   0.84 (  0.84)	test_minacc   0.38 (  0.38)	test_majacc   0.93 (  0.93)	Loss_d 0.360 (0.360)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.294 (0.318)	test_acc   0.87 (  0.86)	test_minacc   0.45 (  0.45)	test_majacc   0.94 (  0.94)	Loss_d 0.294 (0.318)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.84)
Test: [  20/  26]	Loss 0.314 (0.300)	test_acc   0.87 (  0.87)	test_minacc   0.50 (  0.48)	test_majacc   0.93 (  0.94)	Loss_d 0.314 (0.300)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.50 (  0.48)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.83 (  0.84)
Test: [  26/  26]	Loss 0.241 (0.297)	test_acc   0.90 (  0.87)	test_minacc   0.54 (  0.48)	test_majacc   0.96 (  0.94)	Loss_d 0.241 (0.297)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.54 (  0.48)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.85 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.74it/s]
Test: [  0/  1]	Loss 1.479 (1.479)	test_acc   0.43 (  0.43)	test_minacc   0.37 (  0.37)	test_majacc   0.91 (  0.91)	Loss_d 1.479 (1.479)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.47 (  0.47)
Test: [  1/  1]	Loss 1.479 (1.479)	test_acc   0.43 (  0.43)	test_minacc   0.37 (  0.37)	test_majacc   0.91 (  0.91)	Loss_d 1.479 (1.479)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.47 (  0.47)
Overall Timing[  8/  1]	epoch_time 0.0374 (0.0397)	validation_time 0.0004 (0.0011)	train_time 0.0370 (0.0384)
record: (train_acc, test_acc) (0.8599000232815742, 0.43800002336502075)
last accs (train_acc, test_acc) (0.8718000234961509, 0.4280000329017639)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.03it/s] 19%|#9        | 5/26 [00:00<00:00, 23.48it/s] 35%|###4      | 9/26 [00:00<00:00, 29.77it/s] 50%|#####     | 13/26 [00:00<00:00, 33.42it/s] 65%|######5   | 17/26 [00:00<00:00, 35.27it/s] 81%|########  | 21/26 [00:00<00:00, 36.09it/s]100%|##########| 26/26 [00:00<00:00, 38.27it/s]100%|##########| 26/26 [00:00<00:00, 31.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.215 (0.288)	train_nll   0.22 (  0.29)	train_penalty   0.00 (  0.01)	weight_norm  22.63 ( 22.57)	train_acc   0.90 (  0.88)	train_minacc   0.54 (  0.44)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 7.3685 (7.3311)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 27%|##6       | 7/26 [00:00<00:00, 34.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.05it/s] 50%|#####     | 13/26 [00:00<00:00, 38.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.38it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.38it/s] 96%|#########6| 25/26 [00:00<00:00, 46.50it/s]100%|##########| 26/26 [00:00<00:00, 38.69it/s]
Test: [   0/  26]	Loss 0.350 (0.350)	test_acc   0.85 (  0.85)	test_minacc   0.37 (  0.37)	test_majacc   0.94 (  0.94)	Loss_d 0.350 (0.350)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.277 (0.311)	test_acc   0.89 (  0.87)	test_minacc   0.50 (  0.43)	test_majacc   0.96 (  0.95)	Loss_d 0.277 (0.311)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.50 (  0.43)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.88 (  0.86)
Test: [  20/  26]	Loss 0.300 (0.287)	test_acc   0.88 (  0.88)	test_minacc   0.53 (  0.46)	test_majacc   0.94 (  0.95)	Loss_d 0.300 (0.287)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.53 (  0.46)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.85 (  0.86)
Test: [  26/  26]	Loss 0.199 (0.278)	test_acc   0.90 (  0.88)	test_minacc   0.54 (  0.47)	test_majacc   0.97 (  0.95)	Loss_d 0.199 (0.278)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.54 (  0.47)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.87 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.09it/s]
Test: [  0/  1]	Loss 1.817 (1.817)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.91 (  0.91)	Loss_d 1.817 (1.817)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.54 (  0.54)
Test: [  1/  1]	Loss 1.817 (1.817)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.91 (  0.91)	Loss_d 1.817 (1.817)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.54 (  0.54)
Overall Timing[  9/  1]	epoch_time 0.0356 (0.0393)	validation_time 0.0006 (0.0011)	train_time 0.0349 (0.0381)
record: (train_acc, test_acc) (0.8599000232815742, 0.43800002336502075)
last accs (train_acc, test_acc) (0.8807000231742859, 0.39100003242492676)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.11it/s] 19%|#9        | 5/26 [00:00<00:00, 23.94it/s] 35%|###4      | 9/26 [00:00<00:00, 30.64it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.96it/s] 69%|######9   | 18/26 [00:00<00:00, 36.54it/s] 85%|########4 | 22/26 [00:00<00:00, 37.64it/s]100%|##########| 26/26 [00:00<00:00, 32.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.187 (0.284)	train_nll   0.19 (  0.28)	train_penalty   0.01 (  0.01)	weight_norm  22.81 ( 22.72)	train_acc   0.92 (  0.87)	train_minacc   0.62 (  0.44)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 7.3525 (7.1834)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.66it/s] 23%|##3       | 6/26 [00:00<00:00, 28.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.73it/s] 46%|####6     | 12/26 [00:00<00:00, 38.15it/s] 69%|######9   | 18/26 [00:00<00:00, 45.73it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.73it/s] 92%|#########2| 24/26 [00:00<00:00, 46.64it/s]100%|##########| 26/26 [00:00<00:00, 38.81it/s]
Test: [   0/  26]	Loss 0.344 (0.344)	test_acc   0.86 (  0.86)	test_minacc   0.52 (  0.52)	test_majacc   0.93 (  0.93)	Loss_d 0.344 (0.344)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.274 (0.303)	test_acc   0.88 (  0.87)	test_minacc   0.46 (  0.48)	test_majacc   0.95 (  0.94)	Loss_d 0.274 (0.303)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.85 (  0.84)
Test: [  20/  26]	Loss 0.290 (0.281)	test_acc   0.88 (  0.88)	test_minacc   0.53 (  0.51)	test_majacc   0.95 (  0.95)	Loss_d 0.290 (0.281)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.81 (  0.84)
Test: [  26/  26]	Loss 0.161 (0.273)	test_acc   0.95 (  0.89)	test_minacc   0.76 (  0.53)	test_majacc   0.98 (  0.95)	Loss_d 0.161 (0.273)	test_acc_d   0.95 (  0.89)	test_minacc_d   0.76 (  0.53)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.84 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.18it/s]
Test: [  0/  1]	Loss 1.820 (1.820)	test_acc   0.42 (  0.42)	test_minacc   0.37 (  0.37)	test_majacc   0.88 (  0.88)	Loss_d 1.820 (1.820)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.47 (  0.47)
Test: [  1/  1]	Loss 1.820 (1.820)	test_acc   0.42 (  0.42)	test_minacc   0.37 (  0.37)	test_majacc   0.88 (  0.88)	Loss_d 1.820 (1.820)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.47 (  0.47)
Overall Timing[ 10/  1]	epoch_time 0.0359 (0.0390)	validation_time 0.0003 (0.0010)	train_time 0.0355 (0.0379)
record: (train_acc, test_acc) (0.8599000232815742, 0.43800002336502075)
last accs (train_acc, test_acc) (0.8858000259995461, 0.42100003361701965)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 19%|#9        | 5/26 [00:00<00:00, 23.64it/s] 35%|###4      | 9/26 [00:00<00:00, 29.36it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.70it/s] 92%|#########2| 24/26 [00:00<00:00, 37.88it/s]100%|##########| 26/26 [00:00<00:00, 31.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.224 (0.283)	train_nll   0.22 (  0.28)	train_penalty   0.00 (  0.01)	weight_norm  23.05 ( 22.93)	train_acc   0.90 (  0.88)	train_minacc   0.49 (  0.45)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.3285 (7.0408)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.75it/s] 35%|###4      | 9/26 [00:00<00:00, 37.12it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.12it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.15it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.15it/s] 81%|########  | 21/26 [00:00<00:00, 46.77it/s]100%|##########| 26/26 [00:00<00:00, 41.03it/s]
Test: [   0/  26]	Loss 0.344 (0.344)	test_acc   0.86 (  0.86)	test_minacc   0.43 (  0.43)	test_majacc   0.94 (  0.94)	Loss_d 0.344 (0.344)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.273 (0.296)	test_acc   0.89 (  0.88)	test_minacc   0.50 (  0.46)	test_majacc   0.96 (  0.95)	Loss_d 0.273 (0.296)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.50 (  0.46)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.85 (  0.86)
Test: [  20/  26]	Loss 0.267 (0.273)	test_acc   0.90 (  0.89)	test_minacc   0.57 (  0.50)	test_majacc   0.96 (  0.96)	Loss_d 0.267 (0.273)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.85)
Test: [  26/  26]	Loss 0.176 (0.264)	test_acc   0.93 (  0.89)	test_minacc   0.62 (  0.52)	test_majacc   0.98 (  0.96)	Loss_d 0.176 (0.264)	test_acc_d   0.93 (  0.89)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.85 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.73it/s]
Test: [  0/  1]	Loss 1.865 (1.865)	test_acc   0.40 (  0.40)	test_minacc   0.35 (  0.35)	test_majacc   0.92 (  0.92)	Loss_d 1.865 (1.865)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.52 (  0.52)
Test: [  1/  1]	Loss 1.865 (1.865)	test_acc   0.40 (  0.40)	test_minacc   0.35 (  0.35)	test_majacc   0.92 (  0.92)	Loss_d 1.865 (1.865)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.52 (  0.52)
Overall Timing[ 11/  1]	epoch_time 0.0361 (0.0388)	validation_time 0.0004 (0.0009)	train_time 0.0356 (0.0377)
record: (train_acc, test_acc) (0.8599000232815742, 0.43800002336502075)
last accs (train_acc, test_acc) (0.8910000188350677, 0.40400001406669617)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.14it/s] 19%|#9        | 5/26 [00:00<00:00, 24.47it/s] 38%|###8      | 10/26 [00:00<00:00, 32.74it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.47it/s] 92%|#########2| 24/26 [00:00<00:00, 39.23it/s]100%|##########| 26/26 [00:00<00:00, 32.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.180 (0.265)	train_nll   0.18 (  0.26)	train_penalty   0.00 (  0.01)	weight_norm  23.29 ( 23.17)	train_acc   0.93 (  0.89)	train_minacc   0.73 (  0.53)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 7.3128 (7.1926)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.36it/s] 27%|##6       | 7/26 [00:00<00:00, 31.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.83it/s] 50%|#####     | 13/26 [00:00<00:00, 38.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.70it/s] 96%|#########6| 25/26 [00:00<00:00, 44.62it/s]100%|##########| 26/26 [00:00<00:00, 36.66it/s]
Test: [   0/  26]	Loss 0.313 (0.313)	test_acc   0.87 (  0.87)	test_minacc   0.45 (  0.45)	test_majacc   0.95 (  0.95)	Loss_d 0.313 (0.313)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.269 (0.275)	test_acc   0.89 (  0.88)	test_minacc   0.52 (  0.50)	test_majacc   0.96 (  0.95)	Loss_d 0.269 (0.275)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.85 (  0.85)
Test: [  20/  26]	Loss 0.235 (0.260)	test_acc   0.92 (  0.89)	test_minacc   0.60 (  0.54)	test_majacc   0.98 (  0.96)	Loss_d 0.235 (0.260)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.60 (  0.54)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.85 (  0.84)
Test: [  26/  26]	Loss 0.148 (0.250)	test_acc   0.95 (  0.90)	test_minacc   0.81 (  0.56)	test_majacc   0.98 (  0.96)	Loss_d 0.148 (0.250)	test_acc_d   0.95 (  0.90)	test_minacc_d   0.81 (  0.56)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.83 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.27it/s]
Test: [  0/  1]	Loss 1.957 (1.957)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.92 (  0.92)	Loss_d 1.957 (1.957)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.52 (  0.52)
Test: [  1/  1]	Loss 1.957 (1.957)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.92 (  0.92)	Loss_d 1.957 (1.957)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.52 (  0.52)
Overall Timing[ 12/  1]	epoch_time 0.0371 (0.0386)	validation_time 0.0004 (0.0009)	train_time 0.0366 (0.0376)
record: (train_acc, test_acc) (0.8599000232815742, 0.43800002336502075)
last accs (train_acc, test_acc) (0.8982000181674957, 0.398000031709671)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.99it/s] 19%|#9        | 5/26 [00:00<00:00, 24.54it/s] 35%|###4      | 9/26 [00:00<00:00, 29.58it/s] 46%|####6     | 12/26 [00:00<00:00, 29.43it/s] 62%|######1   | 16/26 [00:00<00:00, 32.56it/s] 77%|#######6  | 20/26 [00:00<00:00, 34.22it/s] 92%|#########2| 24/26 [00:00<00:00, 35.65it/s]100%|##########| 26/26 [00:00<00:00, 29.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.174 (0.250)	train_nll   0.17 (  0.25)	train_penalty   0.00 (  0.01)	weight_norm  23.57 ( 23.43)	train_acc   0.92 (  0.90)	train_minacc   0.65 (  0.56)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 7.5773 (7.2738)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.48it/s] 27%|##6       | 7/26 [00:00<00:00, 35.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.47it/s] 50%|#####     | 13/26 [00:00<00:00, 43.38it/s] 69%|######9   | 18/26 [00:00<00:00, 43.02it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.02it/s] 92%|#########2| 24/26 [00:00<00:00, 45.84it/s]100%|##########| 26/26 [00:00<00:00, 39.44it/s]
Test: [   0/  26]	Loss 0.287 (0.287)	test_acc   0.90 (  0.90)	test_minacc   0.60 (  0.60)	test_majacc   0.96 (  0.96)	Loss_d 0.287 (0.287)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.243 (0.251)	test_acc   0.91 (  0.90)	test_minacc   0.64 (  0.59)	test_majacc   0.96 (  0.96)	Loss_d 0.243 (0.251)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.64 (  0.59)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.80 (  0.82)
Test: [  20/  26]	Loss 0.192 (0.239)	test_acc   0.94 (  0.90)	test_minacc   0.74 (  0.62)	test_majacc   0.97 (  0.95)	Loss_d 0.192 (0.239)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.74 (  0.62)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.82 (  0.81)
Test: [  26/  26]	Loss 0.125 (0.227)	test_acc   0.96 (  0.91)	test_minacc   0.86 (  0.64)	test_majacc   0.98 (  0.96)	Loss_d 0.125 (0.227)	test_acc_d   0.96 (  0.91)	test_minacc_d   0.86 (  0.64)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.82 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.19it/s]
Test: [  0/  1]	Loss 2.023 (2.023)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.92 (  0.92)	Loss_d 2.023 (2.023)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.40 (  0.40)
Test: [  1/  1]	Loss 2.023 (2.023)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.92 (  0.92)	Loss_d 2.023 (2.023)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.40 (  0.40)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/133/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0371 (0.0385)	validation_time 0.0004 (0.0009)	train_time 0.0366 (0.0375)
record: (train_acc, test_acc) (0.9090000216364861, 0.4400000274181366)
last accs (train_acc, test_acc) (0.9090000216364861, 0.4400000274181366)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 19%|#9        | 5/26 [00:00<00:00, 25.14it/s] 35%|###4      | 9/26 [00:00<00:00, 31.55it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.92it/s] 92%|#########2| 24/26 [00:00<00:00, 39.01it/s]100%|##########| 26/26 [00:00<00:00, 32.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.148 (0.235)	train_nll   0.15 (  0.23)	train_penalty   0.00 (  0.01)	weight_norm  23.87 ( 23.72)	train_acc   0.96 (  0.90)	train_minacc   0.78 (  0.62)	train_majacc   0.99 (  0.95)	train_corr   0.00 (  0.00)	l1 7.4154 (7.3680)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 27%|##6       | 7/26 [00:00<00:00, 34.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.45it/s] 50%|#####     | 13/26 [00:00<00:00, 41.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.41it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.41it/s] 96%|#########6| 25/26 [00:00<00:00, 47.44it/s]100%|##########| 26/26 [00:00<00:00, 39.15it/s]
Test: [   0/  26]	Loss 0.309 (0.309)	test_acc   0.86 (  0.86)	test_minacc   0.46 (  0.46)	test_majacc   0.94 (  0.94)	Loss_d 0.309 (0.309)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.227 (0.244)	test_acc   0.90 (  0.90)	test_minacc   0.64 (  0.58)	test_majacc   0.95 (  0.95)	Loss_d 0.227 (0.244)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.64 (  0.58)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.81 (  0.82)
Test: [  20/  26]	Loss 0.213 (0.231)	test_acc   0.93 (  0.90)	test_minacc   0.60 (  0.60)	test_majacc   0.98 (  0.96)	Loss_d 0.213 (0.231)	test_acc_d   0.93 (  0.90)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.84 (  0.82)
Test: [  26/  26]	Loss 0.122 (0.223)	test_acc   0.96 (  0.91)	test_minacc   0.86 (  0.61)	test_majacc   0.98 (  0.96)	Loss_d 0.122 (0.223)	test_acc_d   0.96 (  0.91)	test_minacc_d   0.86 (  0.61)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.82 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.20it/s]
Test: [  0/  1]	Loss 2.183 (2.183)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.92 (  0.92)	Loss_d 2.183 (2.183)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.50 (  0.50)
Test: [  1/  1]	Loss 2.183 (2.183)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.92 (  0.92)	Loss_d 2.183 (2.183)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.50 (  0.50)
Overall Timing[ 14/  1]	epoch_time 0.0349 (0.0383)	validation_time 0.0003 (0.0008)	train_time 0.0346 (0.0373)
record: (train_acc, test_acc) (0.9090000216364861, 0.4400000274181366)
last accs (train_acc, test_acc) (0.9063000183105469, 0.3930000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.21it/s] 19%|#9        | 5/26 [00:00<00:00, 26.68it/s] 35%|###4      | 9/26 [00:00<00:00, 32.63it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.47it/s] 69%|######9   | 18/26 [00:00<00:00, 37.63it/s] 85%|########4 | 22/26 [00:00<00:00, 38.21it/s]100%|##########| 26/26 [00:00<00:00, 33.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.008 (0.094)	train_nll   0.27 (  0.27)	train_penalty   0.01 (  0.01)	weight_norm  24.14 ( 24.03)	train_acc   0.90 (  0.89)	train_minacc   0.89 (  0.64)	train_majacc   0.90 (  0.93)	train_corr   0.00 (  0.00)	l1 6.1846 (7.1074)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.94it/s] 35%|###4      | 9/26 [00:00<00:00, 42.44it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.44it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.32it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.83it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.83it/s]100%|##########| 26/26 [00:00<00:00, 43.25it/s]
Test: [   0/  26]	Loss 0.387 (0.387)	test_acc   0.83 (  0.83)	test_minacc   0.55 (  0.55)	test_majacc   0.89 (  0.89)	Loss_d 0.387 (0.387)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.318 (0.331)	test_acc   0.86 (  0.86)	test_minacc   0.70 (  0.68)	test_majacc   0.89 (  0.89)	Loss_d 0.318 (0.331)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.70 (  0.68)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.69 (  0.68)
Test: [  20/  26]	Loss 0.339 (0.322)	test_acc   0.85 (  0.86)	test_minacc   0.67 (  0.70)	test_majacc   0.88 (  0.89)	Loss_d 0.339 (0.322)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.67 (  0.70)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.70 (  0.69)
Test: [  26/  26]	Loss 0.292 (0.325)	test_acc   0.87 (  0.86)	test_minacc   0.84 (  0.70)	test_majacc   0.88 (  0.89)	Loss_d 0.292 (0.325)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.84 (  0.70)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.65 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.25it/s]
Test: [  0/  1]	Loss 1.323 (1.323)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.85 (  0.85)	Loss_d 1.323 (1.323)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 1.323 (1.323)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.85 (  0.85)	Loss_d 1.323 (1.323)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.17 (  0.17)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/133/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0347 (0.0381)	validation_time 0.0003 (0.0008)	train_time 0.0343 (0.0371)
record: (train_acc, test_acc) (0.8620000252723694, 0.5110000371932983)
last accs (train_acc, test_acc) (0.8620000252723694, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 19%|#9        | 5/26 [00:00<00:00, 24.69it/s] 35%|###4      | 9/26 [00:00<00:00, 31.03it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.34it/s] 92%|#########2| 24/26 [00:00<00:00, 39.06it/s]100%|##########| 26/26 [00:00<00:00, 32.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.002)	train_nll   0.39 (  0.40)	train_penalty   0.00 (  0.00)	weight_norm  24.20 ( 24.18)	train_acc   0.80 (  0.81)	train_minacc   0.86 (  0.78)	train_majacc   0.79 (  0.81)	train_corr   0.00 (  0.00)	l1 5.4052 (5.6886)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 29.06it/s] 35%|###4      | 9/26 [00:00<00:00, 39.25it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.25it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.12it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.12it/s] 81%|########  | 21/26 [00:00<00:00, 47.94it/s]100%|##########| 26/26 [00:00<00:00, 42.33it/s]
Test: [   0/  26]	Loss 0.430 (0.430)	test_acc   0.77 (  0.77)	test_minacc   0.71 (  0.71)	test_majacc   0.78 (  0.78)	Loss_d 0.430 (0.430)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.56 (  0.56)
Test: [  10/  26]	Loss 0.369 (0.393)	test_acc   0.80 (  0.80)	test_minacc   0.71 (  0.73)	test_majacc   0.81 (  0.81)	Loss_d 0.369 (0.393)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.71 (  0.73)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.62 (  0.59)
Test: [  20/  26]	Loss 0.398 (0.388)	test_acc   0.79 (  0.80)	test_minacc   0.74 (  0.75)	test_majacc   0.80 (  0.81)	Loss_d 0.398 (0.388)	test_acc_d   0.79 (  0.80)	test_minacc_d   0.74 (  0.75)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.57 (  0.59)
Test: [  26/  26]	Loss 0.391 (0.390)	test_acc   0.80 (  0.80)	test_minacc   0.86 (  0.76)	test_majacc   0.79 (  0.81)	Loss_d 0.391 (0.390)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.86 (  0.76)	test_majacc_d   0.79 (  0.81)	test_corr_d   0.53 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.78it/s]
Test: [  0/  1]	Loss 0.999 (0.999)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.76 (  0.76)	Loss_d 0.999 (0.999)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.76 (  0.76)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.999 (0.999)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.76 (  0.76)	Loss_d 0.999 (0.999)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.76 (  0.76)	test_corr_d  -0.02 ( -0.02)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/133/checkpoints/model_best.pth
Overall Timing[ 16/  1]	epoch_time 0.0348 (0.0379)	validation_time 0.0004 (0.0008)	train_time 0.0344 (0.0370)
record: (train_acc, test_acc) (0.7987000271081924, 0.6100000143051147)
last accs (train_acc, test_acc) (0.7987000271081924, 0.6100000143051147)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.20it/s] 19%|#9        | 5/26 [00:00<00:00, 21.18it/s] 38%|###8      | 10/26 [00:00<00:00, 29.91it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.29it/s] 69%|######9   | 18/26 [00:00<00:00, 35.48it/s] 85%|########4 | 22/26 [00:00<00:00, 36.84it/s]100%|##########| 26/26 [00:00<00:00, 37.59it/s]100%|##########| 26/26 [00:00<00:00, 30.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.001 (0.001)	train_nll   0.43 (  0.42)	train_penalty   0.00 (  0.00)	weight_norm  24.21 ( 24.21)	train_acc   0.78 (  0.78)	train_minacc   0.84 (  0.77)	train_majacc   0.77 (  0.79)	train_corr   0.00 (  0.00)	l1 5.4196 (5.4561)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.59it/s] 27%|##6       | 7/26 [00:00<00:00, 35.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.97it/s] 50%|#####     | 13/26 [00:00<00:00, 42.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.93it/s] 96%|#########6| 25/26 [00:00<00:00, 48.06it/s]100%|##########| 26/26 [00:00<00:00, 40.20it/s]
Test: [   0/  26]	Loss 0.450 (0.450)	test_acc   0.76 (  0.76)	test_minacc   0.71 (  0.71)	test_majacc   0.77 (  0.77)	Loss_d 0.450 (0.450)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.52 (  0.52)
Test: [  10/  26]	Loss 0.382 (0.420)	test_acc   0.80 (  0.78)	test_minacc   0.71 (  0.75)	test_majacc   0.81 (  0.78)	Loss_d 0.382 (0.420)	test_acc_d   0.80 (  0.78)	test_minacc_d   0.71 (  0.75)	test_majacc_d   0.81 (  0.78)	test_corr_d   0.59 (  0.54)
Test: [  20/  26]	Loss 0.423 (0.413)	test_acc   0.77 (  0.78)	test_minacc   0.74 (  0.78)	test_majacc   0.77 (  0.79)	Loss_d 0.423 (0.413)	test_acc_d   0.77 (  0.78)	test_minacc_d   0.74 (  0.78)	test_majacc_d   0.77 (  0.79)	test_corr_d   0.53 (  0.54)
Test: [  26/  26]	Loss 0.425 (0.416)	test_acc   0.79 (  0.79)	test_minacc   0.86 (  0.78)	test_majacc   0.77 (  0.79)	Loss_d 0.425 (0.416)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.86 (  0.78)	test_majacc_d   0.77 (  0.79)	test_corr_d   0.49 (  0.54)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.34it/s]
Test: [  0/  1]	Loss 0.948 (0.948)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.77 (  0.77)	Loss_d 0.948 (0.948)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.948 (0.948)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.77 (  0.77)	Loss_d 0.948 (0.948)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.10 ( -0.10)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/133/checkpoints/model_best.pth
Overall Timing[ 17/  1]	epoch_time 0.0353 (0.0377)	validation_time 0.0004 (0.0007)	train_time 0.0349 (0.0369)
record: (train_acc, test_acc) (0.7852000287771225, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7852000287771225, 0.6420000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.12it/s] 19%|#9        | 5/26 [00:00<00:00, 24.15it/s] 35%|###4      | 9/26 [00:00<00:00, 29.94it/s] 50%|#####     | 13/26 [00:00<00:00, 32.38it/s] 65%|######5   | 17/26 [00:00<00:00, 34.86it/s] 85%|########4 | 22/26 [00:00<00:00, 37.04it/s]100%|##########| 26/26 [00:00<00:00, 37.89it/s]100%|##########| 26/26 [00:00<00:00, 31.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.001 (0.001)	train_nll   0.40 (  0.42)	train_penalty   0.00 (  0.00)	weight_norm  24.22 ( 24.21)	train_acc   0.80 (  0.78)	train_minacc   0.84 (  0.77)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 5.2997 (5.3935)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.60it/s] 31%|###       | 8/26 [00:00<00:00, 41.53it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.53it/s] 50%|#####     | 13/26 [00:00<00:00, 44.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 50.05it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 50.05it/s] 96%|#########6| 25/26 [00:00<00:00, 49.64it/s]100%|##########| 26/26 [00:00<00:00, 42.10it/s]
Test: [   0/  26]	Loss 0.435 (0.435)	test_acc   0.77 (  0.77)	test_minacc   0.74 (  0.74)	test_majacc   0.77 (  0.77)	Loss_d 0.435 (0.435)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.55 (  0.55)
Test: [  10/  26]	Loss 0.380 (0.420)	test_acc   0.80 (  0.78)	test_minacc   0.71 (  0.73)	test_majacc   0.81 (  0.79)	Loss_d 0.380 (0.420)	test_acc_d   0.80 (  0.78)	test_minacc_d   0.71 (  0.73)	test_majacc_d   0.81 (  0.79)	test_corr_d   0.62 (  0.57)
Test: [  20/  26]	Loss 0.421 (0.408)	test_acc   0.77 (  0.79)	test_minacc   0.76 (  0.76)	test_majacc   0.77 (  0.79)	Loss_d 0.421 (0.408)	test_acc_d   0.77 (  0.79)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.77 (  0.79)	test_corr_d   0.56 (  0.57)
Test: [  26/  26]	Loss 0.402 (0.410)	test_acc   0.79 (  0.79)	test_minacc   0.84 (  0.77)	test_majacc   0.78 (  0.79)	Loss_d 0.402 (0.410)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.84 (  0.77)	test_majacc_d   0.78 (  0.79)	test_corr_d   0.54 (  0.57)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.45it/s]
Test: [  0/  1]	Loss 1.013 (1.013)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.80 (  0.80)	Loss_d 1.013 (1.013)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.80 (  0.80)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 1.013 (1.013)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.80 (  0.80)	Loss_d 1.013 (1.013)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.80 (  0.80)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 18/  1]	epoch_time 0.0335 (0.0375)	validation_time 0.0004 (0.0007)	train_time 0.0331 (0.0367)
record: (train_acc, test_acc) (0.7852000287771225, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7888000299334526, 0.6410000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.93it/s] 19%|#9        | 5/26 [00:00<00:00, 27.03it/s] 38%|###8      | 10/26 [00:00<00:00, 34.46it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.83it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.35it/s] 96%|#########6| 25/26 [00:00<00:00, 38.95it/s]100%|##########| 26/26 [00:00<00:00, 33.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.002 (0.001)	train_nll   0.39 (  0.42)	train_penalty   0.00 (  0.00)	weight_norm  24.22 ( 24.22)	train_acc   0.80 (  0.78)	train_minacc   0.86 (  0.78)	train_majacc   0.78 (  0.78)	train_corr   0.00 (  0.00)	l1 5.2755 (5.4788)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.20it/s] 23%|##3       | 6/26 [00:00<00:00, 29.17it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.17it/s] 42%|####2     | 11/26 [00:00<00:00, 37.68it/s] 62%|######1   | 16/26 [00:00<00:00, 40.86it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.86it/s] 85%|########4 | 22/26 [00:00<00:00, 47.24it/s]100%|##########| 26/26 [00:00<00:00, 38.77it/s]
Test: [   0/  26]	Loss 0.415 (0.415)	test_acc   0.77 (  0.77)	test_minacc   0.72 (  0.72)	test_majacc   0.78 (  0.78)	Loss_d 0.415 (0.415)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.371 (0.400)	test_acc   0.80 (  0.79)	test_minacc   0.73 (  0.73)	test_majacc   0.81 (  0.80)	Loss_d 0.371 (0.400)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.81 (  0.80)	test_corr_d   0.63 (  0.60)
Test: [  20/  26]	Loss 0.401 (0.389)	test_acc   0.78 (  0.80)	test_minacc   0.76 (  0.76)	test_majacc   0.79 (  0.81)	Loss_d 0.401 (0.389)	test_acc_d   0.78 (  0.80)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.79 (  0.81)	test_corr_d   0.60 (  0.61)
Test: [  26/  26]	Loss 0.386 (0.392)	test_acc   0.80 (  0.80)	test_minacc   0.86 (  0.77)	test_majacc   0.79 (  0.81)	Loss_d 0.386 (0.392)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.86 (  0.77)	test_majacc_d   0.79 (  0.81)	test_corr_d   0.57 (  0.60)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.74it/s]
Test: [  0/  1]	Loss 1.020 (1.020)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.84 (  0.84)	Loss_d 1.020 (1.020)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.84 (  0.84)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 1.020 (1.020)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.84 (  0.84)	Loss_d 1.020 (1.020)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.84 (  0.84)	test_corr_d  -0.00 ( -0.00)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/133/checkpoints/model_best.pth
Overall Timing[ 19/  1]	epoch_time 0.0360 (0.0374)	validation_time 0.0003 (0.0007)	train_time 0.0356 (0.0366)
record: (train_acc, test_acc) (0.7999000247120858, 0.6440000534057617)
last accs (train_acc, test_acc) (0.7999000247120858, 0.6440000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.46it/s] 19%|#9        | 5/26 [00:00<00:00, 25.58it/s] 35%|###4      | 9/26 [00:00<00:00, 30.91it/s] 50%|#####     | 13/26 [00:00<00:00, 32.41it/s] 65%|######5   | 17/26 [00:00<00:00, 33.63it/s] 81%|########  | 21/26 [00:00<00:00, 35.18it/s]100%|##########| 26/26 [00:00<00:00, 37.78it/s]100%|##########| 26/26 [00:00<00:00, 31.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.001)	train_nll   0.41 (  0.42)	train_penalty   0.00 (  0.00)	weight_norm  24.23 ( 24.23)	train_acc   0.77 (  0.78)	train_minacc   0.86 (  0.76)	train_majacc   0.75 (  0.78)	train_corr   0.00 (  0.00)	l1 5.4113 (5.5546)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 23%|##3       | 6/26 [00:00<00:00, 29.46it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.46it/s] 46%|####6     | 12/26 [00:00<00:00, 40.59it/s] 65%|######5   | 17/26 [00:00<00:00, 41.87it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.87it/s] 88%|########8 | 23/26 [00:00<00:00, 47.04it/s]100%|##########| 26/26 [00:00<00:00, 38.21it/s]
Test: [   0/  26]	Loss 0.432 (0.432)	test_acc   0.77 (  0.77)	test_minacc   0.74 (  0.74)	test_majacc   0.78 (  0.78)	Loss_d 0.432 (0.432)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.56 (  0.56)
Test: [  10/  26]	Loss 0.379 (0.413)	test_acc   0.79 (  0.78)	test_minacc   0.75 (  0.74)	test_majacc   0.80 (  0.79)	Loss_d 0.379 (0.413)	test_acc_d   0.79 (  0.78)	test_minacc_d   0.75 (  0.74)	test_majacc_d   0.80 (  0.79)	test_corr_d   0.61 (  0.57)
Test: [  20/  26]	Loss 0.405 (0.399)	test_acc   0.79 (  0.79)	test_minacc   0.78 (  0.77)	test_majacc   0.79 (  0.80)	Loss_d 0.405 (0.399)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.78 (  0.77)	test_majacc_d   0.79 (  0.80)	test_corr_d   0.58 (  0.58)
Test: [  26/  26]	Loss 0.407 (0.402)	test_acc   0.78 (  0.79)	test_minacc   0.86 (  0.78)	test_majacc   0.77 (  0.80)	Loss_d 0.407 (0.402)	test_acc_d   0.78 (  0.79)	test_minacc_d   0.86 (  0.78)	test_majacc_d   0.77 (  0.80)	test_corr_d   0.54 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.84it/s]
Test: [  0/  1]	Loss 1.030 (1.030)	test_acc   0.66 (  0.66)	test_minacc   0.64 (  0.64)	test_majacc   0.80 (  0.80)	Loss_d 1.030 (1.030)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.80 (  0.80)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 1.030 (1.030)	test_acc   0.66 (  0.66)	test_minacc   0.64 (  0.64)	test_majacc   0.80 (  0.80)	Loss_d 1.030 (1.030)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.80 (  0.80)	test_corr_d  -0.04 ( -0.04)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/133/checkpoints/model_best.pth
Overall Timing[ 20/  1]	epoch_time 0.0367 (0.0374)	validation_time 0.0004 (0.0007)	train_time 0.0363 (0.0366)
record: (train_acc, test_acc) (0.7925000290870666, 0.6570000052452087)
last accs (train_acc, test_acc) (0.7925000290870666, 0.6570000052452087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 19%|#9        | 5/26 [00:00<00:00, 21.32it/s] 35%|###4      | 9/26 [00:00<00:00, 28.56it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.52it/s] 92%|#########2| 24/26 [00:00<00:00, 37.81it/s]100%|##########| 26/26 [00:00<00:00, 30.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.001)	train_nll   0.41 (  0.42)	train_penalty   0.00 (  0.00)	weight_norm  24.23 ( 24.23)	train_acc   0.76 (  0.78)	train_minacc   0.86 (  0.77)	train_majacc   0.75 (  0.78)	train_corr   0.00 (  0.00)	l1 5.3564 (5.5051)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 27%|##6       | 7/26 [00:00<00:00, 31.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.47it/s] 50%|#####     | 13/26 [00:00<00:00, 38.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.02it/s] 96%|#########6| 25/26 [00:00<00:00, 46.96it/s]100%|##########| 26/26 [00:00<00:00, 38.22it/s]
Test: [   0/  26]	Loss 0.437 (0.437)	test_acc   0.76 (  0.76)	test_minacc   0.74 (  0.74)	test_majacc   0.76 (  0.76)	Loss_d 0.437 (0.437)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.56 (  0.56)
Test: [  10/  26]	Loss 0.384 (0.425)	test_acc   0.78 (  0.77)	test_minacc   0.75 (  0.73)	test_majacc   0.79 (  0.78)	Loss_d 0.384 (0.425)	test_acc_d   0.78 (  0.77)	test_minacc_d   0.75 (  0.73)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.62 (  0.58)
Test: [  20/  26]	Loss 0.401 (0.403)	test_acc   0.79 (  0.79)	test_minacc   0.79 (  0.77)	test_majacc   0.80 (  0.79)	Loss_d 0.401 (0.403)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.79 (  0.77)	test_majacc_d   0.80 (  0.79)	test_corr_d   0.59 (  0.59)
Test: [  26/  26]	Loss 0.407 (0.405)	test_acc   0.77 (  0.79)	test_minacc   0.86 (  0.77)	test_majacc   0.76 (  0.79)	Loss_d 0.407 (0.405)	test_acc_d   0.77 (  0.79)	test_minacc_d   0.86 (  0.77)	test_majacc_d   0.76 (  0.79)	test_corr_d   0.55 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.24it/s]
Test: [  0/  1]	Loss 1.084 (1.084)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.77 (  0.77)	Loss_d 1.084 (1.084)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 1.084 (1.084)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.77 (  0.77)	Loss_d 1.084 (1.084)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 21/  1]	epoch_time 0.0341 (0.0372)	validation_time 0.0004 (0.0007)	train_time 0.0337 (0.0365)
record: (train_acc, test_acc) (0.7925000290870666, 0.6570000052452087)
last accs (train_acc, test_acc) (0.787500021994114, 0.6520000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.53it/s] 19%|#9        | 5/26 [00:00<00:00, 24.95it/s] 35%|###4      | 9/26 [00:00<00:00, 31.30it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.60it/s] 92%|#########2| 24/26 [00:00<00:00, 39.23it/s]100%|##########| 26/26 [00:00<00:00, 32.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.001)	train_nll   0.41 (  0.43)	train_penalty   0.00 (  0.00)	weight_norm  24.24 ( 24.24)	train_acc   0.76 (  0.77)	train_minacc   0.86 (  0.79)	train_majacc   0.74 (  0.77)	train_corr   0.00 (  0.00)	l1 5.3992 (5.4962)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.88it/s] 27%|##6       | 7/26 [00:00<00:00, 33.34it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.34it/s] 50%|#####     | 13/26 [00:00<00:00, 39.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.18it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.18it/s] 96%|#########6| 25/26 [00:00<00:00, 47.00it/s]100%|##########| 26/26 [00:00<00:00, 39.25it/s]
Test: [   0/  26]	Loss 0.437 (0.437)	test_acc   0.74 (  0.74)	test_minacc   0.72 (  0.72)	test_majacc   0.74 (  0.74)	Loss_d 0.437 (0.437)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.56 (  0.56)
Test: [  10/  26]	Loss 0.390 (0.430)	test_acc   0.79 (  0.76)	test_minacc   0.75 (  0.73)	test_majacc   0.80 (  0.77)	Loss_d 0.390 (0.430)	test_acc_d   0.79 (  0.76)	test_minacc_d   0.75 (  0.73)	test_majacc_d   0.80 (  0.77)	test_corr_d   0.62 (  0.58)
Test: [  20/  26]	Loss 0.392 (0.404)	test_acc   0.81 (  0.78)	test_minacc   0.81 (  0.76)	test_majacc   0.81 (  0.79)	Loss_d 0.392 (0.404)	test_acc_d   0.81 (  0.78)	test_minacc_d   0.81 (  0.76)	test_majacc_d   0.81 (  0.79)	test_corr_d   0.61 (  0.59)
Test: [  26/  26]	Loss 0.404 (0.405)	test_acc   0.76 (  0.78)	test_minacc   0.86 (  0.77)	test_majacc   0.74 (  0.79)	Loss_d 0.404 (0.405)	test_acc_d   0.76 (  0.78)	test_minacc_d   0.86 (  0.77)	test_majacc_d   0.74 (  0.79)	test_corr_d   0.55 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.84it/s]
Test: [  0/  1]	Loss 1.116 (1.116)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.77 (  0.77)	Loss_d 1.116 (1.116)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 1.116 (1.116)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.77 (  0.77)	Loss_d 1.116 (1.116)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 22/  1]	epoch_time 0.0350 (0.0371)	validation_time 0.0003 (0.0007)	train_time 0.0347 (0.0364)
record: (train_acc, test_acc) (0.7925000290870666, 0.6570000052452087)
last accs (train_acc, test_acc) (0.7840000286698341, 0.6530000567436218)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.07it/s] 23%|##3       | 6/26 [00:00<00:00, 27.76it/s] 38%|###8      | 10/26 [00:00<00:00, 32.65it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.65it/s] 92%|#########2| 24/26 [00:00<00:00, 38.26it/s]100%|##########| 26/26 [00:00<00:00, 32.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 5.192887783050537
set z to 4.93324339389801
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.001 (0.002)	train_nll   0.43 (  0.42)	train_penalty   0.00 (  0.00)	weight_norm  24.25 ( 24.25)	train_acc   0.76 (  0.77)	train_minacc   0.86 (  0.77)	train_majacc   0.74 (  0.78)	train_corr   0.00 (  0.00)	l1 5.6642 (5.5309)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.52it/s] 27%|##6       | 7/26 [00:00<00:00, 32.89it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.89it/s] 50%|#####     | 13/26 [00:00<00:00, 39.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.00it/s] 96%|#########6| 25/26 [00:00<00:00, 46.64it/s]100%|##########| 26/26 [00:00<00:00, 38.66it/s]
Test: [   0/  26]	Loss 0.450 (0.450)	test_acc   0.73 (  0.73)	test_minacc   0.74 (  0.74)	test_majacc   0.73 (  0.73)	Loss_d 0.450 (0.450)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.53 (  0.53)
Test: [  10/  26]	Loss 0.410 (0.449)	test_acc   0.77 (  0.74)	test_minacc   0.77 (  0.74)	test_majacc   0.77 (  0.74)	Loss_d 0.410 (0.449)	test_acc_d   0.77 (  0.74)	test_minacc_d   0.77 (  0.74)	test_majacc_d   0.77 (  0.74)	test_corr_d   0.60 (  0.55)
Test: [  20/  26]	Loss 0.389 (0.419)	test_acc   0.82 (  0.77)	test_minacc   0.79 (  0.77)	test_majacc   0.82 (  0.77)	Loss_d 0.389 (0.419)	test_acc_d   0.82 (  0.77)	test_minacc_d   0.79 (  0.77)	test_majacc_d   0.82 (  0.77)	test_corr_d   0.59 (  0.57)
Test: [  26/  26]	Loss 0.411 (0.418)	test_acc   0.78 (  0.77)	test_minacc   0.86 (  0.78)	test_majacc   0.76 (  0.77)	Loss_d 0.411 (0.418)	test_acc_d   0.78 (  0.77)	test_minacc_d   0.86 (  0.78)	test_majacc_d   0.76 (  0.77)	test_corr_d   0.53 (  0.57)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.21it/s]
Test: [  0/  1]	Loss 1.175 (1.175)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.75 (  0.75)	Loss_d 1.175 (1.175)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 1.175 (1.175)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.75 (  0.75)	Loss_d 1.175 (1.175)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 23/  1]	epoch_time 0.0355 (0.0371)	validation_time 0.0004 (0.0007)	train_time 0.0351 (0.0363)
record: (train_acc, test_acc) (0.7925000290870666, 0.6570000052452087)
last accs (train_acc, test_acc) (0.773400027692318, 0.6520000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 19%|#9        | 5/26 [00:00<00:00, 23.03it/s] 35%|###4      | 9/26 [00:00<00:00, 28.62it/s] 50%|#####     | 13/26 [00:00<00:00, 32.56it/s] 65%|######5   | 17/26 [00:00<00:00, 34.86it/s] 81%|########  | 21/26 [00:00<00:00, 36.38it/s] 96%|#########6| 25/26 [00:00<00:00, 37.41it/s]100%|##########| 26/26 [00:00<00:00, 30.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.004 (0.002)	train_nll   0.46 (  0.43)	train_penalty   0.00 (  0.00)	weight_norm  24.28 ( 24.26)	train_acc   0.74 (  0.77)	train_minacc   0.86 (  0.79)	train_majacc   0.71 (  0.77)	train_corr   0.00 (  0.00)	l1 6.1898 (5.4982)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.49it/s] 31%|###       | 8/26 [00:00<00:00, 35.40it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.40it/s] 50%|#####     | 13/26 [00:00<00:00, 39.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.43it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.43it/s] 96%|#########6| 25/26 [00:00<00:00, 47.31it/s]100%|##########| 26/26 [00:00<00:00, 38.60it/s]
Test: [   0/  26]	Loss 0.515 (0.515)	test_acc   0.70 (  0.70)	test_minacc   0.75 (  0.75)	test_majacc   0.69 (  0.69)	Loss_d 0.515 (0.515)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.45 (  0.45)
Test: [  10/  26]	Loss 0.487 (0.523)	test_acc   0.73 (  0.70)	test_minacc   0.71 (  0.73)	test_majacc   0.73 (  0.70)	Loss_d 0.487 (0.523)	test_acc_d   0.73 (  0.70)	test_minacc_d   0.71 (  0.73)	test_majacc_d   0.73 (  0.70)	test_corr_d   0.54 (  0.47)
Test: [  20/  26]	Loss 0.426 (0.488)	test_acc   0.76 (  0.72)	test_minacc   0.78 (  0.77)	test_majacc   0.76 (  0.72)	Loss_d 0.426 (0.488)	test_acc_d   0.76 (  0.72)	test_minacc_d   0.78 (  0.77)	test_majacc_d   0.76 (  0.72)	test_corr_d   0.54 (  0.49)
Test: [  26/  26]	Loss 0.440 (0.481)	test_acc   0.75 (  0.73)	test_minacc   0.86 (  0.78)	test_majacc   0.73 (  0.72)	Loss_d 0.440 (0.481)	test_acc_d   0.75 (  0.73)	test_minacc_d   0.86 (  0.78)	test_majacc_d   0.73 (  0.72)	test_corr_d   0.48 (  0.49)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.04it/s]
Test: [  0/  1]	Loss 1.391 (1.391)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.69 (  0.69)	Loss_d 1.391 (1.391)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 1.391 (1.391)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.69 (  0.69)	Loss_d 1.391 (1.391)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 24/  1]	epoch_time 0.0351 (0.0370)	validation_time 0.0003 (0.0006)	train_time 0.0348 (0.0363)
record: (train_acc, test_acc) (0.7925000290870666, 0.6570000052452087)
last accs (train_acc, test_acc) (0.7301000316739082, 0.6540000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.43it/s] 23%|##3       | 6/26 [00:00<00:00, 27.53it/s] 42%|####2     | 11/26 [00:00<00:00, 33.43it/s] 62%|######1   | 16/26 [00:00<00:00, 36.54it/s] 81%|########  | 21/26 [00:00<00:00, 38.05it/s] 96%|#########6| 25/26 [00:00<00:00, 38.47it/s]100%|##########| 26/26 [00:00<00:00, 33.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.001 (0.002)	train_nll   0.53 (  0.52)	train_penalty   0.00 (  0.00)	weight_norm  24.30 ( 24.29)	train_acc   0.73 (  0.66)	train_minacc   0.81 (  0.84)	train_majacc   0.72 (  0.63)	train_corr   0.00 (  0.00)	l1 4.5575 (4.9502)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.69it/s] 27%|##6       | 7/26 [00:00<00:00, 36.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.79it/s] 50%|#####     | 13/26 [00:00<00:00, 41.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.51it/s] 96%|#########6| 25/26 [00:00<00:00, 47.94it/s]100%|##########| 26/26 [00:00<00:00, 40.86it/s]
Test: [   0/  26]	Loss 0.545 (0.545)	test_acc   0.73 (  0.73)	test_minacc   0.80 (  0.80)	test_majacc   0.72 (  0.72)	Loss_d 0.545 (0.545)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.553 (0.553)	test_acc   0.69 (  0.72)	test_minacc   0.82 (  0.79)	test_majacc   0.67 (  0.71)	Loss_d 0.553 (0.553)	test_acc_d   0.69 (  0.72)	test_minacc_d   0.82 (  0.79)	test_majacc_d   0.67 (  0.71)	test_corr_d   0.37 (  0.39)
Test: [  20/  26]	Loss 0.533 (0.549)	test_acc   0.72 (  0.72)	test_minacc   0.72 (  0.80)	test_majacc   0.72 (  0.71)	Loss_d 0.533 (0.549)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.72 (  0.80)	test_majacc_d   0.72 (  0.71)	test_corr_d   0.46 (  0.40)
Test: [  26/  26]	Loss 0.529 (0.547)	test_acc   0.73 (  0.72)	test_minacc   0.81 (  0.80)	test_majacc   0.71 (  0.71)	Loss_d 0.529 (0.547)	test_acc_d   0.73 (  0.72)	test_minacc_d   0.81 (  0.80)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.38 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.30it/s]
Test: [  0/  1]	Loss 0.969 (0.969)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.74 (  0.74)	Loss_d 0.969 (0.969)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.969 (0.969)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.74 (  0.74)	Loss_d 0.969 (0.969)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.06 ( -0.06)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/133/checkpoints/model_best.pth
Overall Timing[ 25/  1]	epoch_time 0.0350 (0.0369)	validation_time 0.0004 (0.0006)	train_time 0.0346 (0.0362)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.80it/s] 19%|#9        | 5/26 [00:00<00:00, 24.40it/s] 35%|###4      | 9/26 [00:00<00:00, 31.03it/s] 50%|#####     | 13/26 [00:00<00:00, 33.71it/s] 69%|######9   | 18/26 [00:00<00:00, 36.69it/s] 88%|########8 | 23/26 [00:00<00:00, 38.46it/s]100%|##########| 26/26 [00:00<00:00, 32.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.001 (0.001)	train_nll   0.59 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  24.32 ( 24.31)	train_acc   0.67 (  0.71)	train_minacc   0.84 (  0.76)	train_majacc   0.64 (  0.71)	train_corr   0.00 (  0.00)	l1 4.5131 (4.4560)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.87it/s] 27%|##6       | 7/26 [00:00<00:00, 31.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.78it/s] 50%|#####     | 13/26 [00:00<00:00, 38.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.00it/s] 96%|#########6| 25/26 [00:00<00:00, 46.74it/s]100%|##########| 26/26 [00:00<00:00, 37.95it/s]
Test: [   0/  26]	Loss 0.600 (0.600)	test_acc   0.69 (  0.69)	test_minacc   0.74 (  0.74)	test_majacc   0.68 (  0.68)	Loss_d 0.600 (0.600)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.30 (  0.30)
Test: [  10/  26]	Loss 0.619 (0.608)	test_acc   0.64 (  0.68)	test_minacc   0.79 (  0.77)	test_majacc   0.62 (  0.66)	Loss_d 0.619 (0.608)	test_acc_d   0.64 (  0.68)	test_minacc_d   0.79 (  0.77)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.24 (  0.27)
Test: [  20/  26]	Loss 0.601 (0.611)	test_acc   0.68 (  0.67)	test_minacc   0.67 (  0.77)	test_majacc   0.68 (  0.65)	Loss_d 0.601 (0.611)	test_acc_d   0.68 (  0.67)	test_minacc_d   0.67 (  0.77)	test_majacc_d   0.68 (  0.65)	test_corr_d   0.33 (  0.26)
Test: [  26/  26]	Loss 0.592 (0.610)	test_acc   0.67 (  0.67)	test_minacc   0.84 (  0.77)	test_majacc   0.64 (  0.65)	Loss_d 0.592 (0.610)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.84 (  0.77)	test_majacc_d   0.64 (  0.65)	test_corr_d   0.25 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.30it/s]
Test: [  0/  1]	Loss 0.913 (0.913)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.73 (  0.73)	Loss_d 0.913 (0.913)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.913 (0.913)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.73 (  0.73)	Loss_d 0.913 (0.913)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 26/  1]	epoch_time 0.0334 (0.0368)	validation_time 0.0004 (0.0006)	train_time 0.0330 (0.0361)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.670300027191639, 0.6620000600814819)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 19%|#9        | 5/26 [00:00<00:00, 22.45it/s] 35%|###4      | 9/26 [00:00<00:00, 29.12it/s] 50%|#####     | 13/26 [00:00<00:00, 32.89it/s] 69%|######9   | 18/26 [00:00<00:00, 35.98it/s] 88%|########8 | 23/26 [00:00<00:00, 37.63it/s]100%|##########| 26/26 [00:00<00:00, 31.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.59 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.32 ( 24.32)	train_acc   0.66 (  0.70)	train_minacc   0.78 (  0.74)	train_majacc   0.64 (  0.69)	train_corr   0.00 (  0.00)	l1 4.2857 (4.2341)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.62it/s] 27%|##6       | 7/26 [00:00<00:00, 36.86it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.86it/s] 50%|#####     | 13/26 [00:00<00:00, 42.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.77it/s] 96%|#########6| 25/26 [00:00<00:00, 48.59it/s]100%|##########| 26/26 [00:00<00:00, 41.02it/s]
Test: [   0/  26]	Loss 0.598 (0.598)	test_acc   0.69 (  0.69)	test_minacc   0.74 (  0.74)	test_majacc   0.68 (  0.68)	Loss_d 0.598 (0.598)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.617 (0.602)	test_acc   0.65 (  0.69)	test_minacc   0.82 (  0.76)	test_majacc   0.62 (  0.67)	Loss_d 0.617 (0.602)	test_acc_d   0.65 (  0.69)	test_minacc_d   0.82 (  0.76)	test_majacc_d   0.62 (  0.67)	test_corr_d   0.25 (  0.29)
Test: [  20/  26]	Loss 0.608 (0.609)	test_acc   0.68 (  0.67)	test_minacc   0.66 (  0.75)	test_majacc   0.68 (  0.66)	Loss_d 0.608 (0.609)	test_acc_d   0.68 (  0.67)	test_minacc_d   0.66 (  0.75)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.33 (  0.27)
Test: [  26/  26]	Loss 0.594 (0.607)	test_acc   0.66 (  0.67)	test_minacc   0.78 (  0.74)	test_majacc   0.63 (  0.66)	Loss_d 0.594 (0.607)	test_acc_d   0.66 (  0.67)	test_minacc_d   0.78 (  0.74)	test_majacc_d   0.63 (  0.66)	test_corr_d   0.26 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.67it/s]
Test: [  0/  1]	Loss 0.900 (0.900)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.74 (  0.74)	Loss_d 0.900 (0.900)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.900 (0.900)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.74 (  0.74)	Loss_d 0.900 (0.900)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 27/  1]	epoch_time 0.0359 (0.0368)	validation_time 0.0004 (0.0006)	train_time 0.0355 (0.0361)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6746000286340713, 0.6370000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.60it/s] 19%|#9        | 5/26 [00:00<00:00, 23.17it/s] 35%|###4      | 9/26 [00:00<00:00, 30.07it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.53it/s] 92%|#########2| 24/26 [00:00<00:00, 37.95it/s]100%|##########| 26/26 [00:00<00:00, 31.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.57 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.32 ( 24.32)	train_acc   0.66 (  0.69)	train_minacc   0.73 (  0.73)	train_majacc   0.64 (  0.69)	train_corr   0.00 (  0.00)	l1 4.0859 (4.1269)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.12it/s] 31%|###       | 8/26 [00:00<00:00, 40.55it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.55it/s] 50%|#####     | 13/26 [00:00<00:00, 41.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.79it/s] 96%|#########6| 25/26 [00:00<00:00, 47.79it/s]100%|##########| 26/26 [00:00<00:00, 40.78it/s]
Test: [   0/  26]	Loss 0.584 (0.584)	test_acc   0.70 (  0.70)	test_minacc   0.72 (  0.72)	test_majacc   0.69 (  0.69)	Loss_d 0.584 (0.584)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.594 (0.583)	test_acc   0.67 (  0.69)	test_minacc   0.77 (  0.75)	test_majacc   0.65 (  0.68)	Loss_d 0.594 (0.583)	test_acc_d   0.67 (  0.69)	test_minacc_d   0.77 (  0.75)	test_majacc_d   0.65 (  0.68)	test_corr_d   0.32 (  0.36)
Test: [  20/  26]	Loss 0.594 (0.591)	test_acc   0.69 (  0.68)	test_minacc   0.66 (  0.75)	test_majacc   0.70 (  0.67)	Loss_d 0.594 (0.591)	test_acc_d   0.69 (  0.68)	test_minacc_d   0.66 (  0.75)	test_majacc_d   0.70 (  0.67)	test_corr_d   0.39 (  0.34)
Test: [  26/  26]	Loss 0.578 (0.591)	test_acc   0.66 (  0.68)	test_minacc   0.76 (  0.74)	test_majacc   0.64 (  0.67)	Loss_d 0.578 (0.591)	test_acc_d   0.66 (  0.68)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.64 (  0.67)	test_corr_d   0.33 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.97it/s]
Test: [  0/  1]	Loss 0.954 (0.954)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.76 (  0.76)	Loss_d 0.954 (0.954)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.954 (0.954)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.76 (  0.76)	Loss_d 0.954 (0.954)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.01 (  0.01)
Overall Timing[ 28/  1]	epoch_time 0.0357 (0.0367)	validation_time 0.0003 (0.0006)	train_time 0.0354 (0.0360)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6822000272274017, 0.6270000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s] 19%|#9        | 5/26 [00:00<00:00, 26.31it/s] 38%|###8      | 10/26 [00:00<00:00, 33.56it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.49it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.48it/s] 92%|#########2| 24/26 [00:00<00:00, 39.20it/s]100%|##########| 26/26 [00:00<00:00, 32.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.001 (0.000)	train_nll   0.56 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.33 ( 24.33)	train_acc   0.67 (  0.68)	train_minacc   0.76 (  0.75)	train_majacc   0.66 (  0.67)	train_corr   0.00 (  0.00)	l1 3.9083 (4.0529)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.26it/s] 27%|##6       | 7/26 [00:00<00:00, 35.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.48it/s] 50%|#####     | 13/26 [00:00<00:00, 40.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.49it/s] 96%|#########6| 25/26 [00:00<00:00, 45.86it/s]100%|##########| 26/26 [00:00<00:00, 38.29it/s]
Test: [   0/  26]	Loss 0.571 (0.571)	test_acc   0.70 (  0.70)	test_minacc   0.71 (  0.71)	test_majacc   0.70 (  0.70)	Loss_d 0.571 (0.571)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.570 (0.564)	test_acc   0.68 (  0.71)	test_minacc   0.80 (  0.76)	test_majacc   0.66 (  0.70)	Loss_d 0.570 (0.564)	test_acc_d   0.68 (  0.71)	test_minacc_d   0.80 (  0.76)	test_majacc_d   0.66 (  0.70)	test_corr_d   0.37 (  0.40)
Test: [  20/  26]	Loss 0.580 (0.573)	test_acc   0.69 (  0.69)	test_minacc   0.67 (  0.74)	test_majacc   0.70 (  0.69)	Loss_d 0.580 (0.573)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.67 (  0.74)	test_majacc_d   0.70 (  0.69)	test_corr_d   0.42 (  0.38)
Test: [  26/  26]	Loss 0.566 (0.574)	test_acc   0.66 (  0.69)	test_minacc   0.76 (  0.74)	test_majacc   0.65 (  0.69)	Loss_d 0.566 (0.574)	test_acc_d   0.66 (  0.69)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.65 (  0.69)	test_corr_d   0.35 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.23it/s]
Test: [  0/  1]	Loss 0.933 (0.933)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.78 (  0.78)	Loss_d 0.933 (0.933)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.933 (0.933)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.78 (  0.78)	Loss_d 0.933 (0.933)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.04 (  0.04)
Overall Timing[ 29/  1]	epoch_time 0.0365 (0.0367)	validation_time 0.0006 (0.0006)	train_time 0.0359 (0.0360)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6945000313520432, 0.6140000224113464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.65it/s] 19%|#9        | 5/26 [00:00<00:00, 24.91it/s] 35%|###4      | 9/26 [00:00<00:00, 31.00it/s] 50%|#####     | 13/26 [00:00<00:00, 33.90it/s] 69%|######9   | 18/26 [00:00<00:00, 37.27it/s] 88%|########8 | 23/26 [00:00<00:00, 38.71it/s]100%|##########| 26/26 [00:00<00:00, 32.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.001 (0.000)	train_nll   0.56 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.33 ( 24.33)	train_acc   0.66 (  0.65)	train_minacc   0.76 (  0.78)	train_majacc   0.65 (  0.63)	train_corr   0.00 (  0.00)	l1 3.7521 (4.0048)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 27%|##6       | 7/26 [00:00<00:00, 31.77it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.77it/s] 50%|#####     | 13/26 [00:00<00:00, 37.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.47it/s] 96%|#########6| 25/26 [00:00<00:00, 45.37it/s]100%|##########| 26/26 [00:00<00:00, 37.13it/s]
Test: [   0/  26]	Loss 0.562 (0.562)	test_acc   0.70 (  0.70)	test_minacc   0.71 (  0.71)	test_majacc   0.70 (  0.70)	Loss_d 0.562 (0.562)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.44 (  0.44)
Test: [  10/  26]	Loss 0.552 (0.554)	test_acc   0.70 (  0.71)	test_minacc   0.80 (  0.76)	test_majacc   0.69 (  0.71)	Loss_d 0.552 (0.554)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.80 (  0.76)	test_majacc_d   0.69 (  0.71)	test_corr_d   0.42 (  0.43)
Test: [  20/  26]	Loss 0.569 (0.561)	test_acc   0.69 (  0.70)	test_minacc   0.66 (  0.74)	test_majacc   0.69 (  0.69)	Loss_d 0.569 (0.561)	test_acc_d   0.69 (  0.70)	test_minacc_d   0.66 (  0.74)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.44 (  0.41)
Test: [  26/  26]	Loss 0.560 (0.563)	test_acc   0.67 (  0.70)	test_minacc   0.76 (  0.74)	test_majacc   0.65 (  0.69)	Loss_d 0.560 (0.563)	test_acc_d   0.67 (  0.70)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.65 (  0.69)	test_corr_d   0.37 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.81it/s]
Test: [  0/  1]	Loss 0.923 (0.923)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.77 (  0.77)	Loss_d 0.923 (0.923)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.923 (0.923)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.77 (  0.77)	Loss_d 0.923 (0.923)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.08 (  0.08)
Overall Timing[ 30/  1]	epoch_time 0.0362 (0.0367)	validation_time 0.0004 (0.0006)	train_time 0.0357 (0.0360)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6989000347852707, 0.6000000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.49it/s] 19%|#9        | 5/26 [00:00<00:00, 23.62it/s] 35%|###4      | 9/26 [00:00<00:00, 29.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.73it/s] 92%|#########2| 24/26 [00:00<00:00, 39.09it/s]100%|##########| 26/26 [00:00<00:00, 32.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.57 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.34 ( 24.34)	train_acc   0.64 (  0.64)	train_minacc   0.76 (  0.79)	train_majacc   0.62 (  0.62)	train_corr   0.00 (  0.00)	l1 3.7452 (3.9264)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 27%|##6       | 7/26 [00:00<00:00, 34.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.68it/s] 50%|#####     | 13/26 [00:00<00:00, 40.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.24it/s] 96%|#########6| 25/26 [00:00<00:00, 47.67it/s]100%|##########| 26/26 [00:00<00:00, 40.02it/s]
Test: [   0/  26]	Loss 0.573 (0.573)	test_acc   0.69 (  0.69)	test_minacc   0.71 (  0.71)	test_majacc   0.69 (  0.69)	Loss_d 0.573 (0.573)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.561 (0.566)	test_acc   0.70 (  0.70)	test_minacc   0.80 (  0.75)	test_majacc   0.68 (  0.70)	Loss_d 0.561 (0.566)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.80 (  0.75)	test_majacc_d   0.68 (  0.70)	test_corr_d   0.40 (  0.41)
Test: [  20/  26]	Loss 0.574 (0.569)	test_acc   0.68 (  0.70)	test_minacc   0.67 (  0.75)	test_majacc   0.69 (  0.69)	Loss_d 0.574 (0.569)	test_acc_d   0.68 (  0.70)	test_minacc_d   0.67 (  0.75)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.43 (  0.40)
Test: [  26/  26]	Loss 0.571 (0.571)	test_acc   0.65 (  0.69)	test_minacc   0.76 (  0.74)	test_majacc   0.63 (  0.68)	Loss_d 0.571 (0.571)	test_acc_d   0.65 (  0.69)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.63 (  0.68)	test_corr_d   0.35 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.16it/s]
Test: [  0/  1]	Loss 0.932 (0.932)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.77 (  0.77)	Loss_d 0.932 (0.932)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.932 (0.932)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.77 (  0.77)	Loss_d 0.932 (0.932)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.07 (  0.07)
Overall Timing[ 31/  1]	epoch_time 0.0339 (0.0366)	validation_time 0.0003 (0.0006)	train_time 0.0335 (0.0360)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6923000329732895, 0.6040000319480896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.84it/s] 19%|#9        | 5/26 [00:00<00:00, 21.65it/s] 35%|###4      | 9/26 [00:00<00:00, 28.93it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.44it/s] 92%|#########2| 24/26 [00:00<00:00, 38.50it/s]100%|##########| 26/26 [00:00<00:00, 31.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.60 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.34 ( 24.34)	train_acc   0.63 (  0.67)	train_minacc   0.76 (  0.76)	train_majacc   0.61 (  0.66)	train_corr   0.00 (  0.00)	l1 3.9253 (3.8468)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.91it/s] 27%|##6       | 7/26 [00:00<00:00, 35.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.07it/s] 46%|####6     | 12/26 [00:00<00:00, 40.88it/s] 65%|######5   | 17/26 [00:00<00:00, 44.25it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.25it/s] 88%|########8 | 23/26 [00:00<00:00, 48.81it/s]100%|##########| 26/26 [00:00<00:00, 39.36it/s]
Test: [   0/  26]	Loss 0.597 (0.597)	test_acc   0.65 (  0.65)	test_minacc   0.72 (  0.72)	test_majacc   0.64 (  0.64)	Loss_d 0.597 (0.597)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.587 (0.593)	test_acc   0.65 (  0.67)	test_minacc   0.80 (  0.78)	test_majacc   0.62 (  0.65)	Loss_d 0.587 (0.593)	test_acc_d   0.65 (  0.67)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.62 (  0.65)	test_corr_d   0.36 (  0.35)
Test: [  20/  26]	Loss 0.593 (0.593)	test_acc   0.66 (  0.66)	test_minacc   0.69 (  0.77)	test_majacc   0.66 (  0.64)	Loss_d 0.593 (0.593)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.69 (  0.77)	test_majacc_d   0.66 (  0.64)	test_corr_d   0.38 (  0.35)
Test: [  26/  26]	Loss 0.593 (0.594)	test_acc   0.64 (  0.66)	test_minacc   0.76 (  0.77)	test_majacc   0.62 (  0.64)	Loss_d 0.593 (0.594)	test_acc_d   0.64 (  0.66)	test_minacc_d   0.76 (  0.77)	test_majacc_d   0.62 (  0.64)	test_corr_d   0.30 (  0.35)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.30it/s]
Test: [  0/  1]	Loss 0.963 (0.963)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.72 (  0.72)	Loss_d 0.963 (0.963)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.963 (0.963)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.72 (  0.72)	Loss_d 0.963 (0.963)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.04 (  0.04)
Overall Timing[ 32/  1]	epoch_time 0.0354 (0.0366)	validation_time 0.0004 (0.0006)	train_time 0.0350 (0.0359)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6579000254273415, 0.6340000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.33it/s] 19%|#9        | 5/26 [00:00<00:01, 20.05it/s] 35%|###4      | 9/26 [00:00<00:00, 27.18it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.84it/s] 92%|#########2| 24/26 [00:00<00:00, 37.53it/s]100%|##########| 26/26 [00:00<00:00, 30.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.59 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.34)	train_acc   0.64 (  0.67)	train_minacc   0.78 (  0.76)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.9172 (3.8252)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 27%|##6       | 7/26 [00:00<00:00, 36.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.26it/s] 50%|#####     | 13/26 [00:00<00:00, 41.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.06it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.06it/s] 96%|#########6| 25/26 [00:00<00:00, 46.85it/s]100%|##########| 26/26 [00:00<00:00, 39.96it/s]
Test: [   0/  26]	Loss 0.597 (0.597)	test_acc   0.66 (  0.66)	test_minacc   0.72 (  0.72)	test_majacc   0.65 (  0.65)	Loss_d 0.597 (0.597)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.36 (  0.36)
Test: [  10/  26]	Loss 0.592 (0.594)	test_acc   0.64 (  0.67)	test_minacc   0.80 (  0.78)	test_majacc   0.62 (  0.65)	Loss_d 0.592 (0.594)	test_acc_d   0.64 (  0.67)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.62 (  0.65)	test_corr_d   0.34 (  0.34)
Test: [  20/  26]	Loss 0.591 (0.595)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.77)	test_majacc   0.65 (  0.64)	Loss_d 0.591 (0.595)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.77)	test_majacc_d   0.65 (  0.64)	test_corr_d   0.38 (  0.34)
Test: [  26/  26]	Loss 0.592 (0.595)	test_acc   0.64 (  0.66)	test_minacc   0.78 (  0.77)	test_majacc   0.62 (  0.64)	Loss_d 0.592 (0.595)	test_acc_d   0.64 (  0.66)	test_minacc_d   0.78 (  0.77)	test_majacc_d   0.62 (  0.64)	test_corr_d   0.30 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.41it/s]
Test: [  0/  1]	Loss 0.950 (0.950)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.73 (  0.73)	Loss_d 0.950 (0.950)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.950 (0.950)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.73 (  0.73)	Loss_d 0.950 (0.950)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.01 (  0.01)
Overall Timing[ 33/  1]	epoch_time 0.0335 (0.0365)	validation_time 0.0004 (0.0006)	train_time 0.0331 (0.0358)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.660700021982193, 0.6370000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.08it/s] 19%|#9        | 5/26 [00:00<00:00, 24.38it/s] 38%|###8      | 10/26 [00:00<00:00, 32.54it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.96it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.81it/s] 96%|#########6| 25/26 [00:00<00:00, 39.08it/s]100%|##########| 26/26 [00:00<00:00, 32.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.65 (  0.67)	train_minacc   0.78 (  0.76)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.8411 (3.8555)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.19it/s] 23%|##3       | 6/26 [00:00<00:00, 27.82it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.82it/s] 46%|####6     | 12/26 [00:00<00:00, 38.62it/s] 69%|######9   | 18/26 [00:00<00:00, 43.22it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.22it/s] 92%|#########2| 24/26 [00:00<00:00, 47.50it/s]100%|##########| 26/26 [00:00<00:00, 38.89it/s]
Test: [   0/  26]	Loss 0.588 (0.588)	test_acc   0.68 (  0.68)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.588 (0.588)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.582 (0.584)	test_acc   0.66 (  0.68)	test_minacc   0.79 (  0.76)	test_majacc   0.64 (  0.66)	Loss_d 0.582 (0.584)	test_acc_d   0.66 (  0.68)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.64 (  0.66)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.583 (0.586)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.76)	test_majacc   0.67 (  0.66)	Loss_d 0.583 (0.586)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.40 (  0.36)
Test: [  26/  26]	Loss 0.583 (0.587)	test_acc   0.65 (  0.67)	test_minacc   0.78 (  0.76)	test_majacc   0.62 (  0.66)	Loss_d 0.583 (0.587)	test_acc_d   0.65 (  0.67)	test_minacc_d   0.78 (  0.76)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.33 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.83it/s]
Test: [  0/  1]	Loss 0.962 (0.962)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 0.962 (0.962)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.962 (0.962)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 0.962 (0.962)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Overall Timing[ 34/  1]	epoch_time 0.0354 (0.0364)	validation_time 0.0006 (0.0006)	train_time 0.0348 (0.0358)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6715000202655792, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.88it/s] 19%|#9        | 5/26 [00:00<00:00, 24.60it/s] 35%|###4      | 9/26 [00:00<00:00, 30.72it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.33it/s] 92%|#########2| 24/26 [00:00<00:00, 39.21it/s]100%|##########| 26/26 [00:00<00:00, 32.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.64 (  0.67)	train_minacc   0.78 (  0.76)	train_majacc   0.62 (  0.65)	train_corr   0.00 (  0.00)	l1 3.8269 (3.8569)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.16it/s] 35%|###4      | 9/26 [00:00<00:00, 40.58it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.58it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.84it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.84it/s] 81%|########  | 21/26 [00:00<00:00, 47.87it/s]100%|##########| 26/26 [00:00<00:00, 42.87it/s]
Test: [   0/  26]	Loss 0.587 (0.587)	test_acc   0.68 (  0.68)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.587 (0.587)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.579 (0.583)	test_acc   0.66 (  0.68)	test_minacc   0.79 (  0.76)	test_majacc   0.64 (  0.67)	Loss_d 0.579 (0.583)	test_acc_d   0.66 (  0.68)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.64 (  0.67)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.582 (0.585)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.76)	test_majacc   0.67 (  0.66)	Loss_d 0.582 (0.585)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.41 (  0.37)
Test: [  26/  26]	Loss 0.583 (0.585)	test_acc   0.64 (  0.67)	test_minacc   0.78 (  0.76)	test_majacc   0.62 (  0.66)	Loss_d 0.583 (0.585)	test_acc_d   0.64 (  0.67)	test_minacc_d   0.78 (  0.76)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.33 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.88it/s]
Test: [  0/  1]	Loss 0.962 (0.962)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.76 (  0.76)	Loss_d 0.962 (0.962)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.962 (0.962)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.76 (  0.76)	Loss_d 0.962 (0.962)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Overall Timing[ 35/  1]	epoch_time 0.0355 (0.0364)	validation_time 0.0004 (0.0006)	train_time 0.0350 (0.0358)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6739000341892243, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 23%|##3       | 6/26 [00:00<00:00, 27.64it/s] 42%|####2     | 11/26 [00:00<00:00, 33.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.88it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.32it/s] 92%|#########2| 24/26 [00:00<00:00, 38.38it/s]100%|##########| 26/26 [00:00<00:00, 32.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.59 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.64 (  0.67)	train_minacc   0.78 (  0.76)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.8449 (3.8453)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.84it/s] 35%|###4      | 9/26 [00:00<00:00, 40.12it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.12it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.49it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.49it/s] 81%|########  | 21/26 [00:00<00:00, 48.47it/s]100%|##########| 26/26 [00:00<00:00, 42.36it/s]
Test: [   0/  26]	Loss 0.590 (0.590)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.590 (0.590)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.581 (0.585)	test_acc   0.66 (  0.68)	test_minacc   0.80 (  0.77)	test_majacc   0.64 (  0.66)	Loss_d 0.581 (0.585)	test_acc_d   0.66 (  0.68)	test_minacc_d   0.80 (  0.77)	test_majacc_d   0.64 (  0.66)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.583 (0.586)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.76)	test_majacc   0.67 (  0.66)	Loss_d 0.583 (0.586)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.41 (  0.36)
Test: [  26/  26]	Loss 0.585 (0.587)	test_acc   0.64 (  0.67)	test_minacc   0.78 (  0.76)	test_majacc   0.62 (  0.66)	Loss_d 0.585 (0.587)	test_acc_d   0.64 (  0.67)	test_minacc_d   0.78 (  0.76)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.32 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.39it/s]
Test: [  0/  1]	Loss 0.964 (0.964)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 0.964 (0.964)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.964 (0.964)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 0.964 (0.964)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Overall Timing[ 36/  1]	epoch_time 0.0343 (0.0364)	validation_time 0.0003 (0.0006)	train_time 0.0339 (0.0357)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6724000317454338, 0.6360000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.82it/s] 23%|##3       | 6/26 [00:00<00:00, 27.07it/s] 42%|####2     | 11/26 [00:00<00:00, 33.43it/s] 62%|######1   | 16/26 [00:00<00:00, 37.38it/s] 81%|########  | 21/26 [00:00<00:00, 39.37it/s]100%|##########| 26/26 [00:00<00:00, 41.08it/s]100%|##########| 26/26 [00:00<00:00, 33.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.59 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.64 (  0.67)	train_minacc   0.78 (  0.76)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.8549 (3.8433)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.83it/s] 35%|###4      | 9/26 [00:00<00:00, 40.42it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 48.09it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 48.09it/s] 81%|########  | 21/26 [00:00<00:00, 48.11it/s]100%|##########| 26/26 [00:00<00:00, 42.55it/s]
Test: [   0/  26]	Loss 0.590 (0.590)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.590 (0.590)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.582 (0.586)	test_acc   0.66 (  0.68)	test_minacc   0.80 (  0.77)	test_majacc   0.64 (  0.66)	Loss_d 0.582 (0.586)	test_acc_d   0.66 (  0.68)	test_minacc_d   0.80 (  0.77)	test_majacc_d   0.64 (  0.66)	test_corr_d   0.36 (  0.37)
Test: [  20/  26]	Loss 0.582 (0.587)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.76)	test_majacc   0.67 (  0.66)	Loss_d 0.582 (0.587)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.41 (  0.36)
Test: [  26/  26]	Loss 0.585 (0.588)	test_acc   0.64 (  0.67)	test_minacc   0.78 (  0.76)	test_majacc   0.62 (  0.66)	Loss_d 0.585 (0.588)	test_acc_d   0.64 (  0.67)	test_minacc_d   0.78 (  0.76)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.32 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.37it/s]
Test: [  0/  1]	Loss 0.964 (0.964)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 0.964 (0.964)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.964 (0.964)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 0.964 (0.964)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Overall Timing[ 37/  1]	epoch_time 0.0339 (0.0363)	validation_time 0.0003 (0.0006)	train_time 0.0335 (0.0357)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6717000259757042, 0.6380000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 19%|#9        | 5/26 [00:00<00:00, 25.50it/s] 35%|###4      | 9/26 [00:00<00:00, 31.74it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.67it/s] 69%|######9   | 18/26 [00:00<00:00, 36.73it/s] 88%|########8 | 23/26 [00:00<00:00, 37.97it/s]100%|##########| 26/26 [00:00<00:00, 31.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.64 (  0.67)	train_minacc   0.78 (  0.76)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.8549 (3.8493)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.87it/s] 23%|##3       | 6/26 [00:00<00:00, 30.74it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.74it/s] 46%|####6     | 12/26 [00:00<00:00, 41.57it/s] 69%|######9   | 18/26 [00:00<00:00, 44.18it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.18it/s] 92%|#########2| 24/26 [00:00<00:00, 48.86it/s]100%|##########| 26/26 [00:00<00:00, 40.52it/s]
Test: [   0/  26]	Loss 0.590 (0.590)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.590 (0.590)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.581 (0.585)	test_acc   0.66 (  0.68)	test_minacc   0.79 (  0.76)	test_majacc   0.64 (  0.66)	Loss_d 0.581 (0.585)	test_acc_d   0.66 (  0.68)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.64 (  0.66)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.581 (0.586)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.76)	test_majacc   0.67 (  0.66)	Loss_d 0.581 (0.586)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.41 (  0.36)
Test: [  26/  26]	Loss 0.584 (0.587)	test_acc   0.64 (  0.67)	test_minacc   0.78 (  0.76)	test_majacc   0.62 (  0.66)	Loss_d 0.584 (0.587)	test_acc_d   0.64 (  0.67)	test_minacc_d   0.78 (  0.76)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.33 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.37it/s]
Test: [  0/  1]	Loss 0.965 (0.965)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.965 (0.965)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.965 (0.965)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.965 (0.965)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Overall Timing[ 38/  1]	epoch_time 0.0347 (0.0363)	validation_time 0.0004 (0.0006)	train_time 0.0343 (0.0356)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6728000354170799, 0.6370000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.03it/s] 23%|##3       | 6/26 [00:00<00:00, 27.58it/s] 38%|###8      | 10/26 [00:00<00:00, 32.43it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.16it/s] 69%|######9   | 18/26 [00:00<00:00, 36.76it/s] 88%|########8 | 23/26 [00:00<00:00, 38.09it/s]100%|##########| 26/26 [00:00<00:00, 31.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.65 (  0.67)	train_minacc   0.78 (  0.75)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.8529 (3.8548)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.92it/s] 31%|###       | 8/26 [00:00<00:00, 42.52it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.52it/s] 50%|#####     | 13/26 [00:00<00:00, 42.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.59it/s] 96%|#########6| 25/26 [00:00<00:00, 48.45it/s]100%|##########| 26/26 [00:00<00:00, 41.66it/s]
Test: [   0/  26]	Loss 0.589 (0.589)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.589 (0.589)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.580 (0.584)	test_acc   0.66 (  0.68)	test_minacc   0.79 (  0.76)	test_majacc   0.64 (  0.66)	Loss_d 0.580 (0.584)	test_acc_d   0.66 (  0.68)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.64 (  0.66)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.580 (0.586)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.76)	test_majacc   0.67 (  0.66)	Loss_d 0.580 (0.586)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.41 (  0.36)
Test: [  26/  26]	Loss 0.584 (0.586)	test_acc   0.65 (  0.67)	test_minacc   0.78 (  0.75)	test_majacc   0.62 (  0.66)	Loss_d 0.584 (0.586)	test_acc_d   0.65 (  0.67)	test_minacc_d   0.78 (  0.75)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.33 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.58it/s]
Test: [  0/  1]	Loss 0.966 (0.966)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.966 (0.966)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.966 (0.966)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.966 (0.966)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Overall Timing[ 39/  1]	epoch_time 0.0353 (0.0362)	validation_time 0.0003 (0.0005)	train_time 0.0350 (0.0356)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6739000387191773, 0.6340000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.29it/s] 19%|#9        | 5/26 [00:00<00:00, 24.30it/s] 35%|###4      | 9/26 [00:00<00:00, 30.48it/s] 50%|#####     | 13/26 [00:00<00:00, 33.65it/s] 65%|######5   | 17/26 [00:00<00:00, 35.33it/s] 81%|########  | 21/26 [00:00<00:00, 36.57it/s] 96%|#########6| 25/26 [00:00<00:00, 37.34it/s]100%|##########| 26/26 [00:00<00:00, 31.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.65 (  0.67)	train_minacc   0.78 (  0.75)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.8553 (3.8574)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.65it/s] 31%|###       | 8/26 [00:00<00:00, 35.40it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.40it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.82it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.03it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.03it/s]100%|##########| 26/26 [00:00<00:00, 49.90it/s]100%|##########| 26/26 [00:00<00:00, 40.77it/s]
Test: [   0/  26]	Loss 0.589 (0.589)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.589 (0.589)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.580 (0.584)	test_acc   0.67 (  0.68)	test_minacc   0.79 (  0.76)	test_majacc   0.65 (  0.67)	Loss_d 0.580 (0.584)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.65 (  0.67)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.580 (0.585)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.76)	test_majacc   0.67 (  0.66)	Loss_d 0.580 (0.585)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.41 (  0.36)
Test: [  26/  26]	Loss 0.584 (0.586)	test_acc   0.65 (  0.67)	test_minacc   0.78 (  0.75)	test_majacc   0.62 (  0.66)	Loss_d 0.584 (0.586)	test_acc_d   0.65 (  0.67)	test_minacc_d   0.78 (  0.75)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.33 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.77it/s]
Test: [  0/  1]	Loss 0.967 (0.967)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.967 (0.967)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.967 (0.967)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.967 (0.967)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Overall Timing[ 40/  1]	epoch_time 0.0354 (0.0362)	validation_time 0.0004 (0.0005)	train_time 0.0350 (0.0356)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6737000317573547, 0.6340000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.55it/s] 19%|#9        | 5/26 [00:00<00:00, 24.09it/s] 35%|###4      | 9/26 [00:00<00:00, 30.15it/s] 50%|#####     | 13/26 [00:00<00:00, 33.80it/s] 69%|######9   | 18/26 [00:00<00:00, 36.57it/s] 88%|########8 | 23/26 [00:00<00:00, 37.98it/s]100%|##########| 26/26 [00:00<00:00, 31.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.65 (  0.67)	train_minacc   0.78 (  0.75)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.8601 (3.8589)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s] 27%|##6       | 7/26 [00:00<00:00, 30.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.65it/s] 50%|#####     | 13/26 [00:00<00:00, 37.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.77it/s] 96%|#########6| 25/26 [00:00<00:00, 46.04it/s]100%|##########| 26/26 [00:00<00:00, 37.25it/s]
Test: [   0/  26]	Loss 0.589 (0.589)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.589 (0.589)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.580 (0.584)	test_acc   0.67 (  0.68)	test_minacc   0.79 (  0.76)	test_majacc   0.65 (  0.67)	Loss_d 0.580 (0.584)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.65 (  0.67)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.580 (0.585)	test_acc   0.68 (  0.67)	test_minacc   0.67 (  0.76)	test_majacc   0.68 (  0.66)	Loss_d 0.580 (0.585)	test_acc_d   0.68 (  0.67)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.41 (  0.36)
Test: [  26/  26]	Loss 0.584 (0.586)	test_acc   0.65 (  0.67)	test_minacc   0.78 (  0.75)	test_majacc   0.62 (  0.66)	Loss_d 0.584 (0.586)	test_acc_d   0.65 (  0.67)	test_minacc_d   0.78 (  0.75)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.33 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.88it/s]
Test: [  0/  1]	Loss 0.968 (0.968)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.968 (0.968)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.968 (0.968)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.968 (0.968)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Overall Timing[ 41/  1]	epoch_time 0.0351 (0.0362)	validation_time 0.0004 (0.0005)	train_time 0.0347 (0.0356)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6740000305771827, 0.6340000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.42it/s] 19%|#9        | 5/26 [00:00<00:01, 20.07it/s] 35%|###4      | 9/26 [00:00<00:00, 26.31it/s] 50%|#####     | 13/26 [00:00<00:00, 30.84it/s] 69%|######9   | 18/26 [00:00<00:00, 34.43it/s] 85%|########4 | 22/26 [00:00<00:00, 35.60it/s]100%|##########| 26/26 [00:00<00:00, 28.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.65 (  0.67)	train_minacc   0.78 (  0.75)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.8642 (3.8614)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 36.96it/s] 35%|###4      | 9/26 [00:00<00:00, 41.04it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.04it/s] 58%|#####7    | 15/26 [00:00<00:00, 48.25it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 48.25it/s] 81%|########  | 21/26 [00:00<00:00, 48.25it/s]100%|##########| 26/26 [00:00<00:00, 43.30it/s]
Test: [   0/  26]	Loss 0.589 (0.589)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.589 (0.589)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.580 (0.584)	test_acc   0.67 (  0.68)	test_minacc   0.79 (  0.76)	test_majacc   0.65 (  0.67)	Loss_d 0.580 (0.584)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.65 (  0.67)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.580 (0.585)	test_acc   0.68 (  0.67)	test_minacc   0.67 (  0.76)	test_majacc   0.68 (  0.66)	Loss_d 0.580 (0.585)	test_acc_d   0.68 (  0.67)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.41 (  0.36)
Test: [  26/  26]	Loss 0.583 (0.586)	test_acc   0.65 (  0.67)	test_minacc   0.78 (  0.75)	test_majacc   0.62 (  0.66)	Loss_d 0.583 (0.586)	test_acc_d   0.65 (  0.67)	test_minacc_d   0.78 (  0.75)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.33 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.15it/s]
Test: [  0/  1]	Loss 0.969 (0.969)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.969 (0.969)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.969 (0.969)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.969 (0.969)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Overall Timing[ 42/  1]	epoch_time 0.0354 (0.0362)	validation_time 0.0003 (0.0005)	train_time 0.0350 (0.0356)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6742000282406807, 0.6340000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.65it/s] 23%|##3       | 6/26 [00:00<00:00, 29.28it/s] 38%|###8      | 10/26 [00:00<00:00, 33.62it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.52it/s] 92%|#########2| 24/26 [00:00<00:00, 38.84it/s]100%|##########| 26/26 [00:00<00:00, 33.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.65 (  0.67)	train_minacc   0.78 (  0.75)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.8664 (3.8645)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.53it/s] 31%|###       | 8/26 [00:00<00:00, 32.29it/s]                                               31%|###       | 8/26 [00:00<00:00, 32.29it/s] 50%|#####     | 13/26 [00:00<00:00, 37.90it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.92it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.92it/s]100%|##########| 26/26 [00:00<00:00, 47.40it/s]100%|##########| 26/26 [00:00<00:00, 37.15it/s]
Test: [   0/  26]	Loss 0.589 (0.589)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.589 (0.589)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.579 (0.584)	test_acc   0.67 (  0.68)	test_minacc   0.79 (  0.76)	test_majacc   0.65 (  0.67)	Loss_d 0.579 (0.584)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.65 (  0.67)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.579 (0.585)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.76)	test_majacc   0.68 (  0.66)	Loss_d 0.579 (0.585)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.41 (  0.36)
Test: [  26/  26]	Loss 0.583 (0.586)	test_acc   0.65 (  0.67)	test_minacc   0.78 (  0.75)	test_majacc   0.62 (  0.66)	Loss_d 0.583 (0.586)	test_acc_d   0.65 (  0.67)	test_minacc_d   0.78 (  0.75)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.33 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.11it/s]
Test: [  0/  1]	Loss 0.969 (0.969)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.969 (0.969)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.969 (0.969)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.969 (0.969)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Overall Timing[ 43/  1]	epoch_time 0.0343 (0.0361)	validation_time 0.0003 (0.0005)	train_time 0.0339 (0.0355)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6743000293970108, 0.6340000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.83it/s] 19%|#9        | 5/26 [00:00<00:00, 25.76it/s] 38%|###8      | 10/26 [00:00<00:00, 33.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.68it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.66it/s] 96%|#########6| 25/26 [00:00<00:00, 39.25it/s]100%|##########| 26/26 [00:00<00:00, 33.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.65 (  0.67)	train_minacc   0.78 (  0.75)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.8680 (3.8677)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.14it/s] 35%|###4      | 9/26 [00:00<00:00, 39.51it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.81it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.81it/s] 81%|########  | 21/26 [00:00<00:00, 46.92it/s]100%|##########| 26/26 [00:00<00:00, 40.91it/s]
Test: [   0/  26]	Loss 0.589 (0.589)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.589 (0.589)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.579 (0.583)	test_acc   0.67 (  0.68)	test_minacc   0.79 (  0.76)	test_majacc   0.65 (  0.67)	Loss_d 0.579 (0.583)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.65 (  0.67)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.579 (0.585)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.76)	test_majacc   0.68 (  0.66)	Loss_d 0.579 (0.585)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.41 (  0.37)
Test: [  26/  26]	Loss 0.583 (0.585)	test_acc   0.65 (  0.67)	test_minacc   0.78 (  0.75)	test_majacc   0.62 (  0.66)	Loss_d 0.583 (0.585)	test_acc_d   0.65 (  0.67)	test_minacc_d   0.78 (  0.75)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.33 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.29it/s]
Test: [  0/  1]	Loss 0.970 (0.970)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.970 (0.970)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.970 (0.970)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.970 (0.970)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Overall Timing[ 44/  1]	epoch_time 0.0354 (0.0361)	validation_time 0.0004 (0.0005)	train_time 0.0350 (0.0355)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.674500031709671, 0.6330000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.74it/s] 19%|#9        | 5/26 [00:00<00:00, 24.28it/s] 38%|###8      | 10/26 [00:00<00:00, 32.03it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.46it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.72it/s] 96%|#########6| 25/26 [00:00<00:00, 38.62it/s]100%|##########| 26/26 [00:00<00:00, 32.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.65 (  0.67)	train_minacc   0.78 (  0.75)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.8702 (3.8702)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.05it/s] 27%|##6       | 7/26 [00:00<00:00, 31.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.69it/s] 50%|#####     | 13/26 [00:00<00:00, 38.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.75it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.75it/s] 96%|#########6| 25/26 [00:00<00:00, 45.17it/s]100%|##########| 26/26 [00:00<00:00, 37.43it/s]
Test: [   0/  26]	Loss 0.588 (0.588)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.588 (0.588)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.579 (0.583)	test_acc   0.67 (  0.68)	test_minacc   0.79 (  0.76)	test_majacc   0.65 (  0.67)	Loss_d 0.579 (0.583)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.65 (  0.67)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.578 (0.584)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.76)	test_majacc   0.68 (  0.66)	Loss_d 0.578 (0.584)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.41 (  0.37)
Test: [  26/  26]	Loss 0.583 (0.585)	test_acc   0.65 (  0.67)	test_minacc   0.78 (  0.75)	test_majacc   0.62 (  0.66)	Loss_d 0.583 (0.585)	test_acc_d   0.65 (  0.67)	test_minacc_d   0.78 (  0.75)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.33 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.81it/s]
Test: [  0/  1]	Loss 0.971 (0.971)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.971 (0.971)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.971 (0.971)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.971 (0.971)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.04 (  0.04)
Overall Timing[ 45/  1]	epoch_time 0.0360 (0.0361)	validation_time 0.0005 (0.0005)	train_time 0.0355 (0.0355)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6747000316977501, 0.6330000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.64it/s] 19%|#9        | 5/26 [00:00<00:00, 24.06it/s] 35%|###4      | 9/26 [00:00<00:00, 30.32it/s] 50%|#####     | 13/26 [00:00<00:00, 33.58it/s] 65%|######5   | 17/26 [00:00<00:00, 35.37it/s] 81%|########  | 21/26 [00:00<00:00, 36.57it/s]100%|##########| 26/26 [00:00<00:00, 38.58it/s]100%|##########| 26/26 [00:00<00:00, 31.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.65 (  0.67)	train_minacc   0.78 (  0.75)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.8733 (3.8726)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.28it/s] 31%|###       | 8/26 [00:00<00:00, 41.25it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.25it/s] 50%|#####     | 13/26 [00:00<00:00, 41.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.17it/s] 96%|#########6| 25/26 [00:00<00:00, 47.28it/s]100%|##########| 26/26 [00:00<00:00, 40.58it/s]
Test: [   0/  26]	Loss 0.588 (0.588)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.588 (0.588)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.579 (0.583)	test_acc   0.67 (  0.68)	test_minacc   0.79 (  0.76)	test_majacc   0.65 (  0.67)	Loss_d 0.579 (0.583)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.65 (  0.67)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.578 (0.584)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.76)	test_majacc   0.68 (  0.66)	Loss_d 0.578 (0.584)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.41 (  0.37)
Test: [  26/  26]	Loss 0.583 (0.585)	test_acc   0.65 (  0.67)	test_minacc   0.78 (  0.75)	test_majacc   0.62 (  0.66)	Loss_d 0.583 (0.585)	test_acc_d   0.65 (  0.67)	test_minacc_d   0.78 (  0.75)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.33 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.72it/s]
Test: [  0/  1]	Loss 0.972 (0.972)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 0.972 (0.972)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.972 (0.972)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 0.972 (0.972)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Overall Timing[ 46/  1]	epoch_time 0.0351 (0.0361)	validation_time 0.0004 (0.0005)	train_time 0.0346 (0.0355)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.674700029373169, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.88it/s] 19%|#9        | 5/26 [00:00<00:00, 26.60it/s] 35%|###4      | 9/26 [00:00<00:00, 32.54it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.30it/s] 92%|#########2| 24/26 [00:00<00:00, 39.25it/s]100%|##########| 26/26 [00:00<00:00, 33.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.65 (  0.67)	train_minacc   0.78 (  0.75)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.8764 (3.8750)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.10it/s] 31%|###       | 8/26 [00:00<00:00, 32.25it/s]                                               31%|###       | 8/26 [00:00<00:00, 32.25it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.56it/s] 77%|#######6  | 20/26 [00:00<00:00, 44.60it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 44.60it/s]100%|##########| 26/26 [00:00<00:00, 49.36it/s]100%|##########| 26/26 [00:00<00:00, 39.01it/s]
Test: [   0/  26]	Loss 0.588 (0.588)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.588 (0.588)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.578 (0.583)	test_acc   0.67 (  0.68)	test_minacc   0.79 (  0.76)	test_majacc   0.65 (  0.67)	Loss_d 0.578 (0.583)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.65 (  0.67)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.578 (0.584)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.76)	test_majacc   0.68 (  0.66)	Loss_d 0.578 (0.584)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.41 (  0.37)
Test: [  26/  26]	Loss 0.582 (0.585)	test_acc   0.65 (  0.67)	test_minacc   0.78 (  0.75)	test_majacc   0.62 (  0.66)	Loss_d 0.582 (0.585)	test_acc_d   0.65 (  0.67)	test_minacc_d   0.78 (  0.75)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.33 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.64it/s]
Test: [  0/  1]	Loss 0.973 (0.973)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 0.973 (0.973)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.973 (0.973)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 0.973 (0.973)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Overall Timing[ 47/  1]	epoch_time 0.0353 (0.0361)	validation_time 0.0006 (0.0005)	train_time 0.0347 (0.0355)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6748000258803367, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.80it/s] 23%|##3       | 6/26 [00:00<00:00, 27.85it/s] 42%|####2     | 11/26 [00:00<00:00, 33.97it/s] 62%|######1   | 16/26 [00:00<00:00, 37.07it/s] 81%|########  | 21/26 [00:00<00:00, 38.87it/s] 96%|#########6| 25/26 [00:00<00:00, 38.79it/s]100%|##########| 26/26 [00:00<00:00, 33.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.65 (  0.68)	train_minacc   0.78 (  0.75)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.8793 (3.8778)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 27%|##6       | 7/26 [00:00<00:00, 35.86it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.86it/s] 50%|#####     | 13/26 [00:00<00:00, 41.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.43it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.43it/s] 96%|#########6| 25/26 [00:00<00:00, 47.81it/s]100%|##########| 26/26 [00:00<00:00, 39.25it/s]
Test: [   0/  26]	Loss 0.588 (0.588)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.588 (0.588)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.578 (0.583)	test_acc   0.67 (  0.68)	test_minacc   0.79 (  0.76)	test_majacc   0.65 (  0.67)	Loss_d 0.578 (0.583)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.65 (  0.67)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.578 (0.584)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.76)	test_majacc   0.68 (  0.66)	Loss_d 0.578 (0.584)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.42 (  0.37)
Test: [  26/  26]	Loss 0.582 (0.584)	test_acc   0.65 (  0.68)	test_minacc   0.78 (  0.75)	test_majacc   0.62 (  0.66)	Loss_d 0.582 (0.584)	test_acc_d   0.65 (  0.68)	test_minacc_d   0.78 (  0.75)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.33 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.37it/s]
Test: [  0/  1]	Loss 0.974 (0.974)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 0.974 (0.974)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.974 (0.974)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 0.974 (0.974)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Overall Timing[ 48/  1]	epoch_time 0.0348 (0.0360)	validation_time 0.0003 (0.0005)	train_time 0.0345 (0.0355)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.675000028192997, 0.6330000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.29it/s] 19%|#9        | 5/26 [00:00<00:00, 23.49it/s] 35%|###4      | 9/26 [00:00<00:00, 29.98it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.57it/s] 69%|######9   | 18/26 [00:00<00:00, 36.24it/s] 85%|########4 | 22/26 [00:00<00:00, 37.09it/s]100%|##########| 26/26 [00:00<00:00, 31.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.58 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.35 ( 24.35)	train_acc   0.65 (  0.68)	train_minacc   0.78 (  0.75)	train_majacc   0.62 (  0.66)	train_corr   0.00 (  0.00)	l1 3.8813 (3.8805)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.67it/s] 27%|##6       | 7/26 [00:00<00:00, 33.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.57it/s] 50%|#####     | 13/26 [00:00<00:00, 42.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.07it/s] 96%|#########6| 25/26 [00:00<00:00, 48.67it/s]100%|##########| 26/26 [00:00<00:00, 39.62it/s]
Test: [   0/  26]	Loss 0.588 (0.588)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.67 (  0.67)	Loss_d 0.588 (0.588)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.578 (0.582)	test_acc   0.67 (  0.68)	test_minacc   0.79 (  0.76)	test_majacc   0.65 (  0.67)	Loss_d 0.578 (0.582)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.65 (  0.67)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.577 (0.584)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.76)	test_majacc   0.68 (  0.66)	Loss_d 0.577 (0.584)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.42 (  0.37)
Test: [  26/  26]	Loss 0.582 (0.584)	test_acc   0.65 (  0.68)	test_minacc   0.78 (  0.75)	test_majacc   0.62 (  0.66)	Loss_d 0.582 (0.584)	test_acc_d   0.65 (  0.68)	test_minacc_d   0.78 (  0.75)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.33 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.83it/s]
Test: [  0/  1]	Loss 0.975 (0.975)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 0.975 (0.975)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.975 (0.975)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 0.975 (0.975)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.04 (  0.04)
Overall Timing[ 49/  1]	epoch_time 0.0357 (0.0360)	validation_time 0.0004 (0.0005)	train_time 0.0352 (0.0355)
record: (train_acc, test_acc) (0.7249000252485275, 0.6680000424385071)
last accs (train_acc, test_acc) (0.6755000293254853, 0.6330000162124634)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.103 MB of 0.103 MB uploadedwandb: \ 0.103 MB of 0.103 MB uploadedwandb: | 0.103 MB of 0.103 MB uploadedwandb: / 0.103 MB of 0.103 MB uploadedwandb: - 0.103 MB of 0.103 MB uploadedwandb: \ 0.103 MB of 0.103 MB uploadedwandb: | 0.103 MB of 0.103 MB uploadedwandb: / 0.103 MB of 0.103 MB uploadedwandb: - 0.103 MB of 0.103 MB uploadedwandb: \ 0.126 MB of 0.134 MB uploaded (0.003 MB deduped)wandb: | 0.043 MB of 0.472 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/diagnostics/epoch_time_val █▁▁▁▂▂▂▂▁▂▂▂▁▁▁▁▂▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/diagnostics/train_time_val █▁▁▁▂▂▂▂▂▂▂▂▁▁▁▁▂▁▁▂▁▁▂▂▂▁▁▁▁▁▁▁▁▁▁▁▂▁▁▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/Loss_avg ▄▅▆▆▄▅▅▅▇▇██▄▂▁▂▂▂▂▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/Loss_d_avg ▄▅▆▆▄▅▅▅▇▇██▄▂▁▂▂▂▂▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/Loss_d_val ▄▅▆▆▄▅▅▅▇▇██▄▂▁▂▂▂▂▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/Loss_val ▄▅▆▆▄▅▅▅▇▇██▄▂▁▂▂▂▂▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_acc_avg ▁▁▂▃▄▄▅▅▅▄▄▅▆▇█████████▇▇▇██▇███████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_acc_d_avg ▁▁▂▃▄▄▅▅▅▄▄▅▆▇█████████▇▇▇██▇███████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_acc_d_val ▁▁▂▃▄▄▅▅▅▄▄▅▆▇█████████▇▇▇██▇███████████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_acc_val ▁▁▂▃▄▄▅▅▅▄▄▅▆▇█████████▇▇▇██▇███████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_corr_d_avg ██▇▆▆▆▅▅▅▅▅▄▃▂▁▁▁▂▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_corr_d_val ██▇▆▆▆▅▅▅▅▅▄▃▂▁▁▁▂▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_majacc_avg ██▇▇▆▇▅▆▅▆▆▆▅▂▂▃▃▂▂▂▂▁▂▂▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_majacc_d_avg ██▇▇▆▇▅▆▅▆▆▆▅▂▂▃▃▂▂▂▂▁▂▂▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_majacc_d_val ██▇▇▆▇▅▆▅▆▆▆▅▂▂▃▃▂▂▂▂▁▂▂▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_majacc_val ██▇▇▆▇▅▆▅▆▆▆▅▂▂▃▃▂▂▂▂▁▂▂▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_minacc_avg ▁▁▂▃▄▄▅▅▅▄▄▅▆▇█████████▇▇▇██▇███████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_minacc_d_avg ▁▁▂▃▄▄▅▅▅▄▄▅▆▇█████████▇▇▇██▇███████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_minacc_d_val ▁▁▂▃▄▄▅▅▅▄▄▅▆▇█████████▇▇▇██▇███████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_minacc_val ▁▁▂▃▄▄▅▅▅▄▄▅▆▇█████████▇▇▇██▇███████████
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/Loss_avg █▆▆▆▅▅▅▅▅▅▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/Loss_val █▇▇▇▆▆▅▅▄▅▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/l1_avg ███▇▇▇▇▆▆▆▆▆▆▄▄▃▄▄▄▄▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/l1_val ███▇▇▆▇▆▇▇▇▇▅▄▄▃▄▄▄▄▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_acc_avg ▅▇▇▇▇▇▇▇▇████▆▅▅▅▅▅▅▁▃▃▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_acc_val ▆▆▆▆▇▇▇▇█▇██▇▅▅▅▄▄▄▄▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_majacc_avg ▇████▇▇▇▇▇▇▇▇▅▄▄▄▄▄▄▁▃▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_majacc_val ██████▇████▇▆▄▄▄▄▄▃▃▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_minacc_avg ▂▁▁▂▃▃▄▄▅▅▅▆▆▇▇▇▇▇█▇█▇▇▇▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_minacc_val ▁▁▂▂▃▃▅▅▆▅▇▆████████▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_nll_avg ▇▄▄▄▃▃▂▂▂▂▁▁▁▄▄▄▄▄▅▅▇▇██████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_nll_val ▅▄▄▄▃▃▂▂▁▂▁▁▃▅▅▅▅▅▅▅▇███▇███████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_penalty_avg █▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_penalty_val █▆▅▄▃▃▂▂▂▁▂▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/weight_norm_avg ▁▅▅▅▆▆▆▆▆▆▇▇████████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/weight_norm_val ▁▃▃▄▄▄▄▄▅▅▆▆████████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/diagnostics/epoch_time_val 0.03566
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/diagnostics/train_time_val 0.03522
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/diagnostics/validation_time_val 0.00043
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/Loss_avg 0.97504
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/Loss_d_avg 0.97504
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/Loss_d_val 0.97504
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/Loss_val 0.97504
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_acc_avg 0.633
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_acc_d_avg 0.633
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_acc_d_val 0.633
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_acc_val 0.633
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_corr_d_avg 0.03715
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_corr_d_val 0.03715
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_majacc_avg 0.76
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_majacc_d_avg 0.76
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_majacc_d_val 0.76
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_majacc_val 0.76
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_minacc_avg 0.61889
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_minacc_d_avg 0.61889
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_minacc_d_val 0.61889
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/test/test_minacc_val 0.61889
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/Loss_avg 6e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/Loss_val 6e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/l1_avg 3.88051
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/l1_val 3.88133
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_acc_avg 0.6755
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_acc_val 0.648
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_majacc_avg 0.66147
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_majacc_val 0.62441
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_minacc_avg 0.75401
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_minacc_val 0.78378
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_nll_avg 0.58429
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_nll_val 0.58197
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/weight_norm_avg 24.34532
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/weight_norm_val 24.34532
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/133/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/w589anmr
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_195716-w589anmr/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_195952-mkpn5awt
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/mkpn5awt
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1215
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5985, 3, 32, 32) (6015, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:35,  1.40s/it] 19%|#9        | 5/26 [00:01<00:04,  4.34it/s] 38%|###8      | 10/26 [00:01<00:01,  9.50it/s] 54%|#####3    | 14/26 [00:01<00:00, 13.61it/s] 69%|######9   | 18/26 [00:01<00:00, 17.96it/s] 88%|########8 | 23/26 [00:01<00:00, 23.09it/s]100%|##########| 26/26 [00:02<00:00, 10.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.457 (0.575)	train_nll   0.46 (  0.57)	train_penalty   0.07 (  0.25)	weight_norm  20.90 ( 18.12)	train_acc   0.81 (  0.77)	train_minacc   0.00 (  0.11)	train_majacc   0.98 (  0.89)	train_corr   0.00 (  0.00)	l1 7.2029 (7.8186)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 27%|##6       | 7/26 [00:00<00:00, 34.31it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.31it/s] 50%|#####     | 13/26 [00:00<00:00, 40.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.66it/s] 96%|#########6| 25/26 [00:00<00:00, 47.24it/s]100%|##########| 26/26 [00:00<00:00, 39.98it/s]
Test: [   0/  26]	Loss 0.433 (0.433)	test_acc   0.82 (  0.82)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.433 (0.433)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.410 (0.429)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.410 (0.429)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.449 (0.420)	test_acc   0.83 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.449 (0.420)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.461 (0.418)	test_acc   0.82 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.98 (  0.99)	Loss_d 0.461 (0.418)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.96 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]100%|##########| 1/1 [00:00<00:00,  2.51it/s]
Test: [  0/  1]	Loss 1.689 (1.689)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.689 (1.689)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.689 (1.689)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.689 (1.689)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/134/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0695 (0.0695)	validation_time 0.0067 (0.0067)	train_time 0.0590 (0.0590)
record: (train_acc, test_acc) (0.8444000217318535, 0.11100000888109207)
last accs (train_acc, test_acc) (0.8444000217318535, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.25it/s] 19%|#9        | 5/26 [00:00<00:00, 22.92it/s] 35%|###4      | 9/26 [00:00<00:00, 28.87it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.75it/s] 69%|######9   | 18/26 [00:00<00:00, 35.73it/s] 88%|########8 | 23/26 [00:00<00:00, 37.38it/s]100%|##########| 26/26 [00:00<00:00, 31.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.442 (0.418)	train_nll   0.44 (  0.42)	train_penalty   0.08 (  0.06)	weight_norm  22.01 ( 21.67)	train_acc   0.83 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 7.4634 (7.4062)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.07it/s] 27%|##6       | 7/26 [00:00<00:00, 35.86it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.86it/s] 50%|#####     | 13/26 [00:00<00:00, 41.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.31it/s] 96%|#########6| 25/26 [00:00<00:00, 48.18it/s]100%|##########| 26/26 [00:00<00:00, 40.83it/s]
Test: [   0/  26]	Loss 0.425 (0.425)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.425 (0.425)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.399 (0.422)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.399 (0.422)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.450 (0.413)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.450 (0.413)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.455 (0.411)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.455 (0.411)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.29it/s]
Test: [  0/  1]	Loss 1.781 (1.781)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.781 (1.781)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.781 (1.781)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.781 (1.781)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  1/  1]	epoch_time 0.0353 (0.0524)	validation_time 0.0004 (0.0036)	train_time 0.0349 (0.0469)
record: (train_acc, test_acc) (0.8444000217318535, 0.11100000888109207)
last accs (train_acc, test_acc) (0.846800028026104, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.44it/s] 19%|#9        | 5/26 [00:00<00:00, 25.76it/s] 35%|###4      | 9/26 [00:00<00:00, 31.74it/s] 50%|#####     | 13/26 [00:00<00:00, 34.64it/s] 69%|######9   | 18/26 [00:00<00:00, 37.07it/s] 88%|########8 | 23/26 [00:00<00:00, 38.34it/s]100%|##########| 26/26 [00:00<00:00, 32.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.436 (0.408)	train_nll   0.44 (  0.41)	train_penalty   0.08 (  0.06)	weight_norm  22.12 ( 22.09)	train_acc   0.82 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   0.99 (  1.00)	train_corr   0.00 (  0.00)	l1 7.4549 (7.4906)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 27%|##6       | 7/26 [00:00<00:00, 33.34it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.34it/s] 50%|#####     | 13/26 [00:00<00:00, 40.49it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.24it/s] 96%|#########6| 25/26 [00:00<00:00, 46.79it/s]100%|##########| 26/26 [00:00<00:00, 38.77it/s]
Test: [   0/  26]	Loss 0.412 (0.412)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.412 (0.412)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.381 (0.410)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.381 (0.410)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.447 (0.401)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.447 (0.401)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.446 (0.400)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  1.00)	Loss_d 0.446 (0.400)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.22it/s]
Test: [  0/  1]	Loss 1.747 (1.747)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.747 (1.747)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.747 (1.747)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.747 (1.747)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Overall Timing[  2/  1]	epoch_time 0.0350 (0.0466)	validation_time 0.0004 (0.0025)	train_time 0.0346 (0.0428)
record: (train_acc, test_acc) (0.8444000217318535, 0.11100000888109207)
last accs (train_acc, test_acc) (0.8467000264525414, 0.1080000028014183)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.55it/s] 19%|#9        | 5/26 [00:00<00:00, 23.09it/s] 35%|###4      | 9/26 [00:00<00:00, 29.40it/s] 50%|#####     | 13/26 [00:00<00:00, 32.62it/s] 65%|######5   | 17/26 [00:00<00:00, 34.53it/s] 85%|########4 | 22/26 [00:00<00:00, 36.88it/s]100%|##########| 26/26 [00:00<00:00, 31.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.405 (0.397)	train_nll   0.40 (  0.40)	train_penalty   0.06 (  0.05)	weight_norm  22.15 ( 22.14)	train_acc   0.83 (  0.85)	train_minacc   0.00 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 7.4229 (7.4708)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 27%|##6       | 7/26 [00:00<00:00, 38.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.20it/s] 50%|#####     | 13/26 [00:00<00:00, 42.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.76it/s] 96%|#########6| 25/26 [00:00<00:00, 47.47it/s]100%|##########| 26/26 [00:00<00:00, 40.15it/s]
Test: [   0/  26]	Loss 0.395 (0.395)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.395 (0.395)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.361 (0.392)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.361 (0.392)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.434 (0.383)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.434 (0.383)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.410 (0.383)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.410 (0.383)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.80it/s]
Test: [  0/  1]	Loss 1.779 (1.779)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.779 (1.779)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.779 (1.779)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.779 (1.779)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Overall Timing[  3/  1]	epoch_time 0.0345 (0.0436)	validation_time 0.0003 (0.0020)	train_time 0.0342 (0.0407)
record: (train_acc, test_acc) (0.8444000217318535, 0.11100000888109207)
last accs (train_acc, test_acc) (0.848900027692318, 0.1080000028014183)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.61it/s] 19%|#9        | 5/26 [00:00<00:00, 24.38it/s] 38%|###8      | 10/26 [00:00<00:00, 31.97it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.74it/s] 69%|######9   | 18/26 [00:00<00:00, 36.13it/s] 88%|########8 | 23/26 [00:00<00:00, 37.42it/s]100%|##########| 26/26 [00:00<00:00, 31.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.372 (0.382)	train_nll   0.37 (  0.38)	train_penalty   0.05 (  0.05)	weight_norm  22.20 ( 22.17)	train_acc   0.83 (  0.85)	train_minacc   0.00 (  0.06)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 7.4319 (7.4341)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.47it/s] 23%|##3       | 6/26 [00:00<00:00, 32.58it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.58it/s] 46%|####6     | 12/26 [00:00<00:00, 43.43it/s] 69%|######9   | 18/26 [00:00<00:00, 45.39it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.39it/s] 92%|#########2| 24/26 [00:00<00:00, 48.88it/s]100%|##########| 26/26 [00:00<00:00, 40.32it/s]
Test: [   0/  26]	Loss 0.357 (0.357)	test_acc   0.84 (  0.84)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.357 (0.357)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.337 (0.369)	test_acc   0.86 (  0.85)	test_minacc   0.15 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.337 (0.369)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.15 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  20/  26]	Loss 0.395 (0.361)	test_acc   0.85 (  0.85)	test_minacc   0.15 (  0.08)	test_majacc   1.00 (  0.99)	Loss_d 0.395 (0.361)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.15 (  0.08)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  26/  26]	Loss 0.375 (0.359)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.375 (0.359)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.03it/s]
Test: [  0/  1]	Loss 1.735 (1.735)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.735 (1.735)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.735 (1.735)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.735 (1.735)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/134/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0345 (0.0418)	validation_time 0.0004 (0.0017)	train_time 0.0340 (0.0393)
record: (train_acc, test_acc) (0.8525000264048577, 0.16600000858306885)
last accs (train_acc, test_acc) (0.8525000264048577, 0.16600000858306885)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.78it/s] 19%|#9        | 5/26 [00:00<00:00, 24.68it/s] 35%|###4      | 9/26 [00:00<00:00, 30.73it/s] 50%|#####     | 13/26 [00:00<00:00, 33.87it/s] 69%|######9   | 18/26 [00:00<00:00, 36.63it/s] 88%|########8 | 23/26 [00:00<00:00, 37.91it/s]100%|##########| 26/26 [00:00<00:00, 32.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.358 (0.359)	train_nll   0.36 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm  22.25 ( 22.23)	train_acc   0.83 (  0.85)	train_minacc   0.07 (  0.14)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 7.2443 (7.3961)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.99it/s] 35%|###4      | 9/26 [00:00<00:00, 42.32it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.32it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.58it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.99it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.99it/s]100%|##########| 26/26 [00:00<00:00, 52.17it/s]100%|##########| 26/26 [00:00<00:00, 42.93it/s]
Test: [   0/  26]	Loss 0.334 (0.334)	test_acc   0.86 (  0.86)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 0.334 (0.334)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.313 (0.349)	test_acc   0.87 (  0.85)	test_minacc   0.23 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 0.313 (0.349)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.23 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.366 (0.342)	test_acc   0.85 (  0.86)	test_minacc   0.22 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 0.366 (0.342)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.22 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.342 (0.340)	test_acc   0.85 (  0.86)	test_minacc   0.14 (  0.18)	test_majacc   0.99 (  0.98)	Loss_d 0.342 (0.340)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.14 (  0.18)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.84it/s]
Test: [  0/  1]	Loss 1.534 (1.534)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   1.00 (  1.00)	Loss_d 1.534 (1.534)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.534 (1.534)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   1.00 (  1.00)	Loss_d 1.534 (1.534)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.80 (  0.80)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/134/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0351 (0.0406)	validation_time 0.0003 (0.0014)	train_time 0.0348 (0.0386)
record: (train_acc, test_acc) (0.8563000246882438, 0.2240000069141388)
last accs (train_acc, test_acc) (0.8563000246882438, 0.2240000069141388)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.48it/s] 19%|#9        | 5/26 [00:00<00:01, 20.63it/s] 38%|###8      | 10/26 [00:00<00:00, 29.21it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.49it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.59it/s] 96%|#########6| 25/26 [00:00<00:00, 37.18it/s]100%|##########| 26/26 [00:00<00:00, 30.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.329 (0.349)	train_nll   0.33 (  0.35)	train_penalty   0.03 (  0.03)	weight_norm  22.32 ( 22.29)	train_acc   0.83 (  0.85)	train_minacc   0.02 (  0.18)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 7.3280 (7.4001)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.04it/s] 27%|##6       | 7/26 [00:00<00:00, 30.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.49it/s] 50%|#####     | 13/26 [00:00<00:00, 38.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.19it/s] 96%|#########6| 25/26 [00:00<00:00, 45.59it/s]100%|##########| 26/26 [00:00<00:00, 37.29it/s]
Test: [   0/  26]	Loss 0.310 (0.310)	test_acc   0.86 (  0.86)	test_minacc   0.27 (  0.27)	test_majacc   0.98 (  0.98)	Loss_d 0.310 (0.310)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.292 (0.327)	test_acc   0.87 (  0.86)	test_minacc   0.30 (  0.21)	test_majacc   0.98 (  0.98)	Loss_d 0.292 (0.327)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.30 (  0.21)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.351 (0.323)	test_acc   0.85 (  0.86)	test_minacc   0.24 (  0.21)	test_majacc   0.98 (  0.97)	Loss_d 0.351 (0.323)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.24 (  0.21)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.318 (0.323)	test_acc   0.85 (  0.86)	test_minacc   0.17 (  0.21)	test_majacc   0.99 (  0.97)	Loss_d 0.318 (0.323)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.17 (  0.21)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.18it/s]
Test: [  0/  1]	Loss 1.601 (1.601)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 1.601 (1.601)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.601 (1.601)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 1.601 (1.601)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/134/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0357 (0.0399)	validation_time 0.0004 (0.0013)	train_time 0.0352 (0.0381)
record: (train_acc, test_acc) (0.8596000293493271, 0.242000013589859)
last accs (train_acc, test_acc) (0.8596000293493271, 0.242000013589859)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 12%|#1        | 3/26 [00:00<00:01, 14.02it/s] 27%|##6       | 7/26 [00:00<00:00, 24.31it/s] 42%|####2     | 11/26 [00:00<00:00, 29.92it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.15it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.19it/s] 96%|#########6| 25/26 [00:00<00:00, 38.11it/s]100%|##########| 26/26 [00:00<00:00, 30.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.326 (0.333)	train_nll   0.33 (  0.33)	train_penalty   0.03 (  0.03)	weight_norm  22.40 ( 22.36)	train_acc   0.84 (  0.86)	train_minacc   0.10 (  0.28)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 7.3482 (7.5311)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.95it/s] 35%|###4      | 9/26 [00:00<00:00, 36.53it/s]                                               35%|###4      | 9/26 [00:00<00:00, 36.53it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.13it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.13it/s] 81%|########  | 21/26 [00:00<00:00, 45.48it/s]100%|##########| 26/26 [00:00<00:00, 41.09it/s]
Test: [   0/  26]	Loss 0.300 (0.300)	test_acc   0.85 (  0.85)	test_minacc   0.11 (  0.11)	test_majacc   1.00 (  1.00)	Loss_d 0.300 (0.300)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.11 (  0.11)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.279 (0.321)	test_acc   0.87 (  0.85)	test_minacc   0.18 (  0.09)	test_majacc   1.00 (  0.99)	Loss_d 0.279 (0.321)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.18 (  0.09)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  20/  26]	Loss 0.342 (0.315)	test_acc   0.85 (  0.86)	test_minacc   0.13 (  0.10)	test_majacc   1.00 (  0.99)	Loss_d 0.342 (0.315)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.13 (  0.10)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.305 (0.313)	test_acc   0.84 (  0.86)	test_minacc   0.12 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.305 (0.313)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.12 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 1.722 (1.722)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   1.00 (  1.00)	Loss_d 1.722 (1.722)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.722 (1.722)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   1.00 (  1.00)	Loss_d 1.722 (1.722)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.83 (  0.83)
Overall Timing[  7/  1]	epoch_time 0.0355 (0.0394)	validation_time 0.0003 (0.0012)	train_time 0.0351 (0.0377)
record: (train_acc, test_acc) (0.8596000293493271, 0.242000013589859)
last accs (train_acc, test_acc) (0.8576000207066536, 0.18900001049041748)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.74it/s] 19%|#9        | 5/26 [00:00<00:00, 24.95it/s] 35%|###4      | 9/26 [00:00<00:00, 30.87it/s] 50%|#####     | 13/26 [00:00<00:00, 34.22it/s] 65%|######5   | 17/26 [00:00<00:00, 35.84it/s] 81%|########  | 21/26 [00:00<00:00, 37.14it/s] 96%|#########6| 25/26 [00:00<00:00, 38.00it/s]100%|##########| 26/26 [00:00<00:00, 32.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.289 (0.312)	train_nll   0.29 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.50 ( 22.45)	train_acc   0.86 (  0.86)	train_minacc   0.21 (  0.33)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 7.2506 (7.5074)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.99it/s] 27%|##6       | 7/26 [00:00<00:00, 26.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.21it/s] 50%|#####     | 13/26 [00:00<00:00, 34.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.10it/s] 96%|#########6| 25/26 [00:00<00:00, 44.30it/s]100%|##########| 26/26 [00:00<00:00, 34.89it/s]
Test: [   0/  26]	Loss 0.295 (0.295)	test_acc   0.87 (  0.87)	test_minacc   0.38 (  0.38)	test_majacc   0.98 (  0.98)	Loss_d 0.295 (0.295)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.259 (0.310)	test_acc   0.90 (  0.86)	test_minacc   0.40 (  0.26)	test_majacc   0.99 (  0.97)	Loss_d 0.259 (0.310)	test_acc_d   0.90 (  0.86)	test_minacc_d   0.40 (  0.26)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.354 (0.304)	test_acc   0.85 (  0.87)	test_minacc   0.21 (  0.26)	test_majacc   0.98 (  0.98)	Loss_d 0.354 (0.304)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.21 (  0.26)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.283 (0.300)	test_acc   0.88 (  0.87)	test_minacc   0.33 (  0.26)	test_majacc   0.99 (  0.98)	Loss_d 0.283 (0.300)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.33 (  0.26)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.39it/s]
Test: [  0/  1]	Loss 1.691 (1.691)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.99 (  0.99)	Loss_d 1.691 (1.691)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.691 (1.691)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.99 (  0.99)	Loss_d 1.691 (1.691)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.75 (  0.75)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/134/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0359 (0.0390)	validation_time 0.0004 (0.0011)	train_time 0.0355 (0.0375)
record: (train_acc, test_acc) (0.8688000262379646, 0.27900001406669617)
last accs (train_acc, test_acc) (0.8688000262379646, 0.27900001406669617)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.09it/s] 19%|#9        | 5/26 [00:00<00:00, 21.48it/s] 35%|###4      | 9/26 [00:00<00:00, 27.84it/s] 50%|#####     | 13/26 [00:00<00:00, 31.92it/s] 65%|######5   | 17/26 [00:00<00:00, 34.07it/s] 81%|########  | 21/26 [00:00<00:00, 35.81it/s] 96%|#########6| 25/26 [00:00<00:00, 36.65it/s]100%|##########| 26/26 [00:00<00:00, 30.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.257 (0.297)	train_nll   0.26 (  0.30)	train_penalty   0.01 (  0.02)	weight_norm  22.62 ( 22.56)	train_acc   0.88 (  0.87)	train_minacc   0.40 (  0.40)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.6735 (7.6179)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.45it/s] 27%|##6       | 7/26 [00:00<00:00, 34.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.79it/s] 46%|####6     | 12/26 [00:00<00:00, 40.58it/s] 65%|######5   | 17/26 [00:00<00:00, 42.28it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.28it/s] 88%|########8 | 23/26 [00:00<00:00, 47.69it/s]100%|##########| 26/26 [00:00<00:00, 38.92it/s]
Test: [   0/  26]	Loss 0.291 (0.291)	test_acc   0.87 (  0.87)	test_minacc   0.50 (  0.50)	test_majacc   0.95 (  0.95)	Loss_d 0.291 (0.291)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.251 (0.320)	test_acc   0.90 (  0.86)	test_minacc   0.58 (  0.42)	test_majacc   0.96 (  0.94)	Loss_d 0.251 (0.320)	test_acc_d   0.90 (  0.86)	test_minacc_d   0.58 (  0.42)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.84 (  0.84)
Test: [  20/  26]	Loss 0.327 (0.309)	test_acc   0.86 (  0.87)	test_minacc   0.39 (  0.44)	test_majacc   0.95 (  0.94)	Loss_d 0.327 (0.309)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.39 (  0.44)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.85 (  0.84)
Test: [  26/  26]	Loss 0.232 (0.300)	test_acc   0.91 (  0.87)	test_minacc   0.52 (  0.44)	test_majacc   0.99 (  0.95)	Loss_d 0.232 (0.300)	test_acc_d   0.91 (  0.87)	test_minacc_d   0.52 (  0.44)	test_majacc_d   0.99 (  0.95)	test_corr_d   0.85 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.90it/s]
Test: [  0/  1]	Loss 1.678 (1.678)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.95 (  0.95)	Loss_d 1.678 (1.678)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.54 (  0.54)
Test: [  1/  1]	Loss 1.678 (1.678)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.95 (  0.95)	Loss_d 1.678 (1.678)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.54 (  0.54)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/134/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0359 (0.0387)	validation_time 0.0004 (0.0010)	train_time 0.0354 (0.0373)
record: (train_acc, test_acc) (0.8718000192642212, 0.39100003242492676)
last accs (train_acc, test_acc) (0.8718000192642212, 0.39100003242492676)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.00it/s] 19%|#9        | 5/26 [00:00<00:01, 18.31it/s] 35%|###4      | 9/26 [00:00<00:00, 26.00it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.48it/s] 88%|########8 | 23/26 [00:00<00:00, 35.65it/s]100%|##########| 26/26 [00:00<00:00, 28.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.252 (0.291)	train_nll   0.25 (  0.29)	train_penalty   0.01 (  0.01)	weight_norm  22.79 ( 22.70)	train_acc   0.88 (  0.88)	train_minacc   0.40 (  0.42)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.6789 (7.6840)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s] 31%|###       | 8/26 [00:00<00:00, 34.22it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.22it/s] 50%|#####     | 13/26 [00:00<00:00, 38.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.21it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.21it/s] 96%|#########6| 25/26 [00:00<00:00, 46.14it/s]100%|##########| 26/26 [00:00<00:00, 37.95it/s]
Test: [   0/  26]	Loss 0.264 (0.264)	test_acc   0.90 (  0.90)	test_minacc   0.55 (  0.55)	test_majacc   0.97 (  0.97)	Loss_d 0.264 (0.264)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.236 (0.288)	test_acc   0.91 (  0.88)	test_minacc   0.55 (  0.46)	test_majacc   0.97 (  0.96)	Loss_d 0.236 (0.288)	test_acc_d   0.91 (  0.88)	test_minacc_d   0.55 (  0.46)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.86 (  0.87)
Test: [  20/  26]	Loss 0.314 (0.280)	test_acc   0.86 (  0.88)	test_minacc   0.42 (  0.46)	test_majacc   0.96 (  0.96)	Loss_d 0.314 (0.280)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.42 (  0.46)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  26/  26]	Loss 0.226 (0.271)	test_acc   0.90 (  0.89)	test_minacc   0.50 (  0.45)	test_majacc   0.98 (  0.96)	Loss_d 0.226 (0.271)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.50 (  0.45)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.86 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.99it/s]
Test: [  0/  1]	Loss 1.702 (1.702)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.96 (  0.96)	Loss_d 1.702 (1.702)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 1.702 (1.702)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.96 (  0.96)	Loss_d 1.702 (1.702)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.63 (  0.63)
Overall Timing[ 10/  1]	epoch_time 0.0358 (0.0384)	validation_time 0.0003 (0.0009)	train_time 0.0355 (0.0371)
record: (train_acc, test_acc) (0.8718000192642212, 0.39100003242492676)
last accs (train_acc, test_acc) (0.8875000223517417, 0.367000013589859)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.19it/s] 19%|#9        | 5/26 [00:00<00:00, 23.28it/s] 35%|###4      | 9/26 [00:00<00:00, 29.82it/s] 50%|#####     | 13/26 [00:00<00:00, 32.25it/s] 65%|######5   | 17/26 [00:00<00:00, 34.52it/s] 85%|########4 | 22/26 [00:00<00:00, 37.41it/s]100%|##########| 26/26 [00:00<00:00, 31.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.228 (0.280)	train_nll   0.23 (  0.28)	train_penalty   0.01 (  0.01)	weight_norm  22.98 ( 22.88)	train_acc   0.90 (  0.88)	train_minacc   0.52 (  0.48)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.6023 (7.8236)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.20it/s] 31%|###       | 8/26 [00:00<00:00, 31.37it/s]                                               31%|###       | 8/26 [00:00<00:00, 31.37it/s] 50%|#####     | 13/26 [00:00<00:00, 36.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.48it/s] 92%|#########2| 24/26 [00:00<00:00, 45.52it/s]100%|##########| 26/26 [00:00<00:00, 36.50it/s]
Test: [   0/  26]	Loss 0.243 (0.243)	test_acc   0.92 (  0.92)	test_minacc   0.64 (  0.64)	test_majacc   0.98 (  0.98)	Loss_d 0.243 (0.243)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.217 (0.272)	test_acc   0.91 (  0.88)	test_minacc   0.62 (  0.47)	test_majacc   0.96 (  0.96)	Loss_d 0.217 (0.272)	test_acc_d   0.91 (  0.88)	test_minacc_d   0.62 (  0.47)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.85 (  0.86)
Test: [  20/  26]	Loss 0.303 (0.266)	test_acc   0.86 (  0.89)	test_minacc   0.45 (  0.48)	test_majacc   0.95 (  0.96)	Loss_d 0.303 (0.266)	test_acc_d   0.86 (  0.89)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.85 (  0.86)
Test: [  26/  26]	Loss 0.206 (0.259)	test_acc   0.92 (  0.89)	test_minacc   0.60 (  0.48)	test_majacc   0.98 (  0.96)	Loss_d 0.206 (0.259)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.60 (  0.48)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.86 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.40it/s]
Test: [  0/  1]	Loss 1.726 (1.726)	test_acc   0.34 (  0.34)	test_minacc   0.28 (  0.28)	test_majacc   0.96 (  0.96)	Loss_d 1.726 (1.726)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.61 (  0.61)
Test: [  1/  1]	Loss 1.726 (1.726)	test_acc   0.34 (  0.34)	test_minacc   0.28 (  0.28)	test_majacc   0.96 (  0.96)	Loss_d 1.726 (1.726)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.61 (  0.61)
Overall Timing[ 11/  1]	epoch_time 0.0338 (0.0380)	validation_time 0.0004 (0.0009)	train_time 0.0334 (0.0368)
record: (train_acc, test_acc) (0.8718000192642212, 0.39100003242492676)
last accs (train_acc, test_acc) (0.8905000267028809, 0.3440000116825104)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.95it/s] 23%|##3       | 6/26 [00:00<00:00, 29.51it/s] 42%|####2     | 11/26 [00:00<00:00, 34.55it/s] 62%|######1   | 16/26 [00:00<00:00, 37.12it/s] 81%|########  | 21/26 [00:00<00:00, 38.51it/s] 96%|#########6| 25/26 [00:00<00:00, 38.38it/s]100%|##########| 26/26 [00:00<00:00, 33.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.219 (0.267)	train_nll   0.22 (  0.27)	train_penalty   0.01 (  0.01)	weight_norm  23.21 ( 23.09)	train_acc   0.90 (  0.89)	train_minacc   0.55 (  0.53)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.4525 (7.9219)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.28it/s] 19%|#9        | 5/26 [00:00<00:00, 23.50it/s]                                               19%|#9        | 5/26 [00:00<00:00, 23.50it/s] 42%|####2     | 11/26 [00:00<00:00, 37.59it/s] 62%|######1   | 16/26 [00:00<00:00, 40.78it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.78it/s] 85%|########4 | 22/26 [00:00<00:00, 47.09it/s]100%|##########| 26/26 [00:00<00:00, 37.73it/s]
Test: [   0/  26]	Loss 0.237 (0.237)	test_acc   0.92 (  0.92)	test_minacc   0.65 (  0.65)	test_majacc   0.98 (  0.98)	Loss_d 0.237 (0.237)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.230 (0.267)	test_acc   0.90 (  0.89)	test_minacc   0.55 (  0.50)	test_majacc   0.97 (  0.97)	Loss_d 0.230 (0.267)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.85 (  0.86)
Test: [  20/  26]	Loss 0.251 (0.259)	test_acc   0.89 (  0.90)	test_minacc   0.54 (  0.52)	test_majacc   0.96 (  0.96)	Loss_d 0.251 (0.259)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.85 (  0.85)
Test: [  26/  26]	Loss 0.196 (0.252)	test_acc   0.94 (  0.90)	test_minacc   0.71 (  0.53)	test_majacc   0.98 (  0.97)	Loss_d 0.196 (0.252)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.71 (  0.53)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.84 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.86it/s]
Test: [  0/  1]	Loss 1.647 (1.647)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.94 (  0.94)	Loss_d 1.647 (1.647)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 1.647 (1.647)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.94 (  0.94)	Loss_d 1.647 (1.647)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.58 (  0.58)
Overall Timing[ 12/  1]	epoch_time 0.0350 (0.0378)	validation_time 0.0005 (0.0009)	train_time 0.0345 (0.0366)
record: (train_acc, test_acc) (0.8718000192642212, 0.39100003242492676)
last accs (train_acc, test_acc) (0.8998000210523606, 0.3700000047683716)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 19%|#9        | 5/26 [00:00<00:00, 22.25it/s] 35%|###4      | 9/26 [00:00<00:00, 29.23it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.52it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.11it/s] 92%|#########2| 24/26 [00:00<00:00, 38.96it/s]100%|##########| 26/26 [00:00<00:00, 32.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.192 (0.254)	train_nll   0.19 (  0.25)	train_penalty   0.01 (  0.01)	weight_norm  23.49 ( 23.35)	train_acc   0.92 (  0.90)	train_minacc   0.62 (  0.56)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.7345 (7.9838)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.61it/s] 31%|###       | 8/26 [00:00<00:00, 37.62it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.62it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.15it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.99it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.99it/s]100%|##########| 26/26 [00:00<00:00, 50.75it/s]100%|##########| 26/26 [00:00<00:00, 42.50it/s]
Test: [   0/  26]	Loss 0.213 (0.213)	test_acc   0.93 (  0.93)	test_minacc   0.71 (  0.71)	test_majacc   0.97 (  0.97)	Loss_d 0.213 (0.213)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.79 (  0.79)
Test: [  10/  26]	Loss 0.209 (0.250)	test_acc   0.92 (  0.90)	test_minacc   0.73 (  0.61)	test_majacc   0.95 (  0.96)	Loss_d 0.209 (0.250)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.73 (  0.61)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.78 (  0.81)
Test: [  20/  26]	Loss 0.243 (0.238)	test_acc   0.91 (  0.91)	test_minacc   0.67 (  0.63)	test_majacc   0.96 (  0.96)	Loss_d 0.243 (0.238)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.67 (  0.63)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.79 (  0.81)
Test: [  26/  26]	Loss 0.150 (0.228)	test_acc   0.96 (  0.91)	test_minacc   0.83 (  0.65)	test_majacc   0.99 (  0.96)	Loss_d 0.150 (0.228)	test_acc_d   0.96 (  0.91)	test_minacc_d   0.83 (  0.65)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.79 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.64it/s]
Test: [  0/  1]	Loss 1.612 (1.612)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.92 (  0.92)	Loss_d 1.612 (1.612)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.43 (  0.43)
Test: [  1/  1]	Loss 1.612 (1.612)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.92 (  0.92)	Loss_d 1.612 (1.612)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.43 (  0.43)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/134/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0344 (0.0376)	validation_time 0.0003 (0.0008)	train_time 0.0340 (0.0364)
record: (train_acc, test_acc) (0.9124000247120857, 0.4390000104904175)
last accs (train_acc, test_acc) (0.9124000247120857, 0.4390000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.34it/s] 19%|#9        | 5/26 [00:00<00:00, 23.79it/s] 38%|###8      | 10/26 [00:00<00:00, 31.94it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.57it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.99it/s] 96%|#########6| 25/26 [00:00<00:00, 38.82it/s]100%|##########| 26/26 [00:00<00:00, 32.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.194 (0.249)	train_nll   0.19 (  0.25)	train_penalty   0.00 (  0.01)	weight_norm  23.79 ( 23.65)	train_acc   0.92 (  0.90)	train_minacc   0.67 (  0.57)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 8.0397 (8.0286)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.33it/s] 31%|###       | 8/26 [00:00<00:00, 36.55it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.55it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.93it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.44it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.44it/s]100%|##########| 26/26 [00:00<00:00, 51.26it/s]100%|##########| 26/26 [00:00<00:00, 41.50it/s]
Test: [   0/  26]	Loss 0.235 (0.235)	test_acc   0.90 (  0.90)	test_minacc   0.44 (  0.44)	test_majacc   0.99 (  0.99)	Loss_d 0.235 (0.235)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.207 (0.243)	test_acc   0.92 (  0.90)	test_minacc   0.52 (  0.45)	test_majacc   0.99 (  0.98)	Loss_d 0.207 (0.243)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.52 (  0.45)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.87 (  0.88)
Test: [  20/  26]	Loss 0.213 (0.231)	test_acc   0.91 (  0.91)	test_minacc   0.55 (  0.50)	test_majacc   0.99 (  0.98)	Loss_d 0.213 (0.231)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.87 (  0.87)
Test: [  26/  26]	Loss 0.146 (0.220)	test_acc   0.95 (  0.91)	test_minacc   0.69 (  0.50)	test_majacc   1.00 (  0.98)	Loss_d 0.146 (0.220)	test_acc_d   0.95 (  0.91)	test_minacc_d   0.69 (  0.50)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.85 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.75it/s]
Test: [  0/  1]	Loss 2.228 (2.228)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.99 (  0.99)	Loss_d 2.228 (2.228)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 2.228 (2.228)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.99 (  0.99)	Loss_d 2.228 (2.228)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.65 (  0.65)
Overall Timing[ 14/  1]	epoch_time 0.0343 (0.0373)	validation_time 0.0004 (0.0008)	train_time 0.0339 (0.0363)
record: (train_acc, test_acc) (0.9124000247120857, 0.4390000104904175)
last accs (train_acc, test_acc) (0.9105000187158585, 0.320000022649765)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.31it/s] 19%|#9        | 5/26 [00:00<00:01, 20.18it/s] 35%|###4      | 9/26 [00:00<00:00, 27.45it/s] 50%|#####     | 13/26 [00:00<00:00, 31.79it/s] 69%|######9   | 18/26 [00:00<00:00, 35.62it/s] 85%|########4 | 22/26 [00:00<00:00, 36.95it/s]100%|##########| 26/26 [00:00<00:00, 37.71it/s]100%|##########| 26/26 [00:00<00:00, 30.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.006 (0.095)	train_nll   0.43 (  0.32)	train_penalty   0.01 (  0.01)	weight_norm  24.10 ( 23.96)	train_acc   0.80 (  0.86)	train_minacc   0.90 (  0.65)	train_majacc   0.78 (  0.89)	train_corr   0.00 (  0.00)	l1 6.7099 (7.9719)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.48it/s] 23%|##3       | 6/26 [00:00<00:00, 28.70it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.70it/s] 42%|####2     | 11/26 [00:00<00:00, 37.36it/s] 65%|######5   | 17/26 [00:00<00:00, 41.93it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.93it/s] 88%|########8 | 23/26 [00:00<00:00, 46.32it/s]100%|##########| 26/26 [00:00<00:00, 37.13it/s]
Test: [   0/  26]	Loss 0.457 (0.457)	test_acc   0.79 (  0.79)	test_minacc   0.85 (  0.85)	test_majacc   0.78 (  0.78)	Loss_d 0.457 (0.457)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.44 (  0.44)
Test: [  10/  26]	Loss 0.470 (0.473)	test_acc   0.76 (  0.77)	test_minacc   0.78 (  0.78)	test_majacc   0.76 (  0.76)	Loss_d 0.470 (0.473)	test_acc_d   0.76 (  0.77)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.44 (  0.45)
Test: [  20/  26]	Loss 0.453 (0.472)	test_acc   0.79 (  0.77)	test_minacc   0.76 (  0.81)	test_majacc   0.79 (  0.76)	Loss_d 0.453 (0.472)	test_acc_d   0.79 (  0.77)	test_minacc_d   0.76 (  0.81)	test_majacc_d   0.79 (  0.76)	test_corr_d   0.49 (  0.44)
Test: [  26/  26]	Loss 0.440 (0.473)	test_acc   0.80 (  0.77)	test_minacc   0.90 (  0.80)	test_majacc   0.78 (  0.76)	Loss_d 0.440 (0.473)	test_acc_d   0.80 (  0.77)	test_minacc_d   0.90 (  0.80)	test_majacc_d   0.78 (  0.76)	test_corr_d   0.44 (  0.45)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.61it/s]
Test: [  0/  1]	Loss 0.772 (0.772)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.79 (  0.79)	Loss_d 0.772 (0.772)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.79 (  0.79)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.772 (0.772)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.79 (  0.79)	Loss_d 0.772 (0.772)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.79 (  0.79)	test_corr_d  -0.06 ( -0.06)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/134/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0364 (0.0373)	validation_time 0.0003 (0.0008)	train_time 0.0360 (0.0363)
record: (train_acc, test_acc) (0.7681000289320946, 0.6180000305175781)
last accs (train_acc, test_acc) (0.7681000289320946, 0.6180000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.07it/s] 19%|#9        | 5/26 [00:00<00:00, 26.15it/s] 38%|###8      | 10/26 [00:00<00:00, 33.31it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.45it/s] 92%|#########2| 24/26 [00:00<00:00, 39.35it/s]100%|##########| 26/26 [00:00<00:00, 33.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.55 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  24.17 ( 24.14)	train_acc   0.70 (  0.70)	train_minacc   0.71 (  0.80)	train_majacc   0.69 (  0.68)	train_corr   0.00 (  0.00)	l1 6.1538 (6.3077)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.49it/s] 35%|###4      | 9/26 [00:00<00:00, 39.21it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.21it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.47it/s] 96%|#########6| 25/26 [00:00<00:00, 48.19it/s]100%|##########| 26/26 [00:00<00:00, 40.68it/s]
Test: [   0/  26]	Loss 0.558 (0.558)	test_acc   0.68 (  0.68)	test_minacc   0.76 (  0.76)	test_majacc   0.66 (  0.66)	Loss_d 0.558 (0.558)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.30 (  0.30)
Test: [  10/  26]	Loss 0.566 (0.571)	test_acc   0.66 (  0.67)	test_minacc   0.78 (  0.76)	test_majacc   0.64 (  0.66)	Loss_d 0.566 (0.571)	test_acc_d   0.66 (  0.67)	test_minacc_d   0.78 (  0.76)	test_majacc_d   0.64 (  0.66)	test_corr_d   0.32 (  0.31)
Test: [  20/  26]	Loss 0.573 (0.571)	test_acc   0.69 (  0.68)	test_minacc   0.69 (  0.79)	test_majacc   0.69 (  0.66)	Loss_d 0.573 (0.571)	test_acc_d   0.69 (  0.68)	test_minacc_d   0.69 (  0.79)	test_majacc_d   0.69 (  0.66)	test_corr_d   0.37 (  0.31)
Test: [  26/  26]	Loss 0.561 (0.573)	test_acc   0.69 (  0.68)	test_minacc   0.71 (  0.77)	test_majacc   0.69 (  0.66)	Loss_d 0.561 (0.573)	test_acc_d   0.69 (  0.68)	test_minacc_d   0.71 (  0.77)	test_majacc_d   0.69 (  0.66)	test_corr_d   0.30 (  0.32)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.28it/s]
Test: [  0/  1]	Loss 0.732 (0.732)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.63 (  0.63)	Loss_d 0.732 (0.732)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.732 (0.732)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.63 (  0.63)	Loss_d 0.732 (0.732)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.16 ( -0.16)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/134/checkpoints/model_best.pth
Overall Timing[ 16/  1]	epoch_time 0.0353 (0.0372)	validation_time 0.0004 (0.0008)	train_time 0.0349 (0.0362)
record: (train_acc, test_acc) (0.6772000346779823, 0.6310000419616699)
last accs (train_acc, test_acc) (0.6772000346779823, 0.6310000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.87it/s] 19%|#9        | 5/26 [00:00<00:01, 20.27it/s] 35%|###4      | 9/26 [00:00<00:00, 27.64it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.09it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.48it/s] 92%|#########2| 24/26 [00:00<00:00, 36.99it/s]100%|##########| 26/26 [00:00<00:00, 29.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.001 (0.001)	train_nll   0.52 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  24.17 ( 24.17)	train_acc   0.71 (  0.69)	train_minacc   0.69 (  0.76)	train_majacc   0.72 (  0.67)	train_corr   0.00 (  0.00)	l1 6.0136 (6.1105)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.48it/s] 27%|##6       | 7/26 [00:00<00:00, 34.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.22it/s] 50%|#####     | 13/26 [00:00<00:00, 41.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.53it/s] 96%|#########6| 25/26 [00:00<00:00, 47.62it/s]100%|##########| 26/26 [00:00<00:00, 39.43it/s]
Test: [   0/  26]	Loss 0.529 (0.529)	test_acc   0.71 (  0.71)	test_minacc   0.76 (  0.76)	test_majacc   0.70 (  0.70)	Loss_d 0.529 (0.529)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.537 (0.538)	test_acc   0.67 (  0.69)	test_minacc   0.73 (  0.73)	test_majacc   0.66 (  0.69)	Loss_d 0.537 (0.538)	test_acc_d   0.67 (  0.69)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.66 (  0.69)	test_corr_d   0.39 (  0.39)
Test: [  20/  26]	Loss 0.543 (0.537)	test_acc   0.70 (  0.70)	test_minacc   0.64 (  0.76)	test_majacc   0.71 (  0.69)	Loss_d 0.543 (0.537)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.64 (  0.76)	test_majacc_d   0.71 (  0.69)	test_corr_d   0.44 (  0.39)
Test: [  26/  26]	Loss 0.532 (0.539)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.75)	test_majacc   0.71 (  0.69)	Loss_d 0.532 (0.539)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.75)	test_majacc_d   0.71 (  0.69)	test_corr_d   0.38 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.08it/s]
Test: [  0/  1]	Loss 0.764 (0.764)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.68 (  0.68)	Loss_d 0.764 (0.764)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.764 (0.764)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.68 (  0.68)	Loss_d 0.764 (0.764)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 17/  1]	epoch_time 0.0348 (0.0370)	validation_time 0.0004 (0.0007)	train_time 0.0343 (0.0361)
record: (train_acc, test_acc) (0.6772000346779823, 0.6310000419616699)
last accs (train_acc, test_acc) (0.6979000270962715, 0.6100000143051147)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.87it/s] 19%|#9        | 5/26 [00:00<00:00, 24.73it/s] 35%|###4      | 9/26 [00:00<00:00, 30.53it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.15it/s] 92%|#########2| 24/26 [00:00<00:00, 38.46it/s]100%|##########| 26/26 [00:00<00:00, 32.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.001 (0.001)	train_nll   0.52 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  24.18 ( 24.17)	train_acc   0.71 (  0.69)	train_minacc   0.71 (  0.76)	train_majacc   0.71 (  0.68)	train_corr   0.00 (  0.00)	l1 5.8980 (6.0453)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.88it/s] 35%|###4      | 9/26 [00:00<00:00, 41.23it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.23it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.93it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.33it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.33it/s]100%|##########| 26/26 [00:00<00:00, 51.35it/s]100%|##########| 26/26 [00:00<00:00, 43.23it/s]
Test: [   0/  26]	Loss 0.515 (0.515)	test_acc   0.72 (  0.72)	test_minacc   0.74 (  0.74)	test_majacc   0.72 (  0.72)	Loss_d 0.515 (0.515)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.526 (0.517)	test_acc   0.68 (  0.72)	test_minacc   0.73 (  0.72)	test_majacc   0.67 (  0.72)	Loss_d 0.526 (0.517)	test_acc_d   0.68 (  0.72)	test_minacc_d   0.73 (  0.72)	test_majacc_d   0.67 (  0.72)	test_corr_d   0.42 (  0.44)
Test: [  20/  26]	Loss 0.515 (0.515)	test_acc   0.72 (  0.72)	test_minacc   0.66 (  0.76)	test_majacc   0.74 (  0.72)	Loss_d 0.515 (0.515)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.66 (  0.76)	test_majacc_d   0.74 (  0.72)	test_corr_d   0.48 (  0.43)
Test: [  26/  26]	Loss 0.522 (0.518)	test_acc   0.71 (  0.72)	test_minacc   0.69 (  0.74)	test_majacc   0.71 (  0.72)	Loss_d 0.522 (0.518)	test_acc_d   0.71 (  0.72)	test_minacc_d   0.69 (  0.74)	test_majacc_d   0.71 (  0.72)	test_corr_d   0.40 (  0.44)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.41it/s]
Test: [  0/  1]	Loss 0.780 (0.780)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.70 (  0.70)	Loss_d 0.780 (0.780)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.780 (0.780)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.70 (  0.70)	Loss_d 0.780 (0.780)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 18/  1]	epoch_time 0.0342 (0.0369)	validation_time 0.0004 (0.0007)	train_time 0.0338 (0.0360)
record: (train_acc, test_acc) (0.6772000346779823, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7210000290870666, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.93it/s] 19%|#9        | 5/26 [00:00<00:00, 21.27it/s] 38%|###8      | 10/26 [00:00<00:00, 30.07it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.87it/s] 92%|#########2| 24/26 [00:00<00:00, 37.71it/s]100%|##########| 26/26 [00:00<00:00, 30.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.001)	train_nll   0.53 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  24.18 ( 24.18)	train_acc   0.72 (  0.71)	train_minacc   0.71 (  0.75)	train_majacc   0.73 (  0.70)	train_corr   0.00 (  0.00)	l1 5.8202 (5.9769)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.99it/s] 19%|#9        | 5/26 [00:00<00:00, 22.96it/s]                                               19%|#9        | 5/26 [00:00<00:00, 22.96it/s] 42%|####2     | 11/26 [00:00<00:00, 36.23it/s] 62%|######1   | 16/26 [00:00<00:00, 40.00it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.00it/s] 85%|########4 | 22/26 [00:00<00:00, 46.05it/s]100%|##########| 26/26 [00:00<00:00, 36.98it/s]
Test: [   0/  26]	Loss 0.510 (0.510)	test_acc   0.74 (  0.74)	test_minacc   0.74 (  0.74)	test_majacc   0.74 (  0.74)	Loss_d 0.510 (0.510)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.515 (0.504)	test_acc   0.73 (  0.74)	test_minacc   0.75 (  0.72)	test_majacc   0.72 (  0.74)	Loss_d 0.515 (0.504)	test_acc_d   0.73 (  0.74)	test_minacc_d   0.75 (  0.72)	test_majacc_d   0.72 (  0.74)	test_corr_d   0.45 (  0.46)
Test: [  20/  26]	Loss 0.491 (0.502)	test_acc   0.75 (  0.74)	test_minacc   0.67 (  0.75)	test_majacc   0.76 (  0.74)	Loss_d 0.491 (0.502)	test_acc_d   0.75 (  0.74)	test_minacc_d   0.67 (  0.75)	test_majacc_d   0.76 (  0.74)	test_corr_d   0.51 (  0.46)
Test: [  26/  26]	Loss 0.523 (0.505)	test_acc   0.72 (  0.74)	test_minacc   0.71 (  0.74)	test_majacc   0.72 (  0.74)	Loss_d 0.523 (0.505)	test_acc_d   0.72 (  0.74)	test_minacc_d   0.71 (  0.74)	test_majacc_d   0.72 (  0.74)	test_corr_d   0.42 (  0.46)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.17it/s]
Test: [  0/  1]	Loss 0.796 (0.796)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.72 (  0.72)	Loss_d 0.796 (0.796)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.796 (0.796)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.72 (  0.72)	Loss_d 0.796 (0.796)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.03 (  0.03)
Overall Timing[ 19/  1]	epoch_time 0.0356 (0.0368)	validation_time 0.0003 (0.0007)	train_time 0.0352 (0.0359)
record: (train_acc, test_acc) (0.6772000346779823, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7398000297546387, 0.5940000414848328)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.37it/s] 19%|#9        | 5/26 [00:00<00:01, 19.81it/s] 38%|###8      | 10/26 [00:00<00:00, 28.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.54it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.46it/s] 96%|#########6| 25/26 [00:00<00:00, 37.85it/s]100%|##########| 26/26 [00:00<00:00, 30.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.001)	train_nll   0.53 (  0.53)	train_penalty   0.00 (  0.00)	weight_norm  24.19 ( 24.19)	train_acc   0.74 (  0.72)	train_minacc   0.67 (  0.72)	train_majacc   0.75 (  0.72)	train_corr   0.00 (  0.00)	l1 5.7125 (5.8398)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.95it/s] 27%|##6       | 7/26 [00:00<00:00, 33.06it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.06it/s] 50%|#####     | 13/26 [00:00<00:00, 39.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.18it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.18it/s] 96%|#########6| 25/26 [00:00<00:00, 46.51it/s]100%|##########| 26/26 [00:00<00:00, 38.25it/s]
Test: [   0/  26]	Loss 0.518 (0.518)	test_acc   0.76 (  0.76)	test_minacc   0.76 (  0.76)	test_majacc   0.77 (  0.77)	Loss_d 0.518 (0.518)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.505 (0.505)	test_acc   0.75 (  0.75)	test_minacc   0.68 (  0.71)	test_majacc   0.77 (  0.76)	Loss_d 0.505 (0.505)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.68 (  0.71)	test_majacc_d   0.77 (  0.76)	test_corr_d   0.47 (  0.47)
Test: [  20/  26]	Loss 0.474 (0.503)	test_acc   0.77 (  0.75)	test_minacc   0.69 (  0.73)	test_majacc   0.78 (  0.75)	Loss_d 0.474 (0.503)	test_acc_d   0.77 (  0.75)	test_minacc_d   0.69 (  0.73)	test_majacc_d   0.78 (  0.75)	test_corr_d   0.52 (  0.47)
Test: [  26/  26]	Loss 0.524 (0.503)	test_acc   0.73 (  0.75)	test_minacc   0.67 (  0.72)	test_majacc   0.74 (  0.75)	Loss_d 0.524 (0.503)	test_acc_d   0.73 (  0.75)	test_minacc_d   0.67 (  0.72)	test_majacc_d   0.74 (  0.75)	test_corr_d   0.43 (  0.47)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.01it/s]
Test: [  0/  1]	Loss 0.810 (0.810)	test_acc   0.56 (  0.56)	test_minacc   0.54 (  0.54)	test_majacc   0.73 (  0.73)	Loss_d 0.810 (0.810)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.810 (0.810)	test_acc   0.56 (  0.56)	test_minacc   0.54 (  0.54)	test_majacc   0.73 (  0.73)	Loss_d 0.810 (0.810)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.05 (  0.05)
Overall Timing[ 20/  1]	epoch_time 0.0353 (0.0368)	validation_time 0.0005 (0.0007)	train_time 0.0348 (0.0359)
record: (train_acc, test_acc) (0.6772000346779823, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7484000296592712, 0.5610000491142273)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.14it/s] 19%|#9        | 5/26 [00:00<00:00, 24.54it/s] 38%|###8      | 10/26 [00:00<00:00, 32.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.45it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.53it/s] 96%|#########6| 25/26 [00:00<00:00, 38.67it/s]100%|##########| 26/26 [00:00<00:00, 32.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.001 (0.001)	train_nll   0.54 (  0.53)	train_penalty   0.00 (  0.00)	weight_norm  24.19 ( 24.19)	train_acc   0.74 (  0.72)	train_minacc   0.64 (  0.73)	train_majacc   0.75 (  0.72)	train_corr   0.00 (  0.00)	l1 5.7315 (5.7536)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.14it/s] 31%|###       | 8/26 [00:00<00:00, 38.02it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.02it/s] 50%|#####     | 13/26 [00:00<00:00, 40.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.68it/s] 96%|#########6| 25/26 [00:00<00:00, 47.18it/s]100%|##########| 26/26 [00:00<00:00, 40.41it/s]
Test: [   0/  26]	Loss 0.520 (0.520)	test_acc   0.77 (  0.77)	test_minacc   0.74 (  0.74)	test_majacc   0.78 (  0.78)	Loss_d 0.520 (0.520)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.46 (  0.46)
Test: [  10/  26]	Loss 0.490 (0.505)	test_acc   0.77 (  0.76)	test_minacc   0.68 (  0.69)	test_majacc   0.79 (  0.77)	Loss_d 0.490 (0.505)	test_acc_d   0.77 (  0.76)	test_minacc_d   0.68 (  0.69)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.50 (  0.49)
Test: [  20/  26]	Loss 0.461 (0.504)	test_acc   0.78 (  0.76)	test_minacc   0.69 (  0.71)	test_majacc   0.80 (  0.77)	Loss_d 0.461 (0.504)	test_acc_d   0.78 (  0.76)	test_minacc_d   0.69 (  0.71)	test_majacc_d   0.80 (  0.77)	test_corr_d   0.54 (  0.48)
Test: [  26/  26]	Loss 0.513 (0.500)	test_acc   0.75 (  0.76)	test_minacc   0.67 (  0.70)	test_majacc   0.76 (  0.77)	Loss_d 0.513 (0.500)	test_acc_d   0.75 (  0.76)	test_minacc_d   0.67 (  0.70)	test_majacc_d   0.76 (  0.77)	test_corr_d   0.46 (  0.49)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.73it/s]
Test: [  0/  1]	Loss 0.863 (0.863)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.76 (  0.76)	Loss_d 0.863 (0.863)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.863 (0.863)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.76 (  0.76)	Loss_d 0.863 (0.863)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.08 (  0.08)
Overall Timing[ 21/  1]	epoch_time 0.0346 (0.0367)	validation_time 0.0003 (0.0007)	train_time 0.0342 (0.0358)
record: (train_acc, test_acc) (0.6772000346779823, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7591000285744667, 0.5430000424385071)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.14it/s] 19%|#9        | 5/26 [00:00<00:00, 21.58it/s] 38%|###8      | 10/26 [00:00<00:00, 30.35it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.66it/s] 88%|########8 | 23/26 [00:00<00:00, 36.32it/s]100%|##########| 26/26 [00:00<00:00, 30.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.002 (0.001)	train_nll   0.53 (  0.51)	train_penalty   0.00 (  0.00)	weight_norm  24.20 ( 24.19)	train_acc   0.71 (  0.72)	train_minacc   0.74 (  0.72)	train_majacc   0.70 (  0.72)	train_corr   0.00 (  0.00)	l1 5.9867 (5.6956)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.11it/s] 31%|###       | 8/26 [00:00<00:00, 42.07it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.07it/s] 50%|#####     | 13/26 [00:00<00:00, 41.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.10it/s] 96%|#########6| 25/26 [00:00<00:00, 48.18it/s]100%|##########| 26/26 [00:00<00:00, 41.54it/s]
Test: [   0/  26]	Loss 0.542 (0.542)	test_acc   0.73 (  0.73)	test_minacc   0.83 (  0.83)	test_majacc   0.71 (  0.71)	Loss_d 0.542 (0.542)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.512 (0.548)	test_acc   0.74 (  0.70)	test_minacc   0.77 (  0.74)	test_majacc   0.73 (  0.70)	Loss_d 0.512 (0.548)	test_acc_d   0.74 (  0.70)	test_minacc_d   0.77 (  0.74)	test_majacc_d   0.73 (  0.70)	test_corr_d   0.42 (  0.38)
Test: [  20/  26]	Loss 0.513 (0.551)	test_acc   0.72 (  0.70)	test_minacc   0.72 (  0.76)	test_majacc   0.72 (  0.69)	Loss_d 0.513 (0.551)	test_acc_d   0.72 (  0.70)	test_minacc_d   0.72 (  0.76)	test_majacc_d   0.72 (  0.69)	test_corr_d   0.43 (  0.37)
Test: [  26/  26]	Loss 0.523 (0.544)	test_acc   0.71 (  0.70)	test_minacc   0.74 (  0.76)	test_majacc   0.71 (  0.69)	Loss_d 0.523 (0.544)	test_acc_d   0.71 (  0.70)	test_minacc_d   0.74 (  0.76)	test_majacc_d   0.71 (  0.69)	test_corr_d   0.38 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.48it/s]
Test: [  0/  1]	Loss 0.838 (0.838)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.68 (  0.68)	Loss_d 0.838 (0.838)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.838 (0.838)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.68 (  0.68)	Loss_d 0.838 (0.838)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 22/  1]	epoch_time 0.0355 (0.0366)	validation_time 0.0004 (0.0007)	train_time 0.0351 (0.0358)
record: (train_acc, test_acc) (0.6772000346779823, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7019000327587128, 0.6070000529289246)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.33it/s] 19%|#9        | 5/26 [00:00<00:00, 25.90it/s] 38%|###8      | 10/26 [00:00<00:00, 33.05it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.54it/s] 92%|#########2| 24/26 [00:00<00:00, 38.65it/s]100%|##########| 26/26 [00:00<00:00, 33.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 5.8008880615234375
set z to 5.510843658447265
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.005 (0.003)	train_nll   0.58 (  0.52)	train_penalty   0.00 (  0.00)	weight_norm  24.21 ( 24.20)	train_acc   0.69 (  0.75)	train_minacc   0.60 (  0.68)	train_majacc   0.71 (  0.76)	train_corr   0.00 (  0.00)	l1 5.6743 (5.4812)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.30it/s] 27%|##6       | 7/26 [00:00<00:00, 30.42it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.42it/s] 50%|#####     | 13/26 [00:00<00:00, 38.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.11it/s] 96%|#########6| 25/26 [00:00<00:00, 46.17it/s]100%|##########| 26/26 [00:00<00:00, 37.70it/s]
Test: [   0/  26]	Loss 0.537 (0.537)	test_acc   0.69 (  0.69)	test_minacc   0.77 (  0.77)	test_majacc   0.67 (  0.67)	Loss_d 0.537 (0.537)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.541 (0.564)	test_acc   0.69 (  0.67)	test_minacc   0.78 (  0.72)	test_majacc   0.68 (  0.67)	Loss_d 0.541 (0.564)	test_acc_d   0.69 (  0.67)	test_minacc_d   0.78 (  0.72)	test_majacc_d   0.68 (  0.67)	test_corr_d   0.42 (  0.39)
Test: [  20/  26]	Loss 0.579 (0.568)	test_acc   0.64 (  0.67)	test_minacc   0.63 (  0.74)	test_majacc   0.65 (  0.66)	Loss_d 0.579 (0.568)	test_acc_d   0.64 (  0.67)	test_minacc_d   0.63 (  0.74)	test_majacc_d   0.65 (  0.66)	test_corr_d   0.43 (  0.38)
Test: [  26/  26]	Loss 0.555 (0.566)	test_acc   0.70 (  0.67)	test_minacc   0.62 (  0.73)	test_majacc   0.72 (  0.66)	Loss_d 0.555 (0.566)	test_acc_d   0.70 (  0.67)	test_minacc_d   0.62 (  0.73)	test_majacc_d   0.72 (  0.66)	test_corr_d   0.43 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.17it/s]
Test: [  0/  1]	Loss 0.833 (0.833)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.68 (  0.68)	Loss_d 0.833 (0.833)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.833 (0.833)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.68 (  0.68)	Loss_d 0.833 (0.833)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 23/  1]	epoch_time 0.0350 (0.0365)	validation_time 0.0004 (0.0006)	train_time 0.0345 (0.0357)
record: (train_acc, test_acc) (0.6772000346779823, 0.6310000419616699)
last accs (train_acc, test_acc) (0.6716000238060951, 0.6230000257492065)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.80it/s] 19%|#9        | 5/26 [00:00<00:00, 24.83it/s] 35%|###4      | 9/26 [00:00<00:00, 30.85it/s] 50%|#####     | 13/26 [00:00<00:00, 33.82it/s] 65%|######5   | 17/26 [00:00<00:00, 35.39it/s] 81%|########  | 21/26 [00:00<00:00, 36.50it/s]100%|##########| 26/26 [00:00<00:00, 38.40it/s]100%|##########| 26/26 [00:00<00:00, 31.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.003 (0.001)	train_nll   0.46 (  0.51)	train_penalty   0.00 (  0.00)	weight_norm  24.21 ( 24.21)	train_acc   0.76 (  0.73)	train_minacc   0.76 (  0.76)	train_majacc   0.75 (  0.73)	train_corr   0.00 (  0.00)	l1 5.5606 (5.4749)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.07it/s] 27%|##6       | 7/26 [00:00<00:00, 34.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.02it/s] 50%|#####     | 13/26 [00:00<00:00, 43.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.43it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.43it/s] 96%|#########6| 25/26 [00:00<00:00, 49.06it/s]100%|##########| 26/26 [00:00<00:00, 40.84it/s]
Test: [   0/  26]	Loss 0.492 (0.492)	test_acc   0.76 (  0.76)	test_minacc   0.83 (  0.83)	test_majacc   0.75 (  0.75)	Loss_d 0.492 (0.492)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.506 (0.523)	test_acc   0.74 (  0.72)	test_minacc   0.77 (  0.74)	test_majacc   0.73 (  0.71)	Loss_d 0.506 (0.523)	test_acc_d   0.74 (  0.72)	test_minacc_d   0.77 (  0.74)	test_majacc_d   0.73 (  0.71)	test_corr_d   0.43 (  0.42)
Test: [  20/  26]	Loss 0.511 (0.523)	test_acc   0.72 (  0.71)	test_minacc   0.70 (  0.76)	test_majacc   0.72 (  0.71)	Loss_d 0.511 (0.523)	test_acc_d   0.72 (  0.71)	test_minacc_d   0.70 (  0.76)	test_majacc_d   0.72 (  0.71)	test_corr_d   0.45 (  0.41)
Test: [  26/  26]	Loss 0.466 (0.518)	test_acc   0.75 (  0.72)	test_minacc   0.74 (  0.76)	test_majacc   0.75 (  0.71)	Loss_d 0.466 (0.518)	test_acc_d   0.75 (  0.72)	test_minacc_d   0.74 (  0.76)	test_majacc_d   0.75 (  0.71)	test_corr_d   0.46 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.08it/s]
Test: [  0/  1]	Loss 0.797 (0.797)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.69 (  0.69)	Loss_d 0.797 (0.797)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.797 (0.797)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.69 (  0.69)	Loss_d 0.797 (0.797)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 24/  1]	epoch_time 0.0346 (0.0365)	validation_time 0.0004 (0.0006)	train_time 0.0342 (0.0356)
record: (train_acc, test_acc) (0.6772000346779823, 0.6310000419616699)
last accs (train_acc, test_acc) (0.718600031197071, 0.628000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 19%|#9        | 5/26 [00:00<00:00, 24.27it/s] 35%|###4      | 9/26 [00:00<00:00, 30.73it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.90it/s] 92%|#########2| 24/26 [00:00<00:00, 39.44it/s]100%|##########| 26/26 [00:00<00:00, 32.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.002 (0.002)	train_nll   0.50 (  0.53)	train_penalty   0.00 (  0.00)	weight_norm  24.22 ( 24.22)	train_acc   0.72 (  0.71)	train_minacc   0.62 (  0.74)	train_majacc   0.74 (  0.70)	train_corr   0.00 (  0.00)	l1 5.2977 (5.4196)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 27%|##6       | 7/26 [00:00<00:00, 31.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.64it/s] 50%|#####     | 13/26 [00:00<00:00, 40.38it/s] 69%|######9   | 18/26 [00:00<00:00, 43.51it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.51it/s] 92%|#########2| 24/26 [00:00<00:00, 48.39it/s]100%|##########| 26/26 [00:00<00:00, 38.78it/s]
Test: [   0/  26]	Loss 0.506 (0.506)	test_acc   0.75 (  0.75)	test_minacc   0.83 (  0.83)	test_majacc   0.73 (  0.73)	Loss_d 0.506 (0.506)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.40 (  0.40)
Test: [  10/  26]	Loss 0.526 (0.519)	test_acc   0.70 (  0.72)	test_minacc   0.72 (  0.75)	test_majacc   0.69 (  0.71)	Loss_d 0.526 (0.519)	test_acc_d   0.70 (  0.72)	test_minacc_d   0.72 (  0.75)	test_majacc_d   0.69 (  0.71)	test_corr_d   0.42 (  0.42)
Test: [  20/  26]	Loss 0.534 (0.523)	test_acc   0.68 (  0.71)	test_minacc   0.66 (  0.77)	test_majacc   0.69 (  0.70)	Loss_d 0.534 (0.523)	test_acc_d   0.68 (  0.71)	test_minacc_d   0.66 (  0.77)	test_majacc_d   0.69 (  0.70)	test_corr_d   0.44 (  0.41)
Test: [  26/  26]	Loss 0.511 (0.524)	test_acc   0.71 (  0.71)	test_minacc   0.64 (  0.75)	test_majacc   0.73 (  0.70)	Loss_d 0.511 (0.524)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.64 (  0.75)	test_majacc_d   0.73 (  0.70)	test_corr_d   0.43 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.10it/s]
Test: [  0/  1]	Loss 0.755 (0.755)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.72 (  0.72)	Loss_d 0.755 (0.755)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.755 (0.755)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.72 (  0.72)	Loss_d 0.755 (0.755)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 25/  1]	epoch_time 0.0337 (0.0363)	validation_time 0.0004 (0.0006)	train_time 0.0332 (0.0356)
record: (train_acc, test_acc) (0.6772000346779823, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7114000287055969, 0.6200000047683716)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.37it/s] 19%|#9        | 5/26 [00:00<00:00, 26.59it/s] 38%|###8      | 10/26 [00:00<00:00, 33.55it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.16it/s] 88%|########8 | 23/26 [00:00<00:00, 37.55it/s]100%|##########| 26/26 [00:00<00:00, 32.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.001)	train_nll   0.53 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  24.23 ( 24.23)	train_acc   0.73 (  0.71)	train_minacc   0.76 (  0.76)	train_majacc   0.72 (  0.70)	train_corr   0.00 (  0.00)	l1 5.1164 (5.3317)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.62it/s] 27%|##6       | 7/26 [00:00<00:00, 33.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.49it/s] 46%|####6     | 12/26 [00:00<00:00, 38.31it/s] 69%|######9   | 18/26 [00:00<00:00, 45.36it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.36it/s] 92%|#########2| 24/26 [00:00<00:00, 45.05it/s]100%|##########| 26/26 [00:00<00:00, 40.02it/s]
Test: [   0/  26]	Loss 0.529 (0.529)	test_acc   0.75 (  0.75)	test_minacc   0.79 (  0.79)	test_majacc   0.74 (  0.74)	Loss_d 0.529 (0.529)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.544 (0.529)	test_acc   0.73 (  0.72)	test_minacc   0.72 (  0.73)	test_majacc   0.74 (  0.72)	Loss_d 0.544 (0.529)	test_acc_d   0.73 (  0.72)	test_minacc_d   0.72 (  0.73)	test_majacc_d   0.74 (  0.72)	test_corr_d   0.43 (  0.44)
Test: [  20/  26]	Loss 0.517 (0.533)	test_acc   0.73 (  0.72)	test_minacc   0.66 (  0.76)	test_majacc   0.75 (  0.72)	Loss_d 0.517 (0.533)	test_acc_d   0.73 (  0.72)	test_minacc_d   0.66 (  0.76)	test_majacc_d   0.75 (  0.72)	test_corr_d   0.45 (  0.42)
Test: [  26/  26]	Loss 0.524 (0.533)	test_acc   0.73 (  0.72)	test_minacc   0.74 (  0.75)	test_majacc   0.73 (  0.72)	Loss_d 0.524 (0.533)	test_acc_d   0.73 (  0.72)	test_minacc_d   0.74 (  0.75)	test_majacc_d   0.73 (  0.72)	test_corr_d   0.43 (  0.43)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.27it/s]
Test: [  0/  1]	Loss 0.765 (0.765)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.72 (  0.72)	Loss_d 0.765 (0.765)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.765 (0.765)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.72 (  0.72)	Loss_d 0.765 (0.765)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 26/  1]	epoch_time 0.0345 (0.0363)	validation_time 0.0003 (0.0006)	train_time 0.0342 (0.0355)
record: (train_acc, test_acc) (0.6772000346779823, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7221000277400017, 0.6210000514984131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.58it/s] 19%|#9        | 5/26 [00:00<00:00, 24.63it/s] 35%|###4      | 9/26 [00:00<00:00, 30.34it/s] 50%|#####     | 13/26 [00:00<00:00, 33.08it/s] 65%|######5   | 17/26 [00:00<00:00, 35.38it/s] 81%|########  | 21/26 [00:00<00:00, 36.87it/s] 96%|#########6| 25/26 [00:00<00:00, 37.83it/s]100%|##########| 26/26 [00:00<00:00, 31.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.54 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  24.24 ( 24.24)	train_acc   0.71 (  0.71)	train_minacc   0.71 (  0.76)	train_majacc   0.71 (  0.70)	train_corr   0.00 (  0.00)	l1 5.4496 (5.2134)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.90it/s] 27%|##6       | 7/26 [00:00<00:00, 33.80it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.80it/s] 50%|#####     | 13/26 [00:00<00:00, 41.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.72it/s] 96%|#########6| 25/26 [00:00<00:00, 47.50it/s]100%|##########| 26/26 [00:00<00:00, 40.53it/s]
Test: [   0/  26]	Loss 0.536 (0.536)	test_acc   0.70 (  0.70)	test_minacc   0.83 (  0.83)	test_majacc   0.68 (  0.68)	Loss_d 0.536 (0.536)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.550 (0.539)	test_acc   0.69 (  0.70)	test_minacc   0.77 (  0.77)	test_majacc   0.68 (  0.69)	Loss_d 0.550 (0.539)	test_acc_d   0.69 (  0.70)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.68 (  0.69)	test_corr_d   0.36 (  0.36)
Test: [  20/  26]	Loss 0.537 (0.546)	test_acc   0.70 (  0.69)	test_minacc   0.69 (  0.79)	test_majacc   0.70 (  0.68)	Loss_d 0.537 (0.546)	test_acc_d   0.70 (  0.69)	test_minacc_d   0.69 (  0.79)	test_majacc_d   0.70 (  0.68)	test_corr_d   0.39 (  0.35)
Test: [  26/  26]	Loss 0.542 (0.546)	test_acc   0.70 (  0.69)	test_minacc   0.71 (  0.78)	test_majacc   0.70 (  0.68)	Loss_d 0.542 (0.546)	test_acc_d   0.70 (  0.69)	test_minacc_d   0.71 (  0.78)	test_majacc_d   0.70 (  0.68)	test_corr_d   0.36 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.44it/s]
Test: [  0/  1]	Loss 0.729 (0.729)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.70 (  0.70)	Loss_d 0.729 (0.729)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.729 (0.729)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.70 (  0.70)	Loss_d 0.729 (0.729)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.15 ( -0.15)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/134/checkpoints/model_best.pth
Overall Timing[ 27/  1]	epoch_time 0.0353 (0.0362)	validation_time 0.0004 (0.0006)	train_time 0.0349 (0.0355)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.53it/s] 19%|#9        | 5/26 [00:00<00:00, 21.63it/s] 35%|###4      | 9/26 [00:00<00:00, 28.10it/s] 50%|#####     | 13/26 [00:00<00:00, 31.53it/s] 65%|######5   | 17/26 [00:00<00:00, 33.64it/s] 81%|########  | 21/26 [00:00<00:00, 35.44it/s] 96%|#########6| 25/26 [00:00<00:00, 36.05it/s]100%|##########| 26/26 [00:00<00:00, 29.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.53 (  0.53)	train_penalty   0.00 (  0.00)	weight_norm  24.24 ( 24.24)	train_acc   0.70 (  0.71)	train_minacc   0.64 (  0.76)	train_majacc   0.71 (  0.70)	train_corr   0.00 (  0.00)	l1 5.4045 (5.3527)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.23it/s] 27%|##6       | 7/26 [00:00<00:00, 34.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.93it/s] 50%|#####     | 13/26 [00:00<00:00, 43.44it/s] 69%|######9   | 18/26 [00:00<00:00, 44.05it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.05it/s] 92%|#########2| 24/26 [00:00<00:00, 48.76it/s]100%|##########| 26/26 [00:00<00:00, 41.29it/s]
Test: [   0/  26]	Loss 0.519 (0.519)	test_acc   0.72 (  0.72)	test_minacc   0.83 (  0.83)	test_majacc   0.69 (  0.69)	Loss_d 0.519 (0.519)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.529 (0.526)	test_acc   0.71 (  0.71)	test_minacc   0.80 (  0.77)	test_majacc   0.69 (  0.70)	Loss_d 0.529 (0.526)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.80 (  0.77)	test_majacc_d   0.69 (  0.70)	test_corr_d   0.41 (  0.40)
Test: [  20/  26]	Loss 0.533 (0.533)	test_acc   0.69 (  0.70)	test_minacc   0.64 (  0.78)	test_majacc   0.70 (  0.69)	Loss_d 0.533 (0.533)	test_acc_d   0.69 (  0.70)	test_minacc_d   0.64 (  0.78)	test_majacc_d   0.70 (  0.69)	test_corr_d   0.42 (  0.39)
Test: [  26/  26]	Loss 0.529 (0.533)	test_acc   0.69 (  0.70)	test_minacc   0.64 (  0.76)	test_majacc   0.70 (  0.69)	Loss_d 0.529 (0.533)	test_acc_d   0.69 (  0.70)	test_minacc_d   0.64 (  0.76)	test_majacc_d   0.70 (  0.69)	test_corr_d   0.41 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.13it/s]
Test: [  0/  1]	Loss 0.773 (0.773)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.69 (  0.69)	Loss_d 0.773 (0.773)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.773 (0.773)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.69 (  0.69)	Loss_d 0.773 (0.773)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 28/  1]	epoch_time 0.0370 (0.0363)	validation_time 0.0004 (0.0006)	train_time 0.0366 (0.0355)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.7019000297188759, 0.6300000548362732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 19%|#9        | 5/26 [00:00<00:00, 23.94it/s] 35%|###4      | 9/26 [00:00<00:00, 29.91it/s] 50%|#####     | 13/26 [00:00<00:00, 33.32it/s] 65%|######5   | 17/26 [00:00<00:00, 35.59it/s] 81%|########  | 21/26 [00:00<00:00, 36.74it/s] 96%|#########6| 25/26 [00:00<00:00, 37.56it/s]100%|##########| 26/26 [00:00<00:00, 31.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.53 (  0.53)	train_penalty   0.00 (  0.00)	weight_norm  24.24 ( 24.24)	train_acc   0.70 (  0.70)	train_minacc   0.69 (  0.76)	train_majacc   0.70 (  0.69)	train_corr   0.00 (  0.00)	l1 5.3751 (5.3598)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.06it/s] 23%|##3       | 6/26 [00:00<00:00, 31.92it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.92it/s] 42%|####2     | 11/26 [00:00<00:00, 39.28it/s] 65%|######5   | 17/26 [00:00<00:00, 41.96it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.96it/s] 88%|########8 | 23/26 [00:00<00:00, 46.11it/s]100%|##########| 26/26 [00:00<00:00, 38.17it/s]
Test: [   0/  26]	Loss 0.528 (0.528)	test_acc   0.70 (  0.70)	test_minacc   0.83 (  0.83)	test_majacc   0.68 (  0.68)	Loss_d 0.528 (0.528)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.535 (0.529)	test_acc   0.71 (  0.71)	test_minacc   0.78 (  0.77)	test_majacc   0.70 (  0.70)	Loss_d 0.535 (0.529)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.78 (  0.77)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.39 (  0.39)
Test: [  20/  26]	Loss 0.534 (0.538)	test_acc   0.69 (  0.70)	test_minacc   0.64 (  0.78)	test_majacc   0.71 (  0.68)	Loss_d 0.534 (0.538)	test_acc_d   0.69 (  0.70)	test_minacc_d   0.64 (  0.78)	test_majacc_d   0.71 (  0.68)	test_corr_d   0.41 (  0.37)
Test: [  26/  26]	Loss 0.531 (0.538)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.77)	test_majacc   0.70 (  0.69)	Loss_d 0.531 (0.538)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.77)	test_majacc_d   0.70 (  0.69)	test_corr_d   0.39 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.30it/s]
Test: [  0/  1]	Loss 0.750 (0.750)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.69 (  0.69)	Loss_d 0.750 (0.750)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.750 (0.750)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.69 (  0.69)	Loss_d 0.750 (0.750)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 29/  1]	epoch_time 0.0368 (0.0363)	validation_time 0.0004 (0.0006)	train_time 0.0363 (0.0355)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.6982000361680984, 0.6360000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.10it/s] 19%|#9        | 5/26 [00:00<00:00, 23.20it/s] 35%|###4      | 9/26 [00:00<00:00, 29.72it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.70it/s] 92%|#########2| 24/26 [00:00<00:00, 38.22it/s]100%|##########| 26/26 [00:00<00:00, 31.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.53 (  0.53)	train_penalty   0.00 (  0.00)	weight_norm  24.24 ( 24.24)	train_acc   0.69 (  0.70)	train_minacc   0.64 (  0.76)	train_majacc   0.70 (  0.69)	train_corr   0.00 (  0.00)	l1 5.3352 (5.3542)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.69it/s] 27%|##6       | 7/26 [00:00<00:00, 31.89it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.89it/s] 50%|#####     | 13/26 [00:00<00:00, 38.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.25it/s] 96%|#########6| 25/26 [00:00<00:00, 45.64it/s]100%|##########| 26/26 [00:00<00:00, 38.07it/s]
Test: [   0/  26]	Loss 0.522 (0.522)	test_acc   0.71 (  0.71)	test_minacc   0.83 (  0.83)	test_majacc   0.68 (  0.68)	Loss_d 0.522 (0.522)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.526 (0.522)	test_acc   0.71 (  0.71)	test_minacc   0.78 (  0.77)	test_majacc   0.69 (  0.70)	Loss_d 0.526 (0.522)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.78 (  0.77)	test_majacc_d   0.69 (  0.70)	test_corr_d   0.41 (  0.41)
Test: [  20/  26]	Loss 0.541 (0.532)	test_acc   0.68 (  0.70)	test_minacc   0.66 (  0.78)	test_majacc   0.68 (  0.69)	Loss_d 0.541 (0.532)	test_acc_d   0.68 (  0.70)	test_minacc_d   0.66 (  0.78)	test_majacc_d   0.68 (  0.69)	test_corr_d   0.42 (  0.39)
Test: [  26/  26]	Loss 0.536 (0.534)	test_acc   0.69 (  0.70)	test_minacc   0.64 (  0.76)	test_majacc   0.70 (  0.69)	Loss_d 0.536 (0.534)	test_acc_d   0.69 (  0.70)	test_minacc_d   0.64 (  0.76)	test_majacc_d   0.70 (  0.69)	test_corr_d   0.41 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.93it/s]
Test: [  0/  1]	Loss 0.769 (0.769)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.67 (  0.67)	Loss_d 0.769 (0.769)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.769 (0.769)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.67 (  0.67)	Loss_d 0.769 (0.769)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 30/  1]	epoch_time 0.0338 (0.0362)	validation_time 0.0003 (0.0006)	train_time 0.0335 (0.0355)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.7004000309705735, 0.6220000386238098)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.19it/s] 19%|#9        | 5/26 [00:00<00:00, 22.49it/s] 35%|###4      | 9/26 [00:00<00:00, 28.54it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.37it/s] 92%|#########2| 24/26 [00:00<00:00, 38.26it/s]100%|##########| 26/26 [00:00<00:00, 31.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.52 (  0.53)	train_penalty   0.00 (  0.00)	weight_norm  24.24 ( 24.24)	train_acc   0.72 (  0.70)	train_minacc   0.67 (  0.77)	train_majacc   0.73 (  0.69)	train_corr   0.00 (  0.00)	l1 5.2601 (5.3365)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.44it/s] 27%|##6       | 7/26 [00:00<00:00, 34.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.33it/s] 50%|#####     | 13/26 [00:00<00:00, 40.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.99it/s] 96%|#########6| 25/26 [00:00<00:00, 47.44it/s]100%|##########| 26/26 [00:00<00:00, 38.91it/s]
Test: [   0/  26]	Loss 0.530 (0.530)	test_acc   0.72 (  0.72)	test_minacc   0.82 (  0.82)	test_majacc   0.70 (  0.70)	Loss_d 0.530 (0.530)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.528 (0.521)	test_acc   0.73 (  0.72)	test_minacc   0.75 (  0.76)	test_majacc   0.73 (  0.72)	Loss_d 0.528 (0.521)	test_acc_d   0.73 (  0.72)	test_minacc_d   0.75 (  0.76)	test_majacc_d   0.73 (  0.72)	test_corr_d   0.42 (  0.42)
Test: [  20/  26]	Loss 0.528 (0.533)	test_acc   0.72 (  0.71)	test_minacc   0.69 (  0.77)	test_majacc   0.72 (  0.70)	Loss_d 0.528 (0.533)	test_acc_d   0.72 (  0.71)	test_minacc_d   0.69 (  0.77)	test_majacc_d   0.72 (  0.70)	test_corr_d   0.43 (  0.40)
Test: [  26/  26]	Loss 0.528 (0.533)	test_acc   0.71 (  0.71)	test_minacc   0.67 (  0.76)	test_majacc   0.72 (  0.70)	Loss_d 0.528 (0.533)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.72 (  0.70)	test_corr_d   0.41 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.10it/s]
Test: [  0/  1]	Loss 0.768 (0.768)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.71 (  0.71)	Loss_d 0.768 (0.768)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.768 (0.768)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.71 (  0.71)	Loss_d 0.768 (0.768)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 31/  1]	epoch_time 0.0358 (0.0362)	validation_time 0.0004 (0.0006)	train_time 0.0354 (0.0355)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.7089000369906425, 0.6260000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s] 19%|#9        | 5/26 [00:00<00:00, 22.16it/s] 35%|###4      | 9/26 [00:00<00:00, 28.77it/s] 50%|#####     | 13/26 [00:00<00:00, 32.70it/s] 65%|######5   | 17/26 [00:00<00:00, 35.12it/s] 85%|########4 | 22/26 [00:00<00:00, 37.16it/s]100%|##########| 26/26 [00:00<00:00, 37.98it/s]100%|##########| 26/26 [00:00<00:00, 30.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.54 (  0.53)	train_penalty   0.00 (  0.00)	weight_norm  24.25 ( 24.25)	train_acc   0.68 (  0.70)	train_minacc   0.62 (  0.76)	train_majacc   0.70 (  0.69)	train_corr   0.00 (  0.00)	l1 5.2049 (5.3134)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.07it/s] 19%|#9        | 5/26 [00:00<00:00, 22.89it/s]                                               19%|#9        | 5/26 [00:00<00:00, 22.89it/s] 42%|####2     | 11/26 [00:00<00:00, 37.80it/s] 62%|######1   | 16/26 [00:00<00:00, 40.77it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.77it/s] 85%|########4 | 22/26 [00:00<00:00, 46.56it/s]100%|##########| 26/26 [00:00<00:00, 37.56it/s]
Test: [   0/  26]	Loss 0.525 (0.525)	test_acc   0.71 (  0.71)	test_minacc   0.79 (  0.79)	test_majacc   0.69 (  0.69)	Loss_d 0.525 (0.525)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.522 (0.521)	test_acc   0.69 (  0.71)	test_minacc   0.73 (  0.74)	test_majacc   0.68 (  0.71)	Loss_d 0.522 (0.521)	test_acc_d   0.69 (  0.71)	test_minacc_d   0.73 (  0.74)	test_majacc_d   0.68 (  0.71)	test_corr_d   0.44 (  0.43)
Test: [  20/  26]	Loss 0.552 (0.531)	test_acc   0.65 (  0.70)	test_minacc   0.63 (  0.75)	test_majacc   0.65 (  0.69)	Loss_d 0.552 (0.531)	test_acc_d   0.65 (  0.70)	test_minacc_d   0.63 (  0.75)	test_majacc_d   0.65 (  0.69)	test_corr_d   0.43 (  0.41)
Test: [  26/  26]	Loss 0.546 (0.535)	test_acc   0.68 (  0.70)	test_minacc   0.62 (  0.74)	test_majacc   0.69 (  0.69)	Loss_d 0.546 (0.535)	test_acc_d   0.68 (  0.70)	test_minacc_d   0.62 (  0.74)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.42 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.89it/s]
Test: [  0/  1]	Loss 0.785 (0.785)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.68 (  0.68)	Loss_d 0.785 (0.785)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.785 (0.785)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.68 (  0.68)	Loss_d 0.785 (0.785)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 32/  1]	epoch_time 0.0336 (0.0361)	validation_time 0.0004 (0.0006)	train_time 0.0332 (0.0354)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.6963000305891037, 0.612000048160553)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.51it/s] 19%|#9        | 5/26 [00:00<00:00, 22.39it/s] 35%|###4      | 9/26 [00:00<00:00, 29.39it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.78it/s] 88%|########8 | 23/26 [00:00<00:00, 37.53it/s]100%|##########| 26/26 [00:00<00:00, 30.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.53 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  24.25 ( 24.25)	train_acc   0.70 (  0.70)	train_minacc   0.64 (  0.75)	train_majacc   0.72 (  0.69)	train_corr   0.00 (  0.00)	l1 5.2317 (5.2924)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.47it/s] 27%|##6       | 7/26 [00:00<00:00, 37.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.30it/s] 50%|#####     | 13/26 [00:00<00:00, 42.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.05it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.05it/s] 96%|#########6| 25/26 [00:00<00:00, 47.65it/s]100%|##########| 26/26 [00:00<00:00, 40.71it/s]
Test: [   0/  26]	Loss 0.528 (0.528)	test_acc   0.71 (  0.71)	test_minacc   0.83 (  0.83)	test_majacc   0.68 (  0.68)	Loss_d 0.528 (0.528)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.520 (0.512)	test_acc   0.73 (  0.73)	test_minacc   0.77 (  0.77)	test_majacc   0.72 (  0.72)	Loss_d 0.520 (0.512)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.43 (  0.43)
Test: [  20/  26]	Loss 0.526 (0.524)	test_acc   0.70 (  0.71)	test_minacc   0.67 (  0.78)	test_majacc   0.71 (  0.70)	Loss_d 0.526 (0.524)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.67 (  0.78)	test_majacc_d   0.71 (  0.70)	test_corr_d   0.43 (  0.41)
Test: [  26/  26]	Loss 0.529 (0.526)	test_acc   0.70 (  0.71)	test_minacc   0.64 (  0.77)	test_majacc   0.71 (  0.70)	Loss_d 0.529 (0.526)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.64 (  0.77)	test_majacc_d   0.71 (  0.70)	test_corr_d   0.41 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.30it/s]
Test: [  0/  1]	Loss 0.766 (0.766)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.69 (  0.69)	Loss_d 0.766 (0.766)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.766 (0.766)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.69 (  0.69)	Loss_d 0.766 (0.766)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 33/  1]	epoch_time 0.0353 (0.0361)	validation_time 0.0004 (0.0006)	train_time 0.0349 (0.0354)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.7096000331640243, 0.6230000257492065)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 19%|#9        | 5/26 [00:00<00:01, 20.80it/s] 35%|###4      | 9/26 [00:00<00:00, 28.14it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.32it/s] 69%|######9   | 18/26 [00:00<00:00, 35.32it/s] 88%|########8 | 23/26 [00:00<00:00, 37.44it/s]100%|##########| 26/26 [00:00<00:00, 30.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.55 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  24.25 ( 24.25)	train_acc   0.67 (  0.70)	train_minacc   0.62 (  0.75)	train_majacc   0.68 (  0.69)	train_corr   0.00 (  0.00)	l1 5.0287 (5.2926)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.97it/s] 27%|##6       | 7/26 [00:00<00:00, 30.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.51it/s] 50%|#####     | 13/26 [00:00<00:00, 39.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.40it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.40it/s] 96%|#########6| 25/26 [00:00<00:00, 45.88it/s]100%|##########| 26/26 [00:00<00:00, 37.46it/s]
Test: [   0/  26]	Loss 0.530 (0.530)	test_acc   0.71 (  0.71)	test_minacc   0.77 (  0.77)	test_majacc   0.69 (  0.69)	Loss_d 0.530 (0.530)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.518 (0.522)	test_acc   0.69 (  0.71)	test_minacc   0.72 (  0.73)	test_majacc   0.68 (  0.71)	Loss_d 0.518 (0.522)	test_acc_d   0.69 (  0.71)	test_minacc_d   0.72 (  0.73)	test_majacc_d   0.68 (  0.71)	test_corr_d   0.48 (  0.47)
Test: [  20/  26]	Loss 0.553 (0.530)	test_acc   0.65 (  0.70)	test_minacc   0.61 (  0.74)	test_majacc   0.66 (  0.69)	Loss_d 0.553 (0.530)	test_acc_d   0.65 (  0.70)	test_minacc_d   0.61 (  0.74)	test_majacc_d   0.66 (  0.69)	test_corr_d   0.47 (  0.45)
Test: [  26/  26]	Loss 0.551 (0.534)	test_acc   0.68 (  0.69)	test_minacc   0.62 (  0.72)	test_majacc   0.69 (  0.69)	Loss_d 0.551 (0.534)	test_acc_d   0.68 (  0.69)	test_minacc_d   0.62 (  0.72)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.45 (  0.46)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.27it/s]
Test: [  0/  1]	Loss 0.814 (0.814)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.68 (  0.68)	Loss_d 0.814 (0.814)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.814 (0.814)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.68 (  0.68)	Loss_d 0.814 (0.814)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.02 (  0.02)
Overall Timing[ 34/  1]	epoch_time 0.0349 (0.0361)	validation_time 0.0003 (0.0006)	train_time 0.0346 (0.0354)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.6928000274300575, 0.5980000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.74it/s] 15%|#5        | 4/26 [00:00<00:01, 17.47it/s] 31%|###       | 8/26 [00:00<00:00, 25.99it/s] 46%|####6     | 12/26 [00:00<00:00, 31.02it/s] 65%|######5   | 17/26 [00:00<00:00, 34.92it/s] 85%|########4 | 22/26 [00:00<00:00, 37.26it/s]100%|##########| 26/26 [00:00<00:00, 30.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.56 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  24.25 ( 24.25)	train_acc   0.67 (  0.68)	train_minacc   0.64 (  0.74)	train_majacc   0.67 (  0.67)	train_corr   0.00 (  0.00)	l1 5.2400 (5.1241)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 31%|###       | 8/26 [00:00<00:00, 35.45it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.45it/s] 50%|#####     | 13/26 [00:00<00:00, 38.85it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.06it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.06it/s] 96%|#########6| 25/26 [00:00<00:00, 46.86it/s]100%|##########| 26/26 [00:00<00:00, 38.70it/s]
Test: [   0/  26]	Loss 0.550 (0.550)	test_acc   0.69 (  0.69)	test_minacc   0.82 (  0.82)	test_majacc   0.66 (  0.66)	Loss_d 0.550 (0.550)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.534 (0.534)	test_acc   0.69 (  0.70)	test_minacc   0.73 (  0.77)	test_majacc   0.68 (  0.69)	Loss_d 0.534 (0.534)	test_acc_d   0.69 (  0.70)	test_minacc_d   0.73 (  0.77)	test_majacc_d   0.68 (  0.69)	test_corr_d   0.40 (  0.39)
Test: [  20/  26]	Loss 0.556 (0.544)	test_acc   0.64 (  0.69)	test_minacc   0.64 (  0.77)	test_majacc   0.64 (  0.67)	Loss_d 0.556 (0.544)	test_acc_d   0.64 (  0.69)	test_minacc_d   0.64 (  0.77)	test_majacc_d   0.64 (  0.67)	test_corr_d   0.39 (  0.37)
Test: [  26/  26]	Loss 0.559 (0.548)	test_acc   0.67 (  0.69)	test_minacc   0.64 (  0.75)	test_majacc   0.68 (  0.67)	Loss_d 0.559 (0.548)	test_acc_d   0.67 (  0.69)	test_minacc_d   0.64 (  0.75)	test_majacc_d   0.68 (  0.67)	test_corr_d   0.37 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.26it/s]
Test: [  0/  1]	Loss 0.755 (0.755)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.68 (  0.68)	Loss_d 0.755 (0.755)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.755 (0.755)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.68 (  0.68)	Loss_d 0.755 (0.755)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 35/  1]	epoch_time 0.0341 (0.0360)	validation_time 0.0004 (0.0006)	train_time 0.0337 (0.0353)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.6850000288486481, 0.6330000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.90it/s] 19%|#9        | 5/26 [00:00<00:01, 20.79it/s] 35%|###4      | 9/26 [00:00<00:00, 27.74it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.79it/s] 92%|#########2| 24/26 [00:00<00:00, 37.31it/s]100%|##########| 26/26 [00:00<00:00, 30.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.53 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  24.25 ( 24.25)	train_acc   0.68 (  0.69)	train_minacc   0.64 (  0.75)	train_majacc   0.69 (  0.68)	train_corr   0.00 (  0.00)	l1 5.1631 (5.3091)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.53it/s] 35%|###4      | 9/26 [00:00<00:00, 41.66it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.97it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.57it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.57it/s]100%|##########| 26/26 [00:00<00:00, 43.03it/s]
Test: [   0/  26]	Loss 0.532 (0.532)	test_acc   0.71 (  0.71)	test_minacc   0.79 (  0.79)	test_majacc   0.69 (  0.69)	Loss_d 0.532 (0.532)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.509 (0.510)	test_acc   0.74 (  0.73)	test_minacc   0.75 (  0.75)	test_majacc   0.74 (  0.73)	Loss_d 0.509 (0.510)	test_acc_d   0.74 (  0.73)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.74 (  0.73)	test_corr_d   0.46 (  0.45)
Test: [  20/  26]	Loss 0.526 (0.520)	test_acc   0.69 (  0.72)	test_minacc   0.64 (  0.77)	test_majacc   0.71 (  0.71)	Loss_d 0.526 (0.520)	test_acc_d   0.69 (  0.72)	test_minacc_d   0.64 (  0.77)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.44 (  0.43)
Test: [  26/  26]	Loss 0.531 (0.523)	test_acc   0.68 (  0.72)	test_minacc   0.64 (  0.76)	test_majacc   0.69 (  0.71)	Loss_d 0.531 (0.523)	test_acc_d   0.68 (  0.72)	test_minacc_d   0.64 (  0.76)	test_majacc_d   0.69 (  0.71)	test_corr_d   0.43 (  0.43)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.83it/s]
Test: [  0/  1]	Loss 0.791 (0.791)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.71 (  0.71)	Loss_d 0.791 (0.791)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.791 (0.791)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.71 (  0.71)	Loss_d 0.791 (0.791)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 36/  1]	epoch_time 0.0340 (0.0360)	validation_time 0.0004 (0.0006)	train_time 0.0336 (0.0353)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.7167000307440757, 0.6100000143051147)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.60it/s] 19%|#9        | 5/26 [00:00<00:00, 22.02it/s] 35%|###4      | 9/26 [00:00<00:00, 29.16it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.11it/s] 69%|######9   | 18/26 [00:00<00:00, 35.98it/s] 88%|########8 | 23/26 [00:00<00:00, 37.58it/s]100%|##########| 26/26 [00:00<00:00, 31.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.56 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  24.26 ( 24.26)	train_acc   0.68 (  0.70)	train_minacc   0.60 (  0.75)	train_majacc   0.69 (  0.69)	train_corr   0.00 (  0.00)	l1 5.0093 (5.2879)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 27%|##6       | 7/26 [00:00<00:00, 36.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.28it/s] 46%|####6     | 12/26 [00:00<00:00, 41.42it/s] 65%|######5   | 17/26 [00:00<00:00, 43.51it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.51it/s] 88%|########8 | 23/26 [00:00<00:00, 48.14it/s]100%|##########| 26/26 [00:00<00:00, 39.90it/s]
Test: [   0/  26]	Loss 0.537 (0.537)	test_acc   0.70 (  0.70)	test_minacc   0.77 (  0.77)	test_majacc   0.69 (  0.69)	Loss_d 0.537 (0.537)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.516 (0.524)	test_acc   0.71 (  0.71)	test_minacc   0.73 (  0.74)	test_majacc   0.70 (  0.71)	Loss_d 0.516 (0.524)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.73 (  0.74)	test_majacc_d   0.70 (  0.71)	test_corr_d   0.48 (  0.47)
Test: [  20/  26]	Loss 0.558 (0.531)	test_acc   0.66 (  0.70)	test_minacc   0.61 (  0.74)	test_majacc   0.67 (  0.69)	Loss_d 0.558 (0.531)	test_acc_d   0.66 (  0.70)	test_minacc_d   0.61 (  0.74)	test_majacc_d   0.67 (  0.69)	test_corr_d   0.47 (  0.46)
Test: [  26/  26]	Loss 0.558 (0.536)	test_acc   0.68 (  0.70)	test_minacc   0.62 (  0.73)	test_majacc   0.69 (  0.69)	Loss_d 0.558 (0.536)	test_acc_d   0.68 (  0.70)	test_minacc_d   0.62 (  0.73)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.45 (  0.46)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.02it/s]
Test: [  0/  1]	Loss 0.826 (0.826)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.68 (  0.68)	Loss_d 0.826 (0.826)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.826 (0.826)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.68 (  0.68)	Loss_d 0.826 (0.826)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.04 (  0.04)
Overall Timing[ 37/  1]	epoch_time 0.0345 (0.0359)	validation_time 0.0003 (0.0005)	train_time 0.0342 (0.0352)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.6953000330924988, 0.5940000414848328)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.73it/s] 19%|#9        | 5/26 [00:00<00:01, 20.75it/s] 38%|###8      | 10/26 [00:00<00:00, 29.69it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.95it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.74it/s] 96%|#########6| 25/26 [00:00<00:00, 38.40it/s]100%|##########| 26/26 [00:00<00:00, 30.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.56 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  24.26 ( 24.26)	train_acc   0.68 (  0.67)	train_minacc   0.67 (  0.73)	train_majacc   0.68 (  0.67)	train_corr   0.00 (  0.00)	l1 5.1803 (5.0685)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.81it/s] 31%|###       | 8/26 [00:00<00:00, 40.50it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.50it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.21it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.64it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.64it/s]100%|##########| 26/26 [00:00<00:00, 52.33it/s]100%|##########| 26/26 [00:00<00:00, 42.93it/s]
Test: [   0/  26]	Loss 0.558 (0.558)	test_acc   0.67 (  0.67)	test_minacc   0.79 (  0.79)	test_majacc   0.64 (  0.64)	Loss_d 0.558 (0.558)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.532 (0.537)	test_acc   0.69 (  0.70)	test_minacc   0.73 (  0.76)	test_majacc   0.68 (  0.68)	Loss_d 0.532 (0.537)	test_acc_d   0.69 (  0.70)	test_minacc_d   0.73 (  0.76)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.41 (  0.40)
Test: [  20/  26]	Loss 0.559 (0.544)	test_acc   0.64 (  0.69)	test_minacc   0.64 (  0.77)	test_majacc   0.64 (  0.67)	Loss_d 0.559 (0.544)	test_acc_d   0.64 (  0.69)	test_minacc_d   0.64 (  0.77)	test_majacc_d   0.64 (  0.67)	test_corr_d   0.40 (  0.38)
Test: [  26/  26]	Loss 0.563 (0.549)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.75)	test_majacc   0.68 (  0.67)	Loss_d 0.563 (0.549)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.75)	test_majacc_d   0.68 (  0.67)	test_corr_d   0.38 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.06it/s]
Test: [  0/  1]	Loss 0.768 (0.768)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.67 (  0.67)	Loss_d 0.768 (0.768)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.768 (0.768)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.67 (  0.67)	Loss_d 0.768 (0.768)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 38/  1]	epoch_time 0.0337 (0.0359)	validation_time 0.0003 (0.0005)	train_time 0.0334 (0.0352)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.6818000280857086, 0.6170000433921814)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.25it/s] 23%|##3       | 6/26 [00:00<00:00, 27.40it/s] 38%|###8      | 10/26 [00:00<00:00, 32.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.85it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.72it/s] 92%|#########2| 24/26 [00:00<00:00, 38.40it/s]100%|##########| 26/26 [00:00<00:00, 32.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.53 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  24.26 ( 24.26)	train_acc   0.66 (  0.68)	train_minacc   0.64 (  0.74)	train_majacc   0.67 (  0.67)	train_corr   0.00 (  0.00)	l1 5.1306 (5.2715)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.85it/s] 23%|##3       | 6/26 [00:00<00:00, 31.17it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.17it/s] 42%|####2     | 11/26 [00:00<00:00, 35.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.73it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.73it/s] 96%|#########6| 25/26 [00:00<00:00, 48.50it/s]100%|##########| 26/26 [00:00<00:00, 39.53it/s]
Test: [   0/  26]	Loss 0.536 (0.536)	test_acc   0.70 (  0.70)	test_minacc   0.82 (  0.82)	test_majacc   0.67 (  0.67)	Loss_d 0.536 (0.536)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.503 (0.512)	test_acc   0.72 (  0.73)	test_minacc   0.73 (  0.77)	test_majacc   0.72 (  0.72)	Loss_d 0.503 (0.512)	test_acc_d   0.72 (  0.73)	test_minacc_d   0.73 (  0.77)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.46 (  0.44)
Test: [  20/  26]	Loss 0.531 (0.519)	test_acc   0.67 (  0.71)	test_minacc   0.64 (  0.78)	test_majacc   0.67 (  0.70)	Loss_d 0.531 (0.519)	test_acc_d   0.67 (  0.71)	test_minacc_d   0.64 (  0.78)	test_majacc_d   0.67 (  0.70)	test_corr_d   0.44 (  0.43)
Test: [  26/  26]	Loss 0.536 (0.523)	test_acc   0.66 (  0.71)	test_minacc   0.64 (  0.76)	test_majacc   0.67 (  0.70)	Loss_d 0.536 (0.523)	test_acc_d   0.66 (  0.71)	test_minacc_d   0.64 (  0.76)	test_majacc_d   0.67 (  0.70)	test_corr_d   0.43 (  0.43)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.49it/s]
Test: [  0/  1]	Loss 0.794 (0.794)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.70 (  0.70)	Loss_d 0.794 (0.794)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.794 (0.794)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.70 (  0.70)	Loss_d 0.794 (0.794)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.01 (  0.01)
Overall Timing[ 39/  1]	epoch_time 0.0342 (0.0358)	validation_time 0.0004 (0.0005)	train_time 0.0338 (0.0352)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.70810003054142, 0.6050000190734863)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.80it/s] 19%|#9        | 5/26 [00:00<00:01, 20.15it/s] 35%|###4      | 9/26 [00:00<00:00, 26.96it/s] 50%|#####     | 13/26 [00:00<00:00, 31.46it/s] 69%|######9   | 18/26 [00:00<00:00, 35.36it/s] 88%|########8 | 23/26 [00:00<00:00, 37.12it/s]100%|##########| 26/26 [00:00<00:00, 30.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.001 (0.001)	train_nll   0.53 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  24.27 ( 24.26)	train_acc   0.67 (  0.70)	train_minacc   0.62 (  0.77)	train_majacc   0.68 (  0.68)	train_corr   0.00 (  0.00)	l1 4.9358 (5.3117)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.09it/s] 27%|##6       | 7/26 [00:00<00:00, 32.77it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.77it/s] 50%|#####     | 13/26 [00:00<00:00, 39.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.74it/s] 96%|#########6| 25/26 [00:00<00:00, 46.68it/s]100%|##########| 26/26 [00:00<00:00, 38.53it/s]
Test: [   0/  26]	Loss 0.528 (0.528)	test_acc   0.69 (  0.69)	test_minacc   0.79 (  0.79)	test_majacc   0.67 (  0.67)	Loss_d 0.528 (0.528)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.494 (0.508)	test_acc   0.71 (  0.72)	test_minacc   0.72 (  0.74)	test_majacc   0.71 (  0.71)	Loss_d 0.494 (0.508)	test_acc_d   0.71 (  0.72)	test_minacc_d   0.72 (  0.74)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.50 (  0.48)
Test: [  20/  26]	Loss 0.532 (0.511)	test_acc   0.66 (  0.71)	test_minacc   0.63 (  0.76)	test_majacc   0.67 (  0.71)	Loss_d 0.532 (0.511)	test_acc_d   0.66 (  0.71)	test_minacc_d   0.63 (  0.76)	test_majacc_d   0.67 (  0.71)	test_corr_d   0.47 (  0.47)
Test: [  26/  26]	Loss 0.539 (0.516)	test_acc   0.66 (  0.71)	test_minacc   0.62 (  0.74)	test_majacc   0.67 (  0.70)	Loss_d 0.539 (0.516)	test_acc_d   0.66 (  0.71)	test_minacc_d   0.62 (  0.74)	test_majacc_d   0.67 (  0.70)	test_corr_d   0.46 (  0.47)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.62it/s]
Test: [  0/  1]	Loss 0.829 (0.829)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.70 (  0.70)	Loss_d 0.829 (0.829)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.829 (0.829)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.70 (  0.70)	Loss_d 0.829 (0.829)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.08 (  0.08)
Overall Timing[ 40/  1]	epoch_time 0.0347 (0.0358)	validation_time 0.0003 (0.0005)	train_time 0.0344 (0.0351)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.7100000315904618, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.66it/s] 19%|#9        | 5/26 [00:00<00:00, 24.33it/s] 35%|###4      | 9/26 [00:00<00:00, 29.55it/s] 50%|#####     | 13/26 [00:00<00:00, 33.00it/s] 69%|######9   | 18/26 [00:00<00:00, 35.88it/s] 88%|########8 | 23/26 [00:00<00:00, 37.45it/s]100%|##########| 26/26 [00:00<00:00, 31.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.55 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  24.28 ( 24.27)	train_acc   0.66 (  0.68)	train_minacc   0.67 (  0.75)	train_majacc   0.65 (  0.67)	train_corr   0.00 (  0.00)	l1 4.9904 (5.2974)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.51it/s] 27%|##6       | 7/26 [00:00<00:00, 31.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.28it/s] 50%|#####     | 13/26 [00:00<00:00, 42.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.64it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.64it/s] 96%|#########6| 25/26 [00:00<00:00, 49.27it/s]100%|##########| 26/26 [00:00<00:00, 40.09it/s]
Test: [   0/  26]	Loss 0.558 (0.558)	test_acc   0.72 (  0.72)	test_minacc   0.79 (  0.79)	test_majacc   0.70 (  0.70)	Loss_d 0.558 (0.558)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.509 (0.525)	test_acc   0.74 (  0.72)	test_minacc   0.78 (  0.76)	test_majacc   0.73 (  0.72)	Loss_d 0.509 (0.525)	test_acc_d   0.74 (  0.72)	test_minacc_d   0.78 (  0.76)	test_majacc_d   0.73 (  0.72)	test_corr_d   0.46 (  0.44)
Test: [  20/  26]	Loss 0.532 (0.525)	test_acc   0.71 (  0.72)	test_minacc   0.66 (  0.77)	test_majacc   0.72 (  0.71)	Loss_d 0.532 (0.525)	test_acc_d   0.71 (  0.72)	test_minacc_d   0.66 (  0.77)	test_majacc_d   0.72 (  0.71)	test_corr_d   0.44 (  0.43)
Test: [  26/  26]	Loss 0.552 (0.530)	test_acc   0.66 (  0.72)	test_minacc   0.64 (  0.76)	test_majacc   0.67 (  0.71)	Loss_d 0.552 (0.530)	test_acc_d   0.66 (  0.72)	test_minacc_d   0.64 (  0.76)	test_majacc_d   0.67 (  0.71)	test_corr_d   0.42 (  0.43)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.76it/s]
Test: [  0/  1]	Loss 0.789 (0.789)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.70 (  0.70)	Loss_d 0.789 (0.789)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.789 (0.789)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.70 (  0.70)	Loss_d 0.789 (0.789)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.03 (  0.03)
Overall Timing[ 41/  1]	epoch_time 0.0357 (0.0358)	validation_time 0.0004 (0.0005)	train_time 0.0353 (0.0352)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.7154000312685966, 0.6070000529289246)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.35it/s] 19%|#9        | 5/26 [00:00<00:01, 19.26it/s] 35%|###4      | 9/26 [00:00<00:00, 26.49it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.12it/s] 69%|######9   | 18/26 [00:00<00:00, 34.47it/s] 88%|########8 | 23/26 [00:00<00:00, 36.57it/s]100%|##########| 26/26 [00:00<00:00, 29.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.001 (0.001)	train_nll   0.56 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  24.28 ( 24.28)	train_acc   0.66 (  0.71)	train_minacc   0.62 (  0.71)	train_majacc   0.67 (  0.71)	train_corr   0.00 (  0.00)	l1 5.1942 (5.0872)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.04it/s] 23%|##3       | 6/26 [00:00<00:00, 29.56it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.56it/s] 42%|####2     | 11/26 [00:00<00:00, 37.79it/s] 62%|######1   | 16/26 [00:00<00:00, 40.78it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.78it/s] 85%|########4 | 22/26 [00:00<00:00, 46.15it/s]100%|##########| 26/26 [00:00<00:00, 38.15it/s]
Test: [   0/  26]	Loss 0.549 (0.549)	test_acc   0.69 (  0.69)	test_minacc   0.76 (  0.76)	test_majacc   0.67 (  0.67)	Loss_d 0.549 (0.549)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.489 (0.518)	test_acc   0.73 (  0.71)	test_minacc   0.80 (  0.75)	test_majacc   0.72 (  0.71)	Loss_d 0.489 (0.518)	test_acc_d   0.73 (  0.71)	test_minacc_d   0.80 (  0.75)	test_majacc_d   0.72 (  0.71)	test_corr_d   0.46 (  0.44)
Test: [  20/  26]	Loss 0.532 (0.518)	test_acc   0.68 (  0.71)	test_minacc   0.63 (  0.76)	test_majacc   0.69 (  0.70)	Loss_d 0.532 (0.518)	test_acc_d   0.68 (  0.71)	test_minacc_d   0.63 (  0.76)	test_majacc_d   0.69 (  0.70)	test_corr_d   0.45 (  0.43)
Test: [  26/  26]	Loss 0.555 (0.523)	test_acc   0.67 (  0.71)	test_minacc   0.62 (  0.75)	test_majacc   0.68 (  0.70)	Loss_d 0.555 (0.523)	test_acc_d   0.67 (  0.71)	test_minacc_d   0.62 (  0.75)	test_majacc_d   0.68 (  0.70)	test_corr_d   0.42 (  0.43)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.87it/s]
Test: [  0/  1]	Loss 0.833 (0.833)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.69 (  0.69)	Loss_d 0.833 (0.833)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.833 (0.833)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.69 (  0.69)	Loss_d 0.833 (0.833)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.03 (  0.03)
Overall Timing[ 42/  1]	epoch_time 0.0358 (0.0358)	validation_time 0.0004 (0.0005)	train_time 0.0354 (0.0352)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.7091000318527222, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.75it/s] 19%|#9        | 5/26 [00:00<00:00, 23.03it/s] 35%|###4      | 9/26 [00:00<00:00, 29.40it/s] 50%|#####     | 13/26 [00:00<00:00, 32.89it/s] 65%|######5   | 17/26 [00:00<00:00, 33.93it/s] 81%|########  | 21/26 [00:00<00:00, 35.40it/s] 96%|#########6| 25/26 [00:00<00:00, 36.75it/s]100%|##########| 26/26 [00:00<00:00, 30.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.001)	train_nll   0.58 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  24.29 ( 24.28)	train_acc   0.64 (  0.69)	train_minacc   0.69 (  0.76)	train_majacc   0.63 (  0.67)	train_corr   0.00 (  0.00)	l1 4.8142 (5.2534)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 23%|##3       | 6/26 [00:00<00:00, 26.86it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.86it/s] 46%|####6     | 12/26 [00:00<00:00, 39.84it/s] 65%|######5   | 17/26 [00:00<00:00, 43.40it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.40it/s] 88%|########8 | 23/26 [00:00<00:00, 46.85it/s]100%|##########| 26/26 [00:00<00:00, 38.19it/s]
Test: [   0/  26]	Loss 0.575 (0.575)	test_acc   0.65 (  0.65)	test_minacc   0.77 (  0.77)	test_majacc   0.62 (  0.62)	Loss_d 0.575 (0.575)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.36 (  0.36)
Test: [  10/  26]	Loss 0.541 (0.566)	test_acc   0.69 (  0.66)	test_minacc   0.77 (  0.75)	test_majacc   0.67 (  0.64)	Loss_d 0.541 (0.566)	test_acc_d   0.69 (  0.66)	test_minacc_d   0.77 (  0.75)	test_majacc_d   0.67 (  0.64)	test_corr_d   0.44 (  0.40)
Test: [  20/  26]	Loss 0.570 (0.561)	test_acc   0.64 (  0.66)	test_minacc   0.64 (  0.77)	test_majacc   0.64 (  0.64)	Loss_d 0.570 (0.561)	test_acc_d   0.64 (  0.66)	test_minacc_d   0.64 (  0.77)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.44 (  0.41)
Test: [  26/  26]	Loss 0.584 (0.565)	test_acc   0.63 (  0.66)	test_minacc   0.67 (  0.76)	test_majacc   0.62 (  0.64)	Loss_d 0.584 (0.565)	test_acc_d   0.63 (  0.66)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.62 (  0.64)	test_corr_d   0.40 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.40it/s]
Test: [  0/  1]	Loss 0.826 (0.826)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.63 (  0.63)	Loss_d 0.826 (0.826)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.826 (0.826)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.63 (  0.63)	Loss_d 0.826 (0.826)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.08 (  0.08)
Overall Timing[ 43/  1]	epoch_time 0.0346 (0.0358)	validation_time 0.0004 (0.0005)	train_time 0.0342 (0.0351)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.6584000182151795, 0.6150000095367432)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.12it/s] 23%|##3       | 6/26 [00:00<00:00, 30.43it/s] 42%|####2     | 11/26 [00:00<00:00, 35.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.77it/s] 92%|#########2| 24/26 [00:00<00:00, 38.56it/s]100%|##########| 26/26 [00:00<00:00, 33.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.001 (0.000)	train_nll   0.59 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  24.29 ( 24.29)	train_acc   0.62 (  0.62)	train_minacc   0.69 (  0.75)	train_majacc   0.61 (  0.59)	train_corr   0.00 (  0.00)	l1 4.5228 (4.6820)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 27%|##6       | 7/26 [00:00<00:00, 33.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.76it/s] 50%|#####     | 13/26 [00:00<00:00, 40.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.83it/s] 96%|#########6| 25/26 [00:00<00:00, 46.03it/s]100%|##########| 26/26 [00:00<00:00, 38.63it/s]
Test: [   0/  26]	Loss 0.594 (0.594)	test_acc   0.64 (  0.64)	test_minacc   0.82 (  0.82)	test_majacc   0.60 (  0.60)	Loss_d 0.594 (0.594)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.562 (0.580)	test_acc   0.67 (  0.65)	test_minacc   0.80 (  0.78)	test_majacc   0.65 (  0.62)	Loss_d 0.562 (0.580)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.65 (  0.62)	test_corr_d   0.40 (  0.37)
Test: [  20/  26]	Loss 0.574 (0.576)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.80)	test_majacc   0.64 (  0.63)	Loss_d 0.574 (0.576)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.80)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.41 (  0.37)
Test: [  26/  26]	Loss 0.595 (0.580)	test_acc   0.62 (  0.65)	test_minacc   0.69 (  0.78)	test_majacc   0.61 (  0.62)	Loss_d 0.595 (0.580)	test_acc_d   0.62 (  0.65)	test_minacc_d   0.69 (  0.78)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.36 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.35it/s]
Test: [  0/  1]	Loss 0.771 (0.771)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.60 (  0.60)	Loss_d 0.771 (0.771)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.771 (0.771)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.60 (  0.60)	Loss_d 0.771 (0.771)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.06 (  0.06)
Overall Timing[ 44/  1]	epoch_time 0.0347 (0.0357)	validation_time 0.0003 (0.0005)	train_time 0.0343 (0.0351)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.6480000193715095, 0.6370000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.13it/s] 19%|#9        | 5/26 [00:00<00:00, 22.94it/s] 35%|###4      | 9/26 [00:00<00:00, 29.87it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.77it/s] 92%|#########2| 24/26 [00:00<00:00, 38.43it/s]100%|##########| 26/26 [00:00<00:00, 31.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.60 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  24.29 ( 24.29)	train_acc   0.61 (  0.61)	train_minacc   0.69 (  0.77)	train_majacc   0.60 (  0.59)	train_corr   0.00 (  0.00)	l1 4.8130 (4.8524)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.47it/s] 27%|##6       | 7/26 [00:00<00:00, 34.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.44it/s] 50%|#####     | 13/26 [00:00<00:00, 40.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.78it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.78it/s] 96%|#########6| 25/26 [00:00<00:00, 46.30it/s]100%|##########| 26/26 [00:00<00:00, 38.82it/s]
Test: [   0/  26]	Loss 0.591 (0.591)	test_acc   0.63 (  0.63)	test_minacc   0.79 (  0.79)	test_majacc   0.60 (  0.60)	Loss_d 0.591 (0.591)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.551 (0.572)	test_acc   0.68 (  0.65)	test_minacc   0.75 (  0.77)	test_majacc   0.66 (  0.63)	Loss_d 0.551 (0.572)	test_acc_d   0.68 (  0.65)	test_minacc_d   0.75 (  0.77)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.42 (  0.38)
Test: [  20/  26]	Loss 0.561 (0.566)	test_acc   0.65 (  0.66)	test_minacc   0.67 (  0.79)	test_majacc   0.65 (  0.64)	Loss_d 0.561 (0.566)	test_acc_d   0.65 (  0.66)	test_minacc_d   0.67 (  0.79)	test_majacc_d   0.65 (  0.64)	test_corr_d   0.42 (  0.39)
Test: [  26/  26]	Loss 0.594 (0.570)	test_acc   0.62 (  0.65)	test_minacc   0.69 (  0.77)	test_majacc   0.60 (  0.63)	Loss_d 0.594 (0.570)	test_acc_d   0.62 (  0.65)	test_minacc_d   0.69 (  0.77)	test_majacc_d   0.60 (  0.63)	test_corr_d   0.36 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.85it/s]
Test: [  0/  1]	Loss 0.813 (0.813)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.61 (  0.61)	Loss_d 0.813 (0.813)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.813 (0.813)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.61 (  0.61)	Loss_d 0.813 (0.813)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.09 (  0.09)
Overall Timing[ 45/  1]	epoch_time 0.0367 (0.0358)	validation_time 0.0004 (0.0005)	train_time 0.0363 (0.0351)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.6535000156760216, 0.6210000514984131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.11it/s] 19%|#9        | 5/26 [00:00<00:00, 24.20it/s] 35%|###4      | 9/26 [00:00<00:00, 30.51it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.95it/s] 92%|#########2| 24/26 [00:00<00:00, 38.57it/s]100%|##########| 26/26 [00:00<00:00, 32.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.001 (0.000)	train_nll   0.60 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.30 ( 24.30)	train_acc   0.61 (  0.65)	train_minacc   0.67 (  0.72)	train_majacc   0.60 (  0.64)	train_corr   0.00 (  0.00)	l1 5.2006 (5.0125)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.72it/s] 27%|##6       | 7/26 [00:00<00:00, 32.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.91it/s] 50%|#####     | 13/26 [00:00<00:00, 39.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.99it/s] 96%|#########6| 25/26 [00:00<00:00, 46.83it/s]100%|##########| 26/26 [00:00<00:00, 38.78it/s]
Test: [   0/  26]	Loss 0.600 (0.600)	test_acc   0.62 (  0.62)	test_minacc   0.79 (  0.79)	test_majacc   0.58 (  0.58)	Loss_d 0.600 (0.600)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.30 (  0.30)
Test: [  10/  26]	Loss 0.546 (0.577)	test_acc   0.68 (  0.65)	test_minacc   0.78 (  0.77)	test_majacc   0.66 (  0.62)	Loss_d 0.546 (0.577)	test_acc_d   0.68 (  0.65)	test_minacc_d   0.78 (  0.77)	test_majacc_d   0.66 (  0.62)	test_corr_d   0.40 (  0.36)
Test: [  20/  26]	Loss 0.561 (0.567)	test_acc   0.67 (  0.65)	test_minacc   0.67 (  0.79)	test_majacc   0.67 (  0.63)	Loss_d 0.561 (0.567)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.67 (  0.79)	test_majacc_d   0.67 (  0.63)	test_corr_d   0.40 (  0.37)
Test: [  26/  26]	Loss 0.594 (0.570)	test_acc   0.62 (  0.65)	test_minacc   0.67 (  0.78)	test_majacc   0.61 (  0.63)	Loss_d 0.594 (0.570)	test_acc_d   0.62 (  0.65)	test_minacc_d   0.67 (  0.78)	test_majacc_d   0.61 (  0.63)	test_corr_d   0.35 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.08it/s]
Test: [  0/  1]	Loss 0.848 (0.848)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.61 (  0.61)	Loss_d 0.848 (0.848)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.848 (0.848)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.61 (  0.61)	Loss_d 0.848 (0.848)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.07 (  0.07)
Overall Timing[ 46/  1]	epoch_time 0.0351 (0.0357)	validation_time 0.0003 (0.0005)	train_time 0.0348 (0.0351)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.6496000147461891, 0.625)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.19it/s] 19%|#9        | 5/26 [00:00<00:01, 18.93it/s] 35%|###4      | 9/26 [00:00<00:00, 26.36it/s] 50%|#####     | 13/26 [00:00<00:00, 30.58it/s] 69%|######9   | 18/26 [00:00<00:00, 33.69it/s] 88%|########8 | 23/26 [00:00<00:00, 35.96it/s]100%|##########| 26/26 [00:00<00:00, 29.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.001)	train_nll   0.59 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.30 ( 24.30)	train_acc   0.60 (  0.64)	train_minacc   0.64 (  0.76)	train_majacc   0.59 (  0.62)	train_corr   0.00 (  0.00)	l1 5.0684 (5.0397)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 27%|##6       | 7/26 [00:00<00:00, 32.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.59it/s] 50%|#####     | 13/26 [00:00<00:00, 39.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.19it/s] 96%|#########6| 25/26 [00:00<00:00, 46.87it/s]100%|##########| 26/26 [00:00<00:00, 38.52it/s]
Test: [   0/  26]	Loss 0.599 (0.599)	test_acc   0.64 (  0.64)	test_minacc   0.82 (  0.82)	test_majacc   0.60 (  0.60)	Loss_d 0.599 (0.599)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.559 (0.585)	test_acc   0.65 (  0.63)	test_minacc   0.78 (  0.78)	test_majacc   0.63 (  0.61)	Loss_d 0.559 (0.585)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.63 (  0.61)	test_corr_d   0.39 (  0.36)
Test: [  20/  26]	Loss 0.565 (0.575)	test_acc   0.66 (  0.64)	test_minacc   0.73 (  0.80)	test_majacc   0.65 (  0.61)	Loss_d 0.565 (0.575)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.73 (  0.80)	test_majacc_d   0.65 (  0.61)	test_corr_d   0.40 (  0.37)
Test: [  26/  26]	Loss 0.583 (0.576)	test_acc   0.61 (  0.64)	test_minacc   0.67 (  0.79)	test_majacc   0.60 (  0.61)	Loss_d 0.583 (0.576)	test_acc_d   0.61 (  0.64)	test_minacc_d   0.67 (  0.79)	test_majacc_d   0.60 (  0.61)	test_corr_d   0.37 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.01it/s]
Test: [  0/  1]	Loss 0.813 (0.813)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.61 (  0.61)	Loss_d 0.813 (0.813)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.813 (0.813)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.61 (  0.61)	Loss_d 0.813 (0.813)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.05 (  0.05)
Overall Timing[ 47/  1]	epoch_time 0.0361 (0.0358)	validation_time 0.0004 (0.0005)	train_time 0.0357 (0.0351)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.6370000081062317, 0.6350000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.17it/s] 19%|#9        | 5/26 [00:00<00:01, 20.66it/s] 38%|###8      | 10/26 [00:00<00:00, 29.52it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.93it/s] 69%|######9   | 18/26 [00:00<00:00, 33.69it/s] 85%|########4 | 22/26 [00:00<00:00, 35.48it/s]100%|##########| 26/26 [00:00<00:00, 29.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.001)	train_nll   0.60 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  24.30 ( 24.30)	train_acc   0.62 (  0.63)	train_minacc   0.69 (  0.78)	train_majacc   0.61 (  0.61)	train_corr   0.00 (  0.00)	l1 5.0983 (5.0519)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 27%|##6       | 7/26 [00:00<00:00, 31.72it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.72it/s] 50%|#####     | 13/26 [00:00<00:00, 39.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.24it/s] 96%|#########6| 25/26 [00:00<00:00, 46.94it/s]100%|##########| 26/26 [00:00<00:00, 38.85it/s]
Test: [   0/  26]	Loss 0.598 (0.598)	test_acc   0.63 (  0.63)	test_minacc   0.86 (  0.86)	test_majacc   0.59 (  0.59)	Loss_d 0.598 (0.598)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.30 (  0.30)
Test: [  10/  26]	Loss 0.577 (0.593)	test_acc   0.63 (  0.62)	test_minacc   0.80 (  0.78)	test_majacc   0.60 (  0.59)	Loss_d 0.577 (0.593)	test_acc_d   0.63 (  0.62)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.36 (  0.33)
Test: [  20/  26]	Loss 0.575 (0.585)	test_acc   0.65 (  0.63)	test_minacc   0.69 (  0.80)	test_majacc   0.65 (  0.60)	Loss_d 0.575 (0.585)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.69 (  0.80)	test_majacc_d   0.65 (  0.60)	test_corr_d   0.37 (  0.34)
Test: [  26/  26]	Loss 0.590 (0.586)	test_acc   0.63 (  0.63)	test_minacc   0.67 (  0.79)	test_majacc   0.62 (  0.60)	Loss_d 0.590 (0.586)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.67 (  0.79)	test_majacc_d   0.62 (  0.60)	test_corr_d   0.35 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.45it/s]
Test: [  0/  1]	Loss 0.788 (0.788)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.60 (  0.60)	Loss_d 0.788 (0.788)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.788 (0.788)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.60 (  0.60)	Loss_d 0.788 (0.788)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.02 (  0.02)
Overall Timing[ 48/  1]	epoch_time 0.0358 (0.0358)	validation_time 0.0006 (0.0005)	train_time 0.0352 (0.0351)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.6286000093221664, 0.6500000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 19%|#9        | 5/26 [00:00<00:00, 24.04it/s] 35%|###4      | 9/26 [00:00<00:00, 30.03it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.03it/s] 69%|######9   | 18/26 [00:00<00:00, 36.43it/s] 88%|########8 | 23/26 [00:00<00:00, 38.00it/s]100%|##########| 26/26 [00:00<00:00, 31.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.57 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.31 ( 24.31)	train_acc   0.69 (  0.67)	train_minacc   0.67 (  0.62)	train_majacc   0.69 (  0.68)	train_corr   0.00 (  0.00)	l1 4.7604 (4.7560)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.62it/s] 27%|##6       | 7/26 [00:00<00:00, 37.14it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.14it/s] 50%|#####     | 13/26 [00:00<00:00, 43.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.44it/s] 96%|#########6| 25/26 [00:00<00:00, 48.33it/s]100%|##########| 26/26 [00:00<00:00, 40.86it/s]
Test: [   0/  26]	Loss 0.588 (0.588)	test_acc   0.71 (  0.71)	test_minacc   0.77 (  0.77)	test_majacc   0.69 (  0.69)	Loss_d 0.588 (0.588)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.566 (0.582)	test_acc   0.70 (  0.69)	test_minacc   0.68 (  0.67)	test_majacc   0.70 (  0.69)	Loss_d 0.566 (0.582)	test_acc_d   0.70 (  0.69)	test_minacc_d   0.68 (  0.67)	test_majacc_d   0.70 (  0.69)	test_corr_d   0.39 (  0.38)
Test: [  20/  26]	Loss 0.560 (0.572)	test_acc   0.72 (  0.69)	test_minacc   0.63 (  0.69)	test_majacc   0.74 (  0.69)	Loss_d 0.560 (0.572)	test_acc_d   0.72 (  0.69)	test_minacc_d   0.63 (  0.69)	test_majacc_d   0.74 (  0.69)	test_corr_d   0.41 (  0.38)
Test: [  26/  26]	Loss 0.568 (0.572)	test_acc   0.68 (  0.69)	test_minacc   0.67 (  0.69)	test_majacc   0.68 (  0.69)	Loss_d 0.568 (0.572)	test_acc_d   0.68 (  0.69)	test_minacc_d   0.67 (  0.69)	test_majacc_d   0.68 (  0.69)	test_corr_d   0.41 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.62it/s]
Test: [  0/  1]	Loss 0.806 (0.806)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.70 (  0.70)	Loss_d 0.806 (0.806)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.806 (0.806)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.70 (  0.70)	Loss_d 0.806 (0.806)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.04 (  0.04)
Overall Timing[ 49/  1]	epoch_time 0.0356 (0.0357)	validation_time 0.0004 (0.0005)	train_time 0.0352 (0.0351)
record: (train_acc, test_acc) (0.6940000331401825, 0.656000018119812)
last accs (train_acc, test_acc) (0.6903000309467315, 0.5690000057220459)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.105 MB of 0.105 MB uploadedwandb: \ 0.105 MB of 0.105 MB uploadedwandb: | 0.105 MB of 0.105 MB uploadedwandb: / 0.105 MB of 0.105 MB uploadedwandb: - 0.105 MB of 0.105 MB uploadedwandb: \ 0.105 MB of 0.105 MB uploadedwandb: | 0.105 MB of 0.105 MB uploadedwandb: / 0.105 MB of 0.105 MB uploadedwandb: - 0.105 MB of 0.105 MB uploadedwandb: \ 0.128 MB of 0.128 MB uploaded (0.003 MB deduped)wandb: | 0.472 MB of 0.472 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▂▁▂▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/diagnostics/train_time_val █▁▁▁▁▂▂▂▂▁▁▁▂▁▁▁▁▁▂▁▁▁▁▂▁▂▁▁▁▁▁▁▁▂▂▁▂▁▂▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/Loss_avg ▇███▆▇█▇▇█▇▇▁▁▁▁▂▂▂▂▁▁▁▁▁▁▁▁▁▁▂▁▂▁▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/Loss_d_avg ▇███▆▇█▇▇█▇▇▁▁▁▁▂▂▂▂▁▁▁▁▁▁▁▁▁▁▂▁▂▁▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/Loss_d_val ▇███▆▇█▇▇█▇▇▁▁▁▁▂▂▂▂▁▁▁▁▁▁▁▁▁▁▂▁▂▁▂▂▂▂▂▂
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/Loss_val ▇███▆▇█▇▇█▇▇▁▁▁▁▂▂▂▂▁▁▁▁▁▁▁▁▁▁▂▁▂▁▂▂▂▂▂▂
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_acc_avg ▁▁▁▁▂▃▂▃▄▄▄▅██▇▇▇▇▇███████▇██▇▇█▇▇▇▇███▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_acc_d_avg ▁▁▁▁▂▃▂▃▄▄▄▅██▇▇▇▇▇███████▇██▇▇█▇▇▇▇███▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_acc_d_val ▁▁▁▁▂▃▂▃▄▄▄▅██▇▇▇▇▇███████▇██▇▇█▇▇▇▇███▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_acc_val ▁▁▁▁▂▃▂▃▄▄▄▅██▇▇▇▇▇███████▇██▇▇█▇▇▇▇███▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_corr_d_avg ████▇▇▇▇▆▆▆▅▂▁▂▂▂▂▂▂▂▂▁▁▁▂▂▂▁▂▂▂▂▂▂▂▃▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_corr_d_val ████▇▇▇▇▆▆▆▅▂▁▂▂▂▂▂▂▂▂▁▁▁▂▂▂▁▂▂▂▂▂▂▂▃▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_majacc_avg ████████▇▇▇▇▄▁▂▃▃▄▂▂▃▃▃▂▂▃▂▂▂▃▂▂▃▃▂▁▁▁▁▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_majacc_d_avg ████████▇▇▇▇▄▁▂▃▃▄▂▂▃▃▃▂▂▃▂▂▂▃▂▂▃▃▂▁▁▁▁▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_majacc_d_val ████████▇▇▇▇▄▁▂▃▃▄▂▂▃▃▃▂▂▃▂▂▂▃▂▂▃▃▂▁▁▁▁▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_majacc_val ████████▇▇▇▇▄▁▂▃▃▄▂▂▃▃▃▂▂▃▂▂▂▃▂▂▃▃▂▁▁▁▁▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_minacc_avg ▁▁▁▁▂▃▂▃▄▄▄▅▇█▇▇▇▇▇███████▇██▇▇█▇▇▇████▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_minacc_d_avg ▁▁▁▁▂▃▂▃▄▄▄▅▇█▇▇▇▇▇███████▇██▇▇█▇▇▇████▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_minacc_d_val ▁▁▁▁▂▃▂▃▄▄▄▅▇█▇▇▇▇▇███████▇██▇▇█▇▇▇████▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_minacc_val ▁▁▁▁▂▃▂▃▄▄▄▅▇█▇▇▇▇▇███████▇██▇▇█▇▇▇████▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/Loss_avg █▆▆▆▅▅▅▅▅▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/Loss_val ███▇▆▆▆▅▅▄▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/l1_avg █▇▇▇▇▇▇▇▇████▄▄▄▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/l1_val ▇▇▇▇▇▇▇▇██▇█▆▄▄▄▃▃▄▃▂▂▃▃▂▂▂▂▂▂▂▂▁▂▂▁▁▂▂▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_acc_avg ▅▇▇▇▇▇▇▇████▇▃▃▃▄▄▄▄▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▁▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_acc_val ▆▆▆▆▆▆▆▇▇███▆▃▃▃▄▄▃▃▄▄▃▃▃▄▃▃▃▃▃▃▃▂▂▂▁▁▁▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_majacc_avg ▆█████▇▇▇▇▇▇▆▃▂▃▃▃▃▄▃▃▃▃▃▃▃▃▂▃▃▂▃▂▃▂▁▂▂▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_majacc_val ████████████▄▃▃▃▄▄▃▃▃▃▃▃▃▃▃▃▂▃▃▂▂▂▂▂▁▁▁▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_minacc_avg ▂▁▁▁▂▂▃▄▅▅▆▆▇███▇▇▇▇▇███████▇██▇█▇▇██▇█▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_minacc_val ▁▁▁▁▂▁▂▃▄▅▅▆█▇▆▇▆▆▇▆▆▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_nll_avg ▇▄▄▄▃▃▃▂▂▂▁▁▂▇▇▇▇▆▆▆▆▇▇▆▆▆▇▇▇▇▇▇▇▇▇▇█▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_nll_val ▆▅▅▅▄▃▃▃▂▂▁▁▅▇▇▇▇▇▇█▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇████▇
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_penalty_avg █▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_penalty_val ▇██▇▄▄▄▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/weight_norm_avg ▁▅▅▆▆▆▆▆▆▆▇▇████████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/weight_norm_val ▁▃▄▄▄▄▄▄▅▅▆▆████████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/diagnostics/epoch_time_val 0.0356
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/diagnostics/train_time_val 0.03518
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/diagnostics/validation_time_val 0.0004
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/Loss_avg 0.80583
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/Loss_d_avg 0.80583
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/Loss_d_val 0.80583
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/Loss_val 0.80583
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_acc_avg 0.569
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_acc_d_avg 0.569
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_acc_d_val 0.569
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_acc_val 0.569
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_corr_d_avg 0.03953
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_corr_d_val 0.03953
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_majacc_avg 0.7
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_majacc_d_avg 0.7
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_majacc_d_val 0.7
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_majacc_val 0.7
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_minacc_avg 0.55444
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_minacc_d_avg 0.55444
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_minacc_d_val 0.55444
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/test/test_minacc_val 0.55444
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/Loss_avg 0.00044
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/Loss_val 0.00014
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/l1_avg 4.75601
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/l1_val 4.76042
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_acc_avg 0.6695
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_acc_val 0.688
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_majacc_avg 0.67867
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_majacc_val 0.69231
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_minacc_avg 0.61562
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_minacc_val 0.66667
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_nll_avg 0.57585
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_nll_val 0.56714
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_penalty_avg 0.00038
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/train_penalty_val 8e-05
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/weight_norm_avg 24.30902
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/weight_norm_val 24.31142
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/134/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/mkpn5awt
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_195952-mkpn5awt/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_200218-vsokskkp
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/vsokskkp
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1183
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5993, 3, 32, 32) (6007, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:38,  1.53s/it] 19%|#9        | 5/26 [00:01<00:05,  4.01it/s] 38%|###8      | 10/26 [00:01<00:01,  8.80it/s] 54%|#####3    | 14/26 [00:01<00:00, 12.89it/s] 69%|######9   | 18/26 [00:01<00:00, 17.09it/s] 88%|########8 | 23/26 [00:02<00:00, 22.11it/s]100%|##########| 26/26 [00:02<00:00, 10.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.420 (0.561)	train_nll   0.42 (  0.56)	train_penalty   0.06 (  0.28)	weight_norm  20.91 ( 18.13)	train_acc   0.85 (  0.81)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.94)	train_corr   0.00 (  0.00)	l1 5.7775 (7.3000)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.38it/s] 27%|##6       | 7/26 [00:00<00:00, 34.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.65it/s] 50%|#####     | 13/26 [00:00<00:00, 42.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.87it/s] 96%|#########6| 25/26 [00:00<00:00, 48.93it/s]100%|##########| 26/26 [00:00<00:00, 41.29it/s]
Test: [   0/  26]	Loss 0.403 (0.403)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.403 (0.403)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.369 (0.422)	test_acc   0.87 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.369 (0.422)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.410 (0.419)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.410 (0.419)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.99 (  0.98)
Test: [  26/  26]	Loss 0.420 (0.417)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.420 (0.417)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.99 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]
Test: [  0/  1]	Loss 1.831 (1.831)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.831 (1.831)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.831 (1.831)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.831 (1.831)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/135/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0708 (0.0708)	validation_time 0.0069 (0.0069)	train_time 0.0622 (0.0622)
record: (train_acc, test_acc) (0.8465000322461128, 0.10300000756978989)
last accs (train_acc, test_acc) (0.8465000322461128, 0.10300000756978989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.48it/s] 19%|#9        | 5/26 [00:00<00:00, 23.72it/s] 35%|###4      | 9/26 [00:00<00:00, 29.89it/s] 50%|#####     | 13/26 [00:00<00:00, 33.01it/s] 69%|######9   | 18/26 [00:00<00:00, 35.91it/s] 88%|########8 | 23/26 [00:00<00:00, 37.46it/s]100%|##########| 26/26 [00:00<00:00, 31.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.412 (0.419)	train_nll   0.41 (  0.42)	train_penalty   0.05 (  0.06)	weight_norm  22.04 ( 21.69)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.5605 (5.6261)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.42it/s] 35%|###4      | 9/26 [00:00<00:00, 40.28it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.28it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.36it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.36it/s] 81%|########  | 21/26 [00:00<00:00, 47.36it/s]100%|##########| 26/26 [00:00<00:00, 41.91it/s]
Test: [   0/  26]	Loss 0.395 (0.395)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.395 (0.395)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.367 (0.411)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.367 (0.411)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.398 (0.409)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.398 (0.409)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.410 (0.407)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.410 (0.407)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.32it/s]
Test: [  0/  1]	Loss 1.719 (1.719)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.719 (1.719)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.719 (1.719)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.719 (1.719)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Overall Timing[  1/  1]	epoch_time 0.0349 (0.0528)	validation_time 0.0003 (0.0036)	train_time 0.0346 (0.0484)
record: (train_acc, test_acc) (0.8465000322461128, 0.10300000756978989)
last accs (train_acc, test_acc) (0.8483000274896622, 0.10100000351667404)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.54it/s] 19%|#9        | 5/26 [00:00<00:00, 25.42it/s] 35%|###4      | 9/26 [00:00<00:00, 31.33it/s] 50%|#####     | 13/26 [00:00<00:00, 34.56it/s] 69%|######9   | 18/26 [00:00<00:00, 37.30it/s] 88%|########8 | 23/26 [00:00<00:00, 38.66it/s]100%|##########| 26/26 [00:00<00:00, 32.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.404 (0.405)	train_nll   0.40 (  0.41)	train_penalty   0.05 (  0.05)	weight_norm  22.16 ( 22.12)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  1.00)	train_corr   0.00 (  0.00)	l1 5.7014 (5.6686)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.26it/s] 15%|#5        | 4/26 [00:00<00:01, 15.75it/s] 38%|###8      | 10/26 [00:00<00:00, 32.11it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.03it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 36.03it/s] 81%|########  | 21/26 [00:00<00:00, 43.17it/s]100%|##########| 26/26 [00:00<00:00, 34.07it/s]
Test: [   0/  26]	Loss 0.380 (0.380)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.380 (0.380)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.346 (0.387)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.346 (0.387)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.371 (0.385)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.371 (0.385)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.399 (0.384)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.399 (0.384)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.54it/s]
Test: [  0/  1]	Loss 1.707 (1.707)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.707 (1.707)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.707 (1.707)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.707 (1.707)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Overall Timing[  2/  1]	epoch_time 0.0361 (0.0473)	validation_time 0.0003 (0.0025)	train_time 0.0358 (0.0442)
record: (train_acc, test_acc) (0.8465000322461128, 0.10300000756978989)
last accs (train_acc, test_acc) (0.8488000286221504, 0.10200000554323196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.04it/s] 19%|#9        | 5/26 [00:00<00:00, 24.36it/s] 38%|###8      | 10/26 [00:00<00:00, 32.25it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.32it/s] 92%|#########2| 24/26 [00:00<00:00, 37.54it/s]100%|##########| 26/26 [00:00<00:00, 31.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.373 (0.381)	train_nll   0.37 (  0.38)	train_penalty   0.04 (  0.04)	weight_norm  22.21 ( 22.18)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.05)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.8191 (5.8465)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.52it/s] 31%|###       | 8/26 [00:00<00:00, 38.96it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.96it/s] 50%|#####     | 13/26 [00:00<00:00, 42.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.70it/s] 96%|#########6| 25/26 [00:00<00:00, 49.82it/s]100%|##########| 26/26 [00:00<00:00, 42.80it/s]
Test: [   0/  26]	Loss 0.348 (0.348)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.348 (0.348)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.316 (0.357)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.316 (0.357)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.342 (0.355)	test_acc   0.86 (  0.85)	test_minacc   0.04 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.342 (0.355)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.04 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.359 (0.354)	test_acc   0.86 (  0.85)	test_minacc   0.05 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.359 (0.354)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.05 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.96it/s]
Test: [  0/  1]	Loss 1.670 (1.670)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.670 (1.670)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.670 (1.670)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.670 (1.670)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/135/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0359 (0.0444)	validation_time 0.0004 (0.0020)	train_time 0.0355 (0.0420)
record: (train_acc, test_acc) (0.8510000289082528, 0.12300000339746475)
last accs (train_acc, test_acc) (0.8510000289082528, 0.12300000339746475)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.38it/s] 19%|#9        | 5/26 [00:00<00:00, 23.89it/s] 35%|###4      | 9/26 [00:00<00:00, 30.02it/s] 50%|#####     | 13/26 [00:00<00:00, 33.22it/s] 65%|######5   | 17/26 [00:00<00:00, 35.46it/s] 81%|########  | 21/26 [00:00<00:00, 36.86it/s] 96%|#########6| 25/26 [00:00<00:00, 37.73it/s]100%|##########| 26/26 [00:00<00:00, 31.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.341 (0.356)	train_nll   0.34 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm  22.27 ( 22.24)	train_acc   0.85 (  0.85)	train_minacc   0.08 (  0.14)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 5.9463 (5.9815)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.66it/s] 23%|##3       | 6/26 [00:00<00:00, 27.64it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.64it/s] 42%|####2     | 11/26 [00:00<00:00, 36.54it/s] 65%|######5   | 17/26 [00:00<00:00, 41.17it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.17it/s] 88%|########8 | 23/26 [00:00<00:00, 46.57it/s]100%|##########| 26/26 [00:00<00:00, 36.91it/s]
Test: [   0/  26]	Loss 0.334 (0.334)	test_acc   0.86 (  0.86)	test_minacc   0.23 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.334 (0.334)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.305 (0.336)	test_acc   0.87 (  0.85)	test_minacc   0.13 (  0.19)	test_majacc   0.96 (  0.97)	Loss_d 0.305 (0.336)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.13 (  0.19)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.309 (0.333)	test_acc   0.87 (  0.86)	test_minacc   0.16 (  0.19)	test_majacc   0.98 (  0.97)	Loss_d 0.309 (0.333)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.16 (  0.19)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.332 (0.332)	test_acc   0.85 (  0.86)	test_minacc   0.13 (  0.19)	test_majacc   0.98 (  0.97)	Loss_d 0.332 (0.332)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.13 (  0.19)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.06it/s]
Test: [  0/  1]	Loss 1.619 (1.619)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.97 (  0.97)	Loss_d 1.619 (1.619)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.619 (1.619)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.97 (  0.97)	Loss_d 1.619 (1.619)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.80 (  0.80)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/135/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0354 (0.0426)	validation_time 0.0003 (0.0016)	train_time 0.0350 (0.0406)
record: (train_acc, test_acc) (0.8550000212788582, 0.2120000123977661)
last accs (train_acc, test_acc) (0.8550000212788582, 0.2120000123977661)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.12it/s] 23%|##3       | 6/26 [00:00<00:00, 27.80it/s] 38%|###8      | 10/26 [00:00<00:00, 32.85it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.07it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.04it/s] 96%|#########6| 25/26 [00:00<00:00, 39.09it/s]100%|##########| 26/26 [00:00<00:00, 33.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.314 (0.342)	train_nll   0.31 (  0.34)	train_penalty   0.02 (  0.03)	weight_norm  22.34 ( 22.31)	train_acc   0.85 (  0.85)	train_minacc   0.21 (  0.20)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 5.9751 (6.0218)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.35it/s] 27%|##6       | 7/26 [00:00<00:00, 34.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.65it/s] 46%|####6     | 12/26 [00:00<00:00, 39.41it/s] 69%|######9   | 18/26 [00:00<00:00, 45.83it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.83it/s] 92%|#########2| 24/26 [00:00<00:00, 47.88it/s]100%|##########| 26/26 [00:00<00:00, 39.67it/s]
Test: [   0/  26]	Loss 0.328 (0.328)	test_acc   0.86 (  0.86)	test_minacc   0.23 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.328 (0.328)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.294 (0.326)	test_acc   0.87 (  0.86)	test_minacc   0.33 (  0.28)	test_majacc   0.94 (  0.96)	Loss_d 0.294 (0.326)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.33 (  0.28)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.289 (0.321)	test_acc   0.88 (  0.86)	test_minacc   0.31 (  0.29)	test_majacc   0.97 (  0.96)	Loss_d 0.289 (0.321)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.31 (  0.29)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.89)
Test: [  26/  26]	Loss 0.293 (0.318)	test_acc   0.85 (  0.86)	test_minacc   0.24 (  0.29)	test_majacc   0.96 (  0.96)	Loss_d 0.293 (0.318)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.24 (  0.29)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.27it/s]
Test: [  0/  1]	Loss 1.581 (1.581)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.97 (  0.97)	Loss_d 1.581 (1.581)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 1.581 (1.581)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.97 (  0.97)	Loss_d 1.581 (1.581)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.67 (  0.67)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/135/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0340 (0.0412)	validation_time 0.0004 (0.0014)	train_time 0.0336 (0.0394)
record: (train_acc, test_acc) (0.8630000221729278, 0.289000004529953)
last accs (train_acc, test_acc) (0.8630000221729278, 0.289000004529953)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.20it/s] 23%|##3       | 6/26 [00:00<00:00, 28.39it/s] 38%|###8      | 10/26 [00:00<00:00, 31.76it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.91it/s] 69%|######9   | 18/26 [00:00<00:00, 35.55it/s] 88%|########8 | 23/26 [00:00<00:00, 36.90it/s]100%|##########| 26/26 [00:00<00:00, 31.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.319 (0.332)	train_nll   0.32 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm  22.44 ( 22.39)	train_acc   0.86 (  0.86)	train_minacc   0.16 (  0.24)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 6.0916 (6.0756)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 27%|##6       | 7/26 [00:00<00:00, 34.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.52it/s] 46%|####6     | 12/26 [00:00<00:00, 40.52it/s] 65%|######5   | 17/26 [00:00<00:00, 42.15it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.15it/s] 88%|########8 | 23/26 [00:00<00:00, 47.35it/s]100%|##########| 26/26 [00:00<00:00, 38.75it/s]
Test: [   0/  26]	Loss 0.317 (0.317)	test_acc   0.88 (  0.88)	test_minacc   0.25 (  0.25)	test_majacc   0.99 (  0.99)	Loss_d 0.317 (0.317)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.296 (0.324)	test_acc   0.88 (  0.86)	test_minacc   0.20 (  0.19)	test_majacc   0.97 (  0.98)	Loss_d 0.296 (0.324)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.20 (  0.19)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.90)
Test: [  20/  26]	Loss 0.287 (0.322)	test_acc   0.87 (  0.86)	test_minacc   0.18 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 0.287 (0.322)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.18 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.301 (0.319)	test_acc   0.86 (  0.86)	test_minacc   0.16 (  0.19)	test_majacc   0.99 (  0.98)	Loss_d 0.301 (0.319)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.16 (  0.19)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.09it/s]
Test: [  0/  1]	Loss 1.705 (1.705)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 1.705 (1.705)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.74 (  0.74)
Test: [  1/  1]	Loss 1.705 (1.705)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 1.705 (1.705)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.74 (  0.74)
Overall Timing[  6/  1]	epoch_time 0.0345 (0.0402)	validation_time 0.0006 (0.0013)	train_time 0.0339 (0.0386)
record: (train_acc, test_acc) (0.8630000221729278, 0.289000004529953)
last accs (train_acc, test_acc) (0.862100022315979, 0.2150000035762787)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.21it/s] 23%|##3       | 6/26 [00:00<00:00, 28.45it/s] 38%|###8      | 10/26 [00:00<00:00, 32.45it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.88it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.91it/s] 96%|#########6| 25/26 [00:00<00:00, 38.75it/s]100%|##########| 26/26 [00:00<00:00, 33.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.284 (0.316)	train_nll   0.28 (  0.32)	train_penalty   0.01 (  0.02)	weight_norm  22.55 ( 22.49)	train_acc   0.87 (  0.86)	train_minacc   0.34 (  0.33)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 5.9663 (6.0480)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.58it/s] 27%|##6       | 7/26 [00:00<00:00, 31.72it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.72it/s] 50%|#####     | 13/26 [00:00<00:00, 41.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.48it/s] 96%|#########6| 25/26 [00:00<00:00, 46.01it/s]100%|##########| 26/26 [00:00<00:00, 38.65it/s]
Test: [   0/  26]	Loss 0.298 (0.298)	test_acc   0.87 (  0.87)	test_minacc   0.28 (  0.28)	test_majacc   0.97 (  0.97)	Loss_d 0.298 (0.298)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.263 (0.296)	test_acc   0.90 (  0.87)	test_minacc   0.42 (  0.34)	test_majacc   0.96 (  0.97)	Loss_d 0.263 (0.296)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.42 (  0.34)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.263 (0.294)	test_acc   0.91 (  0.87)	test_minacc   0.38 (  0.35)	test_majacc   0.99 (  0.97)	Loss_d 0.263 (0.294)	test_acc_d   0.91 (  0.87)	test_minacc_d   0.38 (  0.35)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.91 (  0.89)
Test: [  26/  26]	Loss 0.269 (0.292)	test_acc   0.87 (  0.87)	test_minacc   0.26 (  0.34)	test_majacc   0.98 (  0.97)	Loss_d 0.269 (0.292)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.26 (  0.34)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.24it/s]
Test: [  0/  1]	Loss 1.660 (1.660)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 1.660 (1.660)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.660 (1.660)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 1.660 (1.660)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.68 (  0.68)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/135/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0376 (0.0399)	validation_time 0.0003 (0.0012)	train_time 0.0372 (0.0385)
record: (train_acc, test_acc) (0.8724000256061554, 0.29600000381469727)
last accs (train_acc, test_acc) (0.8724000256061554, 0.29600000381469727)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.00it/s] 23%|##3       | 6/26 [00:00<00:00, 29.07it/s] 38%|###8      | 10/26 [00:00<00:00, 32.81it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.15it/s] 88%|########8 | 23/26 [00:00<00:00, 37.98it/s]100%|##########| 26/26 [00:00<00:00, 33.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.278 (0.297)	train_nll   0.28 (  0.30)	train_penalty   0.01 (  0.02)	weight_norm  22.67 ( 22.61)	train_acc   0.87 (  0.87)	train_minacc   0.34 (  0.39)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 6.1195 (6.0084)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.85it/s] 23%|##3       | 6/26 [00:00<00:00, 29.90it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.90it/s] 42%|####2     | 11/26 [00:00<00:00, 38.23it/s] 65%|######5   | 17/26 [00:00<00:00, 42.06it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.06it/s] 88%|########8 | 23/26 [00:00<00:00, 47.22it/s]100%|##########| 26/26 [00:00<00:00, 38.16it/s]
Test: [   0/  26]	Loss 0.272 (0.272)	test_acc   0.87 (  0.87)	test_minacc   0.37 (  0.37)	test_majacc   0.96 (  0.96)	Loss_d 0.272 (0.272)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.238 (0.273)	test_acc   0.93 (  0.88)	test_minacc   0.58 (  0.44)	test_majacc   0.97 (  0.96)	Loss_d 0.238 (0.273)	test_acc_d   0.93 (  0.88)	test_minacc_d   0.58 (  0.44)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.88 (  0.87)
Test: [  20/  26]	Loss 0.241 (0.268)	test_acc   0.90 (  0.89)	test_minacc   0.45 (  0.46)	test_majacc   0.98 (  0.96)	Loss_d 0.241 (0.268)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.88 (  0.87)
Test: [  26/  26]	Loss 0.247 (0.266)	test_acc   0.88 (  0.89)	test_minacc   0.37 (  0.46)	test_majacc   0.97 (  0.96)	Loss_d 0.247 (0.266)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.37 (  0.46)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.88 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.41it/s]
Test: [  0/  1]	Loss 1.685 (1.685)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.97 (  0.97)	Loss_d 1.685 (1.685)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.62 (  0.62)
Test: [  1/  1]	Loss 1.685 (1.685)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.97 (  0.97)	Loss_d 1.685 (1.685)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.62 (  0.62)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/135/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0364 (0.0395)	validation_time 0.0004 (0.0011)	train_time 0.0359 (0.0382)
record: (train_acc, test_acc) (0.8855000240802765, 0.3630000054836273)
last accs (train_acc, test_acc) (0.8855000240802765, 0.3630000054836273)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s] 19%|#9        | 5/26 [00:00<00:01, 20.54it/s] 35%|###4      | 9/26 [00:00<00:00, 27.06it/s] 50%|#####     | 13/26 [00:00<00:00, 30.63it/s] 65%|######5   | 17/26 [00:00<00:00, 33.32it/s] 81%|########  | 21/26 [00:00<00:00, 35.04it/s]100%|##########| 26/26 [00:00<00:00, 37.04it/s]100%|##########| 26/26 [00:00<00:00, 29.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.253 (0.276)	train_nll   0.25 (  0.28)	train_penalty   0.01 (  0.01)	weight_norm  22.80 ( 22.73)	train_acc   0.89 (  0.88)	train_minacc   0.55 (  0.49)	train_majacc   0.95 (  0.95)	train_corr   0.00 (  0.00)	l1 5.9893 (6.1666)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.00it/s] 27%|##6       | 7/26 [00:00<00:00, 34.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.26it/s] 50%|#####     | 13/26 [00:00<00:00, 42.08it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.68it/s] 96%|#########6| 25/26 [00:00<00:00, 47.54it/s]100%|##########| 26/26 [00:00<00:00, 39.84it/s]
Test: [   0/  26]	Loss 0.256 (0.256)	test_acc   0.89 (  0.89)	test_minacc   0.44 (  0.44)	test_majacc   0.97 (  0.97)	Loss_d 0.256 (0.256)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.219 (0.251)	test_acc   0.92 (  0.89)	test_minacc   0.53 (  0.47)	test_majacc   0.97 (  0.96)	Loss_d 0.219 (0.251)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.53 (  0.47)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.88 (  0.87)
Test: [  20/  26]	Loss 0.217 (0.243)	test_acc   0.92 (  0.89)	test_minacc   0.60 (  0.50)	test_majacc   0.97 (  0.96)	Loss_d 0.217 (0.243)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.87 (  0.86)
Test: [  26/  26]	Loss 0.202 (0.239)	test_acc   0.92 (  0.90)	test_minacc   0.61 (  0.51)	test_majacc   0.98 (  0.97)	Loss_d 0.202 (0.239)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.61 (  0.51)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.86 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.82it/s]
Test: [  0/  1]	Loss 1.703 (1.703)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.95 (  0.95)	Loss_d 1.703 (1.703)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 1.703 (1.703)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.95 (  0.95)	Loss_d 1.703 (1.703)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.58 (  0.58)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/135/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0367 (0.0392)	validation_time 0.0004 (0.0010)	train_time 0.0363 (0.0380)
record: (train_acc, test_acc) (0.8965000229477882, 0.36900001764297485)
last accs (train_acc, test_acc) (0.8965000229477882, 0.36900001764297485)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 19%|#9        | 5/26 [00:00<00:00, 21.43it/s] 35%|###4      | 9/26 [00:00<00:00, 27.76it/s] 50%|#####     | 13/26 [00:00<00:00, 31.88it/s] 65%|######5   | 17/26 [00:00<00:00, 34.05it/s] 81%|########  | 21/26 [00:00<00:00, 35.69it/s] 96%|#########6| 25/26 [00:00<00:00, 36.85it/s]100%|##########| 26/26 [00:00<00:00, 30.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.255 (0.273)	train_nll   0.25 (  0.27)	train_penalty   0.01 (  0.01)	weight_norm  23.00 ( 22.90)	train_acc   0.89 (  0.88)	train_minacc   0.61 (  0.47)	train_majacc   0.94 (  0.95)	train_corr   0.00 (  0.00)	l1 5.8648 (6.1683)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.58it/s] 23%|##3       | 6/26 [00:00<00:00, 28.55it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.55it/s] 46%|####6     | 12/26 [00:00<00:00, 41.05it/s] 65%|######5   | 17/26 [00:00<00:00, 42.41it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.41it/s] 88%|########8 | 23/26 [00:00<00:00, 47.65it/s]100%|##########| 26/26 [00:00<00:00, 38.30it/s]
Test: [   0/  26]	Loss 0.277 (0.277)	test_acc   0.87 (  0.87)	test_minacc   0.37 (  0.37)	test_majacc   0.96 (  0.96)	Loss_d 0.277 (0.277)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.235 (0.270)	test_acc   0.90 (  0.88)	test_minacc   0.49 (  0.47)	test_majacc   0.95 (  0.96)	Loss_d 0.235 (0.270)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.49 (  0.47)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.87 (  0.86)
Test: [  20/  26]	Loss 0.242 (0.264)	test_acc   0.89 (  0.88)	test_minacc   0.45 (  0.49)	test_majacc   0.96 (  0.96)	Loss_d 0.242 (0.264)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.86)
Test: [  26/  26]	Loss 0.218 (0.258)	test_acc   0.90 (  0.89)	test_minacc   0.58 (  0.50)	test_majacc   0.96 (  0.96)	Loss_d 0.218 (0.258)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.85 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.81it/s]
Test: [  0/  1]	Loss 1.820 (1.820)	test_acc   0.36 (  0.36)	test_minacc   0.29 (  0.29)	test_majacc   0.96 (  0.96)	Loss_d 1.820 (1.820)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 1.820 (1.820)	test_acc   0.36 (  0.36)	test_minacc   0.29 (  0.29)	test_majacc   0.96 (  0.96)	Loss_d 1.820 (1.820)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.63 (  0.63)
Overall Timing[ 10/  1]	epoch_time 0.0347 (0.0388)	validation_time 0.0004 (0.0010)	train_time 0.0342 (0.0377)
record: (train_acc, test_acc) (0.8965000229477882, 0.36900001764297485)
last accs (train_acc, test_acc) (0.8882000225186348, 0.35600000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.56it/s] 23%|##3       | 6/26 [00:00<00:00, 29.09it/s] 38%|###8      | 10/26 [00:00<00:00, 33.21it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.19it/s] 69%|######9   | 18/26 [00:00<00:00, 36.45it/s] 85%|########4 | 22/26 [00:00<00:00, 37.39it/s]100%|##########| 26/26 [00:00<00:00, 37.74it/s]100%|##########| 26/26 [00:00<00:00, 31.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.221 (0.259)	train_nll   0.22 (  0.26)	train_penalty   0.01 (  0.01)	weight_norm  23.23 ( 23.12)	train_acc   0.92 (  0.89)	train_minacc   0.53 (  0.54)	train_majacc   1.00 (  0.95)	train_corr   0.00 (  0.00)	l1 6.0855 (6.2933)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.70it/s] 35%|###4      | 9/26 [00:00<00:00, 40.39it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.39it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.91it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.91it/s] 81%|########  | 21/26 [00:00<00:00, 46.86it/s]100%|##########| 26/26 [00:00<00:00, 42.34it/s]
Test: [   0/  26]	Loss 0.256 (0.256)	test_acc   0.88 (  0.88)	test_minacc   0.40 (  0.40)	test_majacc   0.96 (  0.96)	Loss_d 0.256 (0.256)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.212 (0.259)	test_acc   0.92 (  0.89)	test_minacc   0.56 (  0.47)	test_majacc   0.96 (  0.97)	Loss_d 0.212 (0.259)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.56 (  0.47)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.88 (  0.87)
Test: [  20/  26]	Loss 0.239 (0.252)	test_acc   0.89 (  0.90)	test_minacc   0.45 (  0.50)	test_majacc   0.96 (  0.97)	Loss_d 0.239 (0.252)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.86 (  0.86)
Test: [  26/  26]	Loss 0.187 (0.245)	test_acc   0.94 (  0.90)	test_minacc   0.63 (  0.52)	test_majacc   0.99 (  0.97)	Loss_d 0.187 (0.245)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.63 (  0.52)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.85 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.25it/s]
Test: [  0/  1]	Loss 1.932 (1.932)	test_acc   0.34 (  0.34)	test_minacc   0.26 (  0.26)	test_majacc   0.97 (  0.97)	Loss_d 1.932 (1.932)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.932 (1.932)	test_acc   0.34 (  0.34)	test_minacc   0.26 (  0.26)	test_majacc   0.97 (  0.97)	Loss_d 1.932 (1.932)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.65 (  0.65)
Overall Timing[ 11/  1]	epoch_time 0.0351 (0.0385)	validation_time 0.0004 (0.0009)	train_time 0.0346 (0.0374)
record: (train_acc, test_acc) (0.8965000229477882, 0.36900001764297485)
last accs (train_acc, test_acc) (0.8997000245451927, 0.33500000834465027)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.01it/s] 19%|#9        | 5/26 [00:00<00:01, 20.09it/s] 35%|###4      | 9/26 [00:00<00:00, 26.48it/s] 50%|#####     | 13/26 [00:00<00:00, 30.83it/s] 65%|######5   | 17/26 [00:00<00:00, 33.33it/s] 85%|########4 | 22/26 [00:00<00:00, 36.11it/s]100%|##########| 26/26 [00:00<00:00, 29.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.206 (0.241)	train_nll   0.21 (  0.24)	train_penalty   0.00 (  0.01)	weight_norm  23.55 ( 23.39)	train_acc   0.93 (  0.90)	train_minacc   0.74 (  0.61)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 6.4995 (6.7286)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 27%|##6       | 7/26 [00:00<00:00, 36.84it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.84it/s] 50%|#####     | 13/26 [00:00<00:00, 43.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.55it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.55it/s] 96%|#########6| 25/26 [00:00<00:00, 48.45it/s]100%|##########| 26/26 [00:00<00:00, 40.98it/s]
Test: [   0/  26]	Loss 0.240 (0.240)	test_acc   0.89 (  0.89)	test_minacc   0.51 (  0.51)	test_majacc   0.96 (  0.96)	Loss_d 0.240 (0.240)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.198 (0.246)	test_acc   0.93 (  0.89)	test_minacc   0.67 (  0.52)	test_majacc   0.96 (  0.96)	Loss_d 0.198 (0.246)	test_acc_d   0.93 (  0.89)	test_minacc_d   0.67 (  0.52)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.85)
Test: [  20/  26]	Loss 0.197 (0.236)	test_acc   0.93 (  0.90)	test_minacc   0.56 (  0.55)	test_majacc   0.99 (  0.96)	Loss_d 0.197 (0.236)	test_acc_d   0.93 (  0.90)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.85 (  0.84)
Test: [  26/  26]	Loss 0.172 (0.229)	test_acc   0.94 (  0.91)	test_minacc   0.74 (  0.57)	test_majacc   0.98 (  0.97)	Loss_d 0.172 (0.229)	test_acc_d   0.94 (  0.91)	test_minacc_d   0.74 (  0.57)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.83 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.28it/s]
Test: [  0/  1]	Loss 1.991 (1.991)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.95 (  0.95)	Loss_d 1.991 (1.991)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.59 (  0.59)
Test: [  1/  1]	Loss 1.991 (1.991)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.95 (  0.95)	Loss_d 1.991 (1.991)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.59 (  0.59)
Overall Timing[ 12/  1]	epoch_time 0.0352 (0.0382)	validation_time 0.0004 (0.0009)	train_time 0.0348 (0.0372)
record: (train_acc, test_acc) (0.8965000229477882, 0.36900001764297485)
last accs (train_acc, test_acc) (0.90500002348423, 0.3620000183582306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 19%|#9        | 5/26 [00:00<00:00, 21.77it/s] 38%|###8      | 10/26 [00:00<00:00, 30.06it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.81it/s] 92%|#########2| 24/26 [00:00<00:00, 37.53it/s]100%|##########| 26/26 [00:00<00:00, 30.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.217 (0.241)	train_nll   0.22 (  0.24)	train_penalty   0.00 (  0.01)	weight_norm  23.91 ( 23.73)	train_acc   0.90 (  0.90)	train_minacc   0.61 (  0.59)	train_majacc   0.95 (  0.95)	train_corr   0.00 (  0.00)	l1 6.4166 (6.7707)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.93it/s] 27%|##6       | 7/26 [00:00<00:00, 36.00it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.00it/s] 50%|#####     | 13/26 [00:00<00:00, 42.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.26it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.26it/s] 96%|#########6| 25/26 [00:00<00:00, 47.04it/s]100%|##########| 26/26 [00:00<00:00, 39.81it/s]
Test: [   0/  26]	Loss 0.215 (0.215)	test_acc   0.92 (  0.92)	test_minacc   0.70 (  0.70)	test_majacc   0.95 (  0.95)	Loss_d 0.215 (0.215)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.193 (0.212)	test_acc   0.94 (  0.91)	test_minacc   0.71 (  0.65)	test_majacc   0.97 (  0.96)	Loss_d 0.193 (0.212)	test_acc_d   0.94 (  0.91)	test_minacc_d   0.71 (  0.65)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.85 (  0.82)
Test: [  20/  26]	Loss 0.202 (0.214)	test_acc   0.92 (  0.91)	test_minacc   0.64 (  0.65)	test_majacc   0.97 (  0.96)	Loss_d 0.202 (0.214)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.64 (  0.65)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.84 (  0.82)
Test: [  26/  26]	Loss 0.181 (0.209)	test_acc   0.94 (  0.91)	test_minacc   0.79 (  0.66)	test_majacc   0.97 (  0.96)	Loss_d 0.181 (0.209)	test_acc_d   0.94 (  0.91)	test_minacc_d   0.79 (  0.66)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.82 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.66it/s]
Test: [  0/  1]	Loss 1.866 (1.866)	test_acc   0.44 (  0.44)	test_minacc   0.38 (  0.38)	test_majacc   0.93 (  0.93)	Loss_d 1.866 (1.866)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.48 (  0.48)
Test: [  1/  1]	Loss 1.866 (1.866)	test_acc   0.44 (  0.44)	test_minacc   0.38 (  0.38)	test_majacc   0.93 (  0.93)	Loss_d 1.866 (1.866)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.48 (  0.48)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/135/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0353 (0.0380)	validation_time 0.0003 (0.0009)	train_time 0.0349 (0.0370)
record: (train_acc, test_acc) (0.9121000228524208, 0.4360000193119049)
last accs (train_acc, test_acc) (0.9121000228524208, 0.4360000193119049)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.10it/s] 19%|#9        | 5/26 [00:00<00:01, 19.21it/s] 35%|###4      | 9/26 [00:00<00:00, 26.71it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.19it/s] 92%|#########2| 24/26 [00:00<00:00, 36.81it/s]100%|##########| 26/26 [00:00<00:00, 29.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.196 (0.213)	train_nll   0.20 (  0.21)	train_penalty   0.00 (  0.00)	weight_norm  24.29 ( 24.10)	train_acc   0.94 (  0.91)	train_minacc   0.71 (  0.66)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 6.9365 (7.0038)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.14it/s] 35%|###4      | 9/26 [00:00<00:00, 38.71it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.71it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.51it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.51it/s] 81%|########  | 21/26 [00:00<00:00, 46.66it/s]100%|##########| 26/26 [00:00<00:00, 42.19it/s]
Test: [   0/  26]	Loss 0.198 (0.198)	test_acc   0.93 (  0.93)	test_minacc   0.70 (  0.70)	test_majacc   0.97 (  0.97)	Loss_d 0.198 (0.198)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.169 (0.182)	test_acc   0.93 (  0.93)	test_minacc   0.76 (  0.70)	test_majacc   0.96 (  0.97)	Loss_d 0.169 (0.182)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.76 (  0.70)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.82 (  0.81)
Test: [  20/  26]	Loss 0.160 (0.176)	test_acc   0.93 (  0.93)	test_minacc   0.69 (  0.73)	test_majacc   0.97 (  0.97)	Loss_d 0.160 (0.176)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.69 (  0.73)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.82 (  0.80)
Test: [  26/  26]	Loss 0.127 (0.168)	test_acc   0.97 (  0.94)	test_minacc   0.84 (  0.75)	test_majacc   0.99 (  0.97)	Loss_d 0.127 (0.168)	test_acc_d   0.97 (  0.94)	test_minacc_d   0.84 (  0.75)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.81 (  0.80)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.24it/s]
Test: [  0/  1]	Loss 2.111 (2.111)	test_acc   0.44 (  0.44)	test_minacc   0.38 (  0.38)	test_majacc   0.93 (  0.93)	Loss_d 2.111 (2.111)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.44 (  0.44)
Test: [  1/  1]	Loss 2.111 (2.111)	test_acc   0.44 (  0.44)	test_minacc   0.38 (  0.38)	test_majacc   0.93 (  0.93)	Loss_d 2.111 (2.111)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.44 (  0.44)
Overall Timing[ 14/  1]	epoch_time 0.0363 (0.0379)	validation_time 0.0004 (0.0008)	train_time 0.0359 (0.0370)
record: (train_acc, test_acc) (0.9121000228524208, 0.4360000193119049)
last accs (train_acc, test_acc) (0.9357000202536583, 0.4360000193119049)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.32it/s] 15%|#5        | 4/26 [00:00<00:01, 21.03it/s] 31%|###       | 8/26 [00:00<00:00, 28.02it/s] 46%|####6     | 12/26 [00:00<00:00, 32.06it/s] 62%|######1   | 16/26 [00:00<00:00, 34.49it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.20it/s] 96%|#########6| 25/26 [00:00<00:00, 37.90it/s]100%|##########| 26/26 [00:00<00:00, 31.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.080)	train_nll   0.39 (  0.27)	train_penalty   0.00 (  0.01)	weight_norm  24.64 ( 24.48)	train_acc   0.80 (  0.88)	train_minacc   0.79 (  0.70)	train_majacc   0.80 (  0.92)	train_corr   0.00 (  0.00)	l1 5.3184 (6.8618)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.76it/s] 19%|#9        | 5/26 [00:00<00:00, 27.18it/s]                                               19%|#9        | 5/26 [00:00<00:00, 27.18it/s] 42%|####2     | 11/26 [00:00<00:00, 38.21it/s] 65%|######5   | 17/26 [00:00<00:00, 43.11it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.11it/s] 88%|########8 | 23/26 [00:00<00:00, 47.31it/s]100%|##########| 26/26 [00:00<00:00, 38.92it/s]
Test: [   0/  26]	Loss 0.408 (0.408)	test_acc   0.79 (  0.79)	test_minacc   0.72 (  0.72)	test_majacc   0.81 (  0.81)	Loss_d 0.408 (0.408)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.55 (  0.55)
Test: [  10/  26]	Loss 0.406 (0.401)	test_acc   0.81 (  0.79)	test_minacc   0.84 (  0.80)	test_majacc   0.80 (  0.79)	Loss_d 0.406 (0.401)	test_acc_d   0.81 (  0.79)	test_minacc_d   0.84 (  0.80)	test_majacc_d   0.80 (  0.79)	test_corr_d   0.56 (  0.54)
Test: [  20/  26]	Loss 0.426 (0.406)	test_acc   0.76 (  0.79)	test_minacc   0.73 (  0.80)	test_majacc   0.77 (  0.79)	Loss_d 0.426 (0.406)	test_acc_d   0.76 (  0.79)	test_minacc_d   0.73 (  0.80)	test_majacc_d   0.77 (  0.79)	test_corr_d   0.54 (  0.52)
Test: [  26/  26]	Loss 0.428 (0.409)	test_acc   0.78 (  0.79)	test_minacc   0.79 (  0.80)	test_majacc   0.78 (  0.79)	Loss_d 0.428 (0.409)	test_acc_d   0.78 (  0.79)	test_minacc_d   0.79 (  0.80)	test_majacc_d   0.78 (  0.79)	test_corr_d   0.48 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.75it/s]
Test: [  0/  1]	Loss 1.089 (1.089)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.81 (  0.81)	Loss_d 1.089 (1.089)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 1.089 (1.089)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.81 (  0.81)	Loss_d 1.089 (1.089)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.02 (  0.02)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/135/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0358 (0.0378)	validation_time 0.0004 (0.0008)	train_time 0.0354 (0.0369)
record: (train_acc, test_acc) (0.7874000259041786, 0.6140000224113464)
last accs (train_acc, test_acc) (0.7874000259041786, 0.6140000224113464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 19%|#9        | 5/26 [00:00<00:00, 22.42it/s] 35%|###4      | 9/26 [00:00<00:00, 27.99it/s] 50%|#####     | 13/26 [00:00<00:00, 31.36it/s] 65%|######5   | 17/26 [00:00<00:00, 32.36it/s] 81%|########  | 21/26 [00:00<00:00, 34.31it/s] 96%|#########6| 25/26 [00:00<00:00, 35.76it/s]100%|##########| 26/26 [00:00<00:00, 29.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.001 (0.002)	train_nll   0.50 (  0.47)	train_penalty   0.00 (  0.00)	weight_norm  24.75 ( 24.72)	train_acc   0.70 (  0.74)	train_minacc   0.74 (  0.78)	train_majacc   0.69 (  0.73)	train_corr   0.00 (  0.00)	l1 4.3485 (4.6386)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 27%|##6       | 7/26 [00:00<00:00, 29.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.93it/s] 50%|#####     | 13/26 [00:00<00:00, 37.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.67it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.67it/s] 96%|#########6| 25/26 [00:00<00:00, 45.96it/s]100%|##########| 26/26 [00:00<00:00, 37.07it/s]
Test: [   0/  26]	Loss 0.482 (0.482)	test_acc   0.71 (  0.71)	test_minacc   0.70 (  0.70)	test_majacc   0.71 (  0.71)	Loss_d 0.482 (0.482)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.51 (  0.51)
Test: [  10/  26]	Loss 0.481 (0.472)	test_acc   0.76 (  0.74)	test_minacc   0.76 (  0.76)	test_majacc   0.77 (  0.73)	Loss_d 0.481 (0.472)	test_acc_d   0.76 (  0.74)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.77 (  0.73)	test_corr_d   0.53 (  0.51)
Test: [  20/  26]	Loss 0.487 (0.474)	test_acc   0.70 (  0.73)	test_minacc   0.65 (  0.75)	test_majacc   0.71 (  0.73)	Loss_d 0.487 (0.474)	test_acc_d   0.70 (  0.73)	test_minacc_d   0.65 (  0.75)	test_majacc_d   0.71 (  0.73)	test_corr_d   0.53 (  0.51)
Test: [  26/  26]	Loss 0.499 (0.477)	test_acc   0.70 (  0.73)	test_minacc   0.74 (  0.74)	test_majacc   0.69 (  0.73)	Loss_d 0.499 (0.477)	test_acc_d   0.70 (  0.73)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.69 (  0.73)	test_corr_d   0.44 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.33it/s]
Test: [  0/  1]	Loss 0.943 (0.943)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.75 (  0.75)	Loss_d 0.943 (0.943)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.943 (0.943)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.75 (  0.75)	Loss_d 0.943 (0.943)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.09 (  0.09)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/135/checkpoints/model_best.pth
Overall Timing[ 16/  1]	epoch_time 0.0364 (0.0377)	validation_time 0.0003 (0.0008)	train_time 0.0361 (0.0368)
record: (train_acc, test_acc) (0.7294000273346901, 0.6190000176429749)
last accs (train_acc, test_acc) (0.7294000273346901, 0.6190000176429749)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.77it/s] 15%|#5        | 4/26 [00:00<00:01, 19.53it/s] 31%|###       | 8/26 [00:00<00:00, 27.97it/s] 50%|#####     | 13/26 [00:00<00:00, 33.33it/s] 69%|######9   | 18/26 [00:00<00:00, 36.15it/s] 85%|########4 | 22/26 [00:00<00:00, 36.68it/s]100%|##########| 26/26 [00:00<00:00, 37.61it/s]100%|##########| 26/26 [00:00<00:00, 30.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.001)	train_nll   0.53 (  0.50)	train_penalty   0.00 (  0.00)	weight_norm  24.76 ( 24.76)	train_acc   0.68 (  0.70)	train_minacc   0.76 (  0.75)	train_majacc   0.66 (  0.70)	train_corr   0.00 (  0.00)	l1 4.2737 (4.3476)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.20it/s] 27%|##6       | 7/26 [00:00<00:00, 34.00it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.00it/s] 50%|#####     | 13/26 [00:00<00:00, 40.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.52it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.52it/s] 96%|#########6| 25/26 [00:00<00:00, 46.69it/s]100%|##########| 26/26 [00:00<00:00, 39.05it/s]
Test: [   0/  26]	Loss 0.508 (0.508)	test_acc   0.70 (  0.70)	test_minacc   0.77 (  0.77)	test_majacc   0.69 (  0.69)	Loss_d 0.508 (0.508)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.47 (  0.47)
Test: [  10/  26]	Loss 0.490 (0.489)	test_acc   0.74 (  0.72)	test_minacc   0.76 (  0.77)	test_majacc   0.74 (  0.71)	Loss_d 0.490 (0.489)	test_acc_d   0.74 (  0.72)	test_minacc_d   0.76 (  0.77)	test_majacc_d   0.74 (  0.71)	test_corr_d   0.51 (  0.48)
Test: [  20/  26]	Loss 0.503 (0.491)	test_acc   0.69 (  0.71)	test_minacc   0.65 (  0.75)	test_majacc   0.69 (  0.70)	Loss_d 0.503 (0.491)	test_acc_d   0.69 (  0.71)	test_minacc_d   0.65 (  0.75)	test_majacc_d   0.69 (  0.70)	test_corr_d   0.49 (  0.48)
Test: [  26/  26]	Loss 0.521 (0.494)	test_acc   0.68 (  0.71)	test_minacc   0.76 (  0.75)	test_majacc   0.66 (  0.70)	Loss_d 0.521 (0.494)	test_acc_d   0.68 (  0.71)	test_minacc_d   0.76 (  0.75)	test_majacc_d   0.66 (  0.70)	test_corr_d   0.41 (  0.47)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.47it/s]
Test: [  0/  1]	Loss 0.924 (0.924)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.75 (  0.75)	Loss_d 0.924 (0.924)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.924 (0.924)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.75 (  0.75)	Loss_d 0.924 (0.924)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.09 (  0.09)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/135/checkpoints/model_best.pth
Overall Timing[ 17/  1]	epoch_time 0.0355 (0.0376)	validation_time 0.0004 (0.0007)	train_time 0.0351 (0.0367)
record: (train_acc, test_acc) (0.7093000345826149, 0.6270000338554382)
last accs (train_acc, test_acc) (0.7093000345826149, 0.6270000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.34it/s] 19%|#9        | 5/26 [00:00<00:00, 25.94it/s] 35%|###4      | 9/26 [00:00<00:00, 31.68it/s] 50%|#####     | 13/26 [00:00<00:00, 34.77it/s] 69%|######9   | 18/26 [00:00<00:00, 36.98it/s] 88%|########8 | 23/26 [00:00<00:00, 38.16it/s]100%|##########| 26/26 [00:00<00:00, 32.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.001)	train_nll   0.53 (  0.51)	train_penalty   0.00 (  0.00)	weight_norm  24.76 ( 24.76)	train_acc   0.66 (  0.70)	train_minacc   0.76 (  0.76)	train_majacc   0.65 (  0.69)	train_corr   0.00 (  0.00)	l1 4.2397 (4.2494)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 27%|##6       | 7/26 [00:00<00:00, 35.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.59it/s] 46%|####6     | 12/26 [00:00<00:00, 39.49it/s] 69%|######9   | 18/26 [00:00<00:00, 46.09it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.09it/s] 92%|#########2| 24/26 [00:00<00:00, 46.84it/s]100%|##########| 26/26 [00:00<00:00, 39.43it/s]
Test: [   0/  26]	Loss 0.521 (0.521)	test_acc   0.68 (  0.68)	test_minacc   0.74 (  0.74)	test_majacc   0.67 (  0.67)	Loss_d 0.521 (0.521)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.45 (  0.45)
Test: [  10/  26]	Loss 0.495 (0.502)	test_acc   0.73 (  0.70)	test_minacc   0.76 (  0.76)	test_majacc   0.73 (  0.69)	Loss_d 0.495 (0.502)	test_acc_d   0.73 (  0.70)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.73 (  0.69)	test_corr_d   0.50 (  0.47)
Test: [  20/  26]	Loss 0.512 (0.503)	test_acc   0.67 (  0.70)	test_minacc   0.64 (  0.75)	test_majacc   0.67 (  0.69)	Loss_d 0.512 (0.503)	test_acc_d   0.67 (  0.70)	test_minacc_d   0.64 (  0.75)	test_majacc_d   0.67 (  0.69)	test_corr_d   0.48 (  0.46)
Test: [  26/  26]	Loss 0.530 (0.505)	test_acc   0.66 (  0.70)	test_minacc   0.76 (  0.75)	test_majacc   0.65 (  0.69)	Loss_d 0.530 (0.505)	test_acc_d   0.66 (  0.70)	test_minacc_d   0.76 (  0.75)	test_majacc_d   0.65 (  0.69)	test_corr_d   0.39 (  0.46)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.49it/s]
Test: [  0/  1]	Loss 0.937 (0.937)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.74 (  0.74)	Loss_d 0.937 (0.937)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.937 (0.937)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.74 (  0.74)	Loss_d 0.937 (0.937)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.09 (  0.09)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/135/checkpoints/model_best.pth
Overall Timing[ 18/  1]	epoch_time 0.0354 (0.0375)	validation_time 0.0006 (0.0007)	train_time 0.0348 (0.0366)
record: (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
last accs (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.55it/s] 19%|#9        | 5/26 [00:00<00:00, 21.38it/s] 38%|###8      | 10/26 [00:00<00:00, 30.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.69it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.49it/s] 96%|#########6| 25/26 [00:00<00:00, 38.84it/s]100%|##########| 26/26 [00:00<00:00, 31.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.52 (  0.51)	train_penalty   0.00 (  0.00)	weight_norm  24.77 ( 24.77)	train_acc   0.68 (  0.69)	train_minacc   0.76 (  0.75)	train_majacc   0.67 (  0.68)	train_corr   0.00 (  0.00)	l1 4.2042 (4.2371)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.53it/s] 27%|##6       | 7/26 [00:00<00:00, 28.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.93it/s] 50%|#####     | 13/26 [00:00<00:00, 37.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.30it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.30it/s] 96%|#########6| 25/26 [00:00<00:00, 45.68it/s]100%|##########| 26/26 [00:00<00:00, 36.50it/s]
Test: [   0/  26]	Loss 0.516 (0.516)	test_acc   0.68 (  0.68)	test_minacc   0.75 (  0.75)	test_majacc   0.67 (  0.67)	Loss_d 0.516 (0.516)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.47 (  0.47)
Test: [  10/  26]	Loss 0.490 (0.498)	test_acc   0.73 (  0.70)	test_minacc   0.76 (  0.76)	test_majacc   0.72 (  0.69)	Loss_d 0.490 (0.498)	test_acc_d   0.73 (  0.70)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.72 (  0.69)	test_corr_d   0.51 (  0.48)
Test: [  20/  26]	Loss 0.507 (0.498)	test_acc   0.67 (  0.70)	test_minacc   0.64 (  0.75)	test_majacc   0.68 (  0.69)	Loss_d 0.507 (0.498)	test_acc_d   0.67 (  0.70)	test_minacc_d   0.64 (  0.75)	test_majacc_d   0.68 (  0.69)	test_corr_d   0.49 (  0.48)
Test: [  26/  26]	Loss 0.521 (0.500)	test_acc   0.68 (  0.70)	test_minacc   0.76 (  0.74)	test_majacc   0.66 (  0.69)	Loss_d 0.521 (0.500)	test_acc_d   0.68 (  0.70)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.66 (  0.69)	test_corr_d   0.41 (  0.47)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.92it/s]
Test: [  0/  1]	Loss 0.947 (0.947)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.75 (  0.75)	Loss_d 0.947 (0.947)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.947 (0.947)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.75 (  0.75)	Loss_d 0.947 (0.947)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.12 (  0.12)
Overall Timing[ 19/  1]	epoch_time 0.0350 (0.0373)	validation_time 0.0005 (0.0007)	train_time 0.0345 (0.0365)
record: (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
last accs (train_acc, test_acc) (0.6999000351428986, 0.6220000386238098)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s] 19%|#9        | 5/26 [00:00<00:00, 21.62it/s] 35%|###4      | 9/26 [00:00<00:00, 28.33it/s] 50%|#####     | 13/26 [00:00<00:00, 31.47it/s] 65%|######5   | 17/26 [00:00<00:00, 34.24it/s] 85%|########4 | 22/26 [00:00<00:00, 36.99it/s]100%|##########| 26/26 [00:00<00:00, 30.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.52 (  0.51)	train_penalty   0.00 (  0.00)	weight_norm  24.77 ( 24.77)	train_acc   0.68 (  0.69)	train_minacc   0.76 (  0.76)	train_majacc   0.67 (  0.68)	train_corr   0.00 (  0.00)	l1 4.2078 (4.2463)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 27%|##6       | 7/26 [00:00<00:00, 32.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.40it/s] 50%|#####     | 13/26 [00:00<00:00, 39.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.24it/s] 96%|#########6| 25/26 [00:00<00:00, 46.47it/s]100%|##########| 26/26 [00:00<00:00, 38.27it/s]
Test: [   0/  26]	Loss 0.512 (0.512)	test_acc   0.68 (  0.68)	test_minacc   0.74 (  0.74)	test_majacc   0.67 (  0.67)	Loss_d 0.512 (0.512)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.47 (  0.47)
Test: [  10/  26]	Loss 0.485 (0.494)	test_acc   0.73 (  0.70)	test_minacc   0.76 (  0.75)	test_majacc   0.73 (  0.70)	Loss_d 0.485 (0.494)	test_acc_d   0.73 (  0.70)	test_minacc_d   0.76 (  0.75)	test_majacc_d   0.73 (  0.70)	test_corr_d   0.52 (  0.49)
Test: [  20/  26]	Loss 0.502 (0.493)	test_acc   0.67 (  0.70)	test_minacc   0.64 (  0.74)	test_majacc   0.68 (  0.70)	Loss_d 0.502 (0.493)	test_acc_d   0.67 (  0.70)	test_minacc_d   0.64 (  0.74)	test_majacc_d   0.68 (  0.70)	test_corr_d   0.50 (  0.49)
Test: [  26/  26]	Loss 0.518 (0.495)	test_acc   0.68 (  0.70)	test_minacc   0.76 (  0.74)	test_majacc   0.67 (  0.70)	Loss_d 0.518 (0.495)	test_acc_d   0.68 (  0.70)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.67 (  0.70)	test_corr_d   0.42 (  0.48)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.21it/s]
Test: [  0/  1]	Loss 0.959 (0.959)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.75 (  0.75)	Loss_d 0.959 (0.959)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 0.959 (0.959)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.75 (  0.75)	Loss_d 0.959 (0.959)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.14 (  0.14)
Overall Timing[ 20/  1]	epoch_time 0.0354 (0.0372)	validation_time 0.0003 (0.0007)	train_time 0.0351 (0.0364)
record: (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7026000304222106, 0.6130000352859497)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 19%|#9        | 5/26 [00:00<00:00, 22.68it/s] 35%|###4      | 9/26 [00:00<00:00, 29.69it/s] 50%|#####     | 13/26 [00:00<00:00, 32.87it/s] 65%|######5   | 17/26 [00:00<00:00, 35.10it/s] 85%|########4 | 22/26 [00:00<00:00, 37.45it/s]100%|##########| 26/26 [00:00<00:00, 31.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.52 (  0.51)	train_penalty   0.00 (  0.00)	weight_norm  24.77 ( 24.77)	train_acc   0.70 (  0.69)	train_minacc   0.76 (  0.76)	train_majacc   0.68 (  0.68)	train_corr   0.00 (  0.00)	l1 4.2217 (4.2616)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.47it/s] 27%|##6       | 7/26 [00:00<00:00, 35.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.07it/s] 50%|#####     | 13/26 [00:00<00:00, 40.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.79it/s] 96%|#########6| 25/26 [00:00<00:00, 46.29it/s]100%|##########| 26/26 [00:00<00:00, 39.18it/s]
Test: [   0/  26]	Loss 0.512 (0.512)	test_acc   0.68 (  0.68)	test_minacc   0.74 (  0.74)	test_majacc   0.68 (  0.68)	Loss_d 0.512 (0.512)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.47 (  0.47)
Test: [  10/  26]	Loss 0.482 (0.492)	test_acc   0.73 (  0.71)	test_minacc   0.76 (  0.75)	test_majacc   0.73 (  0.70)	Loss_d 0.482 (0.492)	test_acc_d   0.73 (  0.71)	test_minacc_d   0.76 (  0.75)	test_majacc_d   0.73 (  0.70)	test_corr_d   0.52 (  0.49)
Test: [  20/  26]	Loss 0.498 (0.490)	test_acc   0.68 (  0.71)	test_minacc   0.64 (  0.74)	test_majacc   0.69 (  0.70)	Loss_d 0.498 (0.490)	test_acc_d   0.68 (  0.71)	test_minacc_d   0.64 (  0.74)	test_majacc_d   0.69 (  0.70)	test_corr_d   0.51 (  0.49)
Test: [  26/  26]	Loss 0.517 (0.493)	test_acc   0.70 (  0.71)	test_minacc   0.76 (  0.74)	test_majacc   0.68 (  0.70)	Loss_d 0.517 (0.493)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.68 (  0.70)	test_corr_d   0.43 (  0.49)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.72it/s]
Test: [  0/  1]	Loss 0.971 (0.971)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.75 (  0.75)	Loss_d 0.971 (0.971)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 0.971 (0.971)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.75 (  0.75)	Loss_d 0.971 (0.971)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.16 (  0.16)
Overall Timing[ 21/  1]	epoch_time 0.0354 (0.0372)	validation_time 0.0004 (0.0007)	train_time 0.0349 (0.0364)
record: (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7060000366568565, 0.6050000190734863)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.03it/s] 19%|#9        | 5/26 [00:00<00:00, 23.65it/s] 38%|###8      | 10/26 [00:00<00:00, 31.61it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.46it/s] 69%|######9   | 18/26 [00:00<00:00, 36.19it/s] 88%|########8 | 23/26 [00:00<00:00, 37.67it/s]100%|##########| 26/26 [00:00<00:00, 31.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.52 (  0.51)	train_penalty   0.00 (  0.00)	weight_norm  24.77 ( 24.77)	train_acc   0.70 (  0.69)	train_minacc   0.76 (  0.76)	train_majacc   0.69 (  0.68)	train_corr   0.00 (  0.00)	l1 4.2297 (4.2733)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.14it/s] 27%|##6       | 7/26 [00:00<00:00, 35.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.30it/s] 50%|#####     | 13/26 [00:00<00:00, 40.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.80it/s] 96%|#########6| 25/26 [00:00<00:00, 47.75it/s]100%|##########| 26/26 [00:00<00:00, 39.78it/s]
Test: [   0/  26]	Loss 0.511 (0.511)	test_acc   0.68 (  0.68)	test_minacc   0.74 (  0.74)	test_majacc   0.68 (  0.68)	Loss_d 0.511 (0.511)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.48 (  0.48)
Test: [  10/  26]	Loss 0.478 (0.491)	test_acc   0.73 (  0.71)	test_minacc   0.76 (  0.75)	test_majacc   0.73 (  0.70)	Loss_d 0.478 (0.491)	test_acc_d   0.73 (  0.71)	test_minacc_d   0.76 (  0.75)	test_majacc_d   0.73 (  0.70)	test_corr_d   0.53 (  0.50)
Test: [  20/  26]	Loss 0.494 (0.488)	test_acc   0.69 (  0.71)	test_minacc   0.64 (  0.74)	test_majacc   0.70 (  0.70)	Loss_d 0.494 (0.488)	test_acc_d   0.69 (  0.71)	test_minacc_d   0.64 (  0.74)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.52 (  0.50)
Test: [  26/  26]	Loss 0.516 (0.490)	test_acc   0.70 (  0.71)	test_minacc   0.76 (  0.74)	test_majacc   0.69 (  0.70)	Loss_d 0.516 (0.490)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.69 (  0.70)	test_corr_d   0.43 (  0.49)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.67it/s]
Test: [  0/  1]	Loss 0.983 (0.983)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.75 (  0.75)	Loss_d 0.983 (0.983)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 0.983 (0.983)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.75 (  0.75)	Loss_d 0.983 (0.983)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.17 (  0.17)
Overall Timing[ 22/  1]	epoch_time 0.0353 (0.0371)	validation_time 0.0004 (0.0007)	train_time 0.0349 (0.0363)
record: (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7068000333309173, 0.6000000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.08it/s] 19%|#9        | 5/26 [00:00<00:00, 22.53it/s] 35%|###4      | 9/26 [00:00<00:00, 29.21it/s] 50%|#####     | 13/26 [00:00<00:00, 32.64it/s] 65%|######5   | 17/26 [00:00<00:00, 34.83it/s] 85%|########4 | 22/26 [00:00<00:00, 37.23it/s]100%|##########| 26/26 [00:00<00:00, 31.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 4.227841377258301
set z to 4.016449308395385
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.51 (  0.51)	train_penalty   0.00 (  0.00)	weight_norm  24.77 ( 24.77)	train_acc   0.70 (  0.69)	train_minacc   0.76 (  0.76)	train_majacc   0.69 (  0.68)	train_corr   0.00 (  0.00)	l1 4.2312 (4.2824)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.30it/s] 27%|##6       | 7/26 [00:00<00:00, 30.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.64it/s] 50%|#####     | 13/26 [00:00<00:00, 37.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.63it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.63it/s] 96%|#########6| 25/26 [00:00<00:00, 44.48it/s]100%|##########| 26/26 [00:00<00:00, 36.56it/s]
Test: [   0/  26]	Loss 0.509 (0.509)	test_acc   0.68 (  0.68)	test_minacc   0.72 (  0.72)	test_majacc   0.68 (  0.68)	Loss_d 0.509 (0.509)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.48 (  0.48)
Test: [  10/  26]	Loss 0.474 (0.489)	test_acc   0.74 (  0.71)	test_minacc   0.76 (  0.75)	test_majacc   0.73 (  0.70)	Loss_d 0.474 (0.489)	test_acc_d   0.74 (  0.71)	test_minacc_d   0.76 (  0.75)	test_majacc_d   0.73 (  0.70)	test_corr_d   0.53 (  0.50)
Test: [  20/  26]	Loss 0.490 (0.485)	test_acc   0.69 (  0.71)	test_minacc   0.64 (  0.75)	test_majacc   0.70 (  0.70)	Loss_d 0.490 (0.485)	test_acc_d   0.69 (  0.71)	test_minacc_d   0.64 (  0.75)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.52 (  0.50)
Test: [  26/  26]	Loss 0.514 (0.488)	test_acc   0.70 (  0.71)	test_minacc   0.76 (  0.74)	test_majacc   0.69 (  0.70)	Loss_d 0.514 (0.488)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.69 (  0.70)	test_corr_d   0.44 (  0.50)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.63it/s]
Test: [  0/  1]	Loss 0.993 (0.993)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.75 (  0.75)	Loss_d 0.993 (0.993)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.993 (0.993)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.75 (  0.75)	Loss_d 0.993 (0.993)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.18 (  0.18)
Overall Timing[ 23/  1]	epoch_time 0.0359 (0.0370)	validation_time 0.0004 (0.0007)	train_time 0.0354 (0.0363)
record: (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7097000333666802, 0.5980000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.41it/s] 19%|#9        | 5/26 [00:00<00:01, 20.27it/s] 38%|###8      | 10/26 [00:00<00:00, 29.17it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.29it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.96it/s] 96%|#########6| 25/26 [00:00<00:00, 37.72it/s]100%|##########| 26/26 [00:00<00:00, 29.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.51 (  0.51)	train_penalty   0.00 (  0.00)	weight_norm  24.77 ( 24.77)	train_acc   0.70 (  0.69)	train_minacc   0.76 (  0.75)	train_majacc   0.69 (  0.68)	train_corr   0.00 (  0.00)	l1 4.2280 (4.2898)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.03it/s] 31%|###       | 8/26 [00:00<00:00, 40.27it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.27it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.32it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.71it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.71it/s]100%|##########| 26/26 [00:00<00:00, 51.45it/s]100%|##########| 26/26 [00:00<00:00, 42.46it/s]
Test: [   0/  26]	Loss 0.506 (0.506)	test_acc   0.68 (  0.68)	test_minacc   0.74 (  0.74)	test_majacc   0.67 (  0.67)	Loss_d 0.506 (0.506)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.49 (  0.49)
Test: [  10/  26]	Loss 0.470 (0.487)	test_acc   0.74 (  0.71)	test_minacc   0.76 (  0.75)	test_majacc   0.74 (  0.70)	Loss_d 0.470 (0.487)	test_acc_d   0.74 (  0.71)	test_minacc_d   0.76 (  0.75)	test_majacc_d   0.74 (  0.70)	test_corr_d   0.54 (  0.51)
Test: [  20/  26]	Loss 0.486 (0.482)	test_acc   0.70 (  0.71)	test_minacc   0.62 (  0.74)	test_majacc   0.71 (  0.71)	Loss_d 0.486 (0.482)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.62 (  0.74)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.53 (  0.51)
Test: [  26/  26]	Loss 0.512 (0.484)	test_acc   0.70 (  0.71)	test_minacc   0.76 (  0.74)	test_majacc   0.69 (  0.71)	Loss_d 0.512 (0.484)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.69 (  0.71)	test_corr_d   0.45 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.55it/s]
Test: [  0/  1]	Loss 1.002 (1.002)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.76 (  0.76)	Loss_d 1.002 (1.002)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 1.002 (1.002)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.76 (  0.76)	Loss_d 1.002 (1.002)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.19 (  0.19)
Overall Timing[ 24/  1]	epoch_time 0.0340 (0.0369)	validation_time 0.0003 (0.0007)	train_time 0.0337 (0.0362)
record: (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7113000272512436, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 19%|#9        | 5/26 [00:00<00:00, 21.82it/s] 35%|###4      | 9/26 [00:00<00:00, 28.67it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.35it/s] 92%|#########2| 24/26 [00:00<00:00, 37.81it/s]100%|##########| 26/26 [00:00<00:00, 30.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.51 (  0.51)	train_penalty   0.00 (  0.00)	weight_norm  24.77 ( 24.77)	train_acc   0.70 (  0.69)	train_minacc   0.76 (  0.76)	train_majacc   0.69 (  0.68)	train_corr   0.00 (  0.00)	l1 4.2235 (4.2954)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.62it/s] 27%|##6       | 7/26 [00:00<00:00, 30.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.69it/s] 50%|#####     | 13/26 [00:00<00:00, 37.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.96it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.96it/s] 96%|#########6| 25/26 [00:00<00:00, 45.19it/s]100%|##########| 26/26 [00:00<00:00, 36.93it/s]
Test: [   0/  26]	Loss 0.504 (0.504)	test_acc   0.69 (  0.69)	test_minacc   0.74 (  0.74)	test_majacc   0.68 (  0.68)	Loss_d 0.504 (0.504)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.49 (  0.49)
Test: [  10/  26]	Loss 0.466 (0.485)	test_acc   0.74 (  0.71)	test_minacc   0.76 (  0.75)	test_majacc   0.74 (  0.71)	Loss_d 0.466 (0.485)	test_acc_d   0.74 (  0.71)	test_minacc_d   0.76 (  0.75)	test_majacc_d   0.74 (  0.71)	test_corr_d   0.55 (  0.51)
Test: [  20/  26]	Loss 0.481 (0.478)	test_acc   0.70 (  0.72)	test_minacc   0.62 (  0.75)	test_majacc   0.71 (  0.71)	Loss_d 0.481 (0.478)	test_acc_d   0.70 (  0.72)	test_minacc_d   0.62 (  0.75)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.54 (  0.52)
Test: [  26/  26]	Loss 0.509 (0.481)	test_acc   0.70 (  0.72)	test_minacc   0.76 (  0.74)	test_majacc   0.69 (  0.71)	Loss_d 0.509 (0.481)	test_acc_d   0.70 (  0.72)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.69 (  0.71)	test_corr_d   0.45 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.20it/s]
Test: [  0/  1]	Loss 1.010 (1.010)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.76 (  0.76)	Loss_d 1.010 (1.010)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 1.010 (1.010)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.76 (  0.76)	Loss_d 1.010 (1.010)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.20 (  0.20)
Overall Timing[ 25/  1]	epoch_time 0.0360 (0.0369)	validation_time 0.0004 (0.0006)	train_time 0.0356 (0.0361)
record: (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7159000362753868, 0.5950000286102295)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 19%|#9        | 5/26 [00:00<00:00, 24.79it/s] 38%|###8      | 10/26 [00:00<00:00, 32.46it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.92it/s] 88%|########8 | 23/26 [00:00<00:00, 37.71it/s]100%|##########| 26/26 [00:00<00:00, 31.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.51 (  0.50)	train_penalty   0.00 (  0.00)	weight_norm  24.78 ( 24.78)	train_acc   0.70 (  0.69)	train_minacc   0.76 (  0.76)	train_majacc   0.68 (  0.68)	train_corr   0.00 (  0.00)	l1 4.2194 (4.2988)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 27%|##6       | 7/26 [00:00<00:00, 30.70it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.70it/s] 50%|#####     | 13/26 [00:00<00:00, 37.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.19it/s] 96%|#########6| 25/26 [00:00<00:00, 45.66it/s]100%|##########| 26/26 [00:00<00:00, 37.29it/s]
Test: [   0/  26]	Loss 0.503 (0.503)	test_acc   0.69 (  0.69)	test_minacc   0.74 (  0.74)	test_majacc   0.69 (  0.69)	Loss_d 0.503 (0.503)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.463 (0.484)	test_acc   0.74 (  0.72)	test_minacc   0.76 (  0.75)	test_majacc   0.74 (  0.71)	Loss_d 0.463 (0.484)	test_acc_d   0.74 (  0.72)	test_minacc_d   0.76 (  0.75)	test_majacc_d   0.74 (  0.71)	test_corr_d   0.55 (  0.52)
Test: [  20/  26]	Loss 0.477 (0.475)	test_acc   0.70 (  0.72)	test_minacc   0.62 (  0.74)	test_majacc   0.71 (  0.72)	Loss_d 0.477 (0.475)	test_acc_d   0.70 (  0.72)	test_minacc_d   0.62 (  0.74)	test_majacc_d   0.71 (  0.72)	test_corr_d   0.55 (  0.52)
Test: [  26/  26]	Loss 0.508 (0.478)	test_acc   0.70 (  0.72)	test_minacc   0.76 (  0.74)	test_majacc   0.69 (  0.71)	Loss_d 0.508 (0.478)	test_acc_d   0.70 (  0.72)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.69 (  0.71)	test_corr_d   0.46 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.14it/s]
Test: [  0/  1]	Loss 1.018 (1.018)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.76 (  0.76)	Loss_d 1.018 (1.018)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 1.018 (1.018)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.76 (  0.76)	Loss_d 1.018 (1.018)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.21 (  0.21)
Overall Timing[ 26/  1]	epoch_time 0.0346 (0.0368)	validation_time 0.0004 (0.0006)	train_time 0.0342 (0.0361)
record: (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7181000361442565, 0.597000002861023)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.83it/s] 19%|#9        | 5/26 [00:00<00:01, 20.45it/s] 38%|###8      | 10/26 [00:00<00:00, 29.45it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.08it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.58it/s] 96%|#########6| 25/26 [00:00<00:00, 37.57it/s]100%|##########| 26/26 [00:00<00:00, 30.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.51 (  0.50)	train_penalty   0.00 (  0.00)	weight_norm  24.78 ( 24.78)	train_acc   0.69 (  0.69)	train_minacc   0.76 (  0.76)	train_majacc   0.68 (  0.68)	train_corr   0.00 (  0.00)	l1 4.2168 (4.3017)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s] 27%|##6       | 7/26 [00:00<00:00, 31.04it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.04it/s] 50%|#####     | 13/26 [00:00<00:00, 38.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.23it/s] 96%|#########6| 25/26 [00:00<00:00, 46.03it/s]100%|##########| 26/26 [00:00<00:00, 37.82it/s]
Test: [   0/  26]	Loss 0.501 (0.501)	test_acc   0.69 (  0.69)	test_minacc   0.72 (  0.72)	test_majacc   0.68 (  0.68)	Loss_d 0.501 (0.501)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.460 (0.483)	test_acc   0.74 (  0.71)	test_minacc   0.73 (  0.74)	test_majacc   0.74 (  0.71)	Loss_d 0.460 (0.483)	test_acc_d   0.74 (  0.71)	test_minacc_d   0.73 (  0.74)	test_majacc_d   0.74 (  0.71)	test_corr_d   0.56 (  0.52)
Test: [  20/  26]	Loss 0.472 (0.473)	test_acc   0.70 (  0.72)	test_minacc   0.62 (  0.74)	test_majacc   0.72 (  0.72)	Loss_d 0.472 (0.473)	test_acc_d   0.70 (  0.72)	test_minacc_d   0.62 (  0.74)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.55 (  0.53)
Test: [  26/  26]	Loss 0.506 (0.476)	test_acc   0.70 (  0.72)	test_minacc   0.76 (  0.74)	test_majacc   0.68 (  0.72)	Loss_d 0.506 (0.476)	test_acc_d   0.70 (  0.72)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.68 (  0.72)	test_corr_d   0.47 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.99it/s]
Test: [  0/  1]	Loss 1.027 (1.027)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.75 (  0.75)	Loss_d 1.027 (1.027)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 1.027 (1.027)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.75 (  0.75)	Loss_d 1.027 (1.027)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.22 (  0.22)
Overall Timing[ 27/  1]	epoch_time 0.0349 (0.0367)	validation_time 0.0004 (0.0006)	train_time 0.0345 (0.0360)
record: (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7193000347018242, 0.5920000076293945)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.94it/s] 23%|##3       | 6/26 [00:00<00:00, 27.88it/s] 38%|###8      | 10/26 [00:00<00:00, 31.70it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.19it/s] 69%|######9   | 18/26 [00:00<00:00, 34.98it/s] 85%|########4 | 22/26 [00:00<00:00, 36.52it/s]100%|##########| 26/26 [00:00<00:00, 37.14it/s]100%|##########| 26/26 [00:00<00:00, 31.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.51 (  0.50)	train_penalty   0.00 (  0.00)	weight_norm  24.78 ( 24.78)	train_acc   0.69 (  0.70)	train_minacc   0.76 (  0.75)	train_majacc   0.68 (  0.69)	train_corr   0.00 (  0.00)	l1 4.2143 (4.3062)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.19it/s] 27%|##6       | 7/26 [00:00<00:00, 35.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.81it/s] 46%|####6     | 12/26 [00:00<00:00, 40.35it/s] 69%|######9   | 18/26 [00:00<00:00, 45.45it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.45it/s] 92%|#########2| 24/26 [00:00<00:00, 47.83it/s]100%|##########| 26/26 [00:00<00:00, 40.01it/s]
Test: [   0/  26]	Loss 0.499 (0.499)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.70 (  0.70)	Loss_d 0.499 (0.499)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.51 (  0.51)
Test: [  10/  26]	Loss 0.457 (0.482)	test_acc   0.75 (  0.72)	test_minacc   0.73 (  0.73)	test_majacc   0.75 (  0.71)	Loss_d 0.457 (0.482)	test_acc_d   0.75 (  0.72)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.75 (  0.71)	test_corr_d   0.56 (  0.53)
Test: [  20/  26]	Loss 0.466 (0.469)	test_acc   0.71 (  0.72)	test_minacc   0.62 (  0.74)	test_majacc   0.72 (  0.72)	Loss_d 0.466 (0.469)	test_acc_d   0.71 (  0.72)	test_minacc_d   0.62 (  0.74)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.56 (  0.53)
Test: [  26/  26]	Loss 0.504 (0.472)	test_acc   0.70 (  0.72)	test_minacc   0.74 (  0.74)	test_majacc   0.69 (  0.72)	Loss_d 0.504 (0.472)	test_acc_d   0.70 (  0.72)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.69 (  0.72)	test_corr_d   0.47 (  0.53)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.84it/s]
Test: [  0/  1]	Loss 1.037 (1.037)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.77 (  0.77)	Loss_d 1.037 (1.037)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 1.037 (1.037)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.77 (  0.77)	Loss_d 1.037 (1.037)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.23 (  0.23)
Overall Timing[ 28/  1]	epoch_time 0.0339 (0.0366)	validation_time 0.0004 (0.0006)	train_time 0.0334 (0.0359)
record: (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7223000321984291, 0.5940000414848328)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 19%|#9        | 5/26 [00:00<00:01, 20.96it/s] 35%|###4      | 9/26 [00:00<00:00, 28.18it/s] 50%|#####     | 13/26 [00:00<00:00, 32.14it/s] 65%|######5   | 17/26 [00:00<00:00, 34.34it/s] 85%|########4 | 22/26 [00:00<00:00, 36.61it/s]100%|##########| 26/26 [00:00<00:00, 37.53it/s]100%|##########| 26/26 [00:00<00:00, 30.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.50 (  0.50)	train_penalty   0.00 (  0.00)	weight_norm  24.78 ( 24.78)	train_acc   0.70 (  0.70)	train_minacc   0.76 (  0.75)	train_majacc   0.69 (  0.69)	train_corr   0.00 (  0.00)	l1 4.2132 (4.3179)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.04it/s] 27%|##6       | 7/26 [00:00<00:00, 36.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.17it/s] 50%|#####     | 13/26 [00:00<00:00, 42.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.84it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.84it/s] 96%|#########6| 25/26 [00:00<00:00, 47.92it/s]100%|##########| 26/26 [00:00<00:00, 40.61it/s]
Test: [   0/  26]	Loss 0.496 (0.496)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.68)	test_majacc   0.71 (  0.71)	Loss_d 0.496 (0.496)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.51 (  0.51)
Test: [  10/  26]	Loss 0.454 (0.480)	test_acc   0.75 (  0.72)	test_minacc   0.73 (  0.73)	test_majacc   0.75 (  0.72)	Loss_d 0.454 (0.480)	test_acc_d   0.75 (  0.72)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.75 (  0.72)	test_corr_d   0.57 (  0.53)
Test: [  20/  26]	Loss 0.459 (0.466)	test_acc   0.72 (  0.73)	test_minacc   0.64 (  0.74)	test_majacc   0.73 (  0.73)	Loss_d 0.459 (0.466)	test_acc_d   0.72 (  0.73)	test_minacc_d   0.64 (  0.74)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.57 (  0.54)
Test: [  26/  26]	Loss 0.500 (0.468)	test_acc   0.70 (  0.73)	test_minacc   0.74 (  0.74)	test_majacc   0.70 (  0.73)	Loss_d 0.500 (0.468)	test_acc_d   0.70 (  0.73)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.70 (  0.73)	test_corr_d   0.48 (  0.54)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.36it/s]
Test: [  0/  1]	Loss 1.047 (1.047)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.77 (  0.77)	Loss_d 1.047 (1.047)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 1.047 (1.047)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.77 (  0.77)	Loss_d 1.047 (1.047)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.23 (  0.23)
Overall Timing[ 29/  1]	epoch_time 0.0353 (0.0366)	validation_time 0.0003 (0.0006)	train_time 0.0349 (0.0359)
record: (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7274000334739685, 0.593000054359436)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.61it/s] 19%|#9        | 5/26 [00:00<00:01, 19.42it/s] 35%|###4      | 9/26 [00:00<00:00, 26.29it/s] 50%|#####     | 13/26 [00:00<00:00, 30.92it/s] 65%|######5   | 17/26 [00:00<00:00, 33.83it/s] 81%|########  | 21/26 [00:00<00:00, 35.68it/s] 96%|#########6| 25/26 [00:00<00:00, 36.65it/s]100%|##########| 26/26 [00:00<00:00, 29.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.50 (  0.50)	train_penalty   0.00 (  0.00)	weight_norm  24.79 ( 24.79)	train_acc   0.70 (  0.71)	train_minacc   0.76 (  0.76)	train_majacc   0.69 (  0.70)	train_corr   0.00 (  0.00)	l1 4.2264 (4.3389)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 27%|##6       | 7/26 [00:00<00:00, 32.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.03it/s] 50%|#####     | 13/26 [00:00<00:00, 39.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.74it/s] 92%|#########2| 24/26 [00:00<00:00, 47.00it/s]100%|##########| 26/26 [00:00<00:00, 38.33it/s]
Test: [   0/  26]	Loss 0.494 (0.494)	test_acc   0.70 (  0.70)	test_minacc   0.67 (  0.67)	test_majacc   0.71 (  0.71)	Loss_d 0.494 (0.494)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.52 (  0.52)
Test: [  10/  26]	Loss 0.454 (0.481)	test_acc   0.75 (  0.72)	test_minacc   0.73 (  0.73)	test_majacc   0.75 (  0.72)	Loss_d 0.454 (0.481)	test_acc_d   0.75 (  0.72)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.75 (  0.72)	test_corr_d   0.57 (  0.53)
Test: [  20/  26]	Loss 0.452 (0.463)	test_acc   0.73 (  0.73)	test_minacc   0.64 (  0.75)	test_majacc   0.74 (  0.73)	Loss_d 0.452 (0.463)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.64 (  0.75)	test_majacc_d   0.74 (  0.73)	test_corr_d   0.58 (  0.54)
Test: [  26/  26]	Loss 0.497 (0.465)	test_acc   0.71 (  0.73)	test_minacc   0.74 (  0.75)	test_majacc   0.70 (  0.73)	Loss_d 0.497 (0.465)	test_acc_d   0.71 (  0.73)	test_minacc_d   0.74 (  0.75)	test_majacc_d   0.70 (  0.73)	test_corr_d   0.49 (  0.54)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.59it/s]
Test: [  0/  1]	Loss 1.057 (1.057)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.77 (  0.77)	Loss_d 1.057 (1.057)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 1.057 (1.057)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.77 (  0.77)	Loss_d 1.057 (1.057)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.23 (  0.23)
Overall Timing[ 30/  1]	epoch_time 0.0347 (0.0365)	validation_time 0.0004 (0.0006)	train_time 0.0342 (0.0358)
record: (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7323000319004059, 0.597000002861023)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.98it/s] 19%|#9        | 5/26 [00:00<00:01, 20.94it/s] 35%|###4      | 9/26 [00:00<00:00, 27.70it/s] 50%|#####     | 13/26 [00:00<00:00, 31.94it/s] 69%|######9   | 18/26 [00:00<00:00, 35.54it/s] 88%|########8 | 23/26 [00:00<00:00, 37.59it/s]100%|##########| 26/26 [00:00<00:00, 30.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.51 (  0.50)	train_penalty   0.00 (  0.00)	weight_norm  24.80 ( 24.79)	train_acc   0.71 (  0.71)	train_minacc   0.76 (  0.76)	train_majacc   0.70 (  0.70)	train_corr   0.00 (  0.00)	l1 4.2715 (4.3692)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 23%|##3       | 6/26 [00:00<00:00, 32.38it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.38it/s] 46%|####6     | 12/26 [00:00<00:00, 42.79it/s] 65%|######5   | 17/26 [00:00<00:00, 43.10it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.10it/s] 88%|########8 | 23/26 [00:00<00:00, 47.46it/s]100%|##########| 26/26 [00:00<00:00, 39.72it/s]
Test: [   0/  26]	Loss 0.497 (0.497)	test_acc   0.70 (  0.70)	test_minacc   0.67 (  0.67)	test_majacc   0.70 (  0.70)	Loss_d 0.497 (0.497)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.51 (  0.51)
Test: [  10/  26]	Loss 0.459 (0.487)	test_acc   0.74 (  0.72)	test_minacc   0.73 (  0.73)	test_majacc   0.74 (  0.72)	Loss_d 0.459 (0.487)	test_acc_d   0.74 (  0.72)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.74 (  0.72)	test_corr_d   0.57 (  0.53)
Test: [  20/  26]	Loss 0.447 (0.465)	test_acc   0.74 (  0.73)	test_minacc   0.69 (  0.75)	test_majacc   0.75 (  0.73)	Loss_d 0.447 (0.465)	test_acc_d   0.74 (  0.73)	test_minacc_d   0.69 (  0.75)	test_majacc_d   0.75 (  0.73)	test_corr_d   0.58 (  0.54)
Test: [  26/  26]	Loss 0.498 (0.467)	test_acc   0.72 (  0.73)	test_minacc   0.74 (  0.75)	test_majacc   0.71 (  0.73)	Loss_d 0.498 (0.467)	test_acc_d   0.72 (  0.73)	test_minacc_d   0.74 (  0.75)	test_majacc_d   0.71 (  0.73)	test_corr_d   0.49 (  0.54)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.06it/s]
Test: [  0/  1]	Loss 1.069 (1.069)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.78 (  0.78)	Loss_d 1.069 (1.069)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 1.069 (1.069)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.78 (  0.78)	Loss_d 1.069 (1.069)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.23 (  0.23)
Overall Timing[ 31/  1]	epoch_time 0.0352 (0.0365)	validation_time 0.0003 (0.0006)	train_time 0.0348 (0.0358)
record: (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7342000287175179, 0.6020000576972961)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.51it/s] 19%|#9        | 5/26 [00:00<00:00, 21.86it/s] 35%|###4      | 9/26 [00:00<00:00, 28.97it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.44it/s] 92%|#########2| 24/26 [00:00<00:00, 38.19it/s]100%|##########| 26/26 [00:00<00:00, 31.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.001)	train_nll   0.51 (  0.50)	train_penalty   0.00 (  0.00)	weight_norm  24.81 ( 24.80)	train_acc   0.70 (  0.71)	train_minacc   0.79 (  0.76)	train_majacc   0.68 (  0.71)	train_corr   0.00 (  0.00)	l1 4.3701 (4.4191)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.79it/s] 19%|#9        | 5/26 [00:00<00:00, 22.94it/s]                                               19%|#9        | 5/26 [00:00<00:00, 22.94it/s] 42%|####2     | 11/26 [00:00<00:00, 37.34it/s] 62%|######1   | 16/26 [00:00<00:00, 40.38it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.38it/s] 85%|########4 | 22/26 [00:00<00:00, 46.26it/s]100%|##########| 26/26 [00:00<00:00, 36.87it/s]
Test: [   0/  26]	Loss 0.502 (0.502)	test_acc   0.71 (  0.71)	test_minacc   0.72 (  0.72)	test_majacc   0.71 (  0.71)	Loss_d 0.502 (0.502)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.473 (0.498)	test_acc   0.73 (  0.71)	test_minacc   0.76 (  0.74)	test_majacc   0.73 (  0.71)	Loss_d 0.473 (0.498)	test_acc_d   0.73 (  0.71)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.73 (  0.71)	test_corr_d   0.55 (  0.51)
Test: [  20/  26]	Loss 0.445 (0.473)	test_acc   0.74 (  0.73)	test_minacc   0.67 (  0.76)	test_majacc   0.76 (  0.73)	Loss_d 0.445 (0.473)	test_acc_d   0.74 (  0.73)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.76 (  0.73)	test_corr_d   0.57 (  0.53)
Test: [  26/  26]	Loss 0.500 (0.473)	test_acc   0.70 (  0.73)	test_minacc   0.76 (  0.76)	test_majacc   0.69 (  0.73)	Loss_d 0.500 (0.473)	test_acc_d   0.70 (  0.73)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.69 (  0.73)	test_corr_d   0.49 (  0.53)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.00it/s]
Test: [  0/  1]	Loss 1.082 (1.082)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.76 (  0.76)	Loss_d 1.082 (1.082)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 1.082 (1.082)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.76 (  0.76)	Loss_d 1.082 (1.082)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.20 (  0.20)
Overall Timing[ 32/  1]	epoch_time 0.0348 (0.0364)	validation_time 0.0004 (0.0006)	train_time 0.0344 (0.0358)
record: (train_acc, test_acc) (0.6971000381708146, 0.6310000419616699)
last accs (train_acc, test_acc) (0.7329000296592713, 0.6200000047683716)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.70it/s] 19%|#9        | 5/26 [00:00<00:01, 19.56it/s] 35%|###4      | 9/26 [00:00<00:00, 25.85it/s] 50%|#####     | 13/26 [00:00<00:00, 30.14it/s] 65%|######5   | 17/26 [00:00<00:00, 33.07it/s] 81%|########  | 21/26 [00:00<00:00, 34.16it/s] 96%|#########6| 25/26 [00:00<00:00, 35.62it/s]100%|##########| 26/26 [00:00<00:00, 28.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.001 (0.001)	train_nll   0.54 (  0.51)	train_penalty   0.00 (  0.00)	weight_norm  24.83 ( 24.82)	train_acc   0.67 (  0.72)	train_minacc   0.79 (  0.77)	train_majacc   0.65 (  0.71)	train_corr   0.00 (  0.00)	l1 4.6309 (4.5085)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.33it/s] 27%|##6       | 7/26 [00:00<00:00, 34.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.39it/s] 50%|#####     | 13/26 [00:00<00:00, 42.57it/s] 69%|######9   | 18/26 [00:00<00:00, 43.93it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.93it/s] 92%|#########2| 24/26 [00:00<00:00, 48.91it/s]100%|##########| 26/26 [00:00<00:00, 39.95it/s]
Test: [   0/  26]	Loss 0.528 (0.528)	test_acc   0.68 (  0.68)	test_minacc   0.72 (  0.72)	test_majacc   0.68 (  0.68)	Loss_d 0.528 (0.528)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.45 (  0.45)
Test: [  10/  26]	Loss 0.517 (0.533)	test_acc   0.71 (  0.70)	test_minacc   0.78 (  0.74)	test_majacc   0.70 (  0.69)	Loss_d 0.517 (0.533)	test_acc_d   0.71 (  0.70)	test_minacc_d   0.78 (  0.74)	test_majacc_d   0.70 (  0.69)	test_corr_d   0.50 (  0.46)
Test: [  20/  26]	Loss 0.460 (0.506)	test_acc   0.75 (  0.72)	test_minacc   0.71 (  0.76)	test_majacc   0.76 (  0.71)	Loss_d 0.460 (0.506)	test_acc_d   0.75 (  0.72)	test_minacc_d   0.71 (  0.76)	test_majacc_d   0.76 (  0.71)	test_corr_d   0.54 (  0.48)
Test: [  26/  26]	Loss 0.518 (0.502)	test_acc   0.69 (  0.72)	test_minacc   0.79 (  0.77)	test_majacc   0.67 (  0.71)	Loss_d 0.518 (0.502)	test_acc_d   0.69 (  0.72)	test_minacc_d   0.79 (  0.77)	test_majacc_d   0.67 (  0.71)	test_corr_d   0.45 (  0.49)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.91it/s]
Test: [  0/  1]	Loss 1.104 (1.104)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 1.104 (1.104)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.104 (1.104)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 1.104 (1.104)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.15 (  0.15)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/135/checkpoints/model_best.pth
Overall Timing[ 33/  1]	epoch_time 0.0364 (0.0364)	validation_time 0.0004 (0.0006)	train_time 0.0359 (0.0358)
record: (train_acc, test_acc) (0.7206000283956527, 0.6320000290870667)
last accs (train_acc, test_acc) (0.7206000283956527, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 19%|#9        | 5/26 [00:00<00:00, 23.61it/s] 35%|###4      | 9/26 [00:00<00:00, 29.95it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.33it/s] 69%|######9   | 18/26 [00:00<00:00, 35.32it/s] 85%|########4 | 22/26 [00:00<00:00, 36.76it/s]100%|##########| 26/26 [00:00<00:00, 37.31it/s]100%|##########| 26/26 [00:00<00:00, 31.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.001)	train_nll   0.55 (  0.53)	train_penalty   0.00 (  0.00)	weight_norm  24.86 ( 24.85)	train_acc   0.62 (  0.68)	train_minacc   0.84 (  0.70)	train_majacc   0.58 (  0.67)	train_corr   0.00 (  0.00)	l1 4.6673 (4.3945)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.89it/s] 27%|##6       | 7/26 [00:00<00:00, 34.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.88it/s] 50%|#####     | 13/26 [00:00<00:00, 43.03it/s] 69%|######9   | 18/26 [00:00<00:00, 44.02it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.02it/s] 92%|#########2| 24/26 [00:00<00:00, 48.52it/s]100%|##########| 26/26 [00:00<00:00, 40.59it/s]
Test: [   0/  26]	Loss 0.573 (0.573)	test_acc   0.58 (  0.58)	test_minacc   0.79 (  0.79)	test_majacc   0.54 (  0.54)	Loss_d 0.573 (0.573)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.591 (0.584)	test_acc   0.57 (  0.58)	test_minacc   0.76 (  0.74)	test_majacc   0.55 (  0.55)	Loss_d 0.591 (0.584)	test_acc_d   0.57 (  0.58)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.42 (  0.40)
Test: [  20/  26]	Loss 0.531 (0.563)	test_acc   0.61 (  0.60)	test_minacc   0.75 (  0.76)	test_majacc   0.59 (  0.57)	Loss_d 0.531 (0.563)	test_acc_d   0.61 (  0.60)	test_minacc_d   0.75 (  0.76)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.46 (  0.41)
Test: [  26/  26]	Loss 0.552 (0.557)	test_acc   0.61 (  0.61)	test_minacc   0.84 (  0.76)	test_majacc   0.57 (  0.58)	Loss_d 0.552 (0.557)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.84 (  0.76)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.37 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.33it/s]
Test: [  0/  1]	Loss 1.089 (1.089)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.69 (  0.69)	Loss_d 1.089 (1.089)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.089 (1.089)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.69 (  0.69)	Loss_d 1.089 (1.089)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.14 (  0.14)
Overall Timing[ 34/  1]	epoch_time 0.0366 (0.0364)	validation_time 0.0003 (0.0006)	train_time 0.0363 (0.0358)
record: (train_acc, test_acc) (0.7206000283956527, 0.6320000290870667)
last accs (train_acc, test_acc) (0.6054000136852264, 0.6230000257492065)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 19%|#9        | 5/26 [00:00<00:00, 22.51it/s] 38%|###8      | 10/26 [00:00<00:00, 30.62it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.74it/s] 69%|######9   | 18/26 [00:00<00:00, 35.60it/s] 85%|########4 | 22/26 [00:00<00:00, 36.93it/s]100%|##########| 26/26 [00:00<00:00, 37.83it/s]100%|##########| 26/26 [00:00<00:00, 31.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.001 (0.001)	train_nll   0.59 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.88 ( 24.87)	train_acc   0.68 (  0.65)	train_minacc   0.84 (  0.78)	train_majacc   0.66 (  0.62)	train_corr   0.00 (  0.00)	l1 3.8380 (4.1865)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 27%|##6       | 7/26 [00:00<00:00, 31.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.24it/s] 50%|#####     | 13/26 [00:00<00:00, 37.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.75it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.75it/s] 96%|#########6| 25/26 [00:00<00:00, 44.95it/s]100%|##########| 26/26 [00:00<00:00, 37.10it/s]
Test: [   0/  26]	Loss 0.607 (0.607)	test_acc   0.63 (  0.63)	test_minacc   0.77 (  0.77)	test_majacc   0.61 (  0.61)	Loss_d 0.607 (0.607)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.614 (0.602)	test_acc   0.67 (  0.65)	test_minacc   0.80 (  0.79)	test_majacc   0.65 (  0.63)	Loss_d 0.614 (0.602)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.80 (  0.79)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.32 (  0.30)
Test: [  20/  26]	Loss 0.594 (0.596)	test_acc   0.67 (  0.66)	test_minacc   0.78 (  0.80)	test_majacc   0.65 (  0.63)	Loss_d 0.594 (0.596)	test_acc_d   0.67 (  0.66)	test_minacc_d   0.78 (  0.80)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.33 (  0.31)
Test: [  26/  26]	Loss 0.598 (0.596)	test_acc   0.68 (  0.66)	test_minacc   0.84 (  0.80)	test_majacc   0.66 (  0.63)	Loss_d 0.598 (0.596)	test_acc_d   0.68 (  0.66)	test_minacc_d   0.84 (  0.80)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.29 (  0.31)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.11it/s]
Test: [  0/  1]	Loss 0.858 (0.858)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.67 (  0.67)	Loss_d 0.858 (0.858)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.858 (0.858)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.67 (  0.67)	Loss_d 0.858 (0.858)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.04 ( -0.04)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/135/checkpoints/model_best.pth
Overall Timing[ 35/  1]	epoch_time 0.0362 (0.0364)	validation_time 0.0004 (0.0006)	train_time 0.0357 (0.0358)
record: (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
last accs (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 19%|#9        | 5/26 [00:00<00:00, 23.10it/s] 35%|###4      | 9/26 [00:00<00:00, 29.07it/s] 50%|#####     | 13/26 [00:00<00:00, 32.43it/s] 65%|######5   | 17/26 [00:00<00:00, 34.91it/s] 85%|########4 | 22/26 [00:00<00:00, 37.16it/s]100%|##########| 26/26 [00:00<00:00, 38.01it/s]100%|##########| 26/26 [00:00<00:00, 30.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.001)	train_nll   0.59 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  24.89 ( 24.88)	train_acc   0.68 (  0.64)	train_minacc   0.79 (  0.77)	train_majacc   0.66 (  0.62)	train_corr   0.00 (  0.00)	l1 3.8847 (3.9221)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.66it/s] 27%|##6       | 7/26 [00:00<00:00, 33.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.29it/s] 50%|#####     | 13/26 [00:00<00:00, 39.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.57it/s] 96%|#########6| 25/26 [00:00<00:00, 45.98it/s]100%|##########| 26/26 [00:00<00:00, 38.79it/s]
Test: [   0/  26]	Loss 0.576 (0.576)	test_acc   0.65 (  0.65)	test_minacc   0.61 (  0.61)	test_majacc   0.65 (  0.65)	Loss_d 0.576 (0.576)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.40 (  0.40)
Test: [  10/  26]	Loss 0.586 (0.574)	test_acc   0.66 (  0.66)	test_minacc   0.76 (  0.70)	test_majacc   0.65 (  0.65)	Loss_d 0.586 (0.574)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.76 (  0.70)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.39 (  0.40)
Test: [  20/  26]	Loss 0.577 (0.570)	test_acc   0.66 (  0.67)	test_minacc   0.65 (  0.71)	test_majacc   0.66 (  0.66)	Loss_d 0.577 (0.570)	test_acc_d   0.66 (  0.67)	test_minacc_d   0.65 (  0.71)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.42 (  0.40)
Test: [  26/  26]	Loss 0.588 (0.571)	test_acc   0.68 (  0.67)	test_minacc   0.79 (  0.70)	test_majacc   0.66 (  0.66)	Loss_d 0.588 (0.571)	test_acc_d   0.68 (  0.67)	test_minacc_d   0.79 (  0.70)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.38 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.36it/s]
Test: [  0/  1]	Loss 0.906 (0.906)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.75 (  0.75)	Loss_d 0.906 (0.906)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 0.906 (0.906)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.75 (  0.75)	Loss_d 0.906 (0.906)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.14 (  0.14)
Overall Timing[ 36/  1]	epoch_time 0.0343 (0.0364)	validation_time 0.0004 (0.0006)	train_time 0.0339 (0.0357)
record: (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
last accs (train_acc, test_acc) (0.6674000241756439, 0.628000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.81it/s] 19%|#9        | 5/26 [00:00<00:00, 25.64it/s] 35%|###4      | 9/26 [00:00<00:00, 31.73it/s] 50%|#####     | 13/26 [00:00<00:00, 34.88it/s] 65%|######5   | 17/26 [00:00<00:00, 36.64it/s] 81%|########  | 21/26 [00:00<00:00, 37.47it/s] 96%|#########6| 25/26 [00:00<00:00, 38.09it/s]100%|##########| 26/26 [00:00<00:00, 32.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.001)	train_nll   0.61 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  24.89 ( 24.89)	train_acc   0.64 (  0.65)	train_minacc   0.79 (  0.68)	train_majacc   0.61 (  0.65)	train_corr   0.00 (  0.00)	l1 3.9793 (3.9315)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 27%|##6       | 7/26 [00:00<00:00, 34.34it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.34it/s] 50%|#####     | 13/26 [00:00<00:00, 39.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.52it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.52it/s] 96%|#########6| 25/26 [00:00<00:00, 46.21it/s]100%|##########| 26/26 [00:00<00:00, 39.19it/s]
Test: [   0/  26]	Loss 0.621 (0.621)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.59 (  0.59)	Loss_d 0.621 (0.621)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.616 (0.607)	test_acc   0.63 (  0.63)	test_minacc   0.73 (  0.69)	test_majacc   0.61 (  0.61)	Loss_d 0.616 (0.607)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.73 (  0.69)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.29 (  0.31)
Test: [  20/  26]	Loss 0.610 (0.604)	test_acc   0.62 (  0.63)	test_minacc   0.67 (  0.70)	test_majacc   0.61 (  0.62)	Loss_d 0.610 (0.604)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.67 (  0.70)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.32 (  0.31)
Test: [  26/  26]	Loss 0.613 (0.605)	test_acc   0.63 (  0.63)	test_minacc   0.79 (  0.70)	test_majacc   0.60 (  0.62)	Loss_d 0.613 (0.605)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.79 (  0.70)	test_majacc_d   0.60 (  0.62)	test_corr_d   0.25 (  0.31)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.74it/s]
Test: [  0/  1]	Loss 0.862 (0.862)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.71 (  0.71)	Loss_d 0.862 (0.862)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.862 (0.862)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.71 (  0.71)	Loss_d 0.862 (0.862)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.07 (  0.07)
Overall Timing[ 37/  1]	epoch_time 0.0353 (0.0363)	validation_time 0.0003 (0.0006)	train_time 0.0349 (0.0357)
record: (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
last accs (train_acc, test_acc) (0.6301000094413758, 0.6220000386238098)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 19%|#9        | 5/26 [00:00<00:00, 25.25it/s] 35%|###4      | 9/26 [00:00<00:00, 31.41it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.22it/s] 88%|########8 | 23/26 [00:00<00:00, 37.87it/s]100%|##########| 26/26 [00:00<00:00, 31.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  24.90 ( 24.89)	train_acc   0.55 (  0.63)	train_minacc   0.79 (  0.71)	train_majacc   0.50 (  0.62)	train_corr   0.00 (  0.00)	l1 4.0041 (3.9061)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s] 31%|###       | 8/26 [00:00<00:00, 40.93it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.93it/s] 50%|#####     | 13/26 [00:00<00:00, 42.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.47it/s] 96%|#########6| 25/26 [00:00<00:00, 48.69it/s]100%|##########| 26/26 [00:00<00:00, 41.24it/s]
Test: [   0/  26]	Loss 0.632 (0.632)	test_acc   0.57 (  0.57)	test_minacc   0.65 (  0.65)	test_majacc   0.56 (  0.56)	Loss_d 0.632 (0.632)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.639 (0.624)	test_acc   0.60 (  0.60)	test_minacc   0.76 (  0.71)	test_majacc   0.58 (  0.59)	Loss_d 0.639 (0.624)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.76 (  0.71)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.25 (  0.27)
Test: [  20/  26]	Loss 0.618 (0.621)	test_acc   0.59 (  0.60)	test_minacc   0.65 (  0.72)	test_majacc   0.58 (  0.58)	Loss_d 0.618 (0.621)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.65 (  0.72)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.28 (  0.27)
Test: [  26/  26]	Loss 0.624 (0.620)	test_acc   0.55 (  0.60)	test_minacc   0.79 (  0.72)	test_majacc   0.50 (  0.58)	Loss_d 0.624 (0.620)	test_acc_d   0.55 (  0.60)	test_minacc_d   0.79 (  0.72)	test_majacc_d   0.50 (  0.58)	test_corr_d   0.21 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.13it/s]
Test: [  0/  1]	Loss 0.873 (0.873)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.70 (  0.70)	Loss_d 0.873 (0.873)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.873 (0.873)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.70 (  0.70)	Loss_d 0.873 (0.873)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.05 (  0.05)
Overall Timing[ 38/  1]	epoch_time 0.0341 (0.0363)	validation_time 0.0004 (0.0006)	train_time 0.0337 (0.0357)
record: (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
last accs (train_acc, test_acc) (0.6034000041484833, 0.6500000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.10it/s] 19%|#9        | 5/26 [00:00<00:00, 26.07it/s] 35%|###4      | 9/26 [00:00<00:00, 32.19it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.01it/s] 69%|######9   | 18/26 [00:00<00:00, 37.06it/s] 88%|########8 | 23/26 [00:00<00:00, 38.35it/s]100%|##########| 26/26 [00:00<00:00, 32.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  24.90 ( 24.90)	train_acc   0.61 (  0.63)	train_minacc   0.76 (  0.70)	train_majacc   0.58 (  0.62)	train_corr   0.00 (  0.00)	l1 4.0376 (3.9149)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.23it/s] 27%|##6       | 7/26 [00:00<00:00, 32.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.64it/s] 46%|####6     | 12/26 [00:00<00:00, 39.00it/s] 65%|######5   | 17/26 [00:00<00:00, 41.82it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.82it/s] 88%|########8 | 23/26 [00:00<00:00, 46.74it/s]100%|##########| 26/26 [00:00<00:00, 38.21it/s]
Test: [   0/  26]	Loss 0.626 (0.626)	test_acc   0.59 (  0.59)	test_minacc   0.63 (  0.63)	test_majacc   0.59 (  0.59)	Loss_d 0.626 (0.626)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.635 (0.621)	test_acc   0.61 (  0.62)	test_minacc   0.73 (  0.68)	test_majacc   0.59 (  0.61)	Loss_d 0.635 (0.621)	test_acc_d   0.61 (  0.62)	test_minacc_d   0.73 (  0.68)	test_majacc_d   0.59 (  0.61)	test_corr_d   0.26 (  0.28)
Test: [  20/  26]	Loss 0.623 (0.621)	test_acc   0.62 (  0.62)	test_minacc   0.69 (  0.70)	test_majacc   0.60 (  0.60)	Loss_d 0.623 (0.621)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.69 (  0.70)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.28 (  0.28)
Test: [  26/  26]	Loss 0.628 (0.620)	test_acc   0.60 (  0.62)	test_minacc   0.76 (  0.69)	test_majacc   0.57 (  0.60)	Loss_d 0.628 (0.620)	test_acc_d   0.60 (  0.62)	test_minacc_d   0.76 (  0.69)	test_majacc_d   0.57 (  0.60)	test_corr_d   0.23 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.69it/s]
Test: [  0/  1]	Loss 0.877 (0.877)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.69 (  0.69)	Loss_d 0.877 (0.877)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.877 (0.877)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.69 (  0.69)	Loss_d 0.877 (0.877)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.08 (  0.08)
Overall Timing[ 39/  1]	epoch_time 0.0343 (0.0362)	validation_time 0.0003 (0.0006)	train_time 0.0339 (0.0356)
record: (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
last accs (train_acc, test_acc) (0.6162000089287758, 0.6200000047683716)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 19%|#9        | 5/26 [00:00<00:00, 24.28it/s] 35%|###4      | 9/26 [00:00<00:00, 30.76it/s] 50%|#####     | 13/26 [00:00<00:00, 33.64it/s] 65%|######5   | 17/26 [00:00<00:00, 35.06it/s] 85%|########4 | 22/26 [00:00<00:00, 37.15it/s]100%|##########| 26/26 [00:00<00:00, 31.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  24.90 ( 24.90)	train_acc   0.53 (  0.61)	train_minacc   0.76 (  0.69)	train_majacc   0.49 (  0.60)	train_corr   0.00 (  0.00)	l1 3.9618 (3.9116)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.83it/s] 31%|###       | 8/26 [00:00<00:00, 41.25it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.25it/s] 50%|#####     | 13/26 [00:00<00:00, 43.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.05it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.05it/s] 96%|#########6| 25/26 [00:00<00:00, 48.04it/s]100%|##########| 26/26 [00:00<00:00, 41.65it/s]
Test: [   0/  26]	Loss 0.621 (0.621)	test_acc   0.56 (  0.56)	test_minacc   0.67 (  0.67)	test_majacc   0.54 (  0.54)	Loss_d 0.621 (0.621)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.30 (  0.30)
Test: [  10/  26]	Loss 0.635 (0.618)	test_acc   0.56 (  0.58)	test_minacc   0.73 (  0.68)	test_majacc   0.54 (  0.56)	Loss_d 0.635 (0.618)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.73 (  0.68)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.26 (  0.30)
Test: [  20/  26]	Loss 0.626 (0.620)	test_acc   0.53 (  0.57)	test_minacc   0.69 (  0.70)	test_majacc   0.50 (  0.54)	Loss_d 0.626 (0.620)	test_acc_d   0.53 (  0.57)	test_minacc_d   0.69 (  0.70)	test_majacc_d   0.50 (  0.54)	test_corr_d   0.28 (  0.29)
Test: [  26/  26]	Loss 0.623 (0.619)	test_acc   0.53 (  0.57)	test_minacc   0.76 (  0.70)	test_majacc   0.49 (  0.55)	Loss_d 0.623 (0.619)	test_acc_d   0.53 (  0.57)	test_minacc_d   0.76 (  0.70)	test_majacc_d   0.49 (  0.55)	test_corr_d   0.24 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.21it/s]
Test: [  0/  1]	Loss 0.880 (0.880)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.68 (  0.68)	Loss_d 0.880 (0.880)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.880 (0.880)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.68 (  0.68)	Loss_d 0.880 (0.880)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.10 (  0.10)
Overall Timing[ 40/  1]	epoch_time 0.0344 (0.0362)	validation_time 0.0004 (0.0005)	train_time 0.0340 (0.0356)
record: (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
last accs (train_acc, test_acc) (0.5684000156521797, 0.6310000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.41it/s] 23%|##3       | 6/26 [00:00<00:00, 27.73it/s] 42%|####2     | 11/26 [00:00<00:00, 33.41it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.64it/s] 88%|########8 | 23/26 [00:00<00:00, 36.67it/s]100%|##########| 26/26 [00:00<00:00, 32.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.61 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  24.91 ( 24.90)	train_acc   0.63 (  0.60)	train_minacc   0.74 (  0.68)	train_majacc   0.61 (  0.58)	train_corr   0.00 (  0.00)	l1 3.8561 (3.8928)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.91it/s] 31%|###       | 8/26 [00:00<00:00, 41.23it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.23it/s] 50%|#####     | 13/26 [00:00<00:00, 43.55it/s] 69%|######9   | 18/26 [00:00<00:00, 45.96it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.96it/s] 92%|#########2| 24/26 [00:00<00:00, 49.93it/s]100%|##########| 26/26 [00:00<00:00, 41.79it/s]
Test: [   0/  26]	Loss 0.599 (0.599)	test_acc   0.64 (  0.64)	test_minacc   0.58 (  0.58)	test_majacc   0.65 (  0.65)	Loss_d 0.599 (0.599)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.607 (0.596)	test_acc   0.63 (  0.63)	test_minacc   0.67 (  0.65)	test_majacc   0.62 (  0.63)	Loss_d 0.607 (0.596)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.67 (  0.65)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.34 (  0.37)
Test: [  20/  26]	Loss 0.612 (0.600)	test_acc   0.60 (  0.63)	test_minacc   0.65 (  0.67)	test_majacc   0.59 (  0.62)	Loss_d 0.612 (0.600)	test_acc_d   0.60 (  0.63)	test_minacc_d   0.65 (  0.67)	test_majacc_d   0.59 (  0.62)	test_corr_d   0.35 (  0.36)
Test: [  26/  26]	Loss 0.613 (0.600)	test_acc   0.62 (  0.63)	test_minacc   0.74 (  0.66)	test_majacc   0.60 (  0.62)	Loss_d 0.613 (0.600)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.74 (  0.66)	test_majacc_d   0.60 (  0.62)	test_corr_d   0.31 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.83it/s]
Test: [  0/  1]	Loss 0.899 (0.899)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.69 (  0.69)	Loss_d 0.899 (0.899)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.899 (0.899)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.69 (  0.69)	Loss_d 0.899 (0.899)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.18 (  0.18)
Overall Timing[ 41/  1]	epoch_time 0.0352 (0.0362)	validation_time 0.0004 (0.0005)	train_time 0.0347 (0.0356)
record: (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
last accs (train_acc, test_acc) (0.6290000056028366, 0.6010000109672546)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.54it/s] 19%|#9        | 5/26 [00:00<00:00, 25.56it/s] 35%|###4      | 9/26 [00:00<00:00, 31.68it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.44it/s] 88%|########8 | 23/26 [00:00<00:00, 38.20it/s]100%|##########| 26/26 [00:00<00:00, 32.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  24.91 ( 24.91)	train_acc   0.52 (  0.59)	train_minacc   0.74 (  0.67)	train_majacc   0.48 (  0.58)	train_corr   0.00 (  0.00)	l1 3.7737 (3.8846)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 27%|##6       | 7/26 [00:00<00:00, 33.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.68it/s] 50%|#####     | 13/26 [00:00<00:00, 40.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.35it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.35it/s] 96%|#########6| 25/26 [00:00<00:00, 47.27it/s]100%|##########| 26/26 [00:00<00:00, 39.08it/s]
Test: [   0/  26]	Loss 0.608 (0.608)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.60)	test_majacc   0.49 (  0.49)	Loss_d 0.608 (0.608)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.618 (0.603)	test_acc   0.50 (  0.53)	test_minacc   0.58 (  0.64)	test_majacc   0.49 (  0.50)	Loss_d 0.618 (0.603)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.58 (  0.64)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.33 (  0.35)
Test: [  20/  26]	Loss 0.613 (0.607)	test_acc   0.47 (  0.51)	test_minacc   0.69 (  0.64)	test_majacc   0.44 (  0.49)	Loss_d 0.613 (0.607)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.69 (  0.64)	test_majacc_d   0.44 (  0.49)	test_corr_d   0.32 (  0.34)
Test: [  26/  26]	Loss 0.620 (0.607)	test_acc   0.51 (  0.51)	test_minacc   0.74 (  0.64)	test_majacc   0.47 (  0.49)	Loss_d 0.620 (0.607)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.74 (  0.64)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.28 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.24it/s]
Test: [  0/  1]	Loss 0.898 (0.898)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.64 (  0.64)	Loss_d 0.898 (0.898)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.898 (0.898)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.64 (  0.64)	Loss_d 0.898 (0.898)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.15 (  0.15)
Overall Timing[ 42/  1]	epoch_time 0.0361 (0.0362)	validation_time 0.0003 (0.0005)	train_time 0.0357 (0.0356)
record: (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
last accs (train_acc, test_acc) (0.5146000090539455, 0.5850000381469727)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.31it/s] 23%|##3       | 6/26 [00:00<00:00, 27.09it/s] 42%|####2     | 11/26 [00:00<00:00, 33.18it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.50it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.00it/s] 96%|#########6| 25/26 [00:00<00:00, 39.36it/s]100%|##########| 26/26 [00:00<00:00, 33.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  24.91 ( 24.91)	train_acc   0.63 (  0.55)	train_minacc   0.74 (  0.65)	train_majacc   0.61 (  0.53)	train_corr   0.00 (  0.00)	l1 3.7794 (3.8140)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.98it/s] 27%|##6       | 7/26 [00:00<00:00, 29.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.22it/s] 50%|#####     | 13/26 [00:00<00:00, 37.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.87it/s] 96%|#########6| 25/26 [00:00<00:00, 46.76it/s]100%|##########| 26/26 [00:00<00:00, 37.04it/s]
Test: [   0/  26]	Loss 0.606 (0.606)	test_acc   0.62 (  0.62)	test_minacc   0.56 (  0.56)	test_majacc   0.63 (  0.63)	Loss_d 0.606 (0.606)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.597 (0.595)	test_acc   0.65 (  0.64)	test_minacc   0.69 (  0.65)	test_majacc   0.65 (  0.64)	Loss_d 0.597 (0.595)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.69 (  0.65)	test_majacc_d   0.65 (  0.64)	test_corr_d   0.35 (  0.37)
Test: [  20/  26]	Loss 0.613 (0.599)	test_acc   0.61 (  0.64)	test_minacc   0.69 (  0.67)	test_majacc   0.59 (  0.63)	Loss_d 0.613 (0.599)	test_acc_d   0.61 (  0.64)	test_minacc_d   0.69 (  0.67)	test_majacc_d   0.59 (  0.63)	test_corr_d   0.34 (  0.36)
Test: [  26/  26]	Loss 0.620 (0.600)	test_acc   0.63 (  0.64)	test_minacc   0.74 (  0.66)	test_majacc   0.61 (  0.63)	Loss_d 0.620 (0.600)	test_acc_d   0.63 (  0.64)	test_minacc_d   0.74 (  0.66)	test_majacc_d   0.61 (  0.63)	test_corr_d   0.30 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.18it/s]
Test: [  0/  1]	Loss 0.884 (0.884)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.74 (  0.74)	Loss_d 0.884 (0.884)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.884 (0.884)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.74 (  0.74)	Loss_d 0.884 (0.884)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.18 (  0.18)
Overall Timing[ 43/  1]	epoch_time 0.0339 (0.0361)	validation_time 0.0004 (0.0005)	train_time 0.0335 (0.0355)
record: (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
last accs (train_acc, test_acc) (0.6357000054121017, 0.597000002861023)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.65it/s] 23%|##3       | 6/26 [00:00<00:00, 28.81it/s] 38%|###8      | 10/26 [00:00<00:00, 33.17it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.53it/s] 69%|######9   | 18/26 [00:00<00:00, 36.97it/s] 85%|########4 | 22/26 [00:00<00:00, 36.87it/s]100%|##########| 26/26 [00:00<00:00, 37.42it/s]100%|##########| 26/26 [00:00<00:00, 32.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.61 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  24.91 ( 24.91)	train_acc   0.53 (  0.61)	train_minacc   0.82 (  0.68)	train_majacc   0.48 (  0.60)	train_corr   0.00 (  0.00)	l1 3.7551 (3.8245)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.81it/s] 27%|##6       | 7/26 [00:00<00:00, 36.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.26it/s] 50%|#####     | 13/26 [00:00<00:00, 40.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.62it/s] 96%|#########6| 25/26 [00:00<00:00, 46.74it/s]100%|##########| 26/26 [00:00<00:00, 39.80it/s]
Test: [   0/  26]	Loss 0.613 (0.613)	test_acc   0.51 (  0.51)	test_minacc   0.65 (  0.65)	test_majacc   0.49 (  0.49)	Loss_d 0.613 (0.613)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.608 (0.602)	test_acc   0.54 (  0.55)	test_minacc   0.69 (  0.69)	test_majacc   0.52 (  0.53)	Loss_d 0.608 (0.602)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.33 (  0.35)
Test: [  20/  26]	Loss 0.612 (0.604)	test_acc   0.48 (  0.55)	test_minacc   0.73 (  0.71)	test_majacc   0.44 (  0.52)	Loss_d 0.612 (0.604)	test_acc_d   0.48 (  0.55)	test_minacc_d   0.73 (  0.71)	test_majacc_d   0.44 (  0.52)	test_corr_d   0.32 (  0.34)
Test: [  26/  26]	Loss 0.616 (0.605)	test_acc   0.52 (  0.55)	test_minacc   0.79 (  0.70)	test_majacc   0.48 (  0.52)	Loss_d 0.616 (0.605)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.79 (  0.70)	test_majacc_d   0.48 (  0.52)	test_corr_d   0.27 (  0.33)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 0.882 (0.882)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.67 (  0.67)	Loss_d 0.882 (0.882)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 0.882 (0.882)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.67 (  0.67)	Loss_d 0.882 (0.882)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.14 (  0.14)
Overall Timing[ 44/  1]	epoch_time 0.0359 (0.0361)	validation_time 0.0003 (0.0005)	train_time 0.0356 (0.0355)
record: (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
last accs (train_acc, test_acc) (0.5460000136196613, 0.6410000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.47it/s] 19%|#9        | 5/26 [00:00<00:00, 24.72it/s] 35%|###4      | 9/26 [00:00<00:00, 30.61it/s] 50%|#####     | 13/26 [00:00<00:00, 32.96it/s] 65%|######5   | 17/26 [00:00<00:00, 34.93it/s] 85%|########4 | 22/26 [00:00<00:00, 36.95it/s]100%|##########| 26/26 [00:00<00:00, 31.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  24.91 ( 24.91)	train_acc   0.53 (  0.52)	train_minacc   0.76 (  0.70)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 3.7771 (3.8273)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.29it/s] 27%|##6       | 7/26 [00:00<00:00, 27.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.50it/s] 50%|#####     | 13/26 [00:00<00:00, 37.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.15it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.15it/s] 96%|#########6| 25/26 [00:00<00:00, 46.02it/s]100%|##########| 26/26 [00:00<00:00, 36.56it/s]
Test: [   0/  26]	Loss 0.609 (0.609)	test_acc   0.55 (  0.55)	test_minacc   0.67 (  0.67)	test_majacc   0.53 (  0.53)	Loss_d 0.609 (0.609)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.34 (  0.34)
Test: [  10/  26]	Loss 0.600 (0.598)	test_acc   0.57 (  0.59)	test_minacc   0.69 (  0.69)	test_majacc   0.55 (  0.57)	Loss_d 0.600 (0.598)	test_acc_d   0.57 (  0.59)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.35 (  0.36)
Test: [  20/  26]	Loss 0.608 (0.599)	test_acc   0.50 (  0.58)	test_minacc   0.69 (  0.70)	test_majacc   0.47 (  0.56)	Loss_d 0.608 (0.599)	test_acc_d   0.50 (  0.58)	test_minacc_d   0.69 (  0.70)	test_majacc_d   0.47 (  0.56)	test_corr_d   0.34 (  0.35)
Test: [  26/  26]	Loss 0.622 (0.600)	test_acc   0.54 (  0.58)	test_minacc   0.74 (  0.70)	test_majacc   0.50 (  0.56)	Loss_d 0.622 (0.600)	test_acc_d   0.54 (  0.58)	test_minacc_d   0.74 (  0.70)	test_majacc_d   0.50 (  0.56)	test_corr_d   0.28 (  0.35)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.76it/s]
Test: [  0/  1]	Loss 0.900 (0.900)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.70 (  0.70)	Loss_d 0.900 (0.900)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.900 (0.900)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.70 (  0.70)	Loss_d 0.900 (0.900)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.18 (  0.18)
Overall Timing[ 45/  1]	epoch_time 0.0347 (0.0361)	validation_time 0.0004 (0.0005)	train_time 0.0343 (0.0355)
record: (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
last accs (train_acc, test_acc) (0.5801000142097473, 0.628000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.63it/s] 19%|#9        | 5/26 [00:00<00:00, 23.90it/s] 35%|###4      | 9/26 [00:00<00:00, 30.28it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.88it/s] 69%|######9   | 18/26 [00:00<00:00, 36.47it/s] 88%|########8 | 23/26 [00:00<00:00, 38.30it/s]100%|##########| 26/26 [00:00<00:00, 31.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  24.91 ( 24.91)	train_acc   0.54 (  0.58)	train_minacc   0.82 (  0.70)	train_majacc   0.49 (  0.55)	train_corr   0.00 (  0.00)	l1 3.8344 (3.8505)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.84it/s] 27%|##6       | 7/26 [00:00<00:00, 31.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.57it/s] 50%|#####     | 13/26 [00:00<00:00, 38.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.79it/s] 96%|#########6| 25/26 [00:00<00:00, 45.67it/s]100%|##########| 26/26 [00:00<00:00, 37.58it/s]
Test: [   0/  26]	Loss 0.617 (0.617)	test_acc   0.51 (  0.51)	test_minacc   0.63 (  0.63)	test_majacc   0.48 (  0.48)	Loss_d 0.617 (0.617)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.606 (0.605)	test_acc   0.55 (  0.57)	test_minacc   0.69 (  0.69)	test_majacc   0.54 (  0.55)	Loss_d 0.606 (0.605)	test_acc_d   0.55 (  0.57)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.33 (  0.34)
Test: [  20/  26]	Loss 0.610 (0.604)	test_acc   0.49 (  0.56)	test_minacc   0.71 (  0.70)	test_majacc   0.46 (  0.54)	Loss_d 0.610 (0.604)	test_acc_d   0.49 (  0.56)	test_minacc_d   0.71 (  0.70)	test_majacc_d   0.46 (  0.54)	test_corr_d   0.32 (  0.33)
Test: [  26/  26]	Loss 0.619 (0.605)	test_acc   0.54 (  0.56)	test_minacc   0.82 (  0.70)	test_majacc   0.49 (  0.54)	Loss_d 0.619 (0.605)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.82 (  0.70)	test_majacc_d   0.49 (  0.54)	test_corr_d   0.26 (  0.33)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.31it/s]
Test: [  0/  1]	Loss 0.896 (0.896)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.68 (  0.68)	Loss_d 0.896 (0.896)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.896 (0.896)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.68 (  0.68)	Loss_d 0.896 (0.896)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.15 (  0.15)
Overall Timing[ 46/  1]	epoch_time 0.0361 (0.0361)	validation_time 0.0004 (0.0005)	train_time 0.0357 (0.0355)
record: (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
last accs (train_acc, test_acc) (0.561900013178587, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.88it/s] 19%|#9        | 5/26 [00:00<00:01, 20.98it/s] 38%|###8      | 10/26 [00:00<00:00, 29.59it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.29it/s] 92%|#########2| 24/26 [00:00<00:00, 37.65it/s]100%|##########| 26/26 [00:00<00:00, 30.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  24.91 ( 24.91)	train_acc   0.51 (  0.55)	train_minacc   0.79 (  0.71)	train_majacc   0.46 (  0.52)	train_corr   0.00 (  0.00)	l1 3.9519 (3.8606)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.73it/s] 31%|###       | 8/26 [00:00<00:00, 40.13it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.13it/s] 50%|#####     | 13/26 [00:00<00:00, 40.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.68it/s] 96%|#########6| 25/26 [00:00<00:00, 46.20it/s]100%|##########| 26/26 [00:00<00:00, 40.32it/s]
Test: [   0/  26]	Loss 0.620 (0.620)	test_acc   0.49 (  0.49)	test_minacc   0.65 (  0.65)	test_majacc   0.47 (  0.47)	Loss_d 0.620 (0.620)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.30 (  0.30)
Test: [  10/  26]	Loss 0.614 (0.611)	test_acc   0.53 (  0.54)	test_minacc   0.71 (  0.70)	test_majacc   0.50 (  0.51)	Loss_d 0.614 (0.611)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.71 (  0.70)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.31 (  0.32)
Test: [  20/  26]	Loss 0.611 (0.610)	test_acc   0.49 (  0.53)	test_minacc   0.75 (  0.72)	test_majacc   0.44 (  0.50)	Loss_d 0.611 (0.610)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.75 (  0.72)	test_majacc_d   0.44 (  0.50)	test_corr_d   0.31 (  0.31)
Test: [  26/  26]	Loss 0.627 (0.610)	test_acc   0.51 (  0.54)	test_minacc   0.79 (  0.71)	test_majacc   0.46 (  0.50)	Loss_d 0.627 (0.610)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.79 (  0.71)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.25 (  0.31)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.00it/s]
Test: [  0/  1]	Loss 0.912 (0.912)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.67 (  0.67)	Loss_d 0.912 (0.912)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 0.912 (0.912)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.67 (  0.67)	Loss_d 0.912 (0.912)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.13 (  0.13)
Overall Timing[ 47/  1]	epoch_time 0.0359 (0.0361)	validation_time 0.0003 (0.0005)	train_time 0.0356 (0.0355)
record: (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
last accs (train_acc, test_acc) (0.5353000113070011, 0.6350000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.69it/s] 23%|##3       | 6/26 [00:00<00:00, 27.75it/s] 38%|###8      | 10/26 [00:00<00:00, 32.65it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.38it/s] 69%|######9   | 18/26 [00:00<00:00, 36.92it/s] 88%|########8 | 23/26 [00:00<00:00, 37.98it/s]100%|##########| 26/26 [00:00<00:00, 32.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  24.92 ( 24.91)	train_acc   0.54 (  0.57)	train_minacc   0.82 (  0.70)	train_majacc   0.49 (  0.55)	train_corr   0.00 (  0.00)	l1 4.0054 (3.8980)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.06it/s] 31%|###       | 8/26 [00:00<00:00, 39.03it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.03it/s] 50%|#####     | 13/26 [00:00<00:00, 40.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.57it/s] 96%|#########6| 25/26 [00:00<00:00, 47.32it/s]100%|##########| 26/26 [00:00<00:00, 40.95it/s]
Test: [   0/  26]	Loss 0.617 (0.617)	test_acc   0.50 (  0.50)	test_minacc   0.63 (  0.63)	test_majacc   0.48 (  0.48)	Loss_d 0.617 (0.617)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.615 (0.611)	test_acc   0.54 (  0.55)	test_minacc   0.69 (  0.68)	test_majacc   0.52 (  0.53)	Loss_d 0.615 (0.611)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.69 (  0.68)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.30 (  0.32)
Test: [  20/  26]	Loss 0.612 (0.611)	test_acc   0.49 (  0.55)	test_minacc   0.69 (  0.70)	test_majacc   0.45 (  0.52)	Loss_d 0.612 (0.611)	test_acc_d   0.49 (  0.55)	test_minacc_d   0.69 (  0.70)	test_majacc_d   0.45 (  0.52)	test_corr_d   0.31 (  0.31)
Test: [  26/  26]	Loss 0.621 (0.610)	test_acc   0.54 (  0.55)	test_minacc   0.82 (  0.70)	test_majacc   0.49 (  0.52)	Loss_d 0.621 (0.610)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.82 (  0.70)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.25 (  0.31)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.71it/s]
Test: [  0/  1]	Loss 0.916 (0.916)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.66 (  0.66)	Loss_d 0.916 (0.916)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.916 (0.916)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.66 (  0.66)	Loss_d 0.916 (0.916)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.12 (  0.12)
Overall Timing[ 48/  1]	epoch_time 0.0353 (0.0360)	validation_time 0.0004 (0.0005)	train_time 0.0348 (0.0355)
record: (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
last accs (train_acc, test_acc) (0.5473000140488148, 0.6340000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.10it/s] 19%|#9        | 5/26 [00:00<00:01, 18.98it/s] 35%|###4      | 9/26 [00:00<00:00, 25.67it/s] 50%|#####     | 13/26 [00:00<00:00, 29.96it/s] 69%|######9   | 18/26 [00:00<00:00, 33.65it/s] 85%|########4 | 22/26 [00:00<00:00, 35.09it/s]100%|##########| 26/26 [00:00<00:00, 36.28it/s]100%|##########| 26/26 [00:00<00:00, 28.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  24.92 ( 24.91)	train_acc   0.55 (  0.57)	train_minacc   0.79 (  0.69)	train_majacc   0.51 (  0.54)	train_corr   0.00 (  0.00)	l1 3.9327 (3.9281)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.87it/s] 27%|##6       | 7/26 [00:00<00:00, 31.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.18it/s] 46%|####6     | 12/26 [00:00<00:00, 36.09it/s] 69%|######9   | 18/26 [00:00<00:00, 43.80it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.80it/s] 92%|#########2| 24/26 [00:00<00:00, 45.95it/s]100%|##########| 26/26 [00:00<00:00, 37.87it/s]
Test: [   0/  26]	Loss 0.607 (0.607)	test_acc   0.54 (  0.54)	test_minacc   0.65 (  0.65)	test_majacc   0.53 (  0.53)	Loss_d 0.607 (0.607)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.34 (  0.34)
Test: [  10/  26]	Loss 0.610 (0.603)	test_acc   0.55 (  0.57)	test_minacc   0.67 (  0.68)	test_majacc   0.54 (  0.55)	Loss_d 0.610 (0.603)	test_acc_d   0.55 (  0.57)	test_minacc_d   0.67 (  0.68)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.32 (  0.34)
Test: [  20/  26]	Loss 0.609 (0.605)	test_acc   0.49 (  0.56)	test_minacc   0.69 (  0.70)	test_majacc   0.46 (  0.54)	Loss_d 0.609 (0.605)	test_acc_d   0.49 (  0.56)	test_minacc_d   0.69 (  0.70)	test_majacc_d   0.46 (  0.54)	test_corr_d   0.33 (  0.33)
Test: [  26/  26]	Loss 0.619 (0.605)	test_acc   0.54 (  0.56)	test_minacc   0.79 (  0.69)	test_majacc   0.50 (  0.54)	Loss_d 0.619 (0.605)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.79 (  0.69)	test_majacc_d   0.50 (  0.54)	test_corr_d   0.27 (  0.33)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.05it/s]
Test: [  0/  1]	Loss 0.916 (0.916)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.66 (  0.66)	Loss_d 0.916 (0.916)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 0.916 (0.916)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.66 (  0.66)	Loss_d 0.916 (0.916)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.14 (  0.14)
Overall Timing[ 49/  1]	epoch_time 0.0364 (0.0361)	validation_time 0.0004 (0.0005)	train_time 0.0359 (0.0355)
record: (train_acc, test_acc) (0.658100020289421, 0.6980000138282776)
last accs (train_acc, test_acc) (0.5619000110626221, 0.6290000081062317)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.103 MB of 0.103 MB uploadedwandb: \ 0.103 MB of 0.103 MB uploadedwandb: | 0.103 MB of 0.103 MB uploadedwandb: / 0.126 MB of 0.134 MB uploaded (0.003 MB deduped)wandb: - 0.471 MB of 0.471 MB uploaded (0.003 MB deduped)wandb: \ 0.471 MB of 0.471 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/diagnostics/epoch_time_val █▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/diagnostics/train_time_val █▁▂▁▁▁▂▂▁▁▁▁▁▂▁▁▁▁▁▁▂▁▁▁▁▁▁▂▂▁▁▁▁▁▂▁▁▂▂▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/Loss_avg ▇▆▆▆▅▆▆▆▇██▇▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▃▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/Loss_d_avg ▇▆▆▆▅▆▆▆▇██▇▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▃▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/Loss_d_val ▇▆▆▆▅▆▆▆▇██▇▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▃▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/Loss_val ▇▆▆▆▅▆▆▆▇██▇▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▃▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_acc_avg ▁▁▁▁▃▂▃▄▄▄▄▅▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_acc_d_avg ▁▁▁▁▃▂▃▄▄▄▄▅▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_acc_d_val ▁▁▁▁▃▂▃▄▄▄▄▅▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_acc_val ▁▁▁▁▃▂▃▄▄▄▄▅▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_corr_d_avg ███▇▆▆▆▅▆▆▅▅▁▂▂▂▂▂▂▂▃▃▃▃▃▃▃▂▁▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_corr_d_val ███▇▆▆▆▅▆▆▅▅▁▂▂▂▂▂▂▂▃▃▃▃▃▃▃▂▁▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_majacc_avg ████▇██▇▇▇▇▇▄▃▃▃▃▃▃▃▃▃▃▄▄▄▃▃▂▃▂▂▂▂▁▃▂▂▂▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_majacc_d_avg ████▇██▇▇▇▇▇▄▃▃▃▃▃▃▃▃▃▃▄▄▄▃▃▂▃▂▂▂▂▁▃▂▂▂▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_majacc_d_val ████▇██▇▇▇▇▇▄▃▃▃▃▃▃▃▃▃▃▄▄▄▃▃▂▃▂▂▂▂▁▃▂▂▂▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_majacc_val ████▇██▇▇▇▇▇▄▃▃▃▃▃▃▃▃▃▃▄▄▄▃▃▂▃▂▂▂▂▁▃▂▂▂▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_minacc_avg ▁▁▁▁▃▂▃▄▄▄▄▅▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_minacc_d_avg ▁▁▁▁▃▂▃▄▄▄▄▅▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_minacc_d_val ▁▁▁▁▃▂▃▄▄▄▄▅▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_minacc_val ▁▁▁▁▃▂▃▄▄▄▄▅▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/Loss_avg █▆▆▆▅▅▅▅▄▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/Loss_val ███▇▆▆▆▆▅▅▄▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/l1_avg █▅▅▅▅▆▅▅▆▆▇▇▇▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/l1_val ▆▆▆▆▇▇▇▇▆▇██▅▂▂▂▂▂▂▂▂▂▂▂▂▂▃▃▁▁▂▂▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_acc_avg ▆▇▇▇▇▇▇▇█████▅▄▄▄▄▄▄▄▄▄▄▄▅▅▅▃▃▃▃▃▂▂▂▁▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_acc_val ▇▇▇▇▇▇▇▇▇██▇▆▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▃▂▁▃▁▃▁▁▁▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_majacc_avg ▇█████▇▇▇▇▇▇▇▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▃▃▃▃▃▂▂▂▁▂▁▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_majacc_val ████████▇██▇▅▄▄▃▄▄▄▄▄▄▄▄▄▄▄▃▄▄▃▂▁▃▁▃▁▁▁▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_minacc_avg ▂▁▁▁▃▃▄▄▅▆▆▆▇█████████████████▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_minacc_val ▁▁▁▁▃▂▄▄▆▅▇▆█▇▇▇▇▇▇▇▇▇▇▇▇▇██████▇▇▇▇▇███
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_nll_avg ▇▄▄▄▃▃▂▂▂▁▁▁▁▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇█▇█████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_nll_val ▅▄▄▄▃▃▂▂▂▁▁▁▄▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇██████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_penalty_avg █▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_penalty_val █▇▇▆▃▄▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/weight_norm_avg ▁▅▅▅▅▅▆▆▆▆▆▇████████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/weight_norm_val ▁▃▃▃▄▄▄▄▅▅▆▆████████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/diagnostics/epoch_time_val 0.03639
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/diagnostics/train_time_val 0.03593
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/diagnostics/validation_time_val 0.00044
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/Loss_avg 0.91633
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/Loss_d_avg 0.91633
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/Loss_d_val 0.91633
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/Loss_val 0.91633
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_acc_avg 0.629
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_acc_d_avg 0.629
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_acc_d_val 0.629
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_acc_val 0.629
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_corr_d_avg 0.14464
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_corr_d_val 0.14464
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_majacc_avg 0.66
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_majacc_d_avg 0.66
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_majacc_d_val 0.66
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_majacc_val 0.66
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_minacc_avg 0.62556
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_minacc_d_avg 0.62556
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_minacc_d_val 0.62556
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/test/test_minacc_val 0.62556
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/Loss_val 7e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/l1_avg 3.9281
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/l1_val 3.9327
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_acc_avg 0.5671
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_acc_val 0.552
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_majacc_avg 0.5447
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_majacc_val 0.50943
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_minacc_avg 0.69433
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_minacc_val 0.78947
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_nll_avg 0.60247
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_nll_val 0.61775
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_penalty_avg 3e-05
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/train_penalty_val 1e-05
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/weight_norm_avg 24.91443
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/weight_norm_val 24.91506
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/135/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/vsokskkp
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_200218-vsokskkp/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_200440-s0vbmzhy
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/s0vbmzhy
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1217
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5989, 3, 32, 32) (6011, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:35,  1.41s/it] 19%|#9        | 5/26 [00:01<00:04,  4.27it/s] 35%|###4      | 9/26 [00:01<00:02,  8.32it/s] 50%|#####     | 13/26 [00:01<00:01, 12.57it/s] 65%|######5   | 17/26 [00:01<00:00, 16.74it/s] 81%|########  | 21/26 [00:01<00:00, 20.70it/s] 96%|#########6| 25/26 [00:02<00:00, 24.43it/s]100%|##########| 26/26 [00:02<00:00, 10.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.452 (0.543)	train_nll   0.45 (  0.54)	train_penalty   0.09 (  0.30)	weight_norm  20.85 ( 18.13)	train_acc   0.84 (  0.81)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.94)	train_corr   0.00 (  0.00)	l1 7.0452 (8.0634)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.49it/s] 27%|##6       | 7/26 [00:00<00:00, 30.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.07it/s] 50%|#####     | 13/26 [00:00<00:00, 37.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.15it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.15it/s] 96%|#########6| 25/26 [00:00<00:00, 45.34it/s]100%|##########| 26/26 [00:00<00:00, 36.95it/s]
Test: [   0/  26]	Loss 0.466 (0.466)	test_acc   0.82 (  0.82)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.466 (0.466)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.455 (0.414)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.455 (0.414)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.455 (0.415)	test_acc   0.82 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.455 (0.415)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.447 (0.412)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.447 (0.412)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.51it/s]100%|##########| 1/1 [00:00<00:00,  2.51it/s]
Test: [  0/  1]	Loss 1.941 (1.941)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.941 (1.941)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.941 (1.941)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.941 (1.941)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0747 (0.0747)	validation_time 0.0067 (0.0067)	train_time 0.0634 (0.0634)
record: (train_acc, test_acc) (0.8472000213265419, 0.10600000619888306)
last accs (train_acc, test_acc) (0.8472000213265419, 0.10600000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.77it/s] 19%|#9        | 5/26 [00:00<00:00, 24.22it/s] 35%|###4      | 9/26 [00:00<00:00, 30.18it/s] 50%|#####     | 13/26 [00:00<00:00, 32.14it/s] 65%|######5   | 17/26 [00:00<00:00, 33.70it/s] 81%|########  | 21/26 [00:00<00:00, 34.82it/s] 96%|#########6| 25/26 [00:00<00:00, 34.89it/s]100%|##########| 26/26 [00:00<00:00, 29.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.428 (0.404)	train_nll   0.43 (  0.40)	train_penalty   0.05 (  0.06)	weight_norm  21.95 ( 21.61)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  1.00)	train_corr   0.00 (  0.00)	l1 6.8265 (6.8809)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s] 27%|##6       | 7/26 [00:00<00:00, 33.86it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.86it/s] 46%|####6     | 12/26 [00:00<00:00, 39.99it/s] 65%|######5   | 17/26 [00:00<00:00, 40.91it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.91it/s] 88%|########8 | 23/26 [00:00<00:00, 46.92it/s]100%|##########| 26/26 [00:00<00:00, 38.20it/s]
Test: [   0/  26]	Loss 0.424 (0.424)	test_acc   0.82 (  0.82)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.424 (0.424)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.410 (0.384)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.410 (0.384)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.418 (0.384)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.418 (0.384)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.417 (0.381)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.417 (0.381)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.39it/s]
Test: [  0/  1]	Loss 1.723 (1.723)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.723 (1.723)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.723 (1.723)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.723 (1.723)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Overall Timing[  1/  1]	epoch_time 0.0357 (0.0552)	validation_time 0.0003 (0.0035)	train_time 0.0354 (0.0494)
record: (train_acc, test_acc) (0.8472000213265419, 0.10600000619888306)
last accs (train_acc, test_acc) (0.8492000165581703, 0.10400000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 19%|#9        | 5/26 [00:00<00:00, 22.19it/s] 35%|###4      | 9/26 [00:00<00:00, 28.78it/s] 50%|#####     | 13/26 [00:00<00:00, 32.38it/s] 69%|######9   | 18/26 [00:00<00:00, 35.81it/s] 88%|########8 | 23/26 [00:00<00:00, 37.60it/s]100%|##########| 26/26 [00:00<00:00, 30.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.404 (0.379)	train_nll   0.40 (  0.38)	train_penalty   0.04 (  0.04)	weight_norm  22.09 ( 22.04)	train_acc   0.83 (  0.85)	train_minacc   0.08 (  0.05)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 7.0452 (7.0065)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s] 31%|###       | 8/26 [00:00<00:00, 34.01it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.01it/s] 50%|#####     | 13/26 [00:00<00:00, 38.98it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.23it/s] 96%|#########6| 25/26 [00:00<00:00, 46.79it/s]100%|##########| 26/26 [00:00<00:00, 38.06it/s]
Test: [   0/  26]	Loss 0.424 (0.424)	test_acc   0.83 (  0.83)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 0.424 (0.424)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.379 (0.369)	test_acc   0.84 (  0.85)	test_minacc   0.08 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.379 (0.369)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.08 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.391 (0.371)	test_acc   0.83 (  0.85)	test_minacc   0.09 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.391 (0.371)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.09 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.390 (0.367)	test_acc   0.84 (  0.85)	test_minacc   0.08 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.390 (0.367)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.08 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.99it/s]
Test: [  0/  1]	Loss 1.825 (1.825)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.825 (1.825)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.825 (1.825)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.825 (1.825)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0357 (0.0487)	validation_time 0.0003 (0.0025)	train_time 0.0354 (0.0447)
record: (train_acc, test_acc) (0.8509000199437141, 0.12300000339746475)
last accs (train_acc, test_acc) (0.8509000199437141, 0.12300000339746475)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.89it/s] 19%|#9        | 5/26 [00:00<00:01, 19.24it/s] 35%|###4      | 9/26 [00:00<00:00, 26.71it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.31it/s] 69%|######9   | 18/26 [00:00<00:00, 34.44it/s] 85%|########4 | 22/26 [00:00<00:00, 35.45it/s]100%|##########| 26/26 [00:00<00:00, 29.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.368 (0.353)	train_nll   0.37 (  0.35)	train_penalty   0.04 (  0.03)	weight_norm  22.16 ( 22.13)	train_acc   0.83 (  0.85)	train_minacc   0.08 (  0.12)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 7.1025 (7.0947)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.73it/s] 27%|##6       | 7/26 [00:00<00:00, 36.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.47it/s] 50%|#####     | 13/26 [00:00<00:00, 42.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.63it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.63it/s] 96%|#########6| 25/26 [00:00<00:00, 48.27it/s]100%|##########| 26/26 [00:00<00:00, 40.64it/s]
Test: [   0/  26]	Loss 0.393 (0.393)	test_acc   0.83 (  0.83)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.393 (0.393)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.332 (0.332)	test_acc   0.85 (  0.86)	test_minacc   0.14 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 0.332 (0.332)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.14 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.366 (0.340)	test_acc   0.83 (  0.85)	test_minacc   0.11 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.366 (0.340)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.11 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.343 (0.334)	test_acc   0.84 (  0.86)	test_minacc   0.12 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.343 (0.334)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.12 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.41it/s]
Test: [  0/  1]	Loss 1.875 (1.875)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.875 (1.875)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.875 (1.875)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.875 (1.875)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.88 (  0.88)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0353 (0.0453)	validation_time 0.0003 (0.0019)	train_time 0.0349 (0.0423)
record: (train_acc, test_acc) (0.8563000186681747, 0.15600000321865082)
last accs (train_acc, test_acc) (0.8563000186681747, 0.15600000321865082)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.87it/s] 19%|#9        | 5/26 [00:00<00:00, 22.82it/s] 38%|###8      | 10/26 [00:00<00:00, 30.90it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.51it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.32it/s] 96%|#########6| 25/26 [00:00<00:00, 38.78it/s]100%|##########| 26/26 [00:00<00:00, 31.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.387 (0.336)	train_nll   0.39 (  0.34)	train_penalty   0.05 (  0.03)	weight_norm  22.24 ( 22.20)	train_acc   0.85 (  0.85)	train_minacc   0.20 (  0.20)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 7.4006 (7.2797)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.96it/s] 23%|##3       | 6/26 [00:00<00:00, 28.19it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.19it/s] 42%|####2     | 11/26 [00:00<00:00, 36.84it/s] 65%|######5   | 17/26 [00:00<00:00, 43.50it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.50it/s] 85%|########4 | 22/26 [00:00<00:00, 42.92it/s]100%|##########| 26/26 [00:00<00:00, 37.25it/s]
Test: [   0/  26]	Loss 0.349 (0.349)	test_acc   0.83 (  0.83)	test_minacc   0.20 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 0.349 (0.349)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.321 (0.301)	test_acc   0.85 (  0.86)	test_minacc   0.24 (  0.24)	test_majacc   0.97 (  0.97)	Loss_d 0.321 (0.301)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.336 (0.314)	test_acc   0.83 (  0.86)	test_minacc   0.24 (  0.23)	test_majacc   0.96 (  0.97)	Loss_d 0.336 (0.314)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.24 (  0.23)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.343 (0.310)	test_acc   0.85 (  0.86)	test_minacc   0.17 (  0.23)	test_majacc   0.98 (  0.97)	Loss_d 0.343 (0.310)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.17 (  0.23)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.71it/s]
Test: [  0/  1]	Loss 1.921 (1.921)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 1.921 (1.921)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.921 (1.921)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 1.921 (1.921)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.81 (  0.81)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0362 (0.0435)	validation_time 0.0004 (0.0016)	train_time 0.0358 (0.0410)
record: (train_acc, test_acc) (0.8599000267982483, 0.19200000166893005)
last accs (train_acc, test_acc) (0.8599000267982483, 0.19200000166893005)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.91it/s] 19%|#9        | 5/26 [00:00<00:01, 20.26it/s] 38%|###8      | 10/26 [00:00<00:00, 29.27it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.74it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.64it/s] 92%|#########2| 24/26 [00:00<00:00, 37.47it/s]100%|##########| 26/26 [00:00<00:00, 30.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.324 (0.313)	train_nll   0.32 (  0.31)	train_penalty   0.02 (  0.02)	weight_norm  22.32 ( 22.28)	train_acc   0.85 (  0.86)	train_minacc   0.33 (  0.28)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 7.2632 (7.2809)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.94it/s] 27%|##6       | 7/26 [00:00<00:00, 30.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.74it/s] 50%|#####     | 13/26 [00:00<00:00, 40.53it/s] 69%|######9   | 18/26 [00:00<00:00, 43.32it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.32it/s] 92%|#########2| 24/26 [00:00<00:00, 47.44it/s]100%|##########| 26/26 [00:00<00:00, 38.67it/s]
Test: [   0/  26]	Loss 0.343 (0.343)	test_acc   0.83 (  0.83)	test_minacc   0.29 (  0.29)	test_majacc   0.95 (  0.95)	Loss_d 0.343 (0.343)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.317 (0.296)	test_acc   0.86 (  0.87)	test_minacc   0.32 (  0.37)	test_majacc   0.98 (  0.96)	Loss_d 0.317 (0.296)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.32 (  0.37)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.88 (  0.87)
Test: [  20/  26]	Loss 0.314 (0.306)	test_acc   0.85 (  0.86)	test_minacc   0.39 (  0.36)	test_majacc   0.95 (  0.96)	Loss_d 0.314 (0.306)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.39 (  0.36)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.86 (  0.87)
Test: [  26/  26]	Loss 0.290 (0.300)	test_acc   0.86 (  0.87)	test_minacc   0.30 (  0.36)	test_majacc   0.97 (  0.96)	Loss_d 0.290 (0.300)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.30 (  0.36)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.28it/s]
Test: [  0/  1]	Loss 1.909 (1.909)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 1.909 (1.909)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.909 (1.909)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 1.909 (1.909)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.75 (  0.75)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0350 (0.0421)	validation_time 0.0004 (0.0014)	train_time 0.0346 (0.0399)
record: (train_acc, test_acc) (0.8668000255227089, 0.2630000114440918)
last accs (train_acc, test_acc) (0.8668000255227089, 0.2630000114440918)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.72it/s] 19%|#9        | 5/26 [00:00<00:00, 23.78it/s] 38%|###8      | 10/26 [00:00<00:00, 31.21it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.64it/s] 69%|######9   | 18/26 [00:00<00:00, 35.35it/s] 85%|########4 | 22/26 [00:00<00:00, 36.62it/s]100%|##########| 26/26 [00:00<00:00, 31.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.299 (0.295)	train_nll   0.30 (  0.30)	train_penalty   0.02 (  0.02)	weight_norm  22.42 ( 22.37)	train_acc   0.85 (  0.87)	train_minacc   0.28 (  0.38)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 7.4152 (7.4432)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.14it/s] 27%|##6       | 7/26 [00:00<00:00, 36.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.82it/s] 50%|#####     | 13/26 [00:00<00:00, 42.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.93it/s] 96%|#########6| 25/26 [00:00<00:00, 48.14it/s]100%|##########| 26/26 [00:00<00:00, 40.64it/s]
Test: [   0/  26]	Loss 0.324 (0.324)	test_acc   0.84 (  0.84)	test_minacc   0.40 (  0.40)	test_majacc   0.94 (  0.94)	Loss_d 0.324 (0.324)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.277 (0.274)	test_acc   0.88 (  0.87)	test_minacc   0.42 (  0.48)	test_majacc   0.97 (  0.95)	Loss_d 0.277 (0.274)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  20/  26]	Loss 0.289 (0.281)	test_acc   0.87 (  0.88)	test_minacc   0.53 (  0.48)	test_majacc   0.94 (  0.95)	Loss_d 0.289 (0.281)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.53 (  0.48)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.84 (  0.86)
Test: [  26/  26]	Loss 0.263 (0.275)	test_acc   0.90 (  0.88)	test_minacc   0.50 (  0.48)	test_majacc   0.97 (  0.95)	Loss_d 0.263 (0.275)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.50 (  0.48)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.87 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.24it/s]
Test: [  0/  1]	Loss 1.911 (1.911)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.98 (  0.98)	Loss_d 1.911 (1.911)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.911 (1.911)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.98 (  0.98)	Loss_d 1.911 (1.911)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.69 (  0.69)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0337 (0.0409)	validation_time 0.0004 (0.0013)	train_time 0.0333 (0.0390)
record: (train_acc, test_acc) (0.8783000252246856, 0.3190000057220459)
last accs (train_acc, test_acc) (0.8783000252246856, 0.3190000057220459)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.15it/s] 19%|#9        | 5/26 [00:00<00:00, 21.64it/s] 38%|###8      | 10/26 [00:00<00:00, 30.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.17it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.15it/s] 96%|#########6| 25/26 [00:00<00:00, 37.48it/s]100%|##########| 26/26 [00:00<00:00, 30.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.313 (0.285)	train_nll   0.31 (  0.29)	train_penalty   0.01 (  0.01)	weight_norm  22.57 ( 22.50)	train_acc   0.86 (  0.87)	train_minacc   0.47 (  0.42)	train_majacc   0.94 (  0.95)	train_corr   0.00 (  0.00)	l1 7.1318 (7.4698)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s] 27%|##6       | 7/26 [00:00<00:00, 36.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.16it/s] 50%|#####     | 13/26 [00:00<00:00, 42.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.00it/s] 96%|#########6| 25/26 [00:00<00:00, 47.76it/s]100%|##########| 26/26 [00:00<00:00, 40.57it/s]
Test: [   0/  26]	Loss 0.315 (0.315)	test_acc   0.86 (  0.86)	test_minacc   0.54 (  0.54)	test_majacc   0.93 (  0.93)	Loss_d 0.315 (0.315)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.276 (0.272)	test_acc   0.89 (  0.88)	test_minacc   0.56 (  0.57)	test_majacc   0.95 (  0.93)	Loss_d 0.276 (0.272)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.56 (  0.57)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.84 (  0.84)
Test: [  20/  26]	Loss 0.280 (0.279)	test_acc   0.88 (  0.88)	test_minacc   0.56 (  0.56)	test_majacc   0.95 (  0.94)	Loss_d 0.280 (0.279)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.83 (  0.84)
Test: [  26/  26]	Loss 0.268 (0.274)	test_acc   0.88 (  0.88)	test_minacc   0.45 (  0.55)	test_majacc   0.96 (  0.94)	Loss_d 0.268 (0.274)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.45 (  0.55)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.87 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.71it/s]
Test: [  0/  1]	Loss 1.806 (1.806)	test_acc   0.36 (  0.36)	test_minacc   0.29 (  0.29)	test_majacc   0.97 (  0.97)	Loss_d 1.806 (1.806)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.64 (  0.64)
Test: [  1/  1]	Loss 1.806 (1.806)	test_acc   0.36 (  0.36)	test_minacc   0.29 (  0.29)	test_majacc   0.97 (  0.97)	Loss_d 1.806 (1.806)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.64 (  0.64)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0341 (0.0401)	validation_time 0.0003 (0.0011)	train_time 0.0337 (0.0383)
record: (train_acc, test_acc) (0.8794000232815743, 0.3620000183582306)
last accs (train_acc, test_acc) (0.8794000232815743, 0.3620000183582306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.72it/s] 15%|#5        | 4/26 [00:00<00:01, 17.79it/s] 31%|###       | 8/26 [00:00<00:00, 26.53it/s] 50%|#####     | 13/26 [00:00<00:00, 32.21it/s] 69%|######9   | 18/26 [00:00<00:00, 35.75it/s] 88%|########8 | 23/26 [00:00<00:00, 38.01it/s]100%|##########| 26/26 [00:00<00:00, 31.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.270 (0.262)	train_nll   0.27 (  0.26)	train_penalty   0.01 (  0.01)	weight_norm  22.74 ( 22.65)	train_acc   0.88 (  0.88)	train_minacc   0.40 (  0.55)	train_majacc   0.97 (  0.94)	train_corr   0.00 (  0.00)	l1 7.4130 (7.6923)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.98it/s] 23%|##3       | 6/26 [00:00<00:00, 31.54it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.54it/s] 46%|####6     | 12/26 [00:00<00:00, 40.04it/s] 69%|######9   | 18/26 [00:00<00:00, 46.02it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.02it/s] 92%|#########2| 24/26 [00:00<00:00, 47.39it/s]100%|##########| 26/26 [00:00<00:00, 39.88it/s]
Test: [   0/  26]	Loss 0.320 (0.320)	test_acc   0.85 (  0.85)	test_minacc   0.49 (  0.49)	test_majacc   0.93 (  0.93)	Loss_d 0.320 (0.320)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.259 (0.260)	test_acc   0.89 (  0.88)	test_minacc   0.53 (  0.55)	test_majacc   0.97 (  0.95)	Loss_d 0.259 (0.260)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.85 (  0.84)
Test: [  20/  26]	Loss 0.257 (0.266)	test_acc   0.88 (  0.88)	test_minacc   0.57 (  0.54)	test_majacc   0.95 (  0.95)	Loss_d 0.257 (0.266)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.84 (  0.84)
Test: [  26/  26]	Loss 0.231 (0.259)	test_acc   0.90 (  0.89)	test_minacc   0.53 (  0.55)	test_majacc   0.97 (  0.95)	Loss_d 0.231 (0.259)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.87 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.94it/s]
Test: [  0/  1]	Loss 2.033 (2.033)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.96 (  0.96)	Loss_d 2.033 (2.033)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.64 (  0.64)
Test: [  1/  1]	Loss 2.033 (2.033)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.96 (  0.96)	Loss_d 2.033 (2.033)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.64 (  0.64)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0345 (0.0394)	validation_time 0.0003 (0.0011)	train_time 0.0341 (0.0378)
record: (train_acc, test_acc) (0.8866000235676765, 0.37800002098083496)
last accs (train_acc, test_acc) (0.8866000235676765, 0.37800002098083496)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.93it/s] 19%|#9        | 5/26 [00:00<00:00, 24.29it/s] 35%|###4      | 9/26 [00:00<00:00, 30.45it/s] 50%|#####     | 13/26 [00:00<00:00, 33.28it/s] 65%|######5   | 17/26 [00:00<00:00, 35.26it/s] 81%|########  | 21/26 [00:00<00:00, 36.39it/s]100%|##########| 26/26 [00:00<00:00, 38.69it/s]100%|##########| 26/26 [00:00<00:00, 31.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.242 (0.252)	train_nll   0.24 (  0.25)	train_penalty   0.00 (  0.01)	weight_norm  22.94 ( 22.84)	train_acc   0.90 (  0.89)	train_minacc   0.62 (  0.55)	train_majacc   0.95 (  0.95)	train_corr   0.00 (  0.00)	l1 7.6135 (7.7296)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.19it/s] 31%|###       | 8/26 [00:00<00:00, 31.13it/s]                                               31%|###       | 8/26 [00:00<00:00, 31.13it/s] 50%|#####     | 13/26 [00:00<00:00, 36.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.82it/s] 96%|#########6| 25/26 [00:00<00:00, 44.97it/s]100%|##########| 26/26 [00:00<00:00, 36.16it/s]
Test: [   0/  26]	Loss 0.292 (0.292)	test_acc   0.86 (  0.86)	test_minacc   0.56 (  0.56)	test_majacc   0.93 (  0.93)	Loss_d 0.292 (0.292)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.234 (0.243)	test_acc   0.89 (  0.89)	test_minacc   0.73 (  0.70)	test_majacc   0.93 (  0.92)	Loss_d 0.234 (0.243)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.73 (  0.70)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.75 (  0.77)
Test: [  20/  26]	Loss 0.240 (0.245)	test_acc   0.89 (  0.89)	test_minacc   0.67 (  0.70)	test_majacc   0.94 (  0.93)	Loss_d 0.240 (0.245)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.67 (  0.70)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.76 (  0.78)
Test: [  26/  26]	Loss 0.196 (0.237)	test_acc   0.93 (  0.90)	test_minacc   0.80 (  0.71)	test_majacc   0.96 (  0.93)	Loss_d 0.196 (0.237)	test_acc_d   0.93 (  0.90)	test_minacc_d   0.80 (  0.71)	test_majacc_d   0.96 (  0.93)	test_corr_d   0.80 (  0.78)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.74it/s]
Test: [  0/  1]	Loss 1.958 (1.958)	test_acc   0.48 (  0.48)	test_minacc   0.43 (  0.43)	test_majacc   0.94 (  0.94)	Loss_d 1.958 (1.958)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.44 (  0.44)
Test: [  1/  1]	Loss 1.958 (1.958)	test_acc   0.48 (  0.48)	test_minacc   0.43 (  0.43)	test_majacc   0.94 (  0.94)	Loss_d 1.958 (1.958)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.44 (  0.44)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0352 (0.0390)	validation_time 0.0004 (0.0010)	train_time 0.0348 (0.0375)
record: (train_acc, test_acc) (0.8975000233054161, 0.47700002789497375)
last accs (train_acc, test_acc) (0.8975000233054161, 0.47700002789497375)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 19%|#9        | 5/26 [00:00<00:00, 22.20it/s] 35%|###4      | 9/26 [00:00<00:00, 29.01it/s] 50%|#####     | 13/26 [00:00<00:00, 32.45it/s] 65%|######5   | 17/26 [00:00<00:00, 34.78it/s] 81%|########  | 21/26 [00:00<00:00, 36.46it/s] 96%|#########6| 25/26 [00:00<00:00, 37.46it/s]100%|##########| 26/26 [00:00<00:00, 30.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.234 (0.249)	train_nll   0.23 (  0.25)	train_penalty   0.00 (  0.01)	weight_norm  23.21 ( 23.07)	train_acc   0.91 (  0.89)	train_minacc   0.62 (  0.59)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 7.1248 (7.8145)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.83it/s] 31%|###       | 8/26 [00:00<00:00, 39.98it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.98it/s] 50%|#####     | 13/26 [00:00<00:00, 43.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.24it/s] 92%|#########2| 24/26 [00:00<00:00, 49.13it/s]100%|##########| 26/26 [00:00<00:00, 42.04it/s]
Test: [   0/  26]	Loss 0.266 (0.266)	test_acc   0.89 (  0.89)	test_minacc   0.61 (  0.61)	test_majacc   0.95 (  0.95)	Loss_d 0.266 (0.266)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.231 (0.237)	test_acc   0.89 (  0.90)	test_minacc   0.58 (  0.61)	test_majacc   0.95 (  0.95)	Loss_d 0.231 (0.237)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.58 (  0.61)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.84 (  0.85)
Test: [  20/  26]	Loss 0.248 (0.244)	test_acc   0.91 (  0.90)	test_minacc   0.64 (  0.60)	test_majacc   0.97 (  0.95)	Loss_d 0.248 (0.244)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.64 (  0.60)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.83 (  0.85)
Test: [  26/  26]	Loss 0.210 (0.237)	test_acc   0.91 (  0.90)	test_minacc   0.57 (  0.61)	test_majacc   0.97 (  0.96)	Loss_d 0.210 (0.237)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.57 (  0.61)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.87 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.70it/s]
Test: [  0/  1]	Loss 2.060 (2.060)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.96 (  0.96)	Loss_d 2.060 (2.060)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.64 (  0.64)
Test: [  1/  1]	Loss 2.060 (2.060)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.96 (  0.96)	Loss_d 2.060 (2.060)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.64 (  0.64)
Overall Timing[ 10/  1]	epoch_time 0.0354 (0.0387)	validation_time 0.0003 (0.0009)	train_time 0.0351 (0.0373)
record: (train_acc, test_acc) (0.8975000233054161, 0.47700002789497375)
last accs (train_acc, test_acc) (0.9031000232100487, 0.3840000033378601)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.32it/s] 19%|#9        | 5/26 [00:00<00:01, 19.75it/s] 38%|###8      | 10/26 [00:00<00:00, 28.85it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.67it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.81it/s] 92%|#########2| 24/26 [00:00<00:00, 37.50it/s]100%|##########| 26/26 [00:00<00:00, 30.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.199 (0.239)	train_nll   0.20 (  0.24)	train_penalty   0.00 (  0.01)	weight_norm  23.53 ( 23.37)	train_acc   0.89 (  0.89)	train_minacc   0.50 (  0.60)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 7.4714 (7.8611)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 27%|##6       | 7/26 [00:00<00:00, 36.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.37it/s] 50%|#####     | 13/26 [00:00<00:00, 43.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.72it/s] 96%|#########6| 25/26 [00:00<00:00, 48.46it/s]100%|##########| 26/26 [00:00<00:00, 40.66it/s]
Test: [   0/  26]	Loss 0.282 (0.282)	test_acc   0.86 (  0.86)	test_minacc   0.51 (  0.51)	test_majacc   0.94 (  0.94)	Loss_d 0.282 (0.282)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.209 (0.232)	test_acc   0.90 (  0.89)	test_minacc   0.58 (  0.55)	test_majacc   0.96 (  0.96)	Loss_d 0.209 (0.232)	test_acc_d   0.90 (  0.89)	test_minacc_d   0.58 (  0.55)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.83 (  0.84)
Test: [  20/  26]	Loss 0.225 (0.235)	test_acc   0.91 (  0.90)	test_minacc   0.63 (  0.56)	test_majacc   0.97 (  0.96)	Loss_d 0.225 (0.235)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.63 (  0.56)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.83 (  0.84)
Test: [  26/  26]	Loss 0.170 (0.226)	test_acc   0.94 (  0.90)	test_minacc   0.75 (  0.58)	test_majacc   0.97 (  0.96)	Loss_d 0.170 (0.226)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.75 (  0.58)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.83 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.13it/s]
Test: [  0/  1]	Loss 2.194 (2.194)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.95 (  0.95)	Loss_d 2.194 (2.194)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 2.194 (2.194)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.95 (  0.95)	Loss_d 2.194 (2.194)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.65 (  0.65)
Overall Timing[ 11/  1]	epoch_time 0.0359 (0.0385)	validation_time 0.0004 (0.0009)	train_time 0.0355 (0.0372)
record: (train_acc, test_acc) (0.8975000233054161, 0.47700002789497375)
last accs (train_acc, test_acc) (0.9016000255942345, 0.34800001978874207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.62it/s] 19%|#9        | 5/26 [00:00<00:00, 26.22it/s] 35%|###4      | 9/26 [00:00<00:00, 32.24it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.14it/s] 92%|#########2| 24/26 [00:00<00:00, 39.41it/s]100%|##########| 26/26 [00:00<00:00, 32.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.176 (0.228)	train_nll   0.18 (  0.23)	train_penalty   0.00 (  0.01)	weight_norm  23.86 ( 23.70)	train_acc   0.93 (  0.90)	train_minacc   0.68 (  0.65)	train_majacc   0.98 (  0.95)	train_corr   0.00 (  0.00)	l1 7.6386 (7.7744)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s] 27%|##6       | 7/26 [00:00<00:00, 37.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.39it/s] 50%|#####     | 13/26 [00:00<00:00, 41.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.44it/s] 96%|#########6| 25/26 [00:00<00:00, 46.51it/s]100%|##########| 26/26 [00:00<00:00, 39.61it/s]
Test: [   0/  26]	Loss 0.289 (0.289)	test_acc   0.88 (  0.88)	test_minacc   0.56 (  0.56)	test_majacc   0.95 (  0.95)	Loss_d 0.289 (0.289)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.235 (0.244)	test_acc   0.89 (  0.89)	test_minacc   0.53 (  0.54)	test_majacc   0.96 (  0.96)	Loss_d 0.235 (0.244)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.53 (  0.54)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.82 (  0.84)
Test: [  20/  26]	Loss 0.263 (0.241)	test_acc   0.88 (  0.90)	test_minacc   0.50 (  0.55)	test_majacc   0.96 (  0.96)	Loss_d 0.263 (0.241)	test_acc_d   0.88 (  0.90)	test_minacc_d   0.50 (  0.55)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.84)
Test: [  26/  26]	Loss 0.140 (0.229)	test_acc   0.95 (  0.90)	test_minacc   0.73 (  0.57)	test_majacc   0.99 (  0.96)	Loss_d 0.140 (0.229)	test_acc_d   0.95 (  0.90)	test_minacc_d   0.73 (  0.57)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.84 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.11it/s]
Test: [  0/  1]	Loss 2.419 (2.419)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.98 (  0.98)	Loss_d 2.419 (2.419)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.57 (  0.57)
Test: [  1/  1]	Loss 2.419 (2.419)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.98 (  0.98)	Loss_d 2.419 (2.419)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.57 (  0.57)
Overall Timing[ 12/  1]	epoch_time 0.0357 (0.0382)	validation_time 0.0003 (0.0008)	train_time 0.0353 (0.0370)
record: (train_acc, test_acc) (0.8975000233054161, 0.47700002789497375)
last accs (train_acc, test_acc) (0.9032000296115875, 0.37800002098083496)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 19%|#9        | 5/26 [00:00<00:00, 21.32it/s] 35%|###4      | 9/26 [00:00<00:00, 27.64it/s] 50%|#####     | 13/26 [00:00<00:00, 31.27it/s] 65%|######5   | 17/26 [00:00<00:00, 33.72it/s] 81%|########  | 21/26 [00:00<00:00, 35.25it/s] 96%|#########6| 25/26 [00:00<00:00, 36.71it/s]100%|##########| 26/26 [00:00<00:00, 29.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.177 (0.209)	train_nll   0.18 (  0.21)	train_penalty   0.00 (  0.01)	weight_norm  24.24 ( 24.05)	train_acc   0.93 (  0.91)	train_minacc   0.80 (  0.65)	train_majacc   0.95 (  0.95)	train_corr   0.00 (  0.00)	l1 8.3049 (8.0090)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.03it/s] 27%|##6       | 7/26 [00:00<00:00, 34.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.62it/s] 50%|#####     | 13/26 [00:00<00:00, 41.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.47it/s] 96%|#########6| 25/26 [00:00<00:00, 47.86it/s]100%|##########| 26/26 [00:00<00:00, 39.93it/s]
Test: [   0/  26]	Loss 0.211 (0.211)	test_acc   0.91 (  0.91)	test_minacc   0.77 (  0.77)	test_majacc   0.94 (  0.94)	Loss_d 0.211 (0.211)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.183 (0.199)	test_acc   0.91 (  0.91)	test_minacc   0.77 (  0.71)	test_majacc   0.94 (  0.95)	Loss_d 0.183 (0.199)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.77 (  0.71)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.72 (  0.78)
Test: [  20/  26]	Loss 0.217 (0.203)	test_acc   0.91 (  0.92)	test_minacc   0.70 (  0.71)	test_majacc   0.95 (  0.95)	Loss_d 0.217 (0.203)	test_acc_d   0.91 (  0.92)	test_minacc_d   0.70 (  0.71)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.76 (  0.78)
Test: [  26/  26]	Loss 0.111 (0.190)	test_acc   0.98 (  0.92)	test_minacc   0.95 (  0.73)	test_majacc   0.99 (  0.96)	Loss_d 0.111 (0.190)	test_acc_d   0.98 (  0.92)	test_minacc_d   0.95 (  0.73)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.77 (  0.78)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.94it/s]
Test: [  0/  1]	Loss 2.631 (2.631)	test_acc   0.42 (  0.42)	test_minacc   0.37 (  0.37)	test_majacc   0.94 (  0.94)	Loss_d 2.631 (2.631)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.46 (  0.46)
Test: [  1/  1]	Loss 2.631 (2.631)	test_acc   0.42 (  0.42)	test_minacc   0.37 (  0.37)	test_majacc   0.94 (  0.94)	Loss_d 2.631 (2.631)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.46 (  0.46)
Overall Timing[ 13/  1]	epoch_time 0.0359 (0.0381)	validation_time 0.0003 (0.0008)	train_time 0.0355 (0.0369)
record: (train_acc, test_acc) (0.8975000233054161, 0.47700002789497375)
last accs (train_acc, test_acc) (0.9222000178694725, 0.4230000078678131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.63it/s] 19%|#9        | 5/26 [00:00<00:00, 26.00it/s] 35%|###4      | 9/26 [00:00<00:00, 31.25it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.04it/s] 69%|######9   | 18/26 [00:00<00:00, 36.46it/s] 85%|########4 | 22/26 [00:00<00:00, 36.43it/s]100%|##########| 26/26 [00:00<00:00, 31.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.176 (0.202)	train_nll   0.18 (  0.20)	train_penalty   0.00 (  0.01)	weight_norm  24.71 ( 24.48)	train_acc   0.95 (  0.91)	train_minacc   0.80 (  0.67)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 8.1841 (8.1811)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.30it/s] 31%|###       | 8/26 [00:00<00:00, 39.86it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.86it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.41it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.78it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.78it/s]100%|##########| 26/26 [00:00<00:00, 52.00it/s]100%|##########| 26/26 [00:00<00:00, 41.91it/s]
Test: [   0/  26]	Loss 0.265 (0.265)	test_acc   0.88 (  0.88)	test_minacc   0.57 (  0.57)	test_majacc   0.94 (  0.94)	Loss_d 0.265 (0.265)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.77 (  0.77)
Test: [  10/  26]	Loss 0.216 (0.221)	test_acc   0.91 (  0.91)	test_minacc   0.68 (  0.63)	test_majacc   0.96 (  0.96)	Loss_d 0.216 (0.221)	test_acc_d   0.91 (  0.91)	test_minacc_d   0.68 (  0.63)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.74 (  0.79)
Test: [  20/  26]	Loss 0.189 (0.214)	test_acc   0.92 (  0.91)	test_minacc   0.67 (  0.63)	test_majacc   0.98 (  0.96)	Loss_d 0.189 (0.214)	test_acc_d   0.92 (  0.91)	test_minacc_d   0.67 (  0.63)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.79 (  0.79)
Test: [  26/  26]	Loss 0.086 (0.196)	test_acc   0.98 (  0.92)	test_minacc   0.90 (  0.67)	test_majacc   0.99 (  0.97)	Loss_d 0.086 (0.196)	test_acc_d   0.98 (  0.92)	test_minacc_d   0.90 (  0.67)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.77 (  0.79)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.22it/s]
Test: [  0/  1]	Loss 2.653 (2.653)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.94 (  0.94)	Loss_d 2.653 (2.653)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.49 (  0.49)
Test: [  1/  1]	Loss 2.653 (2.653)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.94 (  0.94)	Loss_d 2.653 (2.653)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.49 (  0.49)
Overall Timing[ 14/  1]	epoch_time 0.0348 (0.0379)	validation_time 0.0003 (0.0008)	train_time 0.0345 (0.0368)
record: (train_acc, test_acc) (0.8975000233054161, 0.47700002789497375)
last accs (train_acc, test_acc) (0.9211000215411186, 0.4010000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.04it/s] 19%|#9        | 5/26 [00:00<00:00, 22.59it/s] 35%|###4      | 9/26 [00:00<00:00, 28.74it/s] 50%|#####     | 13/26 [00:00<00:00, 32.45it/s] 65%|######5   | 17/26 [00:00<00:00, 34.90it/s] 81%|########  | 21/26 [00:00<00:00, 36.52it/s] 96%|#########6| 25/26 [00:00<00:00, 37.08it/s]100%|##########| 26/26 [00:00<00:00, 30.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.004 (0.082)	train_nll   0.36 (  0.27)	train_penalty   0.00 (  0.01)	weight_norm  25.16 ( 24.96)	train_acc   0.85 (  0.88)	train_minacc   0.82 (  0.72)	train_majacc   0.86 (  0.91)	train_corr   0.00 (  0.00)	l1 5.7774 (7.7627)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 27%|##6       | 7/26 [00:00<00:00, 32.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.49it/s] 50%|#####     | 13/26 [00:00<00:00, 39.28it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.35it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.35it/s] 96%|#########6| 25/26 [00:00<00:00, 46.96it/s]100%|##########| 26/26 [00:00<00:00, 38.48it/s]
Test: [   0/  26]	Loss 0.431 (0.431)	test_acc   0.81 (  0.81)	test_minacc   0.80 (  0.80)	test_majacc   0.81 (  0.81)	Loss_d 0.431 (0.431)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.446 (0.421)	test_acc   0.80 (  0.80)	test_minacc   0.80 (  0.79)	test_majacc   0.80 (  0.80)	Loss_d 0.446 (0.421)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.80 (  0.79)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.51 (  0.55)
Test: [  20/  26]	Loss 0.427 (0.425)	test_acc   0.77 (  0.80)	test_minacc   0.66 (  0.76)	test_majacc   0.80 (  0.80)	Loss_d 0.427 (0.425)	test_acc_d   0.77 (  0.80)	test_minacc_d   0.66 (  0.76)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.55 (  0.56)
Test: [  26/  26]	Loss 0.399 (0.428)	test_acc   0.83 (  0.80)	test_minacc   0.70 (  0.75)	test_majacc   0.85 (  0.80)	Loss_d 0.399 (0.428)	test_acc_d   0.83 (  0.80)	test_minacc_d   0.70 (  0.75)	test_majacc_d   0.85 (  0.80)	test_corr_d   0.56 (  0.56)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.04it/s]
Test: [  0/  1]	Loss 1.353 (1.353)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.86 (  0.86)	Loss_d 1.353 (1.353)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 1.353 (1.353)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.86 (  0.86)	Loss_d 1.353 (1.353)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.19 (  0.19)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0349 (0.0377)	validation_time 0.0003 (0.0007)	train_time 0.0346 (0.0366)
record: (train_acc, test_acc) (0.7955000229477882, 0.5020000338554382)
last accs (train_acc, test_acc) (0.7955000229477882, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.69it/s] 19%|#9        | 5/26 [00:00<00:00, 22.80it/s] 35%|###4      | 9/26 [00:00<00:00, 29.08it/s] 50%|#####     | 13/26 [00:00<00:00, 32.70it/s] 69%|######9   | 18/26 [00:00<00:00, 35.79it/s] 88%|########8 | 23/26 [00:00<00:00, 37.20it/s]100%|##########| 26/26 [00:00<00:00, 31.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.002)	train_nll   0.49 (  0.47)	train_penalty   0.00 (  0.00)	weight_norm  25.26 ( 25.23)	train_acc   0.76 (  0.75)	train_minacc   0.65 (  0.61)	train_majacc   0.78 (  0.78)	train_corr   0.00 (  0.00)	l1 4.9118 (5.1726)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.55it/s] 35%|###4      | 9/26 [00:00<00:00, 41.84it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.84it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.05it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.05it/s] 81%|########  | 21/26 [00:00<00:00, 49.17it/s]100%|##########| 26/26 [00:00<00:00, 42.91it/s]
Test: [   0/  26]	Loss 0.495 (0.495)	test_acc   0.74 (  0.74)	test_minacc   0.74 (  0.74)	test_majacc   0.74 (  0.74)	Loss_d 0.495 (0.495)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.47 (  0.47)
Test: [  10/  26]	Loss 0.502 (0.490)	test_acc   0.73 (  0.74)	test_minacc   0.73 (  0.74)	test_majacc   0.73 (  0.74)	Loss_d 0.502 (0.490)	test_acc_d   0.73 (  0.74)	test_minacc_d   0.73 (  0.74)	test_majacc_d   0.73 (  0.74)	test_corr_d   0.47 (  0.51)
Test: [  20/  26]	Loss 0.498 (0.494)	test_acc   0.74 (  0.74)	test_minacc   0.64 (  0.72)	test_majacc   0.76 (  0.74)	Loss_d 0.498 (0.494)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.64 (  0.72)	test_majacc_d   0.76 (  0.74)	test_corr_d   0.50 (  0.51)
Test: [  26/  26]	Loss 0.486 (0.496)	test_acc   0.76 (  0.74)	test_minacc   0.68 (  0.71)	test_majacc   0.78 (  0.74)	Loss_d 0.486 (0.496)	test_acc_d   0.76 (  0.74)	test_minacc_d   0.68 (  0.71)	test_majacc_d   0.78 (  0.74)	test_corr_d   0.47 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.33it/s]
Test: [  0/  1]	Loss 1.142 (1.142)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.47)	test_majacc   0.77 (  0.77)	Loss_d 1.142 (1.142)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 1.142 (1.142)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.47)	test_majacc   0.77 (  0.77)	Loss_d 1.142 (1.142)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.19 (  0.19)
Overall Timing[ 16/  1]	epoch_time 0.0348 (0.0375)	validation_time 0.0003 (0.0007)	train_time 0.0345 (0.0365)
record: (train_acc, test_acc) (0.7955000229477882, 0.5020000338554382)
last accs (train_acc, test_acc) (0.7385000269412995, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 19%|#9        | 5/26 [00:00<00:00, 23.41it/s] 35%|###4      | 9/26 [00:00<00:00, 29.14it/s] 50%|#####     | 13/26 [00:00<00:00, 32.70it/s] 65%|######5   | 17/26 [00:00<00:00, 35.07it/s] 81%|########  | 21/26 [00:00<00:00, 36.14it/s] 96%|#########6| 25/26 [00:00<00:00, 37.01it/s]100%|##########| 26/26 [00:00<00:00, 30.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.001)	train_nll   0.46 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  25.27 ( 25.27)	train_acc   0.74 (  0.75)	train_minacc   0.60 (  0.70)	train_majacc   0.77 (  0.76)	train_corr   0.00 (  0.00)	l1 5.1020 (4.9155)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.30it/s] 19%|#9        | 5/26 [00:00<00:00, 25.43it/s]                                               19%|#9        | 5/26 [00:00<00:00, 25.43it/s] 42%|####2     | 11/26 [00:00<00:00, 40.65it/s] 62%|######1   | 16/26 [00:00<00:00, 43.52it/s]                                                62%|######1   | 16/26 [00:00<00:00, 43.52it/s] 85%|########4 | 22/26 [00:00<00:00, 48.75it/s]100%|##########| 26/26 [00:00<00:00, 40.42it/s]
Test: [   0/  26]	Loss 0.491 (0.491)	test_acc   0.75 (  0.75)	test_minacc   0.64 (  0.64)	test_majacc   0.77 (  0.77)	Loss_d 0.491 (0.491)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.49 (  0.49)
Test: [  10/  26]	Loss 0.501 (0.483)	test_acc   0.73 (  0.75)	test_minacc   0.68 (  0.69)	test_majacc   0.74 (  0.76)	Loss_d 0.501 (0.483)	test_acc_d   0.73 (  0.75)	test_minacc_d   0.68 (  0.69)	test_majacc_d   0.74 (  0.76)	test_corr_d   0.48 (  0.51)
Test: [  20/  26]	Loss 0.505 (0.486)	test_acc   0.74 (  0.75)	test_minacc   0.56 (  0.67)	test_majacc   0.78 (  0.76)	Loss_d 0.505 (0.486)	test_acc_d   0.74 (  0.75)	test_minacc_d   0.56 (  0.67)	test_majacc_d   0.78 (  0.76)	test_corr_d   0.50 (  0.52)
Test: [  26/  26]	Loss 0.479 (0.488)	test_acc   0.74 (  0.75)	test_minacc   0.60 (  0.66)	test_majacc   0.77 (  0.76)	Loss_d 0.479 (0.488)	test_acc_d   0.74 (  0.75)	test_minacc_d   0.60 (  0.66)	test_majacc_d   0.77 (  0.76)	test_corr_d   0.49 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.96it/s]
Test: [  0/  1]	Loss 1.248 (1.248)	test_acc   0.48 (  0.48)	test_minacc   0.45 (  0.45)	test_majacc   0.79 (  0.79)	Loss_d 1.248 (1.248)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 1.248 (1.248)	test_acc   0.48 (  0.48)	test_minacc   0.45 (  0.45)	test_majacc   0.79 (  0.79)	Loss_d 1.248 (1.248)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.20 (  0.20)
Overall Timing[ 17/  1]	epoch_time 0.0358 (0.0374)	validation_time 0.0004 (0.0007)	train_time 0.0354 (0.0364)
record: (train_acc, test_acc) (0.7955000229477882, 0.5020000338554382)
last accs (train_acc, test_acc) (0.7473000311851501, 0.484000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 19%|#9        | 5/26 [00:00<00:00, 22.54it/s] 35%|###4      | 9/26 [00:00<00:00, 28.14it/s] 50%|#####     | 13/26 [00:00<00:00, 31.25it/s] 65%|######5   | 17/26 [00:00<00:00, 31.82it/s] 81%|########  | 21/26 [00:00<00:00, 33.43it/s] 96%|#########6| 25/26 [00:00<00:00, 35.13it/s]100%|##########| 26/26 [00:00<00:00, 29.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.005 (0.002)	train_nll   0.36 (  0.44)	train_penalty   0.00 (  0.00)	weight_norm  25.28 ( 25.28)	train_acc   0.80 (  0.78)	train_minacc   0.78 (  0.71)	train_majacc   0.81 (  0.79)	train_corr   0.00 (  0.00)	l1 5.1906 (5.2688)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.95it/s] 31%|###       | 8/26 [00:00<00:00, 36.72it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.72it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.55it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.94it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.94it/s] 96%|#########6| 25/26 [00:00<00:00, 47.56it/s]100%|##########| 26/26 [00:00<00:00, 41.08it/s]
Test: [   0/  26]	Loss 0.374 (0.374)	test_acc   0.82 (  0.82)	test_minacc   0.79 (  0.79)	test_majacc   0.82 (  0.82)	Loss_d 0.374 (0.374)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.367 (0.354)	test_acc   0.84 (  0.83)	test_minacc   0.82 (  0.84)	test_majacc   0.84 (  0.83)	Loss_d 0.367 (0.354)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.82 (  0.84)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.60 (  0.63)
Test: [  20/  26]	Loss 0.388 (0.358)	test_acc   0.81 (  0.83)	test_minacc   0.86 (  0.84)	test_majacc   0.80 (  0.82)	Loss_d 0.388 (0.358)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.86 (  0.84)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.61 (  0.63)
Test: [  26/  26]	Loss 0.370 (0.362)	test_acc   0.79 (  0.82)	test_minacc   0.78 (  0.83)	test_majacc   0.79 (  0.82)	Loss_d 0.370 (0.362)	test_acc_d   0.79 (  0.82)	test_minacc_d   0.78 (  0.83)	test_majacc_d   0.79 (  0.82)	test_corr_d   0.62 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.03it/s]
Test: [  0/  1]	Loss 1.364 (1.364)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.84 (  0.84)	Loss_d 1.364 (1.364)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 1.364 (1.364)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.84 (  0.84)	Loss_d 1.364 (1.364)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.31 (  0.31)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[ 18/  1]	epoch_time 0.0364 (0.0374)	validation_time 0.0003 (0.0007)	train_time 0.0361 (0.0364)
record: (train_acc, test_acc) (0.8226000335216522, 0.5100000500679016)
last accs (train_acc, test_acc) (0.8226000335216522, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.71it/s] 19%|#9        | 5/26 [00:00<00:00, 25.55it/s] 35%|###4      | 9/26 [00:00<00:00, 31.06it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.46it/s] 92%|#########2| 24/26 [00:00<00:00, 38.88it/s]100%|##########| 26/26 [00:00<00:00, 32.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.001 (0.002)	train_nll   0.40 (  0.39)	train_penalty   0.00 (  0.00)	weight_norm  25.31 ( 25.30)	train_acc   0.77 (  0.79)	train_minacc   0.78 (  0.81)	train_majacc   0.77 (  0.79)	train_corr   0.00 (  0.00)	l1 5.8506 (5.7465)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.81it/s] 23%|##3       | 6/26 [00:00<00:00, 32.23it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.23it/s] 46%|####6     | 12/26 [00:00<00:00, 42.98it/s] 69%|######9   | 18/26 [00:00<00:00, 45.68it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.68it/s] 92%|#########2| 24/26 [00:00<00:00, 49.14it/s]100%|##########| 26/26 [00:00<00:00, 41.18it/s]
Test: [   0/  26]	Loss 0.395 (0.395)	test_acc   0.78 (  0.78)	test_minacc   0.74 (  0.74)	test_majacc   0.79 (  0.79)	Loss_d 0.395 (0.395)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.60 (  0.60)
Test: [  10/  26]	Loss 0.352 (0.347)	test_acc   0.83 (  0.82)	test_minacc   0.83 (  0.84)	test_majacc   0.82 (  0.81)	Loss_d 0.352 (0.347)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.83 (  0.84)	test_majacc_d   0.82 (  0.81)	test_corr_d   0.61 (  0.63)
Test: [  20/  26]	Loss 0.375 (0.355)	test_acc   0.81 (  0.81)	test_minacc   0.86 (  0.83)	test_majacc   0.80 (  0.80)	Loss_d 0.375 (0.355)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.86 (  0.83)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.61 (  0.62)
Test: [  26/  26]	Loss 0.398 (0.361)	test_acc   0.77 (  0.80)	test_minacc   0.78 (  0.82)	test_majacc   0.77 (  0.80)	Loss_d 0.398 (0.361)	test_acc_d   0.77 (  0.80)	test_minacc_d   0.78 (  0.82)	test_majacc_d   0.77 (  0.80)	test_corr_d   0.60 (  0.62)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.58it/s]
Test: [  0/  1]	Loss 1.586 (1.586)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.82 (  0.82)	Loss_d 1.586 (1.586)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 1.586 (1.586)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.82 (  0.82)	Loss_d 1.586 (1.586)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.33 (  0.33)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[ 19/  1]	epoch_time 0.0336 (0.0372)	validation_time 0.0004 (0.0007)	train_time 0.0333 (0.0363)
record: (train_acc, test_acc) (0.8039000242948532, 0.5370000004768372)
last accs (train_acc, test_acc) (0.8039000242948532, 0.5370000004768372)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.44it/s] 19%|#9        | 5/26 [00:00<00:00, 25.13it/s] 35%|###4      | 9/26 [00:00<00:00, 30.52it/s] 50%|#####     | 13/26 [00:00<00:00, 33.98it/s] 69%|######9   | 18/26 [00:00<00:00, 36.96it/s] 88%|########8 | 23/26 [00:00<00:00, 38.44it/s]100%|##########| 26/26 [00:00<00:00, 32.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.001 (0.002)	train_nll   0.36 (  0.37)	train_penalty   0.00 (  0.00)	weight_norm  25.32 ( 25.31)	train_acc   0.77 (  0.79)	train_minacc   0.68 (  0.84)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 5.6779 (5.7757)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.06it/s] 31%|###       | 8/26 [00:00<00:00, 35.07it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.07it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.63it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.11it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.11it/s]100%|##########| 26/26 [00:00<00:00, 50.15it/s]100%|##########| 26/26 [00:00<00:00, 40.85it/s]
Test: [   0/  26]	Loss 0.372 (0.372)	test_acc   0.80 (  0.80)	test_minacc   0.70 (  0.70)	test_majacc   0.82 (  0.82)	Loss_d 0.372 (0.372)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.64 (  0.64)
Test: [  10/  26]	Loss 0.337 (0.348)	test_acc   0.83 (  0.82)	test_minacc   0.80 (  0.78)	test_majacc   0.84 (  0.83)	Loss_d 0.337 (0.348)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.65 (  0.66)
Test: [  20/  26]	Loss 0.366 (0.351)	test_acc   0.81 (  0.82)	test_minacc   0.80 (  0.77)	test_majacc   0.81 (  0.83)	Loss_d 0.366 (0.351)	test_acc_d   0.81 (  0.82)	test_minacc_d   0.80 (  0.77)	test_majacc_d   0.81 (  0.83)	test_corr_d   0.65 (  0.66)
Test: [  26/  26]	Loss 0.366 (0.354)	test_acc   0.77 (  0.82)	test_minacc   0.68 (  0.77)	test_majacc   0.79 (  0.83)	Loss_d 0.366 (0.354)	test_acc_d   0.77 (  0.82)	test_minacc_d   0.68 (  0.77)	test_majacc_d   0.79 (  0.83)	test_corr_d   0.66 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.83it/s]
Test: [  0/  1]	Loss 1.615 (1.615)	test_acc   0.47 (  0.47)	test_minacc   0.43 (  0.43)	test_majacc   0.85 (  0.85)	Loss_d 1.615 (1.615)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.39 (  0.39)
Test: [  1/  1]	Loss 1.615 (1.615)	test_acc   0.47 (  0.47)	test_minacc   0.43 (  0.43)	test_majacc   0.85 (  0.85)	Loss_d 1.615 (1.615)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.39 (  0.39)
Overall Timing[ 20/  1]	epoch_time 0.0354 (0.0371)	validation_time 0.0003 (0.0006)	train_time 0.0351 (0.0362)
record: (train_acc, test_acc) (0.8039000242948532, 0.5370000004768372)
last accs (train_acc, test_acc) (0.816900025844574, 0.47300001978874207)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.49it/s] 19%|#9        | 5/26 [00:00<00:00, 25.02it/s] 35%|###4      | 9/26 [00:00<00:00, 30.87it/s] 50%|#####     | 13/26 [00:00<00:00, 34.30it/s] 65%|######5   | 17/26 [00:00<00:00, 35.83it/s] 85%|########4 | 22/26 [00:00<00:00, 37.55it/s]100%|##########| 26/26 [00:00<00:00, 37.97it/s]100%|##########| 26/26 [00:00<00:00, 31.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.001 (0.000)	train_nll   0.37 (  0.38)	train_penalty   0.00 (  0.00)	weight_norm  25.33 ( 25.32)	train_acc   0.78 (  0.80)	train_minacc   0.75 (  0.81)	train_majacc   0.79 (  0.80)	train_corr   0.00 (  0.00)	l1 5.6230 (5.9705)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 23%|##3       | 6/26 [00:00<00:00, 28.27it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.27it/s] 42%|####2     | 11/26 [00:00<00:00, 36.02it/s] 65%|######5   | 17/26 [00:00<00:00, 43.97it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.97it/s] 88%|########8 | 23/26 [00:00<00:00, 46.66it/s]100%|##########| 26/26 [00:00<00:00, 38.37it/s]
Test: [   0/  26]	Loss 0.356 (0.356)	test_acc   0.80 (  0.80)	test_minacc   0.81 (  0.81)	test_majacc   0.80 (  0.80)	Loss_d 0.356 (0.356)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.64 (  0.64)
Test: [  10/  26]	Loss 0.323 (0.333)	test_acc   0.84 (  0.83)	test_minacc   0.88 (  0.85)	test_majacc   0.84 (  0.82)	Loss_d 0.323 (0.333)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.88 (  0.85)	test_majacc_d   0.84 (  0.82)	test_corr_d   0.65 (  0.66)
Test: [  20/  26]	Loss 0.348 (0.332)	test_acc   0.83 (  0.83)	test_minacc   0.87 (  0.84)	test_majacc   0.82 (  0.82)	Loss_d 0.348 (0.332)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.87 (  0.84)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.65 (  0.66)
Test: [  26/  26]	Loss 0.366 (0.338)	test_acc   0.78 (  0.82)	test_minacc   0.75 (  0.84)	test_majacc   0.79 (  0.82)	Loss_d 0.366 (0.338)	test_acc_d   0.78 (  0.82)	test_minacc_d   0.75 (  0.84)	test_majacc_d   0.79 (  0.82)	test_corr_d   0.66 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.95it/s]
Test: [  0/  1]	Loss 1.552 (1.552)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.83 (  0.83)	Loss_d 1.552 (1.552)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.36 (  0.36)
Test: [  1/  1]	Loss 1.552 (1.552)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.83 (  0.83)	Loss_d 1.552 (1.552)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.36 (  0.36)
Overall Timing[ 21/  1]	epoch_time 0.0348 (0.0370)	validation_time 0.0004 (0.0006)	train_time 0.0343 (0.0361)
record: (train_acc, test_acc) (0.8039000242948532, 0.5370000004768372)
last accs (train_acc, test_acc) (0.8229000239968299, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.36it/s] 19%|#9        | 5/26 [00:00<00:00, 22.93it/s] 35%|###4      | 9/26 [00:00<00:00, 29.27it/s] 50%|#####     | 13/26 [00:00<00:00, 32.72it/s] 69%|######9   | 18/26 [00:00<00:00, 35.66it/s] 85%|########4 | 22/26 [00:00<00:00, 36.84it/s]100%|##########| 26/26 [00:00<00:00, 30.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.001 (0.001)	train_nll   0.38 (  0.37)	train_penalty   0.00 (  0.00)	weight_norm  25.34 ( 25.33)	train_acc   0.77 (  0.79)	train_minacc   0.68 (  0.84)	train_majacc   0.79 (  0.79)	train_corr   0.00 (  0.00)	l1 5.8675 (6.1071)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.59it/s] 31%|###       | 8/26 [00:00<00:00, 40.16it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.16it/s] 50%|#####     | 13/26 [00:00<00:00, 41.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.94it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.94it/s] 96%|#########6| 25/26 [00:00<00:00, 47.28it/s]100%|##########| 26/26 [00:00<00:00, 40.66it/s]
Test: [   0/  26]	Loss 0.354 (0.354)	test_acc   0.83 (  0.83)	test_minacc   0.73 (  0.73)	test_majacc   0.85 (  0.85)	Loss_d 0.354 (0.354)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.312 (0.332)	test_acc   0.85 (  0.84)	test_minacc   0.77 (  0.76)	test_majacc   0.87 (  0.85)	Loss_d 0.312 (0.332)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.77 (  0.76)	test_majacc_d   0.87 (  0.85)	test_corr_d   0.68 (  0.69)
Test: [  20/  26]	Loss 0.325 (0.322)	test_acc   0.85 (  0.85)	test_minacc   0.84 (  0.75)	test_majacc   0.85 (  0.86)	Loss_d 0.325 (0.322)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.84 (  0.75)	test_majacc_d   0.85 (  0.86)	test_corr_d   0.70 (  0.70)
Test: [  26/  26]	Loss 0.374 (0.327)	test_acc   0.79 (  0.84)	test_minacc   0.68 (  0.75)	test_majacc   0.81 (  0.86)	Loss_d 0.374 (0.327)	test_acc_d   0.79 (  0.84)	test_minacc_d   0.68 (  0.75)	test_majacc_d   0.81 (  0.86)	test_corr_d   0.70 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.64it/s]
Test: [  0/  1]	Loss 1.695 (1.695)	test_acc   0.45 (  0.45)	test_minacc   0.40 (  0.40)	test_majacc   0.87 (  0.87)	Loss_d 1.695 (1.695)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.44 (  0.44)
Test: [  1/  1]	Loss 1.695 (1.695)	test_acc   0.45 (  0.45)	test_minacc   0.40 (  0.40)	test_majacc   0.87 (  0.87)	Loss_d 1.695 (1.695)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.44 (  0.44)
Overall Timing[ 22/  1]	epoch_time 0.0363 (0.0369)	validation_time 0.0004 (0.0006)	train_time 0.0359 (0.0361)
record: (train_acc, test_acc) (0.8039000242948532, 0.5370000004768372)
last accs (train_acc, test_acc) (0.8412000207901001, 0.4490000307559967)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.49it/s] 19%|#9        | 5/26 [00:00<00:00, 25.74it/s] 35%|###4      | 9/26 [00:00<00:00, 30.57it/s] 50%|#####     | 13/26 [00:00<00:00, 33.76it/s] 69%|######9   | 18/26 [00:00<00:00, 36.48it/s] 88%|########8 | 23/26 [00:00<00:00, 37.66it/s]100%|##########| 26/26 [00:00<00:00, 31.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 5.695219039916992
set z to 5.410458087921143
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.001 (0.002)	train_nll   0.37 (  0.36)	train_penalty   0.00 (  0.00)	weight_norm  25.36 ( 25.35)	train_acc   0.77 (  0.80)	train_minacc   0.75 (  0.83)	train_majacc   0.78 (  0.80)	train_corr   0.00 (  0.00)	l1 6.3843 (6.2877)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 27%|##6       | 7/26 [00:00<00:00, 32.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.12it/s] 50%|#####     | 13/26 [00:00<00:00, 40.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.72it/s] 96%|#########6| 25/26 [00:00<00:00, 48.47it/s]100%|##########| 26/26 [00:00<00:00, 38.67it/s]
Test: [   0/  26]	Loss 0.347 (0.347)	test_acc   0.82 (  0.82)	test_minacc   0.79 (  0.79)	test_majacc   0.83 (  0.83)	Loss_d 0.347 (0.347)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.314 (0.340)	test_acc   0.85 (  0.82)	test_minacc   0.82 (  0.80)	test_majacc   0.86 (  0.82)	Loss_d 0.314 (0.340)	test_acc_d   0.85 (  0.82)	test_minacc_d   0.82 (  0.80)	test_majacc_d   0.86 (  0.82)	test_corr_d   0.68 (  0.68)
Test: [  20/  26]	Loss 0.302 (0.321)	test_acc   0.84 (  0.83)	test_minacc   0.83 (  0.80)	test_majacc   0.85 (  0.84)	Loss_d 0.302 (0.321)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.83 (  0.80)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.71 (  0.70)
Test: [  26/  26]	Loss 0.360 (0.323)	test_acc   0.78 (  0.83)	test_minacc   0.70 (  0.80)	test_majacc   0.80 (  0.84)	Loss_d 0.360 (0.323)	test_acc_d   0.78 (  0.83)	test_minacc_d   0.70 (  0.80)	test_majacc_d   0.80 (  0.84)	test_corr_d   0.70 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.96it/s]
Test: [  0/  1]	Loss 1.850 (1.850)	test_acc   0.48 (  0.48)	test_minacc   0.43 (  0.43)	test_majacc   0.86 (  0.86)	Loss_d 1.850 (1.850)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.43 (  0.43)
Test: [  1/  1]	Loss 1.850 (1.850)	test_acc   0.48 (  0.48)	test_minacc   0.43 (  0.43)	test_majacc   0.86 (  0.86)	Loss_d 1.850 (1.850)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.43 (  0.43)
Overall Timing[ 23/  1]	epoch_time 0.0352 (0.0369)	validation_time 0.0004 (0.0006)	train_time 0.0348 (0.0361)
record: (train_acc, test_acc) (0.8039000242948532, 0.5370000004768372)
last accs (train_acc, test_acc) (0.8301000282168388, 0.47700002789497375)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.09it/s] 19%|#9        | 5/26 [00:00<00:01, 18.57it/s] 35%|###4      | 9/26 [00:00<00:00, 26.01it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.86it/s] 92%|#########2| 24/26 [00:00<00:00, 36.64it/s]100%|##########| 26/26 [00:00<00:00, 29.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.004 (0.003)	train_nll   0.38 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.39 ( 25.37)	train_acc   0.76 (  0.83)	train_minacc   0.78 (  0.82)	train_majacc   0.76 (  0.83)	train_corr   0.00 (  0.00)	l1 7.2577 (6.5001)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.53it/s] 27%|##6       | 7/26 [00:00<00:00, 36.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.98it/s] 50%|#####     | 13/26 [00:00<00:00, 41.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.26it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.26it/s] 96%|#########6| 25/26 [00:00<00:00, 48.38it/s]100%|##########| 26/26 [00:00<00:00, 40.50it/s]
Test: [   0/  26]	Loss 0.352 (0.352)	test_acc   0.79 (  0.79)	test_minacc   0.80 (  0.80)	test_majacc   0.79 (  0.79)	Loss_d 0.352 (0.352)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.62 (  0.62)
Test: [  10/  26]	Loss 0.338 (0.361)	test_acc   0.82 (  0.77)	test_minacc   0.88 (  0.85)	test_majacc   0.80 (  0.76)	Loss_d 0.338 (0.361)	test_acc_d   0.82 (  0.77)	test_minacc_d   0.88 (  0.85)	test_majacc_d   0.80 (  0.76)	test_corr_d   0.60 (  0.61)
Test: [  20/  26]	Loss 0.286 (0.343)	test_acc   0.84 (  0.79)	test_minacc   0.87 (  0.86)	test_majacc   0.84 (  0.78)	Loss_d 0.286 (0.343)	test_acc_d   0.84 (  0.79)	test_minacc_d   0.87 (  0.86)	test_majacc_d   0.84 (  0.78)	test_corr_d   0.66 (  0.63)
Test: [  26/  26]	Loss 0.352 (0.340)	test_acc   0.78 (  0.79)	test_minacc   0.82 (  0.86)	test_majacc   0.77 (  0.78)	Loss_d 0.352 (0.340)	test_acc_d   0.78 (  0.79)	test_minacc_d   0.82 (  0.86)	test_majacc_d   0.77 (  0.78)	test_corr_d   0.64 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.01it/s]
Test: [  0/  1]	Loss 2.004 (2.004)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.77 (  0.77)	Loss_d 2.004 (2.004)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 2.004 (2.004)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.77 (  0.77)	Loss_d 2.004 (2.004)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.26 (  0.26)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[ 24/  1]	epoch_time 0.0356 (0.0368)	validation_time 0.0004 (0.0006)	train_time 0.0352 (0.0360)
record: (train_acc, test_acc) (0.7914000289440155, 0.5890000462532043)
last accs (train_acc, test_acc) (0.7914000289440155, 0.5890000462532043)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.76it/s] 19%|#9        | 5/26 [00:00<00:00, 21.61it/s] 35%|###4      | 9/26 [00:00<00:00, 27.89it/s] 50%|#####     | 13/26 [00:00<00:00, 31.81it/s] 69%|######9   | 18/26 [00:00<00:00, 35.05it/s] 85%|########4 | 22/26 [00:00<00:00, 36.35it/s]100%|##########| 26/26 [00:00<00:00, 37.23it/s]100%|##########| 26/26 [00:00<00:00, 30.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.001 (0.001)	train_nll   0.33 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  25.42 ( 25.40)	train_acc   0.84 (  0.81)	train_minacc   0.80 (  0.78)	train_majacc   0.84 (  0.81)	train_corr   0.00 (  0.00)	l1 6.9144 (6.8046)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 27%|##6       | 7/26 [00:00<00:00, 33.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.57it/s] 50%|#####     | 13/26 [00:00<00:00, 39.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.34it/s] 96%|#########6| 25/26 [00:00<00:00, 47.35it/s]100%|##########| 26/26 [00:00<00:00, 39.04it/s]
Test: [   0/  26]	Loss 0.332 (0.332)	test_acc   0.82 (  0.82)	test_minacc   0.84 (  0.84)	test_majacc   0.82 (  0.82)	Loss_d 0.332 (0.332)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.351 (0.359)	test_acc   0.81 (  0.80)	test_minacc   0.83 (  0.81)	test_majacc   0.81 (  0.80)	Loss_d 0.351 (0.359)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.83 (  0.81)	test_majacc_d   0.81 (  0.80)	test_corr_d   0.60 (  0.64)
Test: [  20/  26]	Loss 0.313 (0.350)	test_acc   0.84 (  0.80)	test_minacc   0.84 (  0.80)	test_majacc   0.84 (  0.80)	Loss_d 0.313 (0.350)	test_acc_d   0.84 (  0.80)	test_minacc_d   0.84 (  0.80)	test_majacc_d   0.84 (  0.80)	test_corr_d   0.67 (  0.65)
Test: [  26/  26]	Loss 0.325 (0.347)	test_acc   0.83 (  0.81)	test_minacc   0.80 (  0.81)	test_majacc   0.84 (  0.81)	Loss_d 0.325 (0.347)	test_acc_d   0.83 (  0.81)	test_minacc_d   0.80 (  0.81)	test_majacc_d   0.84 (  0.81)	test_corr_d   0.66 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.88it/s]
Test: [  0/  1]	Loss 1.964 (1.964)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.47)	test_majacc   0.80 (  0.80)	Loss_d 1.964 (1.964)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 1.964 (1.964)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.47)	test_majacc   0.80 (  0.80)	Loss_d 1.964 (1.964)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.33 (  0.33)
Overall Timing[ 25/  1]	epoch_time 0.0354 (0.0368)	validation_time 0.0004 (0.0006)	train_time 0.0350 (0.0360)
record: (train_acc, test_acc) (0.7914000289440155, 0.5890000462532043)
last accs (train_acc, test_acc) (0.8062000233530998, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.41it/s] 19%|#9        | 5/26 [00:00<00:01, 17.86it/s] 38%|###8      | 10/26 [00:00<00:00, 27.20it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.19it/s] 77%|#######6  | 20/26 [00:00<00:00, 34.69it/s] 92%|#########2| 24/26 [00:00<00:00, 35.84it/s]100%|##########| 26/26 [00:00<00:00, 28.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.001 (0.000)	train_nll   0.37 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  25.43 ( 25.42)	train_acc   0.79 (  0.81)	train_minacc   0.80 (  0.87)	train_majacc   0.79 (  0.80)	train_corr   0.00 (  0.00)	l1 7.2680 (6.8615)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s] 15%|#5        | 4/26 [00:00<00:01, 19.73it/s] 38%|###8      | 10/26 [00:00<00:00, 33.56it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.56it/s] 65%|######5   | 17/26 [00:00<00:00, 44.45it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.45it/s] 85%|########4 | 22/26 [00:00<00:00, 44.43it/s]100%|##########| 26/26 [00:00<00:00, 37.83it/s]
Test: [   0/  26]	Loss 0.360 (0.360)	test_acc   0.80 (  0.80)	test_minacc   0.87 (  0.87)	test_majacc   0.78 (  0.78)	Loss_d 0.360 (0.360)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.386 (0.384)	test_acc   0.78 (  0.77)	test_minacc   0.91 (  0.85)	test_majacc   0.75 (  0.76)	Loss_d 0.386 (0.384)	test_acc_d   0.78 (  0.77)	test_minacc_d   0.91 (  0.85)	test_majacc_d   0.75 (  0.76)	test_corr_d   0.55 (  0.60)
Test: [  20/  26]	Loss 0.346 (0.379)	test_acc   0.82 (  0.78)	test_minacc   0.89 (  0.85)	test_majacc   0.81 (  0.77)	Loss_d 0.346 (0.379)	test_acc_d   0.82 (  0.78)	test_minacc_d   0.89 (  0.85)	test_majacc_d   0.81 (  0.77)	test_corr_d   0.62 (  0.61)
Test: [  26/  26]	Loss 0.366 (0.373)	test_acc   0.79 (  0.78)	test_minacc   0.80 (  0.85)	test_majacc   0.79 (  0.77)	Loss_d 0.366 (0.373)	test_acc_d   0.79 (  0.78)	test_minacc_d   0.80 (  0.85)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.61 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.95it/s]
Test: [  0/  1]	Loss 2.062 (2.062)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.75 (  0.75)	Loss_d 2.062 (2.062)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 2.062 (2.062)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.75 (  0.75)	Loss_d 2.062 (2.062)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.27 (  0.27)
Overall Timing[ 26/  1]	epoch_time 0.0351 (0.0367)	validation_time 0.0003 (0.0006)	train_time 0.0347 (0.0359)
record: (train_acc, test_acc) (0.7914000289440155, 0.5890000462532043)
last accs (train_acc, test_acc) (0.7823000277876854, 0.5660000443458557)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.44it/s] 19%|#9        | 5/26 [00:00<00:00, 24.70it/s] 38%|###8      | 10/26 [00:00<00:00, 32.57it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.73it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.49it/s] 96%|#########6| 25/26 [00:00<00:00, 38.30it/s]100%|##########| 26/26 [00:00<00:00, 32.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.002 (0.001)	train_nll   0.30 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  25.44 ( 25.43)	train_acc   0.83 (  0.80)	train_minacc   0.95 (  0.89)	train_majacc   0.80 (  0.79)	train_corr   0.00 (  0.00)	l1 7.2691 (6.9765)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.09it/s] 15%|#5        | 4/26 [00:00<00:01, 17.94it/s] 35%|###4      | 9/26 [00:00<00:00, 30.38it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.38it/s] 58%|#####7    | 15/26 [00:00<00:00, 40.41it/s] 77%|#######6  | 20/26 [00:00<00:00, 42.34it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 42.34it/s]100%|##########| 26/26 [00:00<00:00, 35.99it/s]
Test: [   0/  26]	Loss 0.318 (0.318)	test_acc   0.82 (  0.82)	test_minacc   0.94 (  0.94)	test_majacc   0.80 (  0.80)	Loss_d 0.318 (0.318)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.62 (  0.62)
Test: [  10/  26]	Loss 0.367 (0.339)	test_acc   0.78 (  0.79)	test_minacc   0.94 (  0.93)	test_majacc   0.74 (  0.76)	Loss_d 0.367 (0.339)	test_acc_d   0.78 (  0.79)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.74 (  0.76)	test_corr_d   0.54 (  0.60)
Test: [  20/  26]	Loss 0.340 (0.349)	test_acc   0.81 (  0.78)	test_minacc   0.93 (  0.91)	test_majacc   0.78 (  0.75)	Loss_d 0.340 (0.349)	test_acc_d   0.81 (  0.78)	test_minacc_d   0.93 (  0.91)	test_majacc_d   0.78 (  0.75)	test_corr_d   0.62 (  0.60)
Test: [  26/  26]	Loss 0.314 (0.345)	test_acc   0.81 (  0.78)	test_minacc   0.95 (  0.92)	test_majacc   0.79 (  0.75)	Loss_d 0.314 (0.345)	test_acc_d   0.81 (  0.78)	test_minacc_d   0.95 (  0.92)	test_majacc_d   0.79 (  0.75)	test_corr_d   0.62 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.79it/s]
Test: [  0/  1]	Loss 1.958 (1.958)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.72 (  0.72)	Loss_d 1.958 (1.958)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 1.958 (1.958)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.72 (  0.72)	Loss_d 1.958 (1.958)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.18 (  0.18)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[ 27/  1]	epoch_time 0.0356 (0.0367)	validation_time 0.0004 (0.0006)	train_time 0.0352 (0.0359)
record: (train_acc, test_acc) (0.7788000312447548, 0.625)
last accs (train_acc, test_acc) (0.7788000312447548, 0.625)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 19%|#9        | 5/26 [00:00<00:00, 22.18it/s] 35%|###4      | 9/26 [00:00<00:00, 28.57it/s] 50%|#####     | 13/26 [00:00<00:00, 31.93it/s] 65%|######5   | 17/26 [00:00<00:00, 34.53it/s] 85%|########4 | 22/26 [00:00<00:00, 36.71it/s]100%|##########| 26/26 [00:00<00:00, 30.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.002 (0.001)	train_nll   0.29 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  25.46 ( 25.45)	train_acc   0.85 (  0.80)	train_minacc   0.88 (  0.90)	train_majacc   0.85 (  0.78)	train_corr   0.00 (  0.00)	l1 7.0308 (7.2770)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.51it/s] 27%|##6       | 7/26 [00:00<00:00, 29.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.01it/s] 50%|#####     | 13/26 [00:00<00:00, 40.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.00it/s] 96%|#########6| 25/26 [00:00<00:00, 48.99it/s]100%|##########| 26/26 [00:00<00:00, 39.00it/s]
Test: [   0/  26]	Loss 0.298 (0.298)	test_acc   0.83 (  0.83)	test_minacc   0.89 (  0.89)	test_majacc   0.82 (  0.82)	Loss_d 0.298 (0.298)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.293 (0.290)	test_acc   0.84 (  0.83)	test_minacc   0.94 (  0.94)	test_majacc   0.81 (  0.81)	Loss_d 0.293 (0.290)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.68 (  0.71)
Test: [  20/  26]	Loss 0.311 (0.300)	test_acc   0.83 (  0.82)	test_minacc   0.90 (  0.92)	test_majacc   0.81 (  0.80)	Loss_d 0.311 (0.300)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.90 (  0.92)	test_majacc_d   0.81 (  0.80)	test_corr_d   0.70 (  0.71)
Test: [  26/  26]	Loss 0.293 (0.299)	test_acc   0.83 (  0.82)	test_minacc   0.88 (  0.91)	test_majacc   0.82 (  0.80)	Loss_d 0.293 (0.299)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.88 (  0.91)	test_majacc_d   0.82 (  0.80)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.10it/s]
Test: [  0/  1]	Loss 1.986 (1.986)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.78 (  0.78)	Loss_d 1.986 (1.986)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.38 (  0.38)
Test: [  1/  1]	Loss 1.986 (1.986)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.78 (  0.78)	Loss_d 1.986 (1.986)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.38 (  0.38)
Overall Timing[ 28/  1]	epoch_time 0.0341 (0.0366)	validation_time 0.0003 (0.0006)	train_time 0.0337 (0.0358)
record: (train_acc, test_acc) (0.7788000312447548, 0.625)
last accs (train_acc, test_acc) (0.8204000225067138, 0.612000048160553)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.53it/s] 19%|#9        | 5/26 [00:00<00:01, 20.27it/s] 35%|###4      | 9/26 [00:00<00:00, 27.02it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.84it/s] 69%|######9   | 18/26 [00:00<00:00, 34.39it/s] 85%|########4 | 22/26 [00:00<00:00, 35.51it/s]100%|##########| 26/26 [00:00<00:00, 29.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.001 (0.001)	train_nll   0.34 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.48 ( 25.47)	train_acc   0.79 (  0.80)	train_minacc   0.82 (  0.91)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 7.5659 (7.6516)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.62it/s] 27%|##6       | 7/26 [00:00<00:00, 34.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.36it/s] 50%|#####     | 13/26 [00:00<00:00, 40.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.72it/s] 96%|#########6| 25/26 [00:00<00:00, 47.88it/s]100%|##########| 26/26 [00:00<00:00, 39.07it/s]
Test: [   0/  26]	Loss 0.327 (0.327)	test_acc   0.83 (  0.83)	test_minacc   0.89 (  0.89)	test_majacc   0.82 (  0.82)	Loss_d 0.327 (0.327)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.302 (0.310)	test_acc   0.84 (  0.82)	test_minacc   0.95 (  0.91)	test_majacc   0.81 (  0.80)	Loss_d 0.302 (0.310)	test_acc_d   0.84 (  0.82)	test_minacc_d   0.95 (  0.91)	test_majacc_d   0.81 (  0.80)	test_corr_d   0.69 (  0.70)
Test: [  20/  26]	Loss 0.301 (0.308)	test_acc   0.83 (  0.82)	test_minacc   0.93 (  0.91)	test_majacc   0.81 (  0.80)	Loss_d 0.301 (0.308)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.93 (  0.91)	test_majacc_d   0.81 (  0.80)	test_corr_d   0.70 (  0.71)
Test: [  26/  26]	Loss 0.324 (0.308)	test_acc   0.80 (  0.82)	test_minacc   0.85 (  0.91)	test_majacc   0.80 (  0.80)	Loss_d 0.324 (0.308)	test_acc_d   0.80 (  0.82)	test_minacc_d   0.85 (  0.91)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.71 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.28it/s]
Test: [  0/  1]	Loss 2.146 (2.146)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.82 (  0.82)	Loss_d 2.146 (2.146)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.40 (  0.40)
Test: [  1/  1]	Loss 2.146 (2.146)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.82 (  0.82)	Loss_d 2.146 (2.146)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.40 (  0.40)
Overall Timing[ 29/  1]	epoch_time 0.0354 (0.0365)	validation_time 0.0004 (0.0006)	train_time 0.0350 (0.0358)
record: (train_acc, test_acc) (0.7788000312447548, 0.625)
last accs (train_acc, test_acc) (0.8166000285744667, 0.5460000038146973)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.68it/s] 19%|#9        | 5/26 [00:00<00:00, 24.39it/s] 35%|###4      | 9/26 [00:00<00:00, 29.98it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.78it/s] 88%|########8 | 23/26 [00:00<00:00, 37.42it/s]100%|##########| 26/26 [00:00<00:00, 31.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.001 (0.001)	train_nll   0.34 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.49 ( 25.48)	train_acc   0.77 (  0.80)	train_minacc   0.90 (  0.93)	train_majacc   0.75 (  0.77)	train_corr   0.00 (  0.00)	l1 7.7896 (7.5342)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.60it/s] 27%|##6       | 7/26 [00:00<00:00, 31.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.56it/s] 46%|####6     | 12/26 [00:00<00:00, 36.96it/s] 69%|######9   | 18/26 [00:00<00:00, 44.71it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.71it/s] 92%|#########2| 24/26 [00:00<00:00, 48.37it/s]100%|##########| 26/26 [00:00<00:00, 37.36it/s]
Test: [   0/  26]	Loss 0.346 (0.346)	test_acc   0.79 (  0.79)	test_minacc   0.91 (  0.91)	test_majacc   0.76 (  0.76)	Loss_d 0.346 (0.346)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.352 (0.351)	test_acc   0.78 (  0.77)	test_minacc   0.91 (  0.93)	test_majacc   0.76 (  0.74)	Loss_d 0.352 (0.351)	test_acc_d   0.78 (  0.77)	test_minacc_d   0.91 (  0.93)	test_majacc_d   0.76 (  0.74)	test_corr_d   0.62 (  0.62)
Test: [  20/  26]	Loss 0.315 (0.346)	test_acc   0.82 (  0.77)	test_minacc   0.96 (  0.92)	test_majacc   0.79 (  0.74)	Loss_d 0.315 (0.346)	test_acc_d   0.82 (  0.77)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.79 (  0.74)	test_corr_d   0.64 (  0.63)
Test: [  26/  26]	Loss 0.340 (0.343)	test_acc   0.78 (  0.77)	test_minacc   0.90 (  0.92)	test_majacc   0.75 (  0.75)	Loss_d 0.340 (0.343)	test_acc_d   0.78 (  0.77)	test_minacc_d   0.90 (  0.92)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.64 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.65it/s]
Test: [  0/  1]	Loss 2.142 (2.142)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 2.142 (2.142)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 2.142 (2.142)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 2.142 (2.142)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.29 (  0.29)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[ 30/  1]	epoch_time 0.0349 (0.0365)	validation_time 0.0003 (0.0006)	train_time 0.0346 (0.0358)
record: (train_acc, test_acc) (0.7736000253558158, 0.6390000581741333)
last accs (train_acc, test_acc) (0.7736000253558158, 0.6390000581741333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.85it/s] 19%|#9        | 5/26 [00:00<00:00, 24.65it/s] 35%|###4      | 9/26 [00:00<00:00, 30.90it/s] 50%|#####     | 13/26 [00:00<00:00, 34.25it/s] 65%|######5   | 17/26 [00:00<00:00, 36.09it/s] 81%|########  | 21/26 [00:00<00:00, 37.35it/s]100%|##########| 26/26 [00:00<00:00, 38.85it/s]100%|##########| 26/26 [00:00<00:00, 31.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  25.49 ( 25.49)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.89)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 7.6699 (7.5903)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.12it/s] 27%|##6       | 7/26 [00:00<00:00, 28.10it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.10it/s] 50%|#####     | 13/26 [00:00<00:00, 37.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.74it/s] 92%|#########2| 24/26 [00:00<00:00, 46.19it/s]100%|##########| 26/26 [00:00<00:00, 36.47it/s]
Test: [   0/  26]	Loss 0.319 (0.319)	test_acc   0.82 (  0.82)	test_minacc   0.93 (  0.93)	test_majacc   0.79 (  0.79)	Loss_d 0.319 (0.319)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.93 (  0.93)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.326 (0.332)	test_acc   0.80 (  0.79)	test_minacc   0.94 (  0.94)	test_majacc   0.77 (  0.76)	Loss_d 0.326 (0.332)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.77 (  0.76)	test_corr_d   0.63 (  0.64)
Test: [  20/  26]	Loss 0.331 (0.334)	test_acc   0.80 (  0.78)	test_minacc   0.96 (  0.93)	test_majacc   0.77 (  0.76)	Loss_d 0.331 (0.334)	test_acc_d   0.80 (  0.78)	test_minacc_d   0.96 (  0.93)	test_majacc_d   0.77 (  0.76)	test_corr_d   0.64 (  0.64)
Test: [  26/  26]	Loss 0.315 (0.332)	test_acc   0.80 (  0.78)	test_minacc   0.90 (  0.93)	test_majacc   0.78 (  0.76)	Loss_d 0.315 (0.332)	test_acc_d   0.80 (  0.78)	test_minacc_d   0.90 (  0.93)	test_majacc_d   0.78 (  0.76)	test_corr_d   0.67 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.61it/s]
Test: [  0/  1]	Loss 2.092 (2.092)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.75 (  0.75)	Loss_d 2.092 (2.092)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 2.092 (2.092)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.75 (  0.75)	Loss_d 2.092 (2.092)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.27 (  0.27)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/136/checkpoints/model_best.pth
Overall Timing[ 31/  1]	epoch_time 0.0354 (0.0365)	validation_time 0.0003 (0.0005)	train_time 0.0351 (0.0357)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.57it/s] 19%|#9        | 5/26 [00:00<00:01, 20.21it/s] 38%|###8      | 10/26 [00:00<00:00, 28.93it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.08it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.28it/s] 92%|#########2| 24/26 [00:00<00:00, 37.19it/s]100%|##########| 26/26 [00:00<00:00, 29.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  25.49 ( 25.49)	train_acc   0.81 (  0.79)	train_minacc   0.90 (  0.92)	train_majacc   0.80 (  0.77)	train_corr   0.00 (  0.00)	l1 7.5602 (7.6589)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.66it/s] 27%|##6       | 7/26 [00:00<00:00, 29.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.66it/s] 46%|####6     | 12/26 [00:00<00:00, 35.66it/s] 69%|######9   | 18/26 [00:00<00:00, 43.37it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.37it/s] 92%|#########2| 24/26 [00:00<00:00, 45.41it/s]100%|##########| 26/26 [00:00<00:00, 36.67it/s]
Test: [   0/  26]	Loss 0.312 (0.312)	test_acc   0.81 (  0.81)	test_minacc   0.89 (  0.89)	test_majacc   0.79 (  0.79)	Loss_d 0.312 (0.312)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.316 (0.318)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.78 (  0.78)	Loss_d 0.316 (0.318)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.66 (  0.68)
Test: [  20/  26]	Loss 0.325 (0.321)	test_acc   0.80 (  0.79)	test_minacc   0.96 (  0.92)	test_majacc   0.77 (  0.77)	Loss_d 0.325 (0.321)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.68 (  0.68)
Test: [  26/  26]	Loss 0.310 (0.320)	test_acc   0.81 (  0.80)	test_minacc   0.90 (  0.92)	test_majacc   0.80 (  0.77)	Loss_d 0.310 (0.320)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.90 (  0.92)	test_majacc_d   0.80 (  0.77)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.25it/s]
Test: [  0/  1]	Loss 2.108 (2.108)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.76 (  0.76)	Loss_d 2.108 (2.108)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.108 (2.108)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.76 (  0.76)	Loss_d 2.108 (2.108)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.33 (  0.33)
Overall Timing[ 32/  1]	epoch_time 0.0359 (0.0364)	validation_time 0.0003 (0.0005)	train_time 0.0356 (0.0357)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7959000290632248, 0.6210000514984131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.29it/s] 19%|#9        | 5/26 [00:00<00:01, 19.87it/s] 35%|###4      | 9/26 [00:00<00:00, 27.34it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.13it/s] 92%|#########2| 24/26 [00:00<00:00, 38.42it/s]100%|##########| 26/26 [00:00<00:00, 30.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.79)	train_minacc   0.88 (  0.93)	train_majacc   0.79 (  0.77)	train_corr   0.00 (  0.00)	l1 7.6636 (7.6932)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.21it/s] 31%|###       | 8/26 [00:00<00:00, 35.92it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 41.67it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.35it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.35it/s]100%|##########| 26/26 [00:00<00:00, 40.43it/s]
Test: [   0/  26]	Loss 0.316 (0.316)	test_acc   0.82 (  0.82)	test_minacc   0.87 (  0.87)	test_majacc   0.80 (  0.80)	Loss_d 0.316 (0.316)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.314 (0.320)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.79 (  0.78)	Loss_d 0.314 (0.320)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.67 (  0.68)
Test: [  20/  26]	Loss 0.321 (0.320)	test_acc   0.81 (  0.80)	test_minacc   0.96 (  0.92)	test_majacc   0.78 (  0.78)	Loss_d 0.321 (0.320)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.68 (  0.68)
Test: [  26/  26]	Loss 0.312 (0.320)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.312 (0.320)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.84it/s]
Test: [  0/  1]	Loss 2.150 (2.150)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.79 (  0.79)	Loss_d 2.150 (2.150)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.34 (  0.34)
Test: [  1/  1]	Loss 2.150 (2.150)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.79 (  0.79)	Loss_d 2.150 (2.150)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.34 (  0.34)
Overall Timing[ 33/  1]	epoch_time 0.0343 (0.0364)	validation_time 0.0003 (0.0005)	train_time 0.0339 (0.0357)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7993000270724296, 0.6180000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 19%|#9        | 5/26 [00:00<00:01, 20.73it/s] 35%|###4      | 9/26 [00:00<00:00, 27.19it/s] 50%|#####     | 13/26 [00:00<00:00, 31.14it/s] 65%|######5   | 17/26 [00:00<00:00, 33.35it/s] 81%|########  | 21/26 [00:00<00:00, 35.25it/s]100%|##########| 26/26 [00:00<00:00, 37.82it/s]100%|##########| 26/26 [00:00<00:00, 29.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.92)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 7.7283 (7.6654)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.73it/s] 27%|##6       | 7/26 [00:00<00:00, 34.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.11it/s] 50%|#####     | 13/26 [00:00<00:00, 41.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.37it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.37it/s] 96%|#########6| 25/26 [00:00<00:00, 47.63it/s]100%|##########| 26/26 [00:00<00:00, 39.90it/s]
Test: [   0/  26]	Loss 0.317 (0.317)	test_acc   0.82 (  0.82)	test_minacc   0.89 (  0.89)	test_majacc   0.80 (  0.80)	Loss_d 0.317 (0.317)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.319 (0.323)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.79 (  0.77)	Loss_d 0.319 (0.323)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.65 (  0.67)
Test: [  20/  26]	Loss 0.318 (0.323)	test_acc   0.82 (  0.79)	test_minacc   0.96 (  0.92)	test_majacc   0.79 (  0.77)	Loss_d 0.318 (0.323)	test_acc_d   0.82 (  0.79)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.67 (  0.67)
Test: [  26/  26]	Loss 0.312 (0.322)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.77)	Loss_d 0.312 (0.322)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.68 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.96it/s]
Test: [  0/  1]	Loss 2.152 (2.152)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.78 (  0.78)	Loss_d 2.152 (2.152)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 2.152 (2.152)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.78 (  0.78)	Loss_d 2.152 (2.152)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.31 (  0.31)
Overall Timing[ 34/  1]	epoch_time 0.0351 (0.0363)	validation_time 0.0003 (0.0005)	train_time 0.0347 (0.0357)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7953000203371048, 0.6390000581741333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.73it/s] 23%|##3       | 6/26 [00:00<00:00, 28.14it/s] 42%|####2     | 11/26 [00:00<00:00, 33.95it/s] 62%|######1   | 16/26 [00:00<00:00, 36.99it/s] 81%|########  | 21/26 [00:00<00:00, 38.07it/s] 96%|#########6| 25/26 [00:00<00:00, 38.50it/s]100%|##########| 26/26 [00:00<00:00, 33.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.92)	train_majacc   0.78 (  0.78)	train_corr   0.00 (  0.00)	l1 7.7021 (7.6855)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s] 23%|##3       | 6/26 [00:00<00:00, 30.93it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.93it/s] 46%|####6     | 12/26 [00:00<00:00, 39.62it/s] 69%|######9   | 18/26 [00:00<00:00, 46.19it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.19it/s] 92%|#########2| 24/26 [00:00<00:00, 47.75it/s]100%|##########| 26/26 [00:00<00:00, 39.67it/s]
Test: [   0/  26]	Loss 0.315 (0.315)	test_acc   0.82 (  0.82)	test_minacc   0.90 (  0.90)	test_majacc   0.80 (  0.80)	Loss_d 0.315 (0.315)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.317 (0.321)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.94)	test_majacc   0.79 (  0.77)	Loss_d 0.317 (0.321)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.94)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.66 (  0.67)
Test: [  20/  26]	Loss 0.318 (0.322)	test_acc   0.82 (  0.79)	test_minacc   0.96 (  0.93)	test_majacc   0.79 (  0.77)	Loss_d 0.318 (0.322)	test_acc_d   0.82 (  0.79)	test_minacc_d   0.96 (  0.93)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.67 (  0.67)
Test: [  26/  26]	Loss 0.311 (0.321)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.93)	test_majacc   0.78 (  0.77)	Loss_d 0.311 (0.321)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.93)	test_majacc_d   0.78 (  0.77)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.91it/s]
Test: [  0/  1]	Loss 2.151 (2.151)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.78 (  0.78)	Loss_d 2.151 (2.151)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 2.151 (2.151)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.78 (  0.78)	Loss_d 2.151 (2.151)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.32 (  0.32)
Overall Timing[ 35/  1]	epoch_time 0.0342 (0.0363)	validation_time 0.0003 (0.0005)	train_time 0.0339 (0.0356)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7952000309228897, 0.6370000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.84it/s] 19%|#9        | 5/26 [00:00<00:00, 25.78it/s] 35%|###4      | 9/26 [00:00<00:00, 31.39it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.74it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.94it/s] 92%|#########2| 24/26 [00:00<00:00, 38.96it/s]100%|##########| 26/26 [00:00<00:00, 32.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.93)	train_majacc   0.79 (  0.77)	train_corr   0.00 (  0.00)	l1 7.6967 (7.7159)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.91it/s] 27%|##6       | 7/26 [00:00<00:00, 36.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.62it/s] 50%|#####     | 13/26 [00:00<00:00, 41.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.75it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.75it/s] 96%|#########6| 25/26 [00:00<00:00, 47.81it/s]100%|##########| 26/26 [00:00<00:00, 40.32it/s]
Test: [   0/  26]	Loss 0.315 (0.315)	test_acc   0.82 (  0.82)	test_minacc   0.89 (  0.89)	test_majacc   0.80 (  0.80)	Loss_d 0.315 (0.315)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.314 (0.319)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.78 (  0.78)	Loss_d 0.314 (0.319)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.66 (  0.68)
Test: [  20/  26]	Loss 0.318 (0.320)	test_acc   0.82 (  0.80)	test_minacc   0.96 (  0.92)	test_majacc   0.78 (  0.78)	Loss_d 0.318 (0.320)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.67 (  0.68)
Test: [  26/  26]	Loss 0.309 (0.319)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.309 (0.319)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.15it/s]
Test: [  0/  1]	Loss 2.159 (2.159)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.159 (2.159)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.159 (2.159)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.159 (2.159)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Overall Timing[ 36/  1]	epoch_time 0.0353 (0.0363)	validation_time 0.0004 (0.0005)	train_time 0.0349 (0.0356)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7977000271677971, 0.6270000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.89it/s] 23%|##3       | 6/26 [00:00<00:00, 29.54it/s] 42%|####2     | 11/26 [00:00<00:00, 34.65it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.53it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.23it/s] 96%|#########6| 25/26 [00:00<00:00, 39.02it/s]100%|##########| 26/26 [00:00<00:00, 33.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.92)	train_majacc   0.79 (  0.77)	train_corr   0.00 (  0.00)	l1 7.7116 (7.7191)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.58it/s] 19%|#9        | 5/26 [00:00<00:00, 26.86it/s] 38%|###8      | 10/26 [00:00<00:00, 36.78it/s]                                                38%|###8      | 10/26 [00:00<00:00, 36.78it/s] 62%|######1   | 16/26 [00:00<00:00, 41.55it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.55it/s] 85%|########4 | 22/26 [00:00<00:00, 46.69it/s]100%|##########| 26/26 [00:00<00:00, 39.01it/s]
Test: [   0/  26]	Loss 0.315 (0.315)	test_acc   0.82 (  0.82)	test_minacc   0.89 (  0.89)	test_majacc   0.80 (  0.80)	Loss_d 0.315 (0.315)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.314 (0.319)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.78 (  0.78)	Loss_d 0.314 (0.319)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.66 (  0.68)
Test: [  20/  26]	Loss 0.317 (0.320)	test_acc   0.82 (  0.80)	test_minacc   0.96 (  0.92)	test_majacc   0.78 (  0.77)	Loss_d 0.317 (0.320)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.78 (  0.77)	test_corr_d   0.67 (  0.68)
Test: [  26/  26]	Loss 0.310 (0.319)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.310 (0.319)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.04it/s]
Test: [  0/  1]	Loss 2.162 (2.162)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.162 (2.162)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.162 (2.162)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.162 (2.162)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Overall Timing[ 37/  1]	epoch_time 0.0360 (0.0362)	validation_time 0.0003 (0.0005)	train_time 0.0357 (0.0356)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7973000248670578, 0.628000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 19%|#9        | 5/26 [00:00<00:00, 26.39it/s] 35%|###4      | 9/26 [00:00<00:00, 32.32it/s] 50%|#####     | 13/26 [00:00<00:00, 34.87it/s] 69%|######9   | 18/26 [00:00<00:00, 37.49it/s] 88%|########8 | 23/26 [00:00<00:00, 38.74it/s]100%|##########| 26/26 [00:00<00:00, 32.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.92)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 7.7315 (7.7161)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 27%|##6       | 7/26 [00:00<00:00, 32.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.60it/s] 50%|#####     | 13/26 [00:00<00:00, 40.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.80it/s] 96%|#########6| 25/26 [00:00<00:00, 48.73it/s]100%|##########| 26/26 [00:00<00:00, 39.88it/s]
Test: [   0/  26]	Loss 0.315 (0.315)	test_acc   0.82 (  0.82)	test_minacc   0.90 (  0.90)	test_majacc   0.80 (  0.80)	Loss_d 0.315 (0.315)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.315 (0.320)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.79 (  0.77)	Loss_d 0.315 (0.320)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.66 (  0.67)
Test: [  20/  26]	Loss 0.317 (0.320)	test_acc   0.82 (  0.80)	test_minacc   0.96 (  0.92)	test_majacc   0.79 (  0.77)	Loss_d 0.317 (0.320)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.67 (  0.68)
Test: [  26/  26]	Loss 0.310 (0.319)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.310 (0.319)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.71it/s]
Test: [  0/  1]	Loss 2.167 (2.167)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.167 (2.167)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 2.167 (2.167)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.167 (2.167)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.32 (  0.32)
Overall Timing[ 38/  1]	epoch_time 0.0342 (0.0362)	validation_time 0.0003 (0.0005)	train_time 0.0338 (0.0355)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.79720002835989, 0.6310000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 19%|#9        | 5/26 [00:00<00:00, 23.53it/s] 38%|###8      | 10/26 [00:00<00:00, 32.17it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.87it/s] 69%|######9   | 18/26 [00:00<00:00, 35.76it/s] 88%|########8 | 23/26 [00:00<00:00, 37.57it/s]100%|##########| 26/26 [00:00<00:00, 31.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.92)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 7.7284 (7.7188)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.29it/s] 35%|###4      | 9/26 [00:00<00:00, 39.96it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.96it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.69it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.69it/s] 81%|########  | 21/26 [00:00<00:00, 47.72it/s]100%|##########| 26/26 [00:00<00:00, 41.68it/s]
Test: [   0/  26]	Loss 0.314 (0.314)	test_acc   0.82 (  0.82)	test_minacc   0.90 (  0.90)	test_majacc   0.80 (  0.80)	Loss_d 0.314 (0.314)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.315 (0.319)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.79 (  0.77)	Loss_d 0.315 (0.319)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.66 (  0.67)
Test: [  20/  26]	Loss 0.317 (0.320)	test_acc   0.82 (  0.80)	test_minacc   0.96 (  0.92)	test_majacc   0.78 (  0.77)	Loss_d 0.317 (0.320)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.78 (  0.77)	test_corr_d   0.67 (  0.68)
Test: [  26/  26]	Loss 0.309 (0.319)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.309 (0.319)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.02it/s]
Test: [  0/  1]	Loss 2.167 (2.167)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.78 (  0.78)	Loss_d 2.167 (2.167)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 2.167 (2.167)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.78 (  0.78)	Loss_d 2.167 (2.167)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.32 (  0.32)
Overall Timing[ 39/  1]	epoch_time 0.0333 (0.0361)	validation_time 0.0003 (0.0005)	train_time 0.0329 (0.0355)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7971000248789787, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.41it/s] 27%|##6       | 7/26 [00:00<00:00, 31.67it/s] 46%|####6     | 12/26 [00:00<00:00, 36.84it/s] 65%|######5   | 17/26 [00:00<00:00, 38.94it/s] 81%|########  | 21/26 [00:00<00:00, 39.21it/s]100%|##########| 26/26 [00:00<00:00, 39.93it/s]100%|##########| 26/26 [00:00<00:00, 34.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.92)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 7.7245 (7.7291)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.81it/s] 35%|###4      | 9/26 [00:00<00:00, 39.30it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.30it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.86it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.86it/s] 81%|########  | 21/26 [00:00<00:00, 47.46it/s]100%|##########| 26/26 [00:00<00:00, 41.82it/s]
Test: [   0/  26]	Loss 0.314 (0.314)	test_acc   0.82 (  0.82)	test_minacc   0.90 (  0.90)	test_majacc   0.80 (  0.80)	Loss_d 0.314 (0.314)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.314 (0.318)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.78 (  0.77)	Loss_d 0.314 (0.318)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.78 (  0.77)	test_corr_d   0.66 (  0.68)
Test: [  20/  26]	Loss 0.316 (0.319)	test_acc   0.81 (  0.80)	test_minacc   0.96 (  0.92)	test_majacc   0.78 (  0.77)	Loss_d 0.316 (0.319)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.78 (  0.77)	test_corr_d   0.67 (  0.68)
Test: [  26/  26]	Loss 0.309 (0.318)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.309 (0.318)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.26it/s]
Test: [  0/  1]	Loss 2.168 (2.168)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.168 (2.168)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.168 (2.168)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.168 (2.168)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Overall Timing[ 40/  1]	epoch_time 0.0342 (0.0361)	validation_time 0.0003 (0.0005)	train_time 0.0339 (0.0354)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7973000202178955, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 19%|#9        | 5/26 [00:00<00:00, 24.49it/s] 35%|###4      | 9/26 [00:00<00:00, 30.81it/s] 50%|#####     | 13/26 [00:00<00:00, 34.07it/s] 65%|######5   | 17/26 [00:00<00:00, 36.06it/s] 85%|########4 | 22/26 [00:00<00:00, 37.98it/s]100%|##########| 26/26 [00:00<00:00, 32.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.92)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 7.7315 (7.7341)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.43it/s] 31%|###       | 8/26 [00:00<00:00, 39.69it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.69it/s] 50%|#####     | 13/26 [00:00<00:00, 40.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.68it/s] 96%|#########6| 25/26 [00:00<00:00, 46.94it/s]100%|##########| 26/26 [00:00<00:00, 39.95it/s]
Test: [   0/  26]	Loss 0.314 (0.314)	test_acc   0.82 (  0.82)	test_minacc   0.89 (  0.89)	test_majacc   0.80 (  0.80)	Loss_d 0.314 (0.314)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.313 (0.318)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.79 (  0.78)	Loss_d 0.313 (0.318)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.66 (  0.68)
Test: [  20/  26]	Loss 0.316 (0.319)	test_acc   0.82 (  0.80)	test_minacc   0.96 (  0.92)	test_majacc   0.78 (  0.78)	Loss_d 0.316 (0.319)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.67 (  0.68)
Test: [  26/  26]	Loss 0.309 (0.318)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.309 (0.318)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.20it/s]
Test: [  0/  1]	Loss 2.172 (2.172)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.172 (2.172)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.172 (2.172)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.172 (2.172)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Overall Timing[ 41/  1]	epoch_time 0.0348 (0.0360)	validation_time 0.0004 (0.0005)	train_time 0.0344 (0.0354)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.797800025999546, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.20it/s] 15%|#5        | 4/26 [00:00<00:01, 16.88it/s] 31%|###       | 8/26 [00:00<00:00, 24.98it/s] 50%|#####     | 13/26 [00:00<00:00, 31.27it/s] 69%|######9   | 18/26 [00:00<00:00, 34.65it/s] 85%|########4 | 22/26 [00:00<00:00, 36.12it/s]100%|##########| 26/26 [00:00<00:00, 37.16it/s]100%|##########| 26/26 [00:00<00:00, 29.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.92)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 7.7381 (7.7335)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 27%|##6       | 7/26 [00:00<00:00, 31.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.62it/s] 50%|#####     | 13/26 [00:00<00:00, 39.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.26it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.26it/s] 96%|#########6| 25/26 [00:00<00:00, 47.41it/s]100%|##########| 26/26 [00:00<00:00, 38.40it/s]
Test: [   0/  26]	Loss 0.313 (0.313)	test_acc   0.82 (  0.82)	test_minacc   0.90 (  0.90)	test_majacc   0.80 (  0.80)	Loss_d 0.313 (0.313)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.314 (0.318)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.79 (  0.78)	Loss_d 0.314 (0.318)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.66 (  0.68)
Test: [  20/  26]	Loss 0.316 (0.318)	test_acc   0.82 (  0.80)	test_minacc   0.96 (  0.92)	test_majacc   0.78 (  0.77)	Loss_d 0.316 (0.318)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.78 (  0.77)	test_corr_d   0.67 (  0.68)
Test: [  26/  26]	Loss 0.308 (0.317)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.308 (0.317)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.85it/s]
Test: [  0/  1]	Loss 2.172 (2.172)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.172 (2.172)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 2.172 (2.172)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.172 (2.172)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.32 (  0.32)
Overall Timing[ 42/  1]	epoch_time 0.0347 (0.0360)	validation_time 0.0004 (0.0005)	train_time 0.0343 (0.0354)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.797800025999546, 0.6300000548362732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.97it/s] 23%|##3       | 6/26 [00:00<00:00, 29.44it/s] 42%|####2     | 11/26 [00:00<00:00, 35.31it/s] 62%|######1   | 16/26 [00:00<00:00, 38.13it/s] 81%|########  | 21/26 [00:00<00:00, 39.29it/s]100%|##########| 26/26 [00:00<00:00, 40.56it/s]100%|##########| 26/26 [00:00<00:00, 34.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.92)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 7.7431 (7.7379)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.96it/s] 35%|###4      | 9/26 [00:00<00:00, 39.70it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.15it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.15it/s] 81%|########  | 21/26 [00:00<00:00, 46.83it/s]100%|##########| 26/26 [00:00<00:00, 40.75it/s]
Test: [   0/  26]	Loss 0.313 (0.313)	test_acc   0.82 (  0.82)	test_minacc   0.90 (  0.90)	test_majacc   0.80 (  0.80)	Loss_d 0.313 (0.313)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.313 (0.318)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.79 (  0.77)	Loss_d 0.313 (0.318)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.66 (  0.68)
Test: [  20/  26]	Loss 0.315 (0.318)	test_acc   0.82 (  0.80)	test_minacc   0.96 (  0.92)	test_majacc   0.79 (  0.77)	Loss_d 0.315 (0.318)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.67 (  0.68)
Test: [  26/  26]	Loss 0.308 (0.317)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.308 (0.317)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.30it/s]
Test: [  0/  1]	Loss 2.175 (2.175)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.175 (2.175)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.175 (2.175)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.175 (2.175)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Overall Timing[ 43/  1]	epoch_time 0.0339 (0.0360)	validation_time 0.0004 (0.0005)	train_time 0.0335 (0.0353)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7977000248432159, 0.6300000548362732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.47it/s] 19%|#9        | 5/26 [00:00<00:01, 19.67it/s] 35%|###4      | 9/26 [00:00<00:00, 27.03it/s] 50%|#####     | 13/26 [00:00<00:00, 31.36it/s] 65%|######5   | 17/26 [00:00<00:00, 33.95it/s] 81%|########  | 21/26 [00:00<00:00, 35.75it/s] 96%|#########6| 25/26 [00:00<00:00, 36.40it/s]100%|##########| 26/26 [00:00<00:00, 29.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.92)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 7.7468 (7.7417)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.00it/s] 35%|###4      | 9/26 [00:00<00:00, 39.53it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.53it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.80it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.80it/s] 81%|########  | 21/26 [00:00<00:00, 46.74it/s]100%|##########| 26/26 [00:00<00:00, 42.25it/s]
Test: [   0/  26]	Loss 0.313 (0.313)	test_acc   0.82 (  0.82)	test_minacc   0.90 (  0.90)	test_majacc   0.80 (  0.80)	Loss_d 0.313 (0.313)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.313 (0.317)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.79 (  0.78)	Loss_d 0.313 (0.317)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.66 (  0.68)
Test: [  20/  26]	Loss 0.315 (0.318)	test_acc   0.82 (  0.80)	test_minacc   0.96 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.315 (0.318)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.67 (  0.68)
Test: [  26/  26]	Loss 0.308 (0.317)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.308 (0.317)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.43it/s]
Test: [  0/  1]	Loss 2.178 (2.178)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.178 (2.178)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.178 (2.178)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.178 (2.178)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Overall Timing[ 44/  1]	epoch_time 0.0365 (0.0360)	validation_time 0.0003 (0.0005)	train_time 0.0361 (0.0354)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7981000271439552, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.72it/s] 19%|#9        | 5/26 [00:00<00:00, 22.75it/s] 35%|###4      | 9/26 [00:00<00:00, 29.07it/s] 50%|#####     | 13/26 [00:00<00:00, 32.90it/s] 65%|######5   | 17/26 [00:00<00:00, 35.06it/s] 85%|########4 | 22/26 [00:00<00:00, 37.29it/s]100%|##########| 26/26 [00:00<00:00, 30.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.92)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 7.7419 (7.7459)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 27%|##6       | 7/26 [00:00<00:00, 29.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.25it/s] 50%|#####     | 13/26 [00:00<00:00, 39.52it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.68it/s] 96%|#########6| 25/26 [00:00<00:00, 48.00it/s]100%|##########| 26/26 [00:00<00:00, 38.41it/s]
Test: [   0/  26]	Loss 0.312 (0.312)	test_acc   0.82 (  0.82)	test_minacc   0.90 (  0.90)	test_majacc   0.81 (  0.81)	Loss_d 0.312 (0.312)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.312 (0.316)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.79 (  0.78)	Loss_d 0.312 (0.316)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.66 (  0.68)
Test: [  20/  26]	Loss 0.315 (0.317)	test_acc   0.81 (  0.80)	test_minacc   0.96 (  0.92)	test_majacc   0.78 (  0.78)	Loss_d 0.315 (0.317)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.67 (  0.68)
Test: [  26/  26]	Loss 0.307 (0.316)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.307 (0.316)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.25it/s]
Test: [  0/  1]	Loss 2.176 (2.176)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.176 (2.176)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.176 (2.176)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.176 (2.176)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Overall Timing[ 45/  1]	epoch_time 0.0352 (0.0360)	validation_time 0.0004 (0.0005)	train_time 0.0348 (0.0354)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7989000294208527, 0.6300000548362732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.55it/s] 19%|#9        | 5/26 [00:00<00:00, 26.18it/s] 35%|###4      | 9/26 [00:00<00:00, 31.71it/s] 50%|#####     | 13/26 [00:00<00:00, 34.26it/s] 69%|######9   | 18/26 [00:00<00:00, 36.98it/s] 88%|########8 | 23/26 [00:00<00:00, 38.03it/s]100%|##########| 26/26 [00:00<00:00, 32.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.92)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 7.7533 (7.7529)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 23%|##3       | 6/26 [00:00<00:00, 27.51it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.51it/s] 46%|####6     | 12/26 [00:00<00:00, 37.27it/s] 69%|######9   | 18/26 [00:00<00:00, 44.81it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.81it/s] 92%|#########2| 24/26 [00:00<00:00, 46.21it/s]100%|##########| 26/26 [00:00<00:00, 37.96it/s]
Test: [   0/  26]	Loss 0.313 (0.313)	test_acc   0.82 (  0.82)	test_minacc   0.89 (  0.89)	test_majacc   0.80 (  0.80)	Loss_d 0.313 (0.313)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.312 (0.316)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.79 (  0.78)	Loss_d 0.312 (0.316)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.66 (  0.68)
Test: [  20/  26]	Loss 0.314 (0.317)	test_acc   0.82 (  0.80)	test_minacc   0.96 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.314 (0.317)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.67 (  0.68)
Test: [  26/  26]	Loss 0.308 (0.316)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.308 (0.316)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.76it/s]
Test: [  0/  1]	Loss 2.182 (2.182)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.182 (2.182)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.182 (2.182)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.182 (2.182)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Overall Timing[ 46/  1]	epoch_time 0.0360 (0.0360)	validation_time 0.0003 (0.0005)	train_time 0.0357 (0.0354)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7989000247716904, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.60it/s] 19%|#9        | 5/26 [00:00<00:00, 23.79it/s] 38%|###8      | 10/26 [00:00<00:00, 31.89it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.34it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.59it/s] 96%|#########6| 25/26 [00:00<00:00, 38.98it/s]100%|##########| 26/26 [00:00<00:00, 32.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.92)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 7.7588 (7.7511)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.98it/s] 35%|###4      | 9/26 [00:00<00:00, 42.90it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.90it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.78it/s] 77%|#######6  | 20/26 [00:00<00:00, 50.75it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 50.75it/s]100%|##########| 26/26 [00:00<00:00, 52.26it/s]100%|##########| 26/26 [00:00<00:00, 43.54it/s]
Test: [   0/  26]	Loss 0.312 (0.312)	test_acc   0.83 (  0.83)	test_minacc   0.90 (  0.90)	test_majacc   0.81 (  0.81)	Loss_d 0.312 (0.312)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.312 (0.316)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.79 (  0.78)	Loss_d 0.312 (0.316)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.66 (  0.68)
Test: [  20/  26]	Loss 0.314 (0.317)	test_acc   0.82 (  0.80)	test_minacc   0.96 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.314 (0.317)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.67 (  0.68)
Test: [  26/  26]	Loss 0.306 (0.316)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.306 (0.316)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.99it/s]
Test: [  0/  1]	Loss 2.184 (2.184)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.184 (2.184)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.184 (2.184)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.184 (2.184)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Overall Timing[ 47/  1]	epoch_time 0.0359 (0.0360)	validation_time 0.0004 (0.0005)	train_time 0.0356 (0.0354)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7994000272750854, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 19%|#9        | 5/26 [00:00<00:00, 25.34it/s] 35%|###4      | 9/26 [00:00<00:00, 31.46it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.58it/s] 92%|#########2| 24/26 [00:00<00:00, 40.17it/s]100%|##########| 26/26 [00:00<00:00, 33.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.92)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 7.7561 (7.7561)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.62it/s] 27%|##6       | 7/26 [00:00<00:00, 31.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.88it/s] 50%|#####     | 13/26 [00:00<00:00, 39.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.70it/s] 96%|#########6| 25/26 [00:00<00:00, 46.81it/s]100%|##########| 26/26 [00:00<00:00, 37.95it/s]
Test: [   0/  26]	Loss 0.311 (0.311)	test_acc   0.82 (  0.82)	test_minacc   0.90 (  0.90)	test_majacc   0.80 (  0.80)	Loss_d 0.311 (0.311)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.311 (0.315)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.79 (  0.78)	Loss_d 0.311 (0.315)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.66 (  0.68)
Test: [  20/  26]	Loss 0.314 (0.316)	test_acc   0.82 (  0.80)	test_minacc   0.96 (  0.92)	test_majacc   0.78 (  0.78)	Loss_d 0.314 (0.316)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.67 (  0.68)
Test: [  26/  26]	Loss 0.307 (0.315)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.307 (0.315)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.46it/s]
Test: [  0/  1]	Loss 2.179 (2.179)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.78 (  0.78)	Loss_d 2.179 (2.179)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 2.179 (2.179)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.78 (  0.78)	Loss_d 2.179 (2.179)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.32 (  0.32)
Overall Timing[ 48/  1]	epoch_time 0.0348 (0.0359)	validation_time 0.0003 (0.0005)	train_time 0.0344 (0.0353)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.7990000305771827, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.63it/s] 19%|#9        | 5/26 [00:00<00:01, 20.20it/s] 35%|###4      | 9/26 [00:00<00:00, 26.43it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.51it/s] 92%|#########2| 24/26 [00:00<00:00, 38.07it/s]100%|##########| 26/26 [00:00<00:00, 30.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.31 (  0.31)	train_penalty   0.00 (  0.00)	weight_norm  25.50 ( 25.50)	train_acc   0.80 (  0.80)	train_minacc   0.88 (  0.92)	train_majacc   0.79 (  0.78)	train_corr   0.00 (  0.00)	l1 7.7704 (7.7651)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.70it/s] 27%|##6       | 7/26 [00:00<00:00, 37.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.13it/s] 50%|#####     | 13/26 [00:00<00:00, 42.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.68it/s] 96%|#########6| 25/26 [00:00<00:00, 48.95it/s]100%|##########| 26/26 [00:00<00:00, 41.62it/s]
Test: [   0/  26]	Loss 0.312 (0.312)	test_acc   0.82 (  0.82)	test_minacc   0.87 (  0.87)	test_majacc   0.81 (  0.81)	Loss_d 0.312 (0.312)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.311 (0.316)	test_acc   0.81 (  0.80)	test_minacc   0.94 (  0.93)	test_majacc   0.79 (  0.78)	Loss_d 0.311 (0.316)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.67 (  0.68)
Test: [  20/  26]	Loss 0.313 (0.316)	test_acc   0.82 (  0.80)	test_minacc   0.96 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.313 (0.316)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.96 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.68 (  0.68)
Test: [  26/  26]	Loss 0.306 (0.315)	test_acc   0.80 (  0.80)	test_minacc   0.88 (  0.92)	test_majacc   0.79 (  0.78)	Loss_d 0.306 (0.315)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.88 (  0.92)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.87it/s]
Test: [  0/  1]	Loss 2.193 (2.193)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.193 (2.193)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.193 (2.193)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 2.193 (2.193)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.33 (  0.33)
Overall Timing[ 49/  1]	epoch_time 0.0362 (0.0359)	validation_time 0.0004 (0.0005)	train_time 0.0359 (0.0354)
record: (train_acc, test_acc) (0.7844000291228295, 0.6420000195503235)
last accs (train_acc, test_acc) (0.8010000318288804, 0.6270000338554382)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.102 MB of 0.102 MB uploadedwandb: \ 0.102 MB of 0.102 MB uploadedwandb: | 0.102 MB of 0.102 MB uploadedwandb: / 0.124 MB of 0.133 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/diagnostics/train_time_val █▁▁▁▁▁▁▁▁▂▁▂▁▁▁▂▁▁▂▁▁▁▁▁▁▁▂▁▁▁▂▁▁▁▁▁▁▂▂▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/Loss_avg ▅▄▄▄▅▅▄▅▅▆▇█▂▁▁▂▃▃▄▄▅▅▅▅▆▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/Loss_d_avg ▅▄▄▄▅▅▄▅▅▆▇█▂▁▁▂▃▃▄▄▅▅▅▅▆▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/Loss_d_val ▅▄▄▄▅▅▄▅▅▆▇█▂▁▁▂▃▃▄▄▅▅▅▅▆▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/Loss_val ▅▄▄▄▅▅▄▅▅▆▇█▂▁▁▂▃▃▄▄▅▅▅▅▆▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_acc_avg ▁▁▁▂▃▄▄▅▅▄▅▅▆▆▆▆▆▆▅▆▆▇██████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_acc_d_avg ▁▁▁▂▃▄▄▅▅▄▅▅▆▆▆▆▆▆▅▆▆▇██████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_acc_d_val ▁▁▁▂▃▄▄▅▅▄▅▅▆▆▆▆▆▆▅▆▆▇██████████████████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_acc_val ▁▁▁▂▃▄▄▅▅▄▅▅▆▆▆▆▆▆▅▆▆▇██████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_corr_d_avg ██▇▇▆▅▅▅▅▅▄▃▁▁▁▂▃▃▃▃▂▂▁▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_corr_d_val ██▇▇▆▅▅▅▅▅▄▃▁▁▁▂▃▃▃▃▂▂▁▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_majacc_avg ████▇▇▇▇▇▇▇▇▄▂▃▄▄▄▅▄▃▂▁▂▂▂▂▃▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_majacc_d_avg ████▇▇▇▇▇▇▇▇▄▂▃▄▄▄▅▄▃▂▁▂▂▂▂▃▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_majacc_d_val ████▇▇▇▇▇▇▇▇▄▂▃▄▄▄▅▄▃▂▁▂▂▂▂▃▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_majacc_val ████▇▇▇▇▇▇▇▇▄▂▃▄▄▄▅▄▃▂▁▂▂▂▂▃▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_minacc_avg ▁▁▁▂▃▄▄▄▅▄▄▅▆▆▆▆▆▆▅▆▆▇██████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_minacc_d_avg ▁▁▁▂▃▄▄▄▅▄▄▅▆▆▆▆▆▆▅▆▆▇██████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_minacc_d_val ▁▁▁▂▃▄▄▄▅▄▄▅▆▆▆▆▆▆▅▆▆▇██████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_minacc_val ▁▁▁▂▃▄▄▄▅▄▄▅▆▆▆▆▆▆▅▆▆▇██████████████████
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/Loss_avg █▆▆▆▅▅▅▄▄▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/Loss_val ██▇▇▆▆▆▅▅▄▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/l1_avg █▅▆▆▆▇▇▇▇█▇█▇▂▁▂▃▃▄▄▅▅▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/l1_val ▅▅▅▆▆▆▆▆▆▆▇█▃▁▁▂▃▂▃▄▅▆▆▅▇▇▆▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_acc_avg ▄▅▅▅▆▆▆▇▇▇██▇▁▁▂▃▃▃▃▄▄▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_acc_val ▅▅▄▄▅▅▆▆▇▆██▅▂▁▃▂▃▂▂▅▃▄▅▂▃▄▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_majacc_avg ▆███▇▇▇▆▇▇▇▇▆▂▁▂▂▂▂▂▃▂▂▂▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_majacc_val ██▇▇▇▇▆▇▇▇▇▇▄▂▂▃▂▂▂▂▄▂▃▄▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_minacc_avg ▁▁▁▂▃▄▄▅▅▅▆▆▆▆▆▆▇▇▇▇▇███████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_minacc_val ▁▁▂▂▃▃▅▄▆▅▆▇▇▆▅▇▆▇▆▇▇▇█▇█▇█▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_nll_avg █▅▅▄▃▃▃▂▂▂▁▁▂▆▇▆▄▅▄▄▄▄▄▄▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_nll_val ▇▇▆▅▄▄▄▃▂▂▁▁▅█▇▅▅▅▆▅▄▅▄▄▅▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_penalty_avg █▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_penalty_val █▅▅▄▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/weight_norm_avg ▁▄▅▅▅▅▅▅▆▆▆▇▇███████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/weight_norm_val ▁▃▃▃▃▃▄▄▅▅▆▆▇███████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/diagnostics/epoch_time_val 0.03622
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/diagnostics/train_time_val 0.03586
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/diagnostics/validation_time_val 0.00035
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/Loss_avg 2.19255
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/Loss_d_avg 2.19255
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/Loss_d_val 2.19255
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/Loss_val 2.19255
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_acc_avg 0.627
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_acc_d_avg 0.627
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_acc_d_val 0.627
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_acc_val 0.627
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_corr_d_avg 0.33176
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_corr_d_val 0.33176
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_majacc_avg 0.78
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_majacc_d_avg 0.78
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_majacc_d_val 0.78
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_majacc_val 0.78
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_minacc_avg 0.61
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_minacc_d_avg 0.61
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_minacc_d_val 0.61
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/test/test_minacc_val 0.61
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/Loss_avg 3e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/Loss_val 3e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/l1_avg 7.76508
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/l1_val 7.77038
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_acc_avg 0.7997
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_acc_val 0.804
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_majacc_avg 0.77832
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_majacc_val 0.79048
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_minacc_avg 0.92178
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_minacc_val 0.875
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_nll_avg 0.31496
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_nll_val 0.30615
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/weight_norm_avg 25.49718
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/weight_norm_val 25.49708
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/136/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/s0vbmzhy
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_200440-s0vbmzhy/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_200705-bk3a0w3d
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/bk3a0w3d
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1222
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6018, 3, 32, 32) (5982, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:37,  1.52s/it] 19%|#9        | 5/26 [00:01<00:05,  4.05it/s] 38%|###8      | 10/26 [00:01<00:01,  8.87it/s] 58%|#####7    | 15/26 [00:01<00:00, 13.86it/s] 77%|#######6  | 20/26 [00:01<00:00, 18.84it/s] 96%|#########6| 25/26 [00:02<00:00, 23.18it/s]100%|##########| 26/26 [00:02<00:00, 10.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.405 (0.544)	train_nll   0.40 (  0.54)	train_penalty   0.05 (  0.21)	weight_norm  20.96 ( 18.18)	train_acc   0.84 (  0.80)	train_minacc   0.00 (  0.09)	train_majacc   0.98 (  0.93)	train_corr   0.00 (  0.00)	l1 7.2188 (7.8446)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.98it/s] 31%|###       | 8/26 [00:00<00:00, 38.36it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.36it/s] 50%|#####     | 13/26 [00:00<00:00, 41.57it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.17it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.17it/s] 96%|#########6| 25/26 [00:00<00:00, 48.45it/s]100%|##########| 26/26 [00:00<00:00, 40.25it/s]
Test: [   0/  26]	Loss 0.424 (0.424)	test_acc   0.85 (  0.85)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.424 (0.424)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.450 (0.417)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.450 (0.417)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  20/  26]	Loss 0.473 (0.423)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.473 (0.423)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.408 (0.424)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   0.98 (  0.99)	Loss_d 0.408 (0.424)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]
Test: [  0/  1]	Loss 1.860 (1.860)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.860 (1.860)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.860 (1.860)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.860 (1.860)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/137/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0708 (0.0708)	validation_time 0.0069 (0.0069)	train_time 0.0622 (0.0622)
record: (train_acc, test_acc) (0.8458000251054764, 0.12700000405311584)
last accs (train_acc, test_acc) (0.8458000251054764, 0.12700000405311584)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 19%|#9        | 5/26 [00:00<00:00, 22.12it/s] 35%|###4      | 9/26 [00:00<00:00, 28.83it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.81it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.30it/s] 92%|#########2| 24/26 [00:00<00:00, 37.97it/s]100%|##########| 26/26 [00:00<00:00, 31.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.365 (0.406)	train_nll   0.37 (  0.41)	train_penalty   0.05 (  0.05)	weight_norm  22.08 ( 21.73)	train_acc   0.86 (  0.84)	train_minacc   0.00 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 7.3370 (7.2616)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.47it/s] 23%|##3       | 6/26 [00:00<00:00, 31.47it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.47it/s] 46%|####6     | 12/26 [00:00<00:00, 39.31it/s] 69%|######9   | 18/26 [00:00<00:00, 46.19it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.19it/s] 92%|#########2| 24/26 [00:00<00:00, 47.06it/s]100%|##########| 26/26 [00:00<00:00, 40.18it/s]
Test: [   0/  26]	Loss 0.384 (0.384)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.384 (0.384)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.410 (0.387)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.410 (0.387)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.97)
Test: [  20/  26]	Loss 0.437 (0.392)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.437 (0.392)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.359 (0.391)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.359 (0.391)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.42it/s]
Test: [  0/  1]	Loss 1.879 (1.879)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.879 (1.879)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.879 (1.879)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.879 (1.879)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Overall Timing[  1/  1]	epoch_time 0.0354 (0.0531)	validation_time 0.0003 (0.0036)	train_time 0.0351 (0.0486)
record: (train_acc, test_acc) (0.8458000251054764, 0.12700000405311584)
last accs (train_acc, test_acc) (0.8487000207901001, 0.11600000411272049)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.21it/s] 19%|#9        | 5/26 [00:00<00:00, 25.47it/s] 35%|###4      | 9/26 [00:00<00:00, 31.30it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.15it/s] 92%|#########2| 24/26 [00:00<00:00, 38.39it/s]100%|##########| 26/26 [00:00<00:00, 32.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.316 (0.378)	train_nll   0.32 (  0.38)	train_penalty   0.02 (  0.04)	weight_norm  22.21 ( 22.16)	train_acc   0.86 (  0.85)	train_minacc   0.09 (  0.10)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 7.3852 (7.3262)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.34it/s] 27%|##6       | 7/26 [00:00<00:00, 36.31it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.31it/s] 50%|#####     | 13/26 [00:00<00:00, 42.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.13it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.13it/s] 96%|#########6| 25/26 [00:00<00:00, 48.43it/s]100%|##########| 26/26 [00:00<00:00, 40.58it/s]
Test: [   0/  26]	Loss 0.359 (0.359)	test_acc   0.87 (  0.87)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 0.359 (0.359)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.354 (0.355)	test_acc   0.83 (  0.85)	test_minacc   0.13 (  0.15)	test_majacc   0.97 (  0.97)	Loss_d 0.354 (0.355)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.13 (  0.15)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.401 (0.360)	test_acc   0.83 (  0.85)	test_minacc   0.15 (  0.16)	test_majacc   0.97 (  0.98)	Loss_d 0.401 (0.360)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.15 (  0.16)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.319 (0.359)	test_acc   0.86 (  0.85)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 0.319 (0.359)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.65it/s]
Test: [  0/  1]	Loss 1.663 (1.663)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.663 (1.663)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.663 (1.663)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.663 (1.663)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.78 (  0.78)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/137/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0347 (0.0470)	validation_time 0.0004 (0.0025)	train_time 0.0343 (0.0439)
record: (train_acc, test_acc) (0.853500022828579, 0.2510000169277191)
last accs (train_acc, test_acc) (0.853500022828579, 0.2510000169277191)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 19%|#9        | 5/26 [00:00<00:00, 23.53it/s] 35%|###4      | 9/26 [00:00<00:00, 29.73it/s] 50%|#####     | 13/26 [00:00<00:00, 33.28it/s] 65%|######5   | 17/26 [00:00<00:00, 35.43it/s] 81%|########  | 21/26 [00:00<00:00, 36.59it/s] 96%|#########6| 25/26 [00:00<00:00, 37.61it/s]100%|##########| 26/26 [00:00<00:00, 31.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.302 (0.352)	train_nll   0.30 (  0.35)	train_penalty   0.03 (  0.03)	weight_norm  22.27 ( 22.24)	train_acc   0.87 (  0.85)	train_minacc   0.09 (  0.18)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 7.5062 (7.3838)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 23%|##3       | 6/26 [00:00<00:00, 28.98it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.98it/s] 46%|####6     | 12/26 [00:00<00:00, 40.67it/s] 69%|######9   | 18/26 [00:00<00:00, 43.92it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.92it/s] 92%|#########2| 24/26 [00:00<00:00, 48.30it/s]100%|##########| 26/26 [00:00<00:00, 39.61it/s]
Test: [   0/  26]	Loss 0.324 (0.324)	test_acc   0.87 (  0.87)	test_minacc   0.11 (  0.11)	test_majacc   1.00 (  1.00)	Loss_d 0.324 (0.324)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.11 (  0.11)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.331 (0.319)	test_acc   0.84 (  0.86)	test_minacc   0.03 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.331 (0.319)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.03 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.353 (0.322)	test_acc   0.84 (  0.86)	test_minacc   0.09 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.353 (0.322)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.09 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.287 (0.321)	test_acc   0.87 (  0.86)	test_minacc   0.09 (  0.11)	test_majacc   1.00 (  0.99)	Loss_d 0.287 (0.321)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.09 (  0.11)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.38it/s]
Test: [  0/  1]	Loss 1.725 (1.725)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   1.00 (  1.00)	Loss_d 1.725 (1.725)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.725 (1.725)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   1.00 (  1.00)	Loss_d 1.725 (1.725)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.82 (  0.82)
Overall Timing[  3/  1]	epoch_time 0.0341 (0.0438)	validation_time 0.0004 (0.0020)	train_time 0.0336 (0.0413)
record: (train_acc, test_acc) (0.853500022828579, 0.2510000169277191)
last accs (train_acc, test_acc) (0.8581000252962112, 0.20400001108646393)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.45it/s] 23%|##3       | 6/26 [00:00<00:00, 27.84it/s] 38%|###8      | 10/26 [00:00<00:00, 32.82it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.01it/s] 69%|######9   | 18/26 [00:00<00:00, 36.35it/s] 85%|########4 | 22/26 [00:00<00:00, 36.09it/s]100%|##########| 26/26 [00:00<00:00, 36.95it/s]100%|##########| 26/26 [00:00<00:00, 31.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.277 (0.330)	train_nll   0.28 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm  22.35 ( 22.31)	train_acc   0.90 (  0.86)	train_minacc   0.43 (  0.26)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 7.5875 (7.4916)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 23%|##3       | 6/26 [00:00<00:00, 24.84it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.84it/s] 42%|####2     | 11/26 [00:00<00:00, 34.38it/s] 65%|######5   | 17/26 [00:00<00:00, 43.27it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.27it/s] 85%|########4 | 22/26 [00:00<00:00, 44.26it/s]100%|##########| 26/26 [00:00<00:00, 37.57it/s]
Test: [   0/  26]	Loss 0.314 (0.314)	test_acc   0.89 (  0.89)	test_minacc   0.39 (  0.39)	test_majacc   0.97 (  0.97)	Loss_d 0.314 (0.314)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.304 (0.306)	test_acc   0.86 (  0.87)	test_minacc   0.34 (  0.32)	test_majacc   0.96 (  0.97)	Loss_d 0.304 (0.306)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.34 (  0.32)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.343 (0.310)	test_acc   0.85 (  0.87)	test_minacc   0.28 (  0.33)	test_majacc   0.96 (  0.96)	Loss_d 0.343 (0.310)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.28 (  0.33)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.270 (0.310)	test_acc   0.89 (  0.87)	test_minacc   0.40 (  0.34)	test_majacc   0.97 (  0.96)	Loss_d 0.270 (0.310)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.40 (  0.34)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.85it/s]
Test: [  0/  1]	Loss 1.674 (1.674)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.97 (  0.97)	Loss_d 1.674 (1.674)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.61 (  0.61)
Test: [  1/  1]	Loss 1.674 (1.674)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.97 (  0.97)	Loss_d 1.674 (1.674)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.61 (  0.61)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/137/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0352 (0.0420)	validation_time 0.0003 (0.0017)	train_time 0.0349 (0.0400)
record: (train_acc, test_acc) (0.8702000232934952, 0.37300002574920654)
last accs (train_acc, test_acc) (0.8702000232934952, 0.37300002574920654)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 19%|#9        | 5/26 [00:00<00:00, 22.25it/s] 35%|###4      | 9/26 [00:00<00:00, 28.86it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.83it/s] 69%|######9   | 18/26 [00:00<00:00, 35.73it/s] 88%|########8 | 23/26 [00:00<00:00, 37.57it/s]100%|##########| 26/26 [00:00<00:00, 31.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.258 (0.315)	train_nll   0.26 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.43 ( 22.39)	train_acc   0.90 (  0.86)	train_minacc   0.54 (  0.34)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 7.4640 (7.4847)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.76it/s] 23%|##3       | 6/26 [00:00<00:00, 30.39it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.39it/s] 46%|####6     | 12/26 [00:00<00:00, 41.55it/s] 65%|######5   | 17/26 [00:00<00:00, 44.57it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.57it/s] 85%|########4 | 22/26 [00:00<00:00, 46.02it/s]100%|##########| 26/26 [00:00<00:00, 40.20it/s]
Test: [   0/  26]	Loss 0.295 (0.295)	test_acc   0.90 (  0.90)	test_minacc   0.41 (  0.41)	test_majacc   0.98 (  0.98)	Loss_d 0.295 (0.295)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.286 (0.284)	test_acc   0.86 (  0.87)	test_minacc   0.40 (  0.38)	test_majacc   0.95 (  0.96)	Loss_d 0.286 (0.284)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.40 (  0.38)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.87 (  0.89)
Test: [  20/  26]	Loss 0.329 (0.290)	test_acc   0.86 (  0.87)	test_minacc   0.34 (  0.39)	test_majacc   0.96 (  0.96)	Loss_d 0.329 (0.290)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.34 (  0.39)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  26/  26]	Loss 0.250 (0.287)	test_acc   0.89 (  0.87)	test_minacc   0.37 (  0.39)	test_majacc   0.98 (  0.96)	Loss_d 0.250 (0.287)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.37 (  0.39)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.90 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.16it/s]
Test: [  0/  1]	Loss 1.724 (1.724)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 1.724 (1.724)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 1.724 (1.724)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 1.724 (1.724)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.53 (  0.53)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/137/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0348 (0.0408)	validation_time 0.0004 (0.0015)	train_time 0.0344 (0.0391)
record: (train_acc, test_acc) (0.8749000263810158, 0.41600000858306885)
last accs (train_acc, test_acc) (0.8749000263810158, 0.41600000858306885)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.65it/s] 19%|#9        | 5/26 [00:00<00:00, 25.88it/s] 38%|###8      | 10/26 [00:00<00:00, 33.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.92it/s] 88%|########8 | 23/26 [00:00<00:00, 37.46it/s]100%|##########| 26/26 [00:00<00:00, 32.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.242 (0.302)	train_nll   0.24 (  0.30)	train_penalty   0.01 (  0.02)	weight_norm  22.54 ( 22.48)	train_acc   0.92 (  0.87)	train_minacc   0.60 (  0.39)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.3773 (7.3401)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.63it/s] 35%|###4      | 9/26 [00:00<00:00, 39.96it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.96it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.72it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.72it/s] 81%|########  | 21/26 [00:00<00:00, 47.70it/s]100%|##########| 26/26 [00:00<00:00, 41.59it/s]
Test: [   0/  26]	Loss 0.276 (0.276)	test_acc   0.89 (  0.89)	test_minacc   0.46 (  0.46)	test_majacc   0.97 (  0.97)	Loss_d 0.276 (0.276)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.286 (0.261)	test_acc   0.86 (  0.89)	test_minacc   0.48 (  0.49)	test_majacc   0.93 (  0.95)	Loss_d 0.286 (0.261)	test_acc_d   0.86 (  0.89)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.84 (  0.85)
Test: [  20/  26]	Loss 0.289 (0.265)	test_acc   0.87 (  0.88)	test_minacc   0.49 (  0.49)	test_majacc   0.94 (  0.95)	Loss_d 0.289 (0.265)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.84 (  0.85)
Test: [  26/  26]	Loss 0.215 (0.261)	test_acc   0.92 (  0.89)	test_minacc   0.54 (  0.51)	test_majacc   0.98 (  0.95)	Loss_d 0.215 (0.261)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.87 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.31it/s]
Test: [  0/  1]	Loss 1.534 (1.534)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.94 (  0.94)	Loss_d 1.534 (1.534)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.38 (  0.38)
Test: [  1/  1]	Loss 1.534 (1.534)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.94 (  0.94)	Loss_d 1.534 (1.534)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.38 (  0.38)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/137/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0350 (0.0400)	validation_time 0.0006 (0.0013)	train_time 0.0344 (0.0384)
record: (train_acc, test_acc) (0.888000016272068, 0.46300002932548523)
last accs (train_acc, test_acc) (0.888000016272068, 0.46300002932548523)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 19%|#9        | 5/26 [00:00<00:00, 21.49it/s] 35%|###4      | 9/26 [00:00<00:00, 27.49it/s] 50%|#####     | 13/26 [00:00<00:00, 31.74it/s] 65%|######5   | 17/26 [00:00<00:00, 33.92it/s] 81%|########  | 21/26 [00:00<00:00, 35.07it/s] 96%|#########6| 25/26 [00:00<00:00, 36.56it/s]100%|##########| 26/26 [00:00<00:00, 29.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.256 (0.290)	train_nll   0.26 (  0.29)	train_penalty   0.01 (  0.02)	weight_norm  22.67 ( 22.60)	train_acc   0.90 (  0.88)	train_minacc   0.57 (  0.41)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 7.2332 (7.1519)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.61it/s] 27%|##6       | 7/26 [00:00<00:00, 35.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.23it/s] 46%|####6     | 12/26 [00:00<00:00, 41.17it/s] 69%|######9   | 18/26 [00:00<00:00, 46.53it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.53it/s] 88%|########8 | 23/26 [00:00<00:00, 47.48it/s]100%|##########| 26/26 [00:00<00:00, 40.36it/s]
Test: [   0/  26]	Loss 0.264 (0.264)	test_acc   0.89 (  0.89)	test_minacc   0.54 (  0.54)	test_majacc   0.95 (  0.95)	Loss_d 0.264 (0.264)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.259 (0.259)	test_acc   0.87 (  0.89)	test_minacc   0.73 (  0.63)	test_majacc   0.90 (  0.93)	Loss_d 0.259 (0.259)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.73 (  0.63)	test_majacc_d   0.90 (  0.93)	test_corr_d   0.75 (  0.79)
Test: [  20/  26]	Loss 0.291 (0.264)	test_acc   0.87 (  0.88)	test_minacc   0.66 (  0.63)	test_majacc   0.91 (  0.93)	Loss_d 0.291 (0.264)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.66 (  0.63)	test_majacc_d   0.91 (  0.93)	test_corr_d   0.75 (  0.78)
Test: [  26/  26]	Loss 0.209 (0.261)	test_acc   0.92 (  0.89)	test_minacc   0.71 (  0.65)	test_majacc   0.95 (  0.93)	Loss_d 0.209 (0.261)	test_acc_d   0.92 (  0.89)	test_minacc_d   0.71 (  0.65)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.81 (  0.78)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.97it/s]
Test: [  0/  1]	Loss 1.402 (1.402)	test_acc   0.55 (  0.55)	test_minacc   0.50 (  0.50)	test_majacc   0.91 (  0.91)	Loss_d 1.402 (1.402)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 1.402 (1.402)	test_acc   0.55 (  0.55)	test_minacc   0.50 (  0.50)	test_majacc   0.91 (  0.91)	Loss_d 1.402 (1.402)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.18 (  0.18)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/137/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0347 (0.0394)	validation_time 0.0004 (0.0012)	train_time 0.0343 (0.0379)
record: (train_acc, test_acc) (0.8850000234246254, 0.5450000166893005)
last accs (train_acc, test_acc) (0.8850000234246254, 0.5450000166893005)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.49it/s] 19%|#9        | 5/26 [00:00<00:00, 24.61it/s] 35%|###4      | 9/26 [00:00<00:00, 30.50it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.86it/s] 92%|#########2| 24/26 [00:00<00:00, 38.19it/s]100%|##########| 26/26 [00:00<00:00, 32.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.208 (0.276)	train_nll   0.21 (  0.28)	train_penalty   0.01 (  0.01)	weight_norm  22.84 ( 22.75)	train_acc   0.92 (  0.88)	train_minacc   0.51 (  0.46)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 7.4328 (7.2402)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.97it/s] 23%|##3       | 6/26 [00:00<00:00, 27.67it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.67it/s] 46%|####6     | 12/26 [00:00<00:00, 38.38it/s] 69%|######9   | 18/26 [00:00<00:00, 44.31it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.31it/s] 92%|#########2| 24/26 [00:00<00:00, 47.09it/s]100%|##########| 26/26 [00:00<00:00, 37.51it/s]
Test: [   0/  26]	Loss 0.201 (0.201)	test_acc   0.94 (  0.94)	test_minacc   0.71 (  0.71)	test_majacc   0.98 (  0.98)	Loss_d 0.201 (0.201)	test_acc_d   0.94 (  0.94)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.250 (0.245)	test_acc   0.88 (  0.89)	test_minacc   0.73 (  0.70)	test_majacc   0.91 (  0.93)	Loss_d 0.250 (0.245)	test_acc_d   0.88 (  0.89)	test_minacc_d   0.73 (  0.70)	test_majacc_d   0.91 (  0.93)	test_corr_d   0.74 (  0.76)
Test: [  20/  26]	Loss 0.282 (0.250)	test_acc   0.87 (  0.89)	test_minacc   0.74 (  0.70)	test_majacc   0.90 (  0.93)	Loss_d 0.282 (0.250)	test_acc_d   0.87 (  0.89)	test_minacc_d   0.74 (  0.70)	test_majacc_d   0.90 (  0.93)	test_corr_d   0.72 (  0.75)
Test: [  26/  26]	Loss 0.176 (0.246)	test_acc   0.94 (  0.89)	test_minacc   0.69 (  0.70)	test_majacc   0.98 (  0.93)	Loss_d 0.176 (0.246)	test_acc_d   0.94 (  0.89)	test_minacc_d   0.69 (  0.70)	test_majacc_d   0.98 (  0.93)	test_corr_d   0.82 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.32it/s]
Test: [  0/  1]	Loss 1.575 (1.575)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.94 (  0.94)	Loss_d 1.575 (1.575)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 1.575 (1.575)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.94 (  0.94)	Loss_d 1.575 (1.575)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.18 (  0.18)
Overall Timing[  8/  1]	epoch_time 0.0340 (0.0388)	validation_time 0.0004 (0.0011)	train_time 0.0336 (0.0374)
record: (train_acc, test_acc) (0.8850000234246254, 0.5450000166893005)
last accs (train_acc, test_acc) (0.8935000249147416, 0.5400000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.51it/s] 23%|##3       | 6/26 [00:00<00:00, 26.79it/s] 38%|###8      | 10/26 [00:00<00:00, 30.11it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.77it/s] 92%|#########2| 24/26 [00:00<00:00, 37.49it/s]100%|##########| 26/26 [00:00<00:00, 32.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.179 (0.268)	train_nll   0.18 (  0.27)	train_penalty   0.00 (  0.01)	weight_norm  23.06 ( 22.95)	train_acc   0.92 (  0.89)	train_minacc   0.54 (  0.50)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 7.3740 (7.3219)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.15it/s] 31%|###       | 8/26 [00:00<00:00, 37.23it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.23it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.05it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.83it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.83it/s]100%|##########| 26/26 [00:00<00:00, 50.67it/s]100%|##########| 26/26 [00:00<00:00, 41.93it/s]
Test: [   0/  26]	Loss 0.234 (0.234)	test_acc   0.90 (  0.90)	test_minacc   0.45 (  0.45)	test_majacc   0.98 (  0.98)	Loss_d 0.234 (0.234)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.235 (0.239)	test_acc   0.89 (  0.90)	test_minacc   0.55 (  0.54)	test_majacc   0.95 (  0.96)	Loss_d 0.235 (0.239)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.84 (  0.85)
Test: [  20/  26]	Loss 0.258 (0.237)	test_acc   0.89 (  0.90)	test_minacc   0.60 (  0.55)	test_majacc   0.95 (  0.96)	Loss_d 0.258 (0.237)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.60 (  0.55)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.82 (  0.84)
Test: [  26/  26]	Loss 0.159 (0.232)	test_acc   0.94 (  0.90)	test_minacc   0.66 (  0.56)	test_majacc   0.98 (  0.96)	Loss_d 0.159 (0.232)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.66 (  0.56)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.86 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.10it/s]
Test: [  0/  1]	Loss 1.748 (1.748)	test_acc   0.47 (  0.47)	test_minacc   0.41 (  0.41)	test_majacc   0.94 (  0.94)	Loss_d 1.748 (1.748)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.39 (  0.39)
Test: [  1/  1]	Loss 1.748 (1.748)	test_acc   0.47 (  0.47)	test_minacc   0.41 (  0.41)	test_majacc   0.94 (  0.94)	Loss_d 1.748 (1.748)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.39 (  0.39)
Overall Timing[  9/  1]	epoch_time 0.0362 (0.0385)	validation_time 0.0006 (0.0011)	train_time 0.0356 (0.0372)
record: (train_acc, test_acc) (0.8850000234246254, 0.5450000166893005)
last accs (train_acc, test_acc) (0.8993000245690346, 0.4650000333786011)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.44it/s] 19%|#9        | 5/26 [00:00<00:00, 22.89it/s] 35%|###4      | 9/26 [00:00<00:00, 29.41it/s] 50%|#####     | 13/26 [00:00<00:00, 33.15it/s] 65%|######5   | 17/26 [00:00<00:00, 35.01it/s] 81%|########  | 21/26 [00:00<00:00, 36.50it/s] 96%|#########6| 25/26 [00:00<00:00, 37.07it/s]100%|##########| 26/26 [00:00<00:00, 30.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.184 (0.254)	train_nll   0.18 (  0.25)	train_penalty   0.01 (  0.01)	weight_norm  23.30 ( 23.18)	train_acc   0.92 (  0.89)	train_minacc   0.54 (  0.52)	train_majacc   0.98 (  0.95)	train_corr   0.00 (  0.00)	l1 7.1945 (7.4476)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.83it/s] 31%|###       | 8/26 [00:00<00:00, 36.06it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.06it/s] 50%|#####     | 13/26 [00:00<00:00, 41.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.73it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.73it/s] 92%|#########2| 24/26 [00:00<00:00, 47.47it/s]100%|##########| 26/26 [00:00<00:00, 40.46it/s]
Test: [   0/  26]	Loss 0.228 (0.228)	test_acc   0.92 (  0.92)	test_minacc   0.55 (  0.55)	test_majacc   0.98 (  0.98)	Loss_d 0.228 (0.228)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.224 (0.238)	test_acc   0.90 (  0.90)	test_minacc   0.65 (  0.57)	test_majacc   0.95 (  0.95)	Loss_d 0.224 (0.238)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.65 (  0.57)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.83 (  0.84)
Test: [  20/  26]	Loss 0.258 (0.240)	test_acc   0.89 (  0.90)	test_minacc   0.65 (  0.59)	test_majacc   0.94 (  0.95)	Loss_d 0.258 (0.240)	test_acc_d   0.89 (  0.90)	test_minacc_d   0.65 (  0.59)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.80 (  0.84)
Test: [  26/  26]	Loss 0.166 (0.234)	test_acc   0.94 (  0.90)	test_minacc   0.74 (  0.60)	test_majacc   0.98 (  0.96)	Loss_d 0.166 (0.234)	test_acc_d   0.94 (  0.90)	test_minacc_d   0.74 (  0.60)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.85 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.51it/s]
Test: [  0/  1]	Loss 1.680 (1.680)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.95 (  0.95)	Loss_d 1.680 (1.680)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.40 (  0.40)
Test: [  1/  1]	Loss 1.680 (1.680)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.95 (  0.95)	Loss_d 1.680 (1.680)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.40 (  0.40)
Overall Timing[ 10/  1]	epoch_time 0.0343 (0.0381)	validation_time 0.0004 (0.0010)	train_time 0.0339 (0.0369)
record: (train_acc, test_acc) (0.8850000234246254, 0.5450000166893005)
last accs (train_acc, test_acc) (0.9021000224947929, 0.4710000157356262)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.01it/s] 23%|##3       | 6/26 [00:00<00:00, 27.97it/s] 38%|###8      | 10/26 [00:00<00:00, 32.55it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.72it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.21it/s] 96%|#########6| 25/26 [00:00<00:00, 39.18it/s]100%|##########| 26/26 [00:00<00:00, 33.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.212 (0.251)	train_nll   0.21 (  0.25)	train_penalty   0.01 (  0.01)	weight_norm  23.57 ( 23.43)	train_acc   0.90 (  0.89)	train_minacc   0.34 (  0.56)	train_majacc   1.00 (  0.95)	train_corr   0.00 (  0.00)	l1 7.2035 (7.4044)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.70it/s] 31%|###       | 8/26 [00:00<00:00, 41.37it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.37it/s] 50%|#####     | 13/26 [00:00<00:00, 44.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.10it/s] 96%|#########6| 25/26 [00:00<00:00, 49.48it/s]100%|##########| 26/26 [00:00<00:00, 42.30it/s]
Test: [   0/  26]	Loss 0.233 (0.233)	test_acc   0.90 (  0.90)	test_minacc   0.36 (  0.36)	test_majacc   0.99 (  0.99)	Loss_d 0.233 (0.233)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.264 (0.235)	test_acc   0.90 (  0.90)	test_minacc   0.44 (  0.43)	test_majacc   0.98 (  0.98)	Loss_d 0.264 (0.235)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.44 (  0.43)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.218 (0.235)	test_acc   0.93 (  0.90)	test_minacc   0.65 (  0.47)	test_majacc   0.99 (  0.98)	Loss_d 0.218 (0.235)	test_acc_d   0.93 (  0.90)	test_minacc_d   0.65 (  0.47)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.87 (  0.89)
Test: [  26/  26]	Loss 0.173 (0.228)	test_acc   0.93 (  0.91)	test_minacc   0.51 (  0.48)	test_majacc   1.00 (  0.98)	Loss_d 0.173 (0.228)	test_acc_d   0.93 (  0.91)	test_minacc_d   0.51 (  0.48)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.90 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.38it/s]
Test: [  0/  1]	Loss 2.011 (2.011)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.97 (  0.97)	Loss_d 2.011 (2.011)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 2.011 (2.011)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.97 (  0.97)	Loss_d 2.011 (2.011)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.58 (  0.58)
Overall Timing[ 11/  1]	epoch_time 0.0342 (0.0378)	validation_time 0.0003 (0.0010)	train_time 0.0338 (0.0367)
record: (train_acc, test_acc) (0.8850000234246254, 0.5450000166893005)
last accs (train_acc, test_acc) (0.905000022649765, 0.37300002574920654)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.69it/s] 23%|##3       | 6/26 [00:00<00:00, 23.41it/s] 42%|####2     | 11/26 [00:00<00:00, 30.20it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.02it/s] 92%|#########2| 24/26 [00:00<00:00, 37.31it/s]100%|##########| 26/26 [00:00<00:00, 30.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.167 (0.239)	train_nll   0.17 (  0.24)	train_penalty   0.00 (  0.01)	weight_norm  23.86 ( 23.71)	train_acc   0.94 (  0.90)	train_minacc   0.77 (  0.58)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 7.3789 (7.3978)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.05it/s] 35%|###4      | 9/26 [00:00<00:00, 41.25it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.25it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.08it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.08it/s] 81%|########  | 21/26 [00:00<00:00, 49.12it/s]100%|##########| 26/26 [00:00<00:00, 43.28it/s]
Test: [   0/  26]	Loss 0.218 (0.218)	test_acc   0.92 (  0.92)	test_minacc   0.70 (  0.70)	test_majacc   0.96 (  0.96)	Loss_d 0.218 (0.218)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.245 (0.226)	test_acc   0.91 (  0.90)	test_minacc   0.68 (  0.64)	test_majacc   0.95 (  0.95)	Loss_d 0.245 (0.226)	test_acc_d   0.91 (  0.90)	test_minacc_d   0.68 (  0.64)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.79 (  0.81)
Test: [  20/  26]	Loss 0.204 (0.227)	test_acc   0.92 (  0.90)	test_minacc   0.78 (  0.65)	test_majacc   0.95 (  0.95)	Loss_d 0.204 (0.227)	test_acc_d   0.92 (  0.90)	test_minacc_d   0.78 (  0.65)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.76 (  0.80)
Test: [  26/  26]	Loss 0.143 (0.217)	test_acc   0.94 (  0.91)	test_minacc   0.71 (  0.66)	test_majacc   0.98 (  0.95)	Loss_d 0.143 (0.217)	test_acc_d   0.94 (  0.91)	test_minacc_d   0.71 (  0.66)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.83 (  0.80)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.22it/s]
Test: [  0/  1]	Loss 1.863 (1.863)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.90 (  0.90)	Loss_d 1.863 (1.863)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.37 (  0.37)
Test: [  1/  1]	Loss 1.863 (1.863)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.90 (  0.90)	Loss_d 1.863 (1.863)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.37 (  0.37)
Overall Timing[ 12/  1]	epoch_time 0.0357 (0.0376)	validation_time 0.0004 (0.0009)	train_time 0.0353 (0.0366)
record: (train_acc, test_acc) (0.8850000234246254, 0.5450000166893005)
last accs (train_acc, test_acc) (0.9100000208616257, 0.4700000286102295)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.12it/s] 23%|##3       | 6/26 [00:00<00:00, 28.84it/s] 42%|####2     | 11/26 [00:00<00:00, 34.74it/s] 62%|######1   | 16/26 [00:00<00:00, 37.58it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.18it/s] 92%|#########2| 24/26 [00:00<00:00, 38.75it/s]100%|##########| 26/26 [00:00<00:00, 33.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.137 (0.208)	train_nll   0.14 (  0.21)	train_penalty   0.00 (  0.00)	weight_norm  24.13 ( 24.00)	train_acc   0.94 (  0.91)	train_minacc   0.80 (  0.64)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 8.4111 (7.6434)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.42it/s] 31%|###       | 8/26 [00:00<00:00, 39.07it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.07it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.25it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.59it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.59it/s]100%|##########| 26/26 [00:00<00:00, 51.99it/s]100%|##########| 26/26 [00:00<00:00, 42.30it/s]
Test: [   0/  26]	Loss 0.154 (0.154)	test_acc   0.94 (  0.94)	test_minacc   0.73 (  0.73)	test_majacc   0.97 (  0.97)	Loss_d 0.154 (0.154)	test_acc_d   0.94 (  0.94)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.79 (  0.79)
Test: [  10/  26]	Loss 0.211 (0.203)	test_acc   0.92 (  0.92)	test_minacc   0.77 (  0.72)	test_majacc   0.95 (  0.95)	Loss_d 0.211 (0.203)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.77 (  0.72)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.73 (  0.77)
Test: [  20/  26]	Loss 0.183 (0.196)	test_acc   0.92 (  0.92)	test_minacc   0.75 (  0.75)	test_majacc   0.95 (  0.95)	Loss_d 0.183 (0.196)	test_acc_d   0.92 (  0.92)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.72 (  0.75)
Test: [  26/  26]	Loss 0.087 (0.183)	test_acc   0.97 (  0.92)	test_minacc   0.89 (  0.77)	test_majacc   0.99 (  0.95)	Loss_d 0.087 (0.183)	test_acc_d   0.97 (  0.92)	test_minacc_d   0.89 (  0.77)	test_majacc_d   0.99 (  0.95)	test_corr_d   0.79 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.49it/s]
Test: [  0/  1]	Loss 2.101 (2.101)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.89 (  0.89)	Loss_d 2.101 (2.101)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 2.101 (2.101)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.89 (  0.89)	Loss_d 2.101 (2.101)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.16 (  0.16)
Overall Timing[ 13/  1]	epoch_time 0.0336 (0.0373)	validation_time 0.0003 (0.0009)	train_time 0.0333 (0.0363)
record: (train_acc, test_acc) (0.8850000234246254, 0.5450000166893005)
last accs (train_acc, test_acc) (0.9247000153064728, 0.531000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 19%|#9        | 5/26 [00:00<00:00, 22.64it/s] 35%|###4      | 9/26 [00:00<00:00, 28.69it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.81it/s] 69%|######9   | 18/26 [00:00<00:00, 35.69it/s] 88%|########8 | 23/26 [00:00<00:00, 37.22it/s]100%|##########| 26/26 [00:00<00:00, 31.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.119 (0.199)	train_nll   0.12 (  0.20)	train_penalty   0.00 (  0.00)	weight_norm  24.46 ( 24.30)	train_acc   0.95 (  0.91)	train_minacc   0.83 (  0.68)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.8284 (7.9673)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.83it/s] 19%|#9        | 5/26 [00:00<00:00, 22.63it/s] 38%|###8      | 10/26 [00:00<00:00, 32.36it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.47it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 38.47it/s] 81%|########  | 21/26 [00:00<00:00, 44.30it/s]100%|##########| 26/26 [00:00<00:00, 35.81it/s]
Test: [   0/  26]	Loss 0.163 (0.163)	test_acc   0.94 (  0.94)	test_minacc   0.75 (  0.75)	test_majacc   0.97 (  0.97)	Loss_d 0.163 (0.163)	test_acc_d   0.94 (  0.94)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.194 (0.184)	test_acc   0.93 (  0.93)	test_minacc   0.76 (  0.73)	test_majacc   0.96 (  0.96)	Loss_d 0.194 (0.184)	test_acc_d   0.93 (  0.93)	test_minacc_d   0.76 (  0.73)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.76 (  0.79)
Test: [  20/  26]	Loss 0.141 (0.174)	test_acc   0.95 (  0.93)	test_minacc   0.88 (  0.74)	test_majacc   0.96 (  0.96)	Loss_d 0.141 (0.174)	test_acc_d   0.95 (  0.93)	test_minacc_d   0.88 (  0.74)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.73 (  0.79)
Test: [  26/  26]	Loss 0.086 (0.162)	test_acc   0.98 (  0.94)	test_minacc   0.91 (  0.76)	test_majacc   0.99 (  0.97)	Loss_d 0.086 (0.162)	test_acc_d   0.98 (  0.94)	test_minacc_d   0.91 (  0.76)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.82 (  0.79)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.15it/s]
Test: [  0/  1]	Loss 2.327 (2.327)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.88 (  0.88)	Loss_d 2.327 (2.327)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.33 (  0.33)
Test: [  1/  1]	Loss 2.327 (2.327)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.88 (  0.88)	Loss_d 2.327 (2.327)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.33 (  0.33)
Overall Timing[ 14/  1]	epoch_time 0.0358 (0.0372)	validation_time 0.0003 (0.0008)	train_time 0.0355 (0.0363)
record: (train_acc, test_acc) (0.8850000234246254, 0.5450000166893005)
last accs (train_acc, test_acc) (0.937900015771389, 0.4700000286102295)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 19%|#9        | 5/26 [00:00<00:00, 23.22it/s] 38%|###8      | 10/26 [00:00<00:00, 31.40it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.91it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.40it/s] 96%|#########6| 25/26 [00:00<00:00, 38.51it/s]100%|##########| 26/26 [00:00<00:00, 31.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.004 (0.072)	train_nll   0.24 (  0.22)	train_penalty   0.00 (  0.00)	weight_norm  24.77 ( 24.64)	train_acc   0.91 (  0.90)	train_minacc   0.91 (  0.73)	train_majacc   0.91 (  0.94)	train_corr   0.00 (  0.00)	l1 6.7936 (8.0061)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.65it/s] 27%|##6       | 7/26 [00:00<00:00, 38.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.13it/s] 46%|####6     | 12/26 [00:00<00:00, 43.43it/s] 65%|######5   | 17/26 [00:00<00:00, 44.18it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.18it/s] 88%|########8 | 23/26 [00:00<00:00, 47.68it/s]100%|##########| 26/26 [00:00<00:00, 40.53it/s]
Test: [   0/  26]	Loss 0.271 (0.271)	test_acc   0.87 (  0.87)	test_minacc   0.80 (  0.80)	test_majacc   0.88 (  0.88)	Loss_d 0.271 (0.271)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.324 (0.280)	test_acc   0.83 (  0.88)	test_minacc   0.74 (  0.83)	test_majacc   0.85 (  0.89)	Loss_d 0.324 (0.280)	test_acc_d   0.83 (  0.88)	test_minacc_d   0.74 (  0.83)	test_majacc_d   0.85 (  0.89)	test_corr_d   0.61 (  0.65)
Test: [  20/  26]	Loss 0.307 (0.280)	test_acc   0.85 (  0.88)	test_minacc   0.74 (  0.83)	test_majacc   0.87 (  0.89)	Loss_d 0.307 (0.280)	test_acc_d   0.85 (  0.88)	test_minacc_d   0.74 (  0.83)	test_majacc_d   0.87 (  0.89)	test_corr_d   0.60 (  0.64)
Test: [  26/  26]	Loss 0.265 (0.286)	test_acc   0.90 (  0.87)	test_minacc   0.91 (  0.82)	test_majacc   0.90 (  0.88)	Loss_d 0.265 (0.286)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.91 (  0.82)	test_majacc_d   0.90 (  0.88)	test_corr_d   0.66 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.52it/s]
Test: [  0/  1]	Loss 1.359 (1.359)	test_acc   0.56 (  0.56)	test_minacc   0.54 (  0.54)	test_majacc   0.77 (  0.77)	Loss_d 1.359 (1.359)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.359 (1.359)	test_acc   0.56 (  0.56)	test_minacc   0.54 (  0.54)	test_majacc   0.77 (  0.77)	Loss_d 1.359 (1.359)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.10 (  0.10)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/137/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0358 (0.0372)	validation_time 0.0004 (0.0008)	train_time 0.0354 (0.0362)
record: (train_acc, test_acc) (0.8731000236272812, 0.5649999976158142)
last accs (train_acc, test_acc) (0.8731000236272812, 0.5649999976158142)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.10it/s] 19%|#9        | 5/26 [00:00<00:00, 24.76it/s] 35%|###4      | 9/26 [00:00<00:00, 31.01it/s] 50%|#####     | 13/26 [00:00<00:00, 33.94it/s] 69%|######9   | 18/26 [00:00<00:00, 36.17it/s] 88%|########8 | 23/26 [00:00<00:00, 37.90it/s]100%|##########| 26/26 [00:00<00:00, 31.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.001 (0.002)	train_nll   0.33 (  0.35)	train_penalty   0.00 (  0.00)	weight_norm  24.84 ( 24.82)	train_acc   0.86 (  0.83)	train_minacc   0.83 (  0.84)	train_majacc   0.87 (  0.83)	train_corr   0.00 (  0.00)	l1 6.1247 (6.4342)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.18it/s] 27%|##6       | 7/26 [00:00<00:00, 32.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.97it/s] 50%|#####     | 13/26 [00:00<00:00, 44.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.04it/s] 96%|#########6| 25/26 [00:00<00:00, 50.23it/s]100%|##########| 26/26 [00:00<00:00, 40.31it/s]
Test: [   0/  26]	Loss 0.307 (0.307)	test_acc   0.85 (  0.85)	test_minacc   0.71 (  0.71)	test_majacc   0.87 (  0.87)	Loss_d 0.307 (0.307)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.331 (0.293)	test_acc   0.83 (  0.87)	test_minacc   0.71 (  0.79)	test_majacc   0.85 (  0.89)	Loss_d 0.331 (0.293)	test_acc_d   0.83 (  0.87)	test_minacc_d   0.71 (  0.79)	test_majacc_d   0.85 (  0.89)	test_corr_d   0.65 (  0.68)
Test: [  20/  26]	Loss 0.303 (0.299)	test_acc   0.86 (  0.87)	test_minacc   0.74 (  0.78)	test_majacc   0.89 (  0.88)	Loss_d 0.303 (0.299)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.74 (  0.78)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.66 (  0.67)
Test: [  26/  26]	Loss 0.317 (0.305)	test_acc   0.86 (  0.86)	test_minacc   0.77 (  0.77)	test_majacc   0.88 (  0.88)	Loss_d 0.317 (0.305)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.68 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.32it/s]
Test: [  0/  1]	Loss 1.231 (1.231)	test_acc   0.56 (  0.56)	test_minacc   0.54 (  0.54)	test_majacc   0.80 (  0.80)	Loss_d 1.231 (1.231)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 1.231 (1.231)	test_acc   0.56 (  0.56)	test_minacc   0.54 (  0.54)	test_majacc   0.80 (  0.80)	Loss_d 1.231 (1.231)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.18 (  0.18)
Overall Timing[ 16/  1]	epoch_time 0.0345 (0.0370)	validation_time 0.0004 (0.0008)	train_time 0.0341 (0.0361)
record: (train_acc, test_acc) (0.8731000236272812, 0.5649999976158142)
last accs (train_acc, test_acc) (0.8632000271081924, 0.5640000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.39it/s] 19%|#9        | 5/26 [00:00<00:01, 19.68it/s] 35%|###4      | 9/26 [00:00<00:00, 25.78it/s] 50%|#####     | 13/26 [00:00<00:00, 29.74it/s] 65%|######5   | 17/26 [00:00<00:00, 32.79it/s] 85%|########4 | 22/26 [00:00<00:00, 35.63it/s]100%|##########| 26/26 [00:00<00:00, 28.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.004)	train_nll   0.35 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  24.87 ( 24.86)	train_acc   0.83 (  0.85)	train_minacc   0.77 (  0.79)	train_majacc   0.84 (  0.86)	train_corr   0.00 (  0.00)	l1 6.4550 (6.2993)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.09it/s] 27%|##6       | 7/26 [00:00<00:00, 36.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.27it/s] 50%|#####     | 13/26 [00:00<00:00, 42.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.95it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.95it/s] 96%|#########6| 25/26 [00:00<00:00, 49.08it/s]100%|##########| 26/26 [00:00<00:00, 40.86it/s]
Test: [   0/  26]	Loss 0.302 (0.302)	test_acc   0.86 (  0.86)	test_minacc   0.80 (  0.80)	test_majacc   0.87 (  0.87)	Loss_d 0.302 (0.302)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.281 (0.326)	test_acc   0.87 (  0.84)	test_minacc   0.89 (  0.81)	test_majacc   0.87 (  0.84)	Loss_d 0.281 (0.326)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.89 (  0.81)	test_majacc_d   0.87 (  0.84)	test_corr_d   0.61 (  0.62)
Test: [  20/  26]	Loss 0.329 (0.325)	test_acc   0.82 (  0.84)	test_minacc   0.80 (  0.82)	test_majacc   0.83 (  0.84)	Loss_d 0.329 (0.325)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.80 (  0.82)	test_majacc_d   0.83 (  0.84)	test_corr_d   0.61 (  0.62)
Test: [  26/  26]	Loss 0.355 (0.330)	test_acc   0.83 (  0.83)	test_minacc   0.77 (  0.82)	test_majacc   0.84 (  0.84)	Loss_d 0.355 (0.330)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.77 (  0.82)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.64 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.04it/s]
Test: [  0/  1]	Loss 1.412 (1.412)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.80 (  0.80)	Loss_d 1.412 (1.412)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 1.412 (1.412)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.80 (  0.80)	Loss_d 1.412 (1.412)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.09 (  0.09)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/137/checkpoints/model_best.pth
Overall Timing[ 17/  1]	epoch_time 0.0350 (0.0369)	validation_time 0.0004 (0.0008)	train_time 0.0345 (0.0360)
record: (train_acc, test_acc) (0.833400026500225, 0.6000000238418579)
last accs (train_acc, test_acc) (0.833400026500225, 0.6000000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.67it/s] 23%|##3       | 6/26 [00:00<00:00, 28.41it/s] 38%|###8      | 10/26 [00:00<00:00, 33.33it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.34it/s] 88%|########8 | 23/26 [00:00<00:00, 37.70it/s]100%|##########| 26/26 [00:00<00:00, 32.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.003 (0.002)	train_nll   0.30 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  24.88 ( 24.88)	train_acc   0.85 (  0.82)	train_minacc   0.94 (  0.84)	train_majacc   0.84 (  0.82)	train_corr   0.00 (  0.00)	l1 6.1857 (6.4124)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.58it/s] 27%|##6       | 7/26 [00:00<00:00, 34.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.32it/s] 50%|#####     | 13/26 [00:00<00:00, 40.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.94it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.94it/s] 96%|#########6| 25/26 [00:00<00:00, 47.24it/s]100%|##########| 26/26 [00:00<00:00, 39.26it/s]
Test: [   0/  26]	Loss 0.309 (0.309)	test_acc   0.83 (  0.83)	test_minacc   0.71 (  0.71)	test_majacc   0.85 (  0.85)	Loss_d 0.309 (0.309)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.317 (0.310)	test_acc   0.82 (  0.84)	test_minacc   0.81 (  0.82)	test_majacc   0.82 (  0.84)	Loss_d 0.317 (0.310)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.81 (  0.82)	test_majacc_d   0.82 (  0.84)	test_corr_d   0.62 (  0.64)
Test: [  20/  26]	Loss 0.341 (0.314)	test_acc   0.83 (  0.84)	test_minacc   0.82 (  0.82)	test_majacc   0.83 (  0.84)	Loss_d 0.341 (0.314)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.83 (  0.84)	test_corr_d   0.62 (  0.64)
Test: [  26/  26]	Loss 0.308 (0.318)	test_acc   0.85 (  0.83)	test_minacc   0.94 (  0.82)	test_majacc   0.84 (  0.83)	Loss_d 0.308 (0.318)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.94 (  0.82)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.64 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.03it/s]
Test: [  0/  1]	Loss 1.329 (1.329)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.77 (  0.77)	Loss_d 1.329 (1.329)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 1.329 (1.329)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.77 (  0.77)	Loss_d 1.329 (1.329)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.06 (  0.06)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/137/checkpoints/model_best.pth
Overall Timing[ 18/  1]	epoch_time 0.0342 (0.0367)	validation_time 0.0003 (0.0007)	train_time 0.0339 (0.0359)
record: (train_acc, test_acc) (0.8321000298261643, 0.6290000081062317)
last accs (train_acc, test_acc) (0.8321000298261643, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.38it/s] 23%|##3       | 6/26 [00:00<00:00, 28.66it/s] 38%|###8      | 10/26 [00:00<00:00, 33.08it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.25it/s] 92%|#########2| 24/26 [00:00<00:00, 38.44it/s]100%|##########| 26/26 [00:00<00:00, 33.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.001)	train_nll   0.35 (  0.34)	train_penalty   0.00 (  0.00)	weight_norm  24.89 ( 24.89)	train_acc   0.82 (  0.81)	train_minacc   0.83 (  0.83)	train_majacc   0.82 (  0.81)	train_corr   0.00 (  0.00)	l1 6.3191 (6.4223)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 27%|##6       | 7/26 [00:00<00:00, 33.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.44it/s] 50%|#####     | 13/26 [00:00<00:00, 40.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.29it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.29it/s] 96%|#########6| 25/26 [00:00<00:00, 47.66it/s]100%|##########| 26/26 [00:00<00:00, 39.34it/s]
Test: [   0/  26]	Loss 0.316 (0.316)	test_acc   0.83 (  0.83)	test_minacc   0.79 (  0.79)	test_majacc   0.83 (  0.83)	Loss_d 0.316 (0.316)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.308 (0.307)	test_acc   0.82 (  0.84)	test_minacc   0.89 (  0.86)	test_majacc   0.81 (  0.83)	Loss_d 0.308 (0.307)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.89 (  0.86)	test_majacc_d   0.81 (  0.83)	test_corr_d   0.61 (  0.63)
Test: [  20/  26]	Loss 0.324 (0.311)	test_acc   0.83 (  0.84)	test_minacc   0.85 (  0.85)	test_majacc   0.83 (  0.83)	Loss_d 0.324 (0.311)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.61 (  0.63)
Test: [  26/  26]	Loss 0.349 (0.317)	test_acc   0.82 (  0.83)	test_minacc   0.83 (  0.85)	test_majacc   0.82 (  0.83)	Loss_d 0.349 (0.317)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.83 (  0.85)	test_majacc_d   0.82 (  0.83)	test_corr_d   0.63 (  0.62)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.57it/s]
Test: [  0/  1]	Loss 1.299 (1.299)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.75 (  0.75)	Loss_d 1.299 (1.299)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 1.299 (1.299)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.75 (  0.75)	Loss_d 1.299 (1.299)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.05 (  0.05)
Overall Timing[ 19/  1]	epoch_time 0.0345 (0.0366)	validation_time 0.0004 (0.0007)	train_time 0.0341 (0.0358)
record: (train_acc, test_acc) (0.8321000298261643, 0.6290000081062317)
last accs (train_acc, test_acc) (0.8311000250577927, 0.6260000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.23it/s] 19%|#9        | 5/26 [00:00<00:00, 23.10it/s] 35%|###4      | 9/26 [00:00<00:00, 28.56it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.45it/s] 69%|######9   | 18/26 [00:00<00:00, 35.33it/s] 85%|########4 | 22/26 [00:00<00:00, 36.75it/s]100%|##########| 26/26 [00:00<00:00, 31.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.001)	train_nll   0.34 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  24.89 ( 24.89)	train_acc   0.83 (  0.82)	train_minacc   0.74 (  0.85)	train_majacc   0.85 (  0.82)	train_corr   0.00 (  0.00)	l1 6.3834 (6.4817)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.93it/s] 23%|##3       | 6/26 [00:00<00:00, 26.01it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.01it/s] 46%|####6     | 12/26 [00:00<00:00, 38.47it/s] 65%|######5   | 17/26 [00:00<00:00, 41.23it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.23it/s] 88%|########8 | 23/26 [00:00<00:00, 47.02it/s]100%|##########| 26/26 [00:00<00:00, 36.82it/s]
Test: [   0/  26]	Loss 0.308 (0.308)	test_acc   0.84 (  0.84)	test_minacc   0.75 (  0.75)	test_majacc   0.86 (  0.86)	Loss_d 0.308 (0.308)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.289 (0.308)	test_acc   0.86 (  0.85)	test_minacc   0.85 (  0.81)	test_majacc   0.86 (  0.85)	Loss_d 0.289 (0.308)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.85 (  0.81)	test_majacc_d   0.86 (  0.85)	test_corr_d   0.66 (  0.67)
Test: [  20/  26]	Loss 0.317 (0.302)	test_acc   0.84 (  0.85)	test_minacc   0.78 (  0.81)	test_majacc   0.85 (  0.86)	Loss_d 0.317 (0.302)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.78 (  0.81)	test_majacc_d   0.85 (  0.86)	test_corr_d   0.66 (  0.67)
Test: [  26/  26]	Loss 0.335 (0.307)	test_acc   0.84 (  0.84)	test_minacc   0.74 (  0.80)	test_majacc   0.85 (  0.85)	Loss_d 0.335 (0.307)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.74 (  0.80)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.69 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.40it/s]
Test: [  0/  1]	Loss 1.450 (1.450)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.79 (  0.79)	Loss_d 1.450 (1.450)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 1.450 (1.450)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.79 (  0.79)	Loss_d 1.450 (1.450)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.16 (  0.16)
Overall Timing[ 20/  1]	epoch_time 0.0358 (0.0366)	validation_time 0.0004 (0.0007)	train_time 0.0354 (0.0358)
record: (train_acc, test_acc) (0.8321000298261643, 0.6290000081062317)
last accs (train_acc, test_acc) (0.8441000259518623, 0.5940000414848328)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.60it/s] 23%|##3       | 6/26 [00:00<00:00, 29.84it/s] 38%|###8      | 10/26 [00:00<00:00, 33.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.61it/s] 92%|#########2| 24/26 [00:00<00:00, 38.96it/s]100%|##########| 26/26 [00:00<00:00, 33.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.001)	train_nll   0.34 (  0.33)	train_penalty   0.00 (  0.00)	weight_norm  24.90 ( 24.90)	train_acc   0.84 (  0.82)	train_minacc   0.83 (  0.83)	train_majacc   0.84 (  0.82)	train_corr   0.00 (  0.00)	l1 6.4792 (6.6127)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.43it/s] 27%|##6       | 7/26 [00:00<00:00, 36.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.22it/s] 50%|#####     | 13/26 [00:00<00:00, 42.70it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.62it/s] 96%|#########6| 25/26 [00:00<00:00, 48.61it/s]100%|##########| 26/26 [00:00<00:00, 40.72it/s]
Test: [   0/  26]	Loss 0.301 (0.301)	test_acc   0.85 (  0.85)	test_minacc   0.79 (  0.79)	test_majacc   0.86 (  0.86)	Loss_d 0.301 (0.301)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.299 (0.310)	test_acc   0.86 (  0.84)	test_minacc   0.84 (  0.82)	test_majacc   0.86 (  0.85)	Loss_d 0.299 (0.310)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.84 (  0.82)	test_majacc_d   0.86 (  0.85)	test_corr_d   0.65 (  0.66)
Test: [  20/  26]	Loss 0.303 (0.298)	test_acc   0.86 (  0.85)	test_minacc   0.83 (  0.83)	test_majacc   0.86 (  0.86)	Loss_d 0.303 (0.298)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.65 (  0.67)
Test: [  26/  26]	Loss 0.327 (0.302)	test_acc   0.84 (  0.85)	test_minacc   0.80 (  0.83)	test_majacc   0.85 (  0.85)	Loss_d 0.327 (0.302)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.80 (  0.83)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.67 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.47it/s]
Test: [  0/  1]	Loss 1.466 (1.466)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.78 (  0.78)	Loss_d 1.466 (1.466)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.466 (1.466)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.78 (  0.78)	Loss_d 1.466 (1.466)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.14 (  0.14)
Overall Timing[ 21/  1]	epoch_time 0.0352 (0.0365)	validation_time 0.0004 (0.0007)	train_time 0.0348 (0.0357)
record: (train_acc, test_acc) (0.8321000298261643, 0.6290000081062317)
last accs (train_acc, test_acc) (0.84970002835989, 0.6160000562667847)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.55it/s] 19%|#9        | 5/26 [00:00<00:00, 21.53it/s] 35%|###4      | 9/26 [00:00<00:00, 28.55it/s] 50%|#####     | 13/26 [00:00<00:00, 32.50it/s] 65%|######5   | 17/26 [00:00<00:00, 34.29it/s] 81%|########  | 21/26 [00:00<00:00, 35.99it/s] 96%|#########6| 25/26 [00:00<00:00, 36.79it/s]100%|##########| 26/26 [00:00<00:00, 30.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.004 (0.002)	train_nll   0.38 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  24.92 ( 24.91)	train_acc   0.82 (  0.84)	train_minacc   0.83 (  0.84)	train_majacc   0.81 (  0.84)	train_corr   0.00 (  0.00)	l1 7.1395 (6.8141)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.98it/s] 27%|##6       | 7/26 [00:00<00:00, 31.85it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.85it/s] 50%|#####     | 13/26 [00:00<00:00, 42.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.35it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.35it/s] 96%|#########6| 25/26 [00:00<00:00, 48.06it/s]100%|##########| 26/26 [00:00<00:00, 39.74it/s]
Test: [   0/  26]	Loss 0.320 (0.320)	test_acc   0.83 (  0.83)	test_minacc   0.79 (  0.79)	test_majacc   0.84 (  0.84)	Loss_d 0.320 (0.320)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.329 (0.341)	test_acc   0.83 (  0.83)	test_minacc   0.82 (  0.82)	test_majacc   0.83 (  0.83)	Loss_d 0.329 (0.341)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.62 (  0.64)
Test: [  20/  26]	Loss 0.298 (0.320)	test_acc   0.85 (  0.84)	test_minacc   0.85 (  0.84)	test_majacc   0.85 (  0.84)	Loss_d 0.298 (0.320)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.85 (  0.84)	test_majacc_d   0.85 (  0.84)	test_corr_d   0.64 (  0.65)
Test: [  26/  26]	Loss 0.354 (0.319)	test_acc   0.84 (  0.84)	test_minacc   0.83 (  0.84)	test_majacc   0.84 (  0.84)	Loss_d 0.354 (0.319)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.83 (  0.84)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.66 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.55it/s]
Test: [  0/  1]	Loss 1.644 (1.644)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.80 (  0.80)	Loss_d 1.644 (1.644)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.644 (1.644)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.80 (  0.80)	Loss_d 1.644 (1.644)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.15 (  0.15)
Overall Timing[ 22/  1]	epoch_time 0.0344 (0.0364)	validation_time 0.0003 (0.0007)	train_time 0.0340 (0.0357)
record: (train_acc, test_acc) (0.8321000298261643, 0.6290000081062317)
last accs (train_acc, test_acc) (0.8355000231862069, 0.6010000109672546)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.23it/s] 19%|#9        | 5/26 [00:00<00:00, 25.36it/s] 38%|###8      | 10/26 [00:00<00:00, 33.14it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.34it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.07it/s] 92%|#########2| 24/26 [00:00<00:00, 38.54it/s]100%|##########| 26/26 [00:00<00:00, 32.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
l1 at pgd_anneal_iters 6.748077869415283
set z to 6.410673975944519
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.001 (0.002)	train_nll   0.31 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.94 ( 24.93)	train_acc   0.85 (  0.87)	train_minacc   0.74 (  0.80)	train_majacc   0.87 (  0.88)	train_corr   0.00 (  0.00)	l1 7.8722 (6.8810)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.13it/s] 31%|###       | 8/26 [00:00<00:00, 40.66it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.66it/s] 50%|#####     | 13/26 [00:00<00:00, 43.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.95it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.95it/s] 96%|#########6| 25/26 [00:00<00:00, 47.66it/s]100%|##########| 26/26 [00:00<00:00, 40.86it/s]
Test: [   0/  26]	Loss 0.304 (0.304)	test_acc   0.86 (  0.86)	test_minacc   0.77 (  0.77)	test_majacc   0.88 (  0.88)	Loss_d 0.304 (0.304)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.394 (0.354)	test_acc   0.80 (  0.82)	test_minacc   0.85 (  0.82)	test_majacc   0.79 (  0.82)	Loss_d 0.394 (0.354)	test_acc_d   0.80 (  0.82)	test_minacc_d   0.85 (  0.82)	test_majacc_d   0.79 (  0.82)	test_corr_d   0.58 (  0.63)
Test: [  20/  26]	Loss 0.331 (0.352)	test_acc   0.82 (  0.82)	test_minacc   0.91 (  0.82)	test_majacc   0.80 (  0.82)	Loss_d 0.331 (0.352)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.91 (  0.82)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.60 (  0.63)
Test: [  26/  26]	Loss 0.305 (0.341)	test_acc   0.85 (  0.82)	test_minacc   0.74 (  0.83)	test_majacc   0.87 (  0.82)	Loss_d 0.305 (0.341)	test_acc_d   0.85 (  0.82)	test_minacc_d   0.74 (  0.83)	test_majacc_d   0.87 (  0.82)	test_corr_d   0.68 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.90it/s]
Test: [  0/  1]	Loss 1.982 (1.982)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.81 (  0.81)	Loss_d 1.982 (1.982)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.982 (1.982)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.81 (  0.81)	Loss_d 1.982 (1.982)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.10 (  0.10)
Overall Timing[ 23/  1]	epoch_time 0.0354 (0.0364)	validation_time 0.0004 (0.0007)	train_time 0.0349 (0.0356)
record: (train_acc, test_acc) (0.8321000298261643, 0.6290000081062317)
last accs (train_acc, test_acc) (0.8238000231385231, 0.625)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.57it/s] 23%|##3       | 6/26 [00:00<00:00, 28.29it/s] 38%|###8      | 10/26 [00:00<00:00, 33.21it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.31it/s] 69%|######9   | 18/26 [00:00<00:00, 35.36it/s] 85%|########4 | 22/26 [00:00<00:00, 36.74it/s]100%|##########| 26/26 [00:00<00:00, 32.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.002 (0.002)	train_nll   0.25 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  24.96 ( 24.96)	train_acc   0.87 (  0.86)	train_minacc   0.86 (  0.82)	train_majacc   0.87 (  0.86)	train_corr   0.00 (  0.00)	l1 7.3949 (7.3127)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.65it/s] 27%|##6       | 7/26 [00:00<00:00, 35.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.93it/s] 50%|#####     | 13/26 [00:00<00:00, 41.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.66it/s] 96%|#########6| 25/26 [00:00<00:00, 47.95it/s]100%|##########| 26/26 [00:00<00:00, 40.37it/s]
Test: [   0/  26]	Loss 0.279 (0.279)	test_acc   0.84 (  0.84)	test_minacc   0.80 (  0.80)	test_majacc   0.85 (  0.85)	Loss_d 0.279 (0.279)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.329 (0.281)	test_acc   0.81 (  0.85)	test_minacc   0.79 (  0.85)	test_majacc   0.81 (  0.85)	Loss_d 0.329 (0.281)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.79 (  0.85)	test_majacc_d   0.81 (  0.85)	test_corr_d   0.65 (  0.67)
Test: [  20/  26]	Loss 0.320 (0.302)	test_acc   0.83 (  0.84)	test_minacc   0.83 (  0.83)	test_majacc   0.83 (  0.84)	Loss_d 0.320 (0.302)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.83 (  0.84)	test_corr_d   0.64 (  0.67)
Test: [  26/  26]	Loss 0.260 (0.301)	test_acc   0.86 (  0.84)	test_minacc   0.83 (  0.84)	test_majacc   0.87 (  0.84)	Loss_d 0.260 (0.301)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.83 (  0.84)	test_majacc_d   0.87 (  0.84)	test_corr_d   0.68 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.64it/s]
Test: [  0/  1]	Loss 1.840 (1.840)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.76 (  0.76)	Loss_d 1.840 (1.840)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 1.840 (1.840)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.76 (  0.76)	Loss_d 1.840 (1.840)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.10 (  0.10)
Overall Timing[ 24/  1]	epoch_time 0.0351 (0.0363)	validation_time 0.0004 (0.0007)	train_time 0.0347 (0.0356)
record: (train_acc, test_acc) (0.8321000298261643, 0.6290000081062317)
last accs (train_acc, test_acc) (0.8404000224471092, 0.6200000047683716)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.49it/s] 19%|#9        | 5/26 [00:00<00:00, 23.83it/s] 35%|###4      | 9/26 [00:00<00:00, 30.08it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.90it/s] 88%|########8 | 23/26 [00:00<00:00, 37.57it/s]100%|##########| 26/26 [00:00<00:00, 31.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.003 (0.002)	train_nll   0.25 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  24.98 ( 24.97)	train_acc   0.86 (  0.85)	train_minacc   0.80 (  0.82)	train_majacc   0.87 (  0.86)	train_corr   0.00 (  0.00)	l1 6.9573 (7.3474)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.82it/s] 27%|##6       | 7/26 [00:00<00:00, 34.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.93it/s] 50%|#####     | 13/26 [00:00<00:00, 40.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.45it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.45it/s] 96%|#########6| 25/26 [00:00<00:00, 47.30it/s]100%|##########| 26/26 [00:00<00:00, 39.65it/s]
Test: [   0/  26]	Loss 0.235 (0.235)	test_acc   0.88 (  0.88)	test_minacc   0.86 (  0.86)	test_majacc   0.88 (  0.88)	Loss_d 0.235 (0.235)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.289 (0.260)	test_acc   0.86 (  0.86)	test_minacc   0.94 (  0.88)	test_majacc   0.85 (  0.86)	Loss_d 0.289 (0.260)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.94 (  0.88)	test_majacc_d   0.85 (  0.86)	test_corr_d   0.67 (  0.71)
Test: [  20/  26]	Loss 0.312 (0.276)	test_acc   0.84 (  0.85)	test_minacc   0.85 (  0.85)	test_majacc   0.84 (  0.85)	Loss_d 0.312 (0.276)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.84 (  0.85)	test_corr_d   0.68 (  0.70)
Test: [  26/  26]	Loss 0.256 (0.276)	test_acc   0.84 (  0.85)	test_minacc   0.80 (  0.86)	test_majacc   0.85 (  0.85)	Loss_d 0.256 (0.276)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.80 (  0.86)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.71 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.95it/s]
Test: [  0/  1]	Loss 1.855 (1.855)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.86 (  0.86)	Loss_d 1.855 (1.855)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 1.855 (1.855)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.86 (  0.86)	Loss_d 1.855 (1.855)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.27 (  0.27)
Overall Timing[ 25/  1]	epoch_time 0.0354 (0.0363)	validation_time 0.0006 (0.0007)	train_time 0.0348 (0.0356)
record: (train_acc, test_acc) (0.8321000298261643, 0.6290000081062317)
last accs (train_acc, test_acc) (0.8512000247836113, 0.5990000367164612)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 19%|#9        | 5/26 [00:00<00:00, 22.76it/s] 35%|###4      | 9/26 [00:00<00:00, 29.70it/s] 50%|#####     | 13/26 [00:00<00:00, 33.45it/s] 65%|######5   | 17/26 [00:00<00:00, 34.92it/s] 81%|########  | 21/26 [00:00<00:00, 35.80it/s] 96%|#########6| 25/26 [00:00<00:00, 36.16it/s]100%|##########| 26/26 [00:00<00:00, 30.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.001 (0.001)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  25.00 ( 24.99)	train_acc   0.85 (  0.84)	train_minacc   0.83 (  0.84)	train_majacc   0.86 (  0.84)	train_corr   0.00 (  0.00)	l1 7.1229 (7.2638)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 27%|##6       | 7/26 [00:00<00:00, 30.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.08it/s] 46%|####6     | 12/26 [00:00<00:00, 36.36it/s] 69%|######9   | 18/26 [00:00<00:00, 44.44it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.44it/s] 92%|#########2| 24/26 [00:00<00:00, 45.82it/s]100%|##########| 26/26 [00:00<00:00, 37.86it/s]
Test: [   0/  26]	Loss 0.269 (0.269)	test_acc   0.85 (  0.85)	test_minacc   0.84 (  0.84)	test_majacc   0.85 (  0.85)	Loss_d 0.269 (0.269)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.274 (0.246)	test_acc   0.88 (  0.87)	test_minacc   0.94 (  0.91)	test_majacc   0.87 (  0.87)	Loss_d 0.274 (0.246)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.94 (  0.91)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.68 (  0.70)
Test: [  20/  26]	Loss 0.302 (0.264)	test_acc   0.84 (  0.86)	test_minacc   0.83 (  0.88)	test_majacc   0.84 (  0.86)	Loss_d 0.302 (0.264)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.83 (  0.88)	test_majacc_d   0.84 (  0.86)	test_corr_d   0.67 (  0.69)
Test: [  26/  26]	Loss 0.281 (0.268)	test_acc   0.85 (  0.86)	test_minacc   0.83 (  0.88)	test_majacc   0.85 (  0.86)	Loss_d 0.281 (0.268)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.83 (  0.88)	test_majacc_d   0.85 (  0.86)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.95it/s]
Test: [  0/  1]	Loss 1.796 (1.796)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.79 (  0.79)	Loss_d 1.796 (1.796)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 1.796 (1.796)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.79 (  0.79)	Loss_d 1.796 (1.796)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.16 (  0.16)
Overall Timing[ 26/  1]	epoch_time 0.0349 (0.0363)	validation_time 0.0003 (0.0006)	train_time 0.0346 (0.0355)
record: (train_acc, test_acc) (0.8321000298261643, 0.6290000081062317)
last accs (train_acc, test_acc) (0.8609000244140625, 0.6210000514984131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.51it/s] 19%|#9        | 5/26 [00:00<00:00, 21.94it/s] 35%|###4      | 9/26 [00:00<00:00, 29.14it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.84it/s] 69%|######9   | 18/26 [00:00<00:00, 35.78it/s] 88%|########8 | 23/26 [00:00<00:00, 37.37it/s]100%|##########| 26/26 [00:00<00:00, 31.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.001 (0.002)	train_nll   0.28 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  25.01 ( 25.01)	train_acc   0.86 (  0.84)	train_minacc   0.77 (  0.88)	train_majacc   0.87 (  0.83)	train_corr   0.00 (  0.00)	l1 7.0254 (7.4505)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.91it/s] 27%|##6       | 7/26 [00:00<00:00, 35.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.62it/s] 50%|#####     | 13/26 [00:00<00:00, 40.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.60it/s] 96%|#########6| 25/26 [00:00<00:00, 47.52it/s]100%|##########| 26/26 [00:00<00:00, 39.86it/s]
Test: [   0/  26]	Loss 0.257 (0.257)	test_acc   0.89 (  0.89)	test_minacc   0.89 (  0.89)	test_majacc   0.89 (  0.89)	Loss_d 0.257 (0.257)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.75 (  0.75)
Test: [  10/  26]	Loss 0.265 (0.256)	test_acc   0.89 (  0.88)	test_minacc   0.90 (  0.88)	test_majacc   0.89 (  0.88)	Loss_d 0.265 (0.256)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.90 (  0.88)	test_majacc_d   0.89 (  0.88)	test_corr_d   0.72 (  0.74)
Test: [  20/  26]	Loss 0.291 (0.263)	test_acc   0.85 (  0.87)	test_minacc   0.85 (  0.87)	test_majacc   0.85 (  0.87)	Loss_d 0.291 (0.263)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.85 (  0.87)	test_majacc_d   0.85 (  0.87)	test_corr_d   0.72 (  0.73)
Test: [  26/  26]	Loss 0.284 (0.268)	test_acc   0.86 (  0.87)	test_minacc   0.77 (  0.86)	test_majacc   0.88 (  0.87)	Loss_d 0.284 (0.268)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.77 (  0.86)	test_majacc_d   0.88 (  0.87)	test_corr_d   0.74 (  0.73)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.52it/s]
Test: [  0/  1]	Loss 1.745 (1.745)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.86 (  0.86)	Loss_d 1.745 (1.745)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 1.745 (1.745)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.86 (  0.86)	Loss_d 1.745 (1.745)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.32 (  0.32)
Overall Timing[ 27/  1]	epoch_time 0.0349 (0.0362)	validation_time 0.0004 (0.0006)	train_time 0.0345 (0.0355)
record: (train_acc, test_acc) (0.8321000298261643, 0.6290000081062317)
last accs (train_acc, test_acc) (0.8687000232934952, 0.5370000004768372)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.91it/s] 19%|#9        | 5/26 [00:00<00:01, 19.22it/s] 38%|###8      | 10/26 [00:00<00:00, 28.17it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.10it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.36it/s] 96%|#########6| 25/26 [00:00<00:00, 37.79it/s]100%|##########| 26/26 [00:00<00:00, 30.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.001 (0.002)	train_nll   0.34 (  0.30)	train_penalty   0.00 (  0.00)	weight_norm  25.04 ( 25.03)	train_acc   0.80 (  0.83)	train_minacc   0.86 (  0.86)	train_majacc   0.80 (  0.83)	train_corr   0.00 (  0.00)	l1 7.3954 (7.5375)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.65it/s] 23%|##3       | 6/26 [00:00<00:00, 29.31it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.31it/s] 46%|####6     | 12/26 [00:00<00:00, 38.52it/s] 69%|######9   | 18/26 [00:00<00:00, 46.03it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.03it/s] 92%|#########2| 24/26 [00:00<00:00, 46.74it/s]100%|##########| 26/26 [00:00<00:00, 39.11it/s]
Test: [   0/  26]	Loss 0.285 (0.285)	test_acc   0.85 (  0.85)	test_minacc   0.91 (  0.91)	test_majacc   0.84 (  0.84)	Loss_d 0.285 (0.285)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.300 (0.297)	test_acc   0.84 (  0.83)	test_minacc   0.92 (  0.90)	test_majacc   0.82 (  0.82)	Loss_d 0.300 (0.297)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.92 (  0.90)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.65 (  0.68)
Test: [  20/  26]	Loss 0.305 (0.291)	test_acc   0.81 (  0.84)	test_minacc   0.91 (  0.92)	test_majacc   0.79 (  0.82)	Loss_d 0.305 (0.291)	test_acc_d   0.81 (  0.84)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.79 (  0.82)	test_corr_d   0.66 (  0.68)
Test: [  26/  26]	Loss 0.338 (0.296)	test_acc   0.81 (  0.83)	test_minacc   0.89 (  0.91)	test_majacc   0.80 (  0.82)	Loss_d 0.338 (0.296)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.89 (  0.91)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.74it/s]
Test: [  0/  1]	Loss 1.679 (1.679)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.80 (  0.80)	Loss_d 1.679 (1.679)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 1.679 (1.679)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.80 (  0.80)	Loss_d 1.679 (1.679)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Overall Timing[ 28/  1]	epoch_time 0.0350 (0.0362)	validation_time 0.0003 (0.0006)	train_time 0.0347 (0.0355)
record: (train_acc, test_acc) (0.8321000298261643, 0.6290000081062317)
last accs (train_acc, test_acc) (0.8317000232338906, 0.6230000257492065)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.88it/s] 19%|#9        | 5/26 [00:00<00:00, 24.62it/s] 35%|###4      | 9/26 [00:00<00:00, 30.58it/s] 50%|#####     | 13/26 [00:00<00:00, 32.74it/s] 65%|######5   | 17/26 [00:00<00:00, 34.85it/s] 81%|########  | 21/26 [00:00<00:00, 36.49it/s]100%|##########| 26/26 [00:00<00:00, 38.17it/s]100%|##########| 26/26 [00:00<00:00, 31.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.001 (0.001)	train_nll   0.35 (  0.32)	train_penalty   0.00 (  0.00)	weight_norm  25.05 ( 25.05)	train_acc   0.79 (  0.80)	train_minacc   0.89 (  0.91)	train_majacc   0.77 (  0.78)	train_corr   0.00 (  0.00)	l1 7.6396 (7.4972)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 23%|##3       | 6/26 [00:00<00:00, 27.23it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.23it/s] 42%|####2     | 11/26 [00:00<00:00, 35.69it/s] 65%|######5   | 17/26 [00:00<00:00, 40.78it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.78it/s] 88%|########8 | 23/26 [00:00<00:00, 45.93it/s]100%|##########| 26/26 [00:00<00:00, 36.38it/s]
Test: [   0/  26]	Loss 0.304 (0.304)	test_acc   0.83 (  0.83)	test_minacc   0.91 (  0.91)	test_majacc   0.81 (  0.81)	Loss_d 0.304 (0.304)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.325 (0.331)	test_acc   0.79 (  0.80)	test_minacc   0.92 (  0.90)	test_majacc   0.76 (  0.79)	Loss_d 0.325 (0.331)	test_acc_d   0.79 (  0.80)	test_minacc_d   0.92 (  0.90)	test_majacc_d   0.76 (  0.79)	test_corr_d   0.62 (  0.65)
Test: [  20/  26]	Loss 0.305 (0.317)	test_acc   0.82 (  0.81)	test_minacc   0.89 (  0.91)	test_majacc   0.81 (  0.79)	Loss_d 0.305 (0.317)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.89 (  0.91)	test_majacc_d   0.81 (  0.79)	test_corr_d   0.65 (  0.65)
Test: [  26/  26]	Loss 0.337 (0.318)	test_acc   0.80 (  0.81)	test_minacc   0.89 (  0.90)	test_majacc   0.79 (  0.79)	Loss_d 0.337 (0.318)	test_acc_d   0.80 (  0.81)	test_minacc_d   0.89 (  0.90)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.68 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.26it/s]
Test: [  0/  1]	Loss 1.730 (1.730)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 1.730 (1.730)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 1.730 (1.730)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.76 (  0.76)	Loss_d 1.730 (1.730)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.16 (  0.16)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/137/checkpoints/model_best.pth
Overall Timing[ 29/  1]	epoch_time 0.0359 (0.0362)	validation_time 0.0004 (0.0006)	train_time 0.0355 (0.0355)
record: (train_acc, test_acc) (0.8085000302195549, 0.6380000114440918)
last accs (train_acc, test_acc) (0.8085000302195549, 0.6380000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 19%|#9        | 5/26 [00:00<00:00, 24.64it/s] 35%|###4      | 9/26 [00:00<00:00, 31.11it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.27it/s] 92%|#########2| 24/26 [00:00<00:00, 38.57it/s]100%|##########| 26/26 [00:00<00:00, 32.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.001)	train_nll   0.29 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  25.08 ( 25.06)	train_acc   0.84 (  0.83)	train_minacc   0.97 (  0.91)	train_majacc   0.82 (  0.82)	train_corr   0.00 (  0.00)	l1 8.1633 (7.5075)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.25it/s] 31%|###       | 8/26 [00:00<00:00, 39.92it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 46.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.27it/s] 96%|#########6| 25/26 [00:00<00:00, 51.18it/s]100%|##########| 26/26 [00:00<00:00, 43.41it/s]
Test: [   0/  26]	Loss 0.286 (0.286)	test_acc   0.83 (  0.83)	test_minacc   0.88 (  0.88)	test_majacc   0.82 (  0.82)	Loss_d 0.286 (0.286)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.66 (  0.66)
Test: [  10/  26]	Loss 0.350 (0.329)	test_acc   0.78 (  0.81)	test_minacc   0.90 (  0.90)	test_majacc   0.76 (  0.79)	Loss_d 0.350 (0.329)	test_acc_d   0.78 (  0.81)	test_minacc_d   0.90 (  0.90)	test_majacc_d   0.76 (  0.79)	test_corr_d   0.60 (  0.63)
Test: [  20/  26]	Loss 0.312 (0.323)	test_acc   0.81 (  0.81)	test_minacc   0.95 (  0.92)	test_majacc   0.78 (  0.79)	Loss_d 0.312 (0.323)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.95 (  0.92)	test_majacc_d   0.78 (  0.79)	test_corr_d   0.61 (  0.63)
Test: [  26/  26]	Loss 0.295 (0.319)	test_acc   0.84 (  0.81)	test_minacc   0.97 (  0.91)	test_majacc   0.82 (  0.79)	Loss_d 0.295 (0.319)	test_acc_d   0.84 (  0.81)	test_minacc_d   0.97 (  0.91)	test_majacc_d   0.82 (  0.79)	test_corr_d   0.67 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.51it/s]
Test: [  0/  1]	Loss 1.901 (1.901)	test_acc   0.65 (  0.65)	test_minacc   0.63 (  0.63)	test_majacc   0.80 (  0.80)	Loss_d 1.901 (1.901)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 1.901 (1.901)	test_acc   0.65 (  0.65)	test_minacc   0.63 (  0.63)	test_majacc   0.80 (  0.80)	Loss_d 1.901 (1.901)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.11 (  0.11)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/137/checkpoints/model_best.pth
Overall Timing[ 30/  1]	epoch_time 0.0343 (0.0361)	validation_time 0.0004 (0.0006)	train_time 0.0339 (0.0354)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.63it/s] 15%|#5        | 4/26 [00:00<00:01, 20.00it/s] 31%|###       | 8/26 [00:00<00:00, 28.60it/s] 46%|####6     | 12/26 [00:00<00:00, 32.85it/s] 62%|######1   | 16/26 [00:00<00:00, 34.30it/s] 81%|########  | 21/26 [00:00<00:00, 36.73it/s] 96%|#########6| 25/26 [00:00<00:00, 37.21it/s]100%|##########| 26/26 [00:00<00:00, 31.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.003 (0.001)	train_nll   0.24 (  0.29)	train_penalty   0.00 (  0.00)	weight_norm  25.08 ( 25.08)	train_acc   0.88 (  0.84)	train_minacc   0.94 (  0.90)	train_majacc   0.87 (  0.83)	train_corr   0.00 (  0.00)	l1 7.6089 (7.8790)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.26it/s] 35%|###4      | 9/26 [00:00<00:00, 41.96it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.96it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.51it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.51it/s] 81%|########  | 21/26 [00:00<00:00, 49.59it/s]100%|##########| 26/26 [00:00<00:00, 43.96it/s]
Test: [   0/  26]	Loss 0.270 (0.270)	test_acc   0.86 (  0.86)	test_minacc   0.89 (  0.89)	test_majacc   0.86 (  0.86)	Loss_d 0.270 (0.270)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.285 (0.254)	test_acc   0.84 (  0.86)	test_minacc   0.94 (  0.92)	test_majacc   0.83 (  0.85)	Loss_d 0.285 (0.254)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.83 (  0.85)	test_corr_d   0.69 (  0.72)
Test: [  20/  26]	Loss 0.298 (0.267)	test_acc   0.83 (  0.85)	test_minacc   0.91 (  0.92)	test_majacc   0.81 (  0.84)	Loss_d 0.298 (0.267)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.91 (  0.92)	test_majacc_d   0.81 (  0.84)	test_corr_d   0.67 (  0.71)
Test: [  26/  26]	Loss 0.244 (0.268)	test_acc   0.87 (  0.85)	test_minacc   0.94 (  0.92)	test_majacc   0.86 (  0.84)	Loss_d 0.244 (0.268)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.86 (  0.84)	test_corr_d   0.72 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.77it/s]
Test: [  0/  1]	Loss 1.947 (1.947)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.82 (  0.82)	Loss_d 1.947 (1.947)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 1.947 (1.947)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.82 (  0.82)	Loss_d 1.947 (1.947)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.23 (  0.23)
Overall Timing[ 31/  1]	epoch_time 0.0336 (0.0360)	validation_time 0.0003 (0.0006)	train_time 0.0332 (0.0353)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8501000248193741, 0.6110000014305115)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.06it/s] 15%|#5        | 4/26 [00:00<00:01, 20.58it/s] 31%|###       | 8/26 [00:00<00:00, 27.65it/s] 50%|#####     | 13/26 [00:00<00:00, 33.13it/s] 69%|######9   | 18/26 [00:00<00:00, 36.26it/s] 85%|########4 | 22/26 [00:00<00:00, 37.25it/s]100%|##########| 26/26 [00:00<00:00, 31.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.001)	train_nll   0.29 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.09 ( 25.09)	train_acc   0.82 (  0.83)	train_minacc   0.94 (  0.92)	train_majacc   0.80 (  0.82)	train_corr   0.00 (  0.00)	l1 7.8472 (8.0400)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.76it/s] 27%|##6       | 7/26 [00:00<00:00, 34.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.05it/s] 50%|#####     | 13/26 [00:00<00:00, 40.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.62it/s] 96%|#########6| 25/26 [00:00<00:00, 47.38it/s]100%|##########| 26/26 [00:00<00:00, 39.33it/s]
Test: [   0/  26]	Loss 0.279 (0.279)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.279 (0.279)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.283 (0.268)	test_acc   0.85 (  0.84)	test_minacc   0.95 (  0.92)	test_majacc   0.84 (  0.83)	Loss_d 0.283 (0.268)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.95 (  0.92)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.69 (  0.71)
Test: [  20/  26]	Loss 0.290 (0.270)	test_acc   0.83 (  0.84)	test_minacc   0.92 (  0.92)	test_majacc   0.81 (  0.83)	Loss_d 0.290 (0.270)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.81 (  0.83)	test_corr_d   0.68 (  0.71)
Test: [  26/  26]	Loss 0.284 (0.271)	test_acc   0.82 (  0.84)	test_minacc   0.94 (  0.92)	test_majacc   0.80 (  0.83)	Loss_d 0.284 (0.271)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.80 (  0.83)	test_corr_d   0.71 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.61it/s]
Test: [  0/  1]	Loss 1.995 (1.995)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 1.995 (1.995)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 1.995 (1.995)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 1.995 (1.995)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.27 (  0.27)
Overall Timing[ 32/  1]	epoch_time 0.0350 (0.0360)	validation_time 0.0004 (0.0006)	train_time 0.0346 (0.0353)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8405000258684159, 0.5740000009536743)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.75it/s] 19%|#9        | 5/26 [00:00<00:00, 21.78it/s] 35%|###4      | 9/26 [00:00<00:00, 28.84it/s] 50%|#####     | 13/26 [00:00<00:00, 32.62it/s] 65%|######5   | 17/26 [00:00<00:00, 34.72it/s] 81%|########  | 21/26 [00:00<00:00, 35.11it/s] 96%|#########6| 25/26 [00:00<00:00, 36.49it/s]100%|##########| 26/26 [00:00<00:00, 30.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.001 (0.000)	train_nll   0.30 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.80 (  0.83)	train_minacc   0.91 (  0.93)	train_majacc   0.79 (  0.81)	train_corr   0.00 (  0.00)	l1 8.2429 (7.9787)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.65it/s] 31%|###       | 8/26 [00:00<00:00, 38.98it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.98it/s] 50%|#####     | 13/26 [00:00<00:00, 41.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.82it/s] 96%|#########6| 25/26 [00:00<00:00, 48.35it/s]100%|##########| 26/26 [00:00<00:00, 40.87it/s]
Test: [   0/  26]	Loss 0.282 (0.282)	test_acc   0.83 (  0.83)	test_minacc   0.89 (  0.89)	test_majacc   0.81 (  0.81)	Loss_d 0.282 (0.282)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.312 (0.292)	test_acc   0.82 (  0.82)	test_minacc   0.95 (  0.92)	test_majacc   0.80 (  0.80)	Loss_d 0.312 (0.292)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.95 (  0.92)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.64 (  0.67)
Test: [  20/  26]	Loss 0.300 (0.289)	test_acc   0.81 (  0.82)	test_minacc   0.92 (  0.93)	test_majacc   0.79 (  0.81)	Loss_d 0.300 (0.289)	test_acc_d   0.81 (  0.82)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.79 (  0.81)	test_corr_d   0.64 (  0.67)
Test: [  26/  26]	Loss 0.298 (0.289)	test_acc   0.80 (  0.82)	test_minacc   0.91 (  0.93)	test_majacc   0.79 (  0.80)	Loss_d 0.298 (0.289)	test_acc_d   0.80 (  0.82)	test_minacc_d   0.91 (  0.93)	test_majacc_d   0.79 (  0.80)	test_corr_d   0.68 (  0.67)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.23it/s]
Test: [  0/  1]	Loss 2.029 (2.029)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.80 (  0.80)	Loss_d 2.029 (2.029)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 2.029 (2.029)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.80 (  0.80)	Loss_d 2.029 (2.029)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.19 (  0.19)
Overall Timing[ 33/  1]	epoch_time 0.0350 (0.0360)	validation_time 0.0003 (0.0006)	train_time 0.0347 (0.0353)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.823400025844574, 0.6360000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.19it/s] 23%|##3       | 6/26 [00:00<00:00, 28.18it/s] 42%|####2     | 11/26 [00:00<00:00, 33.80it/s] 62%|######1   | 16/26 [00:00<00:00, 36.71it/s] 81%|########  | 21/26 [00:00<00:00, 38.08it/s] 96%|#########6| 25/26 [00:00<00:00, 38.43it/s]100%|##########| 26/26 [00:00<00:00, 33.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.83 (  0.83)	train_minacc   0.94 (  0.92)	train_majacc   0.81 (  0.81)	train_corr   0.00 (  0.00)	l1 8.0778 (8.0422)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.82it/s] 23%|##3       | 6/26 [00:00<00:00, 29.72it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.72it/s] 46%|####6     | 12/26 [00:00<00:00, 40.36it/s] 69%|######9   | 18/26 [00:00<00:00, 45.27it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.27it/s] 92%|#########2| 24/26 [00:00<00:00, 47.57it/s]100%|##########| 26/26 [00:00<00:00, 39.58it/s]
Test: [   0/  26]	Loss 0.264 (0.264)	test_acc   0.83 (  0.83)	test_minacc   0.89 (  0.89)	test_majacc   0.82 (  0.82)	Loss_d 0.264 (0.264)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.303 (0.277)	test_acc   0.82 (  0.83)	test_minacc   0.94 (  0.92)	test_majacc   0.79 (  0.82)	Loss_d 0.303 (0.277)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.79 (  0.82)	test_corr_d   0.66 (  0.69)
Test: [  20/  26]	Loss 0.296 (0.280)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.92)	test_majacc   0.80 (  0.81)	Loss_d 0.296 (0.280)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.66 (  0.69)
Test: [  26/  26]	Loss 0.268 (0.279)	test_acc   0.83 (  0.83)	test_minacc   0.94 (  0.92)	test_majacc   0.81 (  0.81)	Loss_d 0.268 (0.279)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.71 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.95it/s]
Test: [  0/  1]	Loss 2.030 (2.030)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.030 (2.030)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.030 (2.030)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.030 (2.030)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Overall Timing[ 34/  1]	epoch_time 0.0353 (0.0359)	validation_time 0.0003 (0.0006)	train_time 0.0349 (0.0353)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8289000209569931, 0.6300000548362732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.25it/s] 19%|#9        | 5/26 [00:00<00:01, 19.60it/s] 35%|###4      | 9/26 [00:00<00:00, 27.10it/s] 50%|#####     | 13/26 [00:00<00:00, 31.48it/s] 69%|######9   | 18/26 [00:00<00:00, 34.99it/s] 85%|########4 | 22/26 [00:00<00:00, 36.25it/s]100%|##########| 26/26 [00:00<00:00, 37.15it/s]100%|##########| 26/26 [00:00<00:00, 29.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.82 (  0.83)	train_minacc   0.94 (  0.92)	train_majacc   0.80 (  0.81)	train_corr   0.00 (  0.00)	l1 8.0283 (8.1548)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.17it/s] 27%|##6       | 7/26 [00:00<00:00, 31.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.29it/s] 50%|#####     | 13/26 [00:00<00:00, 38.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.59it/s] 96%|#########6| 25/26 [00:00<00:00, 46.07it/s]100%|##########| 26/26 [00:00<00:00, 37.71it/s]
Test: [   0/  26]	Loss 0.272 (0.272)	test_acc   0.83 (  0.83)	test_minacc   0.89 (  0.89)	test_majacc   0.82 (  0.82)	Loss_d 0.272 (0.272)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.292 (0.272)	test_acc   0.83 (  0.83)	test_minacc   0.92 (  0.92)	test_majacc   0.81 (  0.82)	Loss_d 0.292 (0.272)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.68 (  0.70)
Test: [  20/  26]	Loss 0.292 (0.274)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.92)	test_majacc   0.80 (  0.82)	Loss_d 0.292 (0.274)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.66 (  0.70)
Test: [  26/  26]	Loss 0.273 (0.275)	test_acc   0.82 (  0.83)	test_minacc   0.94 (  0.92)	test_majacc   0.80 (  0.82)	Loss_d 0.273 (0.275)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.70 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.06it/s]
Test: [  0/  1]	Loss 2.028 (2.028)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.79 (  0.79)	Loss_d 2.028 (2.028)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 2.028 (2.028)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.79 (  0.79)	Loss_d 2.028 (2.028)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.21 (  0.21)
Overall Timing[ 35/  1]	epoch_time 0.0373 (0.0360)	validation_time 0.0011 (0.0006)	train_time 0.0362 (0.0353)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8334000228047371, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.39it/s] 19%|#9        | 5/26 [00:00<00:00, 22.07it/s] 35%|###4      | 9/26 [00:00<00:00, 28.91it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.04it/s] 69%|######9   | 18/26 [00:00<00:00, 35.84it/s] 88%|########8 | 23/26 [00:00<00:00, 37.61it/s]100%|##########| 26/26 [00:00<00:00, 30.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.82 (  0.83)	train_minacc   0.94 (  0.93)	train_majacc   0.80 (  0.81)	train_corr   0.00 (  0.00)	l1 8.1790 (8.1173)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.86it/s] 27%|##6       | 7/26 [00:00<00:00, 33.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.40it/s] 50%|#####     | 13/26 [00:00<00:00, 39.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.98it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.98it/s] 96%|#########6| 25/26 [00:00<00:00, 46.55it/s]100%|##########| 26/26 [00:00<00:00, 38.50it/s]
Test: [   0/  26]	Loss 0.275 (0.275)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.275 (0.275)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.300 (0.281)	test_acc   0.83 (  0.83)	test_minacc   0.95 (  0.92)	test_majacc   0.80 (  0.81)	Loss_d 0.300 (0.281)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.95 (  0.92)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.66 (  0.68)
Test: [  20/  26]	Loss 0.295 (0.280)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.80 (  0.81)	Loss_d 0.295 (0.280)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.65 (  0.68)
Test: [  26/  26]	Loss 0.282 (0.281)	test_acc   0.82 (  0.83)	test_minacc   0.94 (  0.93)	test_majacc   0.80 (  0.81)	Loss_d 0.282 (0.281)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.69 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.64it/s]
Test: [  0/  1]	Loss 2.047 (2.047)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.047 (2.047)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.047 (2.047)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.047 (2.047)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Overall Timing[ 36/  1]	epoch_time 0.0347 (0.0359)	validation_time 0.0004 (0.0006)	train_time 0.0343 (0.0353)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8293000218868256, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.21it/s] 19%|#9        | 5/26 [00:00<00:00, 24.29it/s] 35%|###4      | 9/26 [00:00<00:00, 30.18it/s] 50%|#####     | 13/26 [00:00<00:00, 33.19it/s] 65%|######5   | 17/26 [00:00<00:00, 34.62it/s] 81%|########  | 21/26 [00:00<00:00, 36.18it/s] 96%|#########6| 25/26 [00:00<00:00, 37.06it/s]100%|##########| 26/26 [00:00<00:00, 31.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.83 (  0.83)	train_minacc   0.94 (  0.93)	train_majacc   0.81 (  0.81)	train_corr   0.00 (  0.00)	l1 8.1448 (8.1024)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.91it/s] 27%|##6       | 7/26 [00:00<00:00, 35.84it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.84it/s] 50%|#####     | 13/26 [00:00<00:00, 40.40it/s] 69%|######9   | 18/26 [00:00<00:00, 43.75it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.75it/s] 92%|#########2| 24/26 [00:00<00:00, 47.19it/s]100%|##########| 26/26 [00:00<00:00, 38.44it/s]
Test: [   0/  26]	Loss 0.268 (0.268)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.268 (0.268)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.301 (0.278)	test_acc   0.83 (  0.83)	test_minacc   0.95 (  0.92)	test_majacc   0.80 (  0.81)	Loss_d 0.301 (0.278)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.95 (  0.92)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.66 (  0.69)
Test: [  20/  26]	Loss 0.297 (0.280)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.80 (  0.81)	Loss_d 0.297 (0.280)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.65 (  0.68)
Test: [  26/  26]	Loss 0.275 (0.280)	test_acc   0.83 (  0.83)	test_minacc   0.94 (  0.93)	test_majacc   0.81 (  0.81)	Loss_d 0.275 (0.280)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.68)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.14it/s]
Test: [  0/  1]	Loss 2.044 (2.044)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.044 (2.044)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.044 (2.044)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.044 (2.044)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Overall Timing[ 37/  1]	epoch_time 0.0363 (0.0359)	validation_time 0.0003 (0.0006)	train_time 0.0359 (0.0353)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8293000255823135, 0.6300000548362732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.88it/s] 19%|#9        | 5/26 [00:00<00:00, 26.07it/s] 35%|###4      | 9/26 [00:00<00:00, 32.01it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.87it/s] 92%|#########2| 24/26 [00:00<00:00, 38.56it/s]100%|##########| 26/26 [00:00<00:00, 32.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.83 (  0.83)	train_minacc   0.94 (  0.93)	train_majacc   0.81 (  0.81)	train_corr   0.00 (  0.00)	l1 8.0799 (8.1447)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.86it/s] 27%|##6       | 7/26 [00:00<00:00, 36.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.66it/s] 50%|#####     | 13/26 [00:00<00:00, 43.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.14it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.14it/s] 96%|#########6| 25/26 [00:00<00:00, 47.12it/s]100%|##########| 26/26 [00:00<00:00, 40.56it/s]
Test: [   0/  26]	Loss 0.268 (0.268)	test_acc   0.83 (  0.83)	test_minacc   0.89 (  0.89)	test_majacc   0.82 (  0.82)	Loss_d 0.268 (0.268)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.294 (0.274)	test_acc   0.83 (  0.83)	test_minacc   0.95 (  0.92)	test_majacc   0.81 (  0.82)	Loss_d 0.294 (0.274)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.95 (  0.92)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.67 (  0.69)
Test: [  20/  26]	Loss 0.294 (0.276)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.80 (  0.82)	Loss_d 0.294 (0.276)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.66 (  0.69)
Test: [  26/  26]	Loss 0.272 (0.276)	test_acc   0.83 (  0.83)	test_minacc   0.94 (  0.93)	test_majacc   0.81 (  0.82)	Loss_d 0.272 (0.276)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.81it/s]
Test: [  0/  1]	Loss 2.043 (2.043)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.043 (2.043)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 2.043 (2.043)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.043 (2.043)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.21 (  0.21)
Overall Timing[ 38/  1]	epoch_time 0.0349 (0.0359)	validation_time 0.0004 (0.0006)	train_time 0.0345 (0.0353)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.832800028860569, 0.6260000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 19%|#9        | 5/26 [00:00<00:00, 24.84it/s] 35%|###4      | 9/26 [00:00<00:00, 31.11it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.97it/s] 92%|#########2| 24/26 [00:00<00:00, 39.42it/s]100%|##########| 26/26 [00:00<00:00, 32.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.82 (  0.83)	train_minacc   0.94 (  0.93)	train_majacc   0.80 (  0.81)	train_corr   0.00 (  0.00)	l1 8.1494 (8.1322)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.70it/s] 27%|##6       | 7/26 [00:00<00:00, 29.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.56it/s] 50%|#####     | 13/26 [00:00<00:00, 36.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.60it/s] 96%|#########6| 25/26 [00:00<00:00, 45.40it/s]100%|##########| 26/26 [00:00<00:00, 36.44it/s]
Test: [   0/  26]	Loss 0.272 (0.272)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.272 (0.272)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.297 (0.277)	test_acc   0.83 (  0.83)	test_minacc   0.94 (  0.92)	test_majacc   0.81 (  0.82)	Loss_d 0.297 (0.277)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.66 (  0.69)
Test: [  20/  26]	Loss 0.295 (0.278)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.80 (  0.82)	Loss_d 0.295 (0.278)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.65 (  0.69)
Test: [  26/  26]	Loss 0.278 (0.279)	test_acc   0.82 (  0.83)	test_minacc   0.94 (  0.92)	test_majacc   0.80 (  0.81)	Loss_d 0.278 (0.279)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.61it/s]
Test: [  0/  1]	Loss 2.047 (2.047)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.047 (2.047)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.047 (2.047)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.047 (2.047)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Overall Timing[ 39/  1]	epoch_time 0.0349 (0.0359)	validation_time 0.0003 (0.0006)	train_time 0.0346 (0.0353)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8307000287771225, 0.6330000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 19%|#9        | 5/26 [00:00<00:00, 23.27it/s] 35%|###4      | 9/26 [00:00<00:00, 29.74it/s] 50%|#####     | 13/26 [00:00<00:00, 32.98it/s] 69%|######9   | 18/26 [00:00<00:00, 36.27it/s] 88%|########8 | 23/26 [00:00<00:00, 37.94it/s]100%|##########| 26/26 [00:00<00:00, 31.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.82 (  0.83)	train_minacc   0.94 (  0.92)	train_majacc   0.80 (  0.81)	train_corr   0.00 (  0.00)	l1 8.1526 (8.1261)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.93it/s] 27%|##6       | 7/26 [00:00<00:00, 32.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.83it/s] 50%|#####     | 13/26 [00:00<00:00, 42.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.06it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.06it/s] 96%|#########6| 25/26 [00:00<00:00, 48.24it/s]100%|##########| 26/26 [00:00<00:00, 40.62it/s]
Test: [   0/  26]	Loss 0.269 (0.269)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.269 (0.269)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.299 (0.277)	test_acc   0.83 (  0.83)	test_minacc   0.95 (  0.92)	test_majacc   0.80 (  0.81)	Loss_d 0.299 (0.277)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.95 (  0.92)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.66 (  0.69)
Test: [  20/  26]	Loss 0.296 (0.279)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.80 (  0.81)	Loss_d 0.296 (0.279)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.65 (  0.69)
Test: [  26/  26]	Loss 0.275 (0.279)	test_acc   0.82 (  0.83)	test_minacc   0.94 (  0.93)	test_majacc   0.80 (  0.81)	Loss_d 0.275 (0.279)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.16it/s]
Test: [  0/  1]	Loss 2.050 (2.050)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.050 (2.050)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.050 (2.050)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.050 (2.050)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Overall Timing[ 40/  1]	epoch_time 0.0339 (0.0358)	validation_time 0.0004 (0.0006)	train_time 0.0335 (0.0352)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8298000276684762, 0.6300000548362732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.60it/s] 19%|#9        | 5/26 [00:00<00:00, 21.82it/s] 35%|###4      | 9/26 [00:00<00:00, 28.54it/s] 50%|#####     | 13/26 [00:00<00:00, 32.60it/s] 69%|######9   | 18/26 [00:00<00:00, 36.03it/s] 88%|########8 | 23/26 [00:00<00:00, 37.58it/s]100%|##########| 26/26 [00:00<00:00, 31.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.83 (  0.83)	train_minacc   0.94 (  0.93)	train_majacc   0.81 (  0.81)	train_corr   0.00 (  0.00)	l1 8.1222 (8.1379)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.35it/s] 27%|##6       | 7/26 [00:00<00:00, 32.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.46it/s] 46%|####6     | 12/26 [00:00<00:00, 37.19it/s] 69%|######9   | 18/26 [00:00<00:00, 44.48it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.48it/s] 92%|#########2| 24/26 [00:00<00:00, 46.70it/s]100%|##########| 26/26 [00:00<00:00, 38.21it/s]
Test: [   0/  26]	Loss 0.268 (0.268)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.268 (0.268)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.295 (0.275)	test_acc   0.83 (  0.83)	test_minacc   0.95 (  0.92)	test_majacc   0.81 (  0.82)	Loss_d 0.295 (0.275)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.95 (  0.92)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.67 (  0.69)
Test: [  20/  26]	Loss 0.294 (0.277)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.80 (  0.82)	Loss_d 0.294 (0.277)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.66 (  0.69)
Test: [  26/  26]	Loss 0.273 (0.277)	test_acc   0.83 (  0.83)	test_minacc   0.94 (  0.93)	test_majacc   0.81 (  0.81)	Loss_d 0.273 (0.277)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.65it/s]
Test: [  0/  1]	Loss 2.052 (2.052)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.052 (2.052)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 2.052 (2.052)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.052 (2.052)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.21 (  0.21)
Overall Timing[ 41/  1]	epoch_time 0.0362 (0.0359)	validation_time 0.0004 (0.0006)	train_time 0.0358 (0.0352)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8314000242948532, 0.628000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.01it/s] 19%|#9        | 5/26 [00:00<00:00, 21.67it/s] 35%|###4      | 9/26 [00:00<00:00, 28.55it/s] 50%|#####     | 13/26 [00:00<00:00, 32.26it/s] 65%|######5   | 17/26 [00:00<00:00, 34.30it/s] 85%|########4 | 22/26 [00:00<00:00, 36.71it/s]100%|##########| 26/26 [00:00<00:00, 30.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.82 (  0.83)	train_minacc   0.94 (  0.93)	train_majacc   0.80 (  0.81)	train_corr   0.00 (  0.00)	l1 8.1329 (8.1447)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.71it/s] 31%|###       | 8/26 [00:00<00:00, 37.28it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.28it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.69it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.42it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.42it/s]100%|##########| 26/26 [00:00<00:00, 51.18it/s]100%|##########| 26/26 [00:00<00:00, 41.20it/s]
Test: [   0/  26]	Loss 0.269 (0.269)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.269 (0.269)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.295 (0.275)	test_acc   0.83 (  0.83)	test_minacc   0.94 (  0.92)	test_majacc   0.81 (  0.82)	Loss_d 0.295 (0.275)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.67 (  0.69)
Test: [  20/  26]	Loss 0.294 (0.277)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.80 (  0.82)	Loss_d 0.294 (0.277)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.66 (  0.69)
Test: [  26/  26]	Loss 0.275 (0.277)	test_acc   0.82 (  0.83)	test_minacc   0.94 (  0.92)	test_majacc   0.80 (  0.82)	Loss_d 0.275 (0.277)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.95it/s]
Test: [  0/  1]	Loss 2.052 (2.052)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.052 (2.052)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.052 (2.052)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.052 (2.052)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Overall Timing[ 42/  1]	epoch_time 0.0354 (0.0358)	validation_time 0.0003 (0.0006)	train_time 0.0350 (0.0352)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8317000263929367, 0.6300000548362732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.76it/s] 23%|##3       | 6/26 [00:00<00:00, 27.55it/s] 42%|####2     | 11/26 [00:00<00:00, 33.64it/s] 62%|######1   | 16/26 [00:00<00:00, 36.64it/s] 81%|########  | 21/26 [00:00<00:00, 37.93it/s] 96%|#########6| 25/26 [00:00<00:00, 38.54it/s]100%|##########| 26/26 [00:00<00:00, 33.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.28 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.82 (  0.83)	train_minacc   0.94 (  0.93)	train_majacc   0.80 (  0.81)	train_corr   0.00 (  0.00)	l1 8.1574 (8.1385)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.78it/s] 31%|###       | 8/26 [00:00<00:00, 42.07it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.07it/s] 50%|#####     | 13/26 [00:00<00:00, 43.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.25it/s] 96%|#########6| 25/26 [00:00<00:00, 49.37it/s]100%|##########| 26/26 [00:00<00:00, 42.24it/s]
Test: [   0/  26]	Loss 0.269 (0.269)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.269 (0.269)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.297 (0.276)	test_acc   0.83 (  0.83)	test_minacc   0.95 (  0.92)	test_majacc   0.81 (  0.82)	Loss_d 0.297 (0.276)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.95 (  0.92)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.66 (  0.69)
Test: [  20/  26]	Loss 0.294 (0.277)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.80 (  0.82)	Loss_d 0.294 (0.277)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.65 (  0.69)
Test: [  26/  26]	Loss 0.275 (0.278)	test_acc   0.82 (  0.83)	test_minacc   0.94 (  0.93)	test_majacc   0.80 (  0.81)	Loss_d 0.275 (0.278)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.26it/s]
Test: [  0/  1]	Loss 2.058 (2.058)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.058 (2.058)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.058 (2.058)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.058 (2.058)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Overall Timing[ 43/  1]	epoch_time 0.0349 (0.0358)	validation_time 0.0004 (0.0005)	train_time 0.0345 (0.0352)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8310000275969506, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.51it/s] 19%|#9        | 5/26 [00:00<00:00, 26.66it/s] 35%|###4      | 9/26 [00:00<00:00, 32.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.61it/s] 88%|########8 | 23/26 [00:00<00:00, 37.98it/s]100%|##########| 26/26 [00:00<00:00, 32.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.83 (  0.83)	train_minacc   0.94 (  0.92)	train_majacc   0.81 (  0.81)	train_corr   0.00 (  0.00)	l1 8.1441 (8.1398)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.47it/s] 31%|###       | 8/26 [00:00<00:00, 41.97it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.97it/s] 50%|#####     | 13/26 [00:00<00:00, 43.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.13it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.13it/s] 96%|#########6| 25/26 [00:00<00:00, 48.71it/s]100%|##########| 26/26 [00:00<00:00, 41.99it/s]
Test: [   0/  26]	Loss 0.267 (0.267)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.267 (0.267)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.296 (0.275)	test_acc   0.83 (  0.83)	test_minacc   0.95 (  0.92)	test_majacc   0.81 (  0.82)	Loss_d 0.296 (0.275)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.95 (  0.92)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.66 (  0.69)
Test: [  20/  26]	Loss 0.294 (0.277)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.80 (  0.82)	Loss_d 0.294 (0.277)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.66 (  0.69)
Test: [  26/  26]	Loss 0.273 (0.277)	test_acc   0.83 (  0.83)	test_minacc   0.94 (  0.93)	test_majacc   0.81 (  0.82)	Loss_d 0.273 (0.277)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.72it/s]
Test: [  0/  1]	Loss 2.057 (2.057)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.057 (2.057)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.057 (2.057)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.057 (2.057)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Overall Timing[ 44/  1]	epoch_time 0.0336 (0.0358)	validation_time 0.0004 (0.0005)	train_time 0.0332 (0.0352)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8315000231266022, 0.6300000548362732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.91it/s] 19%|#9        | 5/26 [00:00<00:00, 25.69it/s] 35%|###4      | 9/26 [00:00<00:00, 31.07it/s] 50%|#####     | 13/26 [00:00<00:00, 34.19it/s] 65%|######5   | 17/26 [00:00<00:00, 36.10it/s] 81%|########  | 21/26 [00:00<00:00, 37.36it/s]100%|##########| 26/26 [00:00<00:00, 38.59it/s]100%|##########| 26/26 [00:00<00:00, 32.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.83 (  0.83)	train_minacc   0.94 (  0.92)	train_majacc   0.81 (  0.82)	train_corr   0.00 (  0.00)	l1 8.1330 (8.1499)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.39it/s] 31%|###       | 8/26 [00:00<00:00, 39.28it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.28it/s] 50%|#####     | 13/26 [00:00<00:00, 41.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.40it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.40it/s] 96%|#########6| 25/26 [00:00<00:00, 48.44it/s]100%|##########| 26/26 [00:00<00:00, 41.15it/s]
Test: [   0/  26]	Loss 0.267 (0.267)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.267 (0.267)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.294 (0.274)	test_acc   0.83 (  0.83)	test_minacc   0.95 (  0.92)	test_majacc   0.81 (  0.82)	Loss_d 0.294 (0.274)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.95 (  0.92)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.67 (  0.69)
Test: [  20/  26]	Loss 0.293 (0.275)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.80 (  0.82)	Loss_d 0.293 (0.275)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.66 (  0.69)
Test: [  26/  26]	Loss 0.273 (0.276)	test_acc   0.82 (  0.83)	test_minacc   0.94 (  0.93)	test_majacc   0.80 (  0.82)	Loss_d 0.273 (0.276)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.89it/s]
Test: [  0/  1]	Loss 2.059 (2.059)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.059 (2.059)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 2.059 (2.059)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.059 (2.059)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.21 (  0.21)
Overall Timing[ 45/  1]	epoch_time 0.0336 (0.0357)	validation_time 0.0004 (0.0005)	train_time 0.0332 (0.0351)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8328000228404999, 0.628000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 19%|#9        | 5/26 [00:00<00:00, 21.65it/s] 38%|###8      | 10/26 [00:00<00:00, 30.30it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.38it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.03it/s] 92%|#########2| 24/26 [00:00<00:00, 37.73it/s]100%|##########| 26/26 [00:00<00:00, 31.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.82 (  0.83)	train_minacc   0.94 (  0.93)	train_majacc   0.80 (  0.82)	train_corr   0.00 (  0.00)	l1 8.1560 (8.1477)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 27%|##6       | 7/26 [00:00<00:00, 37.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.81it/s] 46%|####6     | 12/26 [00:00<00:00, 41.64it/s] 69%|######9   | 18/26 [00:00<00:00, 46.67it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.67it/s] 92%|#########2| 24/26 [00:00<00:00, 48.20it/s]100%|##########| 26/26 [00:00<00:00, 40.70it/s]
Test: [   0/  26]	Loss 0.268 (0.268)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.268 (0.268)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.295 (0.275)	test_acc   0.83 (  0.83)	test_minacc   0.94 (  0.92)	test_majacc   0.81 (  0.82)	Loss_d 0.295 (0.275)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.67 (  0.69)
Test: [  20/  26]	Loss 0.293 (0.276)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.80 (  0.82)	Loss_d 0.293 (0.276)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.66 (  0.69)
Test: [  26/  26]	Loss 0.274 (0.276)	test_acc   0.82 (  0.83)	test_minacc   0.94 (  0.92)	test_majacc   0.80 (  0.82)	Loss_d 0.274 (0.276)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.66it/s]
Test: [  0/  1]	Loss 2.063 (2.063)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.063 (2.063)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.063 (2.063)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.063 (2.063)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Overall Timing[ 46/  1]	epoch_time 0.0347 (0.0357)	validation_time 0.0004 (0.0005)	train_time 0.0343 (0.0351)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8323000263571739, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.73it/s] 19%|#9        | 5/26 [00:00<00:00, 25.68it/s] 35%|###4      | 9/26 [00:00<00:00, 31.54it/s] 50%|#####     | 13/26 [00:00<00:00, 34.36it/s] 65%|######5   | 17/26 [00:00<00:00, 36.29it/s] 81%|########  | 21/26 [00:00<00:00, 37.50it/s] 96%|#########6| 25/26 [00:00<00:00, 38.02it/s]100%|##########| 26/26 [00:00<00:00, 32.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.83 (  0.83)	train_minacc   0.94 (  0.92)	train_majacc   0.81 (  0.82)	train_corr   0.00 (  0.00)	l1 8.1573 (8.1468)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.03it/s] 35%|###4      | 9/26 [00:00<00:00, 39.42it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.05it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.05it/s] 81%|########  | 21/26 [00:00<00:00, 45.93it/s]100%|##########| 26/26 [00:00<00:00, 41.57it/s]
Test: [   0/  26]	Loss 0.267 (0.267)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.267 (0.267)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.295 (0.275)	test_acc   0.83 (  0.83)	test_minacc   0.95 (  0.92)	test_majacc   0.81 (  0.82)	Loss_d 0.295 (0.275)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.95 (  0.92)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.66 (  0.69)
Test: [  20/  26]	Loss 0.293 (0.276)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.93)	test_majacc   0.80 (  0.82)	Loss_d 0.293 (0.276)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.93)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.66 (  0.69)
Test: [  26/  26]	Loss 0.273 (0.276)	test_acc   0.83 (  0.83)	test_minacc   0.94 (  0.93)	test_majacc   0.81 (  0.82)	Loss_d 0.273 (0.276)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.94 (  0.93)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.93it/s]
Test: [  0/  1]	Loss 2.063 (2.063)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.063 (2.063)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 2.063 (2.063)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.063 (2.063)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.20 (  0.20)
Overall Timing[ 47/  1]	epoch_time 0.0351 (0.0357)	validation_time 0.0004 (0.0005)	train_time 0.0347 (0.0351)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8320000265836716, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s] 19%|#9        | 5/26 [00:00<00:01, 20.85it/s] 35%|###4      | 9/26 [00:00<00:00, 28.11it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.43it/s] 69%|######9   | 18/26 [00:00<00:00, 35.37it/s] 85%|########4 | 22/26 [00:00<00:00, 36.27it/s]100%|##########| 26/26 [00:00<00:00, 30.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.83 (  0.83)	train_minacc   0.94 (  0.93)	train_majacc   0.81 (  0.82)	train_corr   0.00 (  0.00)	l1 8.1455 (8.1523)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 27%|##6       | 7/26 [00:00<00:00, 36.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.88it/s] 50%|#####     | 13/26 [00:00<00:00, 42.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.78it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.78it/s] 96%|#########6| 25/26 [00:00<00:00, 47.40it/s]100%|##########| 26/26 [00:00<00:00, 40.35it/s]
Test: [   0/  26]	Loss 0.266 (0.266)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.266 (0.266)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.293 (0.273)	test_acc   0.83 (  0.83)	test_minacc   0.94 (  0.92)	test_majacc   0.81 (  0.82)	Loss_d 0.293 (0.273)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.67 (  0.69)
Test: [  20/  26]	Loss 0.293 (0.275)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.92)	test_majacc   0.80 (  0.82)	Loss_d 0.293 (0.275)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.66 (  0.69)
Test: [  26/  26]	Loss 0.272 (0.275)	test_acc   0.83 (  0.83)	test_minacc   0.94 (  0.92)	test_majacc   0.81 (  0.82)	Loss_d 0.272 (0.275)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.66it/s]
Test: [  0/  1]	Loss 2.066 (2.066)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.066 (2.066)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 2.066 (2.066)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.066 (2.066)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.21 (  0.21)
Overall Timing[ 48/  1]	epoch_time 0.0348 (0.0357)	validation_time 0.0004 (0.0005)	train_time 0.0344 (0.0351)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8331000230312348, 0.628000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.23it/s] 19%|#9        | 5/26 [00:00<00:00, 25.01it/s] 35%|###4      | 9/26 [00:00<00:00, 30.16it/s] 50%|#####     | 13/26 [00:00<00:00, 33.48it/s] 69%|######9   | 18/26 [00:00<00:00, 36.05it/s] 88%|########8 | 23/26 [00:00<00:00, 37.43it/s]100%|##########| 26/26 [00:00<00:00, 31.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.27 (  0.28)	train_penalty   0.00 (  0.00)	weight_norm  25.10 ( 25.10)	train_acc   0.82 (  0.83)	train_minacc   0.94 (  0.92)	train_majacc   0.80 (  0.82)	train_corr   0.00 (  0.00)	l1 8.1509 (8.1556)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.85it/s] 27%|##6       | 7/26 [00:00<00:00, 36.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.67it/s] 50%|#####     | 13/26 [00:00<00:00, 41.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.30it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.30it/s] 96%|#########6| 25/26 [00:00<00:00, 48.42it/s]100%|##########| 26/26 [00:00<00:00, 41.28it/s]
Test: [   0/  26]	Loss 0.267 (0.267)	test_acc   0.84 (  0.84)	test_minacc   0.89 (  0.89)	test_majacc   0.83 (  0.83)	Loss_d 0.267 (0.267)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.293 (0.273)	test_acc   0.84 (  0.83)	test_minacc   0.94 (  0.92)	test_majacc   0.82 (  0.82)	Loss_d 0.293 (0.273)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.67 (  0.69)
Test: [  20/  26]	Loss 0.292 (0.275)	test_acc   0.82 (  0.83)	test_minacc   0.92 (  0.92)	test_majacc   0.80 (  0.82)	Loss_d 0.292 (0.275)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.92 (  0.92)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.66 (  0.69)
Test: [  26/  26]	Loss 0.273 (0.275)	test_acc   0.82 (  0.83)	test_minacc   0.94 (  0.92)	test_majacc   0.80 (  0.82)	Loss_d 0.273 (0.275)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.94 (  0.92)	test_majacc_d   0.80 (  0.82)	test_corr_d   0.70 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.94it/s]
Test: [  0/  1]	Loss 2.067 (2.067)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.067 (2.067)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 2.067 (2.067)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.80 (  0.80)	Loss_d 2.067 (2.067)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.21 (  0.21)
Overall Timing[ 49/  1]	epoch_time 0.0345 (0.0357)	validation_time 0.0003 (0.0005)	train_time 0.0341 (0.0351)
record: (train_acc, test_acc) (0.8080000250339509, 0.6460000276565552)
last accs (train_acc, test_acc) (0.8334000251293182, 0.628000020980835)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.103 MB of 0.103 MB uploadedwandb: \ 0.103 MB of 0.103 MB uploadedwandb: | 0.126 MB of 0.131 MB uploaded (0.003 MB deduped)wandb: / 0.470 MB of 0.470 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                            global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▂▁▁▂▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/diagnostics/train_time_val █▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▂▁▂▁▁▂▁▁▁▁▁▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/Loss_avg ▆▆▄▅▅▃▂▄▅▇▆█▂▁▂▂▃▃▄▇▆▆▅▅▆▇▇▇▇███████████
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/Loss_d_avg ▆▆▄▅▅▃▂▄▅▇▆█▂▁▂▂▃▃▄▇▆▆▅▅▆▇▇▇▇███████████
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/Loss_d_val ▆▆▄▅▅▃▂▄▅▇▆█▂▁▂▂▃▃▄▇▆▆▅▅▆▇▇▇▇███████████
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/Loss_val ▆▆▄▅▅▃▂▄▅▇▆█▂▁▂▂▃▃▄▇▆▆▅▅▆▇▇▇▇███████████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_acc_avg ▁▁▃▂▅▆▇▇▆▄▆▆▇▇▇█▇█▇█▇█▇███▇█████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_acc_d_avg ▁▁▃▂▅▆▇▇▆▄▆▆▇▇▇█▇█▇█▇█▇███▇█████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_acc_d_val ▁▁▃▂▅▆▇▇▆▄▆▆▇▇▇█▇█▇█▇█▇███▇█████████████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_acc_val ▁▁▃▂▅▆▇▇▆▄▆▆▇▇▇█▇█▇█▇█▇███▇█████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_corr_d_avg ██▇▇▅▃▂▂▄▅▃▂▁▂▁▁▂▂▂▁▃▂▃▂▁▂▃▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_corr_d_val ██▇▇▅▃▂▂▄▅▃▂▁▂▁▁▂▂▂▁▃▂▃▂▁▂▃▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_majacc_avg ██▇█▆▆▅▆▆▇▅▅▁▂▂▁▂▁▂▂▄▂▄▂▂▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_majacc_d_avg ██▇█▆▆▅▆▆▇▅▅▁▂▂▁▂▁▂▂▄▂▄▂▂▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_majacc_d_val ██▇█▆▆▅▆▆▇▅▅▁▂▂▁▂▁▂▂▄▂▄▂▂▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_majacc_val ██▇█▆▆▅▆▆▇▅▅▁▂▂▁▂▁▂▂▄▂▄▂▂▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_minacc_avg ▁▁▃▂▅▅▇▆▆▄▆▆▇▇▇█▇█▇█▇█▇███▇█████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_minacc_d_avg ▁▁▃▂▅▅▇▆▆▄▆▆▇▇▇█▇█▇█▇█▇███▇█████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_minacc_d_val ▁▁▃▂▅▅▇▆▆▄▆▆▇▇▇█▇█▇█▇█▇███▇█████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_minacc_val ▁▁▃▂▅▅▇▆▆▄▆▆▇▇▇█▇█▇█▇█▇███▇█████████████
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/Loss_avg █▆▆▆▅▅▅▅▄▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/Loss_val █▇▆▆▅▅▅▅▄▅▄▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/l1_avg ▇▅▅▅▅▅▄▅▅▅▅▆▇▂▁▁▂▂▃▃▅▅▅▆▆▇█▇████████████
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/l1_val ▄▅▅▅▅▅▄▅▄▄▅█▃▁▂▁▂▂▄▆▄▄▄▅▇▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_acc_avg ▁▄▄▄▅▅▆▆▇▇▇██▃▄▂▂▂▃▅▄▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_acc_val ▃▄▄▄▆▇▆▇▇▆██▆▄▂▃▂▃▂▃▄▃▄▁▃▅▂▁▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_majacc_avg ▆██▇▇▇▇▇▇▇▇▇▆▂▃▁▁▁▂▄▃▂▂▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_majacc_val ▇███▇▇▆█▇█▇▇▅▄▃▃▃▃▂▄▄▃▄▁▂▄▁▁▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_minacc_avg ▁▁▂▂▃▄▄▄▅▅▅▆▆▇▇▇▇▇▇▇▇▇█▇████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_minacc_val ▁▁▂▂▅▅▅▅▅▃▇▇█▇▇█▆▇▇▆▇▇▇▇████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_nll_avg █▅▅▄▃▃▃▂▂▂▂▁▁▄▃▄▄▄▃▃▃▃▃▃▃▃▃▂▃▂▂▂▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_nll_val █▇▆▅▄▄▄▃▂▃▂▁▄▆▇▅▆▆▇▅▄▅▅▆▅▄▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_penalty_avg █▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_penalty_val ██▄▄▂▂▂▂▂▃▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/weight_norm_avg ▁▅▅▅▅▅▅▆▆▆▇▇████████████████████████████
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/weight_norm_val ▁▃▃▃▃▄▄▄▅▅▆▆▇███████████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/zero_count_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/zero_count_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                            global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/diagnostics/epoch_time_val 0.03447
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/diagnostics/train_time_val 0.03411
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/diagnostics/validation_time_val 0.00034
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/Loss_avg 2.06653
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/Loss_d_avg 2.06653
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/Loss_d_val 2.06653
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/Loss_val 2.06653
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_acc_avg 0.628
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_acc_d_avg 0.628
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_acc_d_val 0.628
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_acc_val 0.628
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_corr_d_avg 0.20574
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_corr_d_val 0.20574
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_majacc_avg 0.8
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_majacc_d_avg 0.8
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_majacc_d_val 0.8
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_majacc_val 0.8
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_minacc_avg 0.60889
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_minacc_d_avg 0.60889
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_minacc_d_val 0.60889
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/test/test_minacc_val 0.60889
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/Loss_avg 3e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/Loss_val 3e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/l1_avg 8.15563
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/l1_val 8.1509
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_acc_avg 0.8325
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_acc_val 0.824
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_majacc_avg 0.8165
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_majacc_val 0.80465
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_minacc_avg 0.92392
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_minacc_val 0.94286
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_nll_avg 0.27547
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_nll_val 0.2727
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/weight_norm_avg 25.10374
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/weight_norm_val 25.10364
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/zero_count_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/137/logs/train/zero_count_val 0.0
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/bk3a0w3d
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_200705-bk3a0w3d/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
