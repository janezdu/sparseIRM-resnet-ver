hello
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_152505-0zj2texy
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/0zj2texy
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=13.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1223
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5979, 3, 32, 32) (6021, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:40,  1.61s/it] 12%|#1        | 3/26 [00:01<00:10,  2.14it/s] 27%|##6       | 7/26 [00:01<00:03,  5.91it/s] 42%|####2     | 11/26 [00:01<00:01,  9.90it/s] 58%|#####7    | 15/26 [00:02<00:00, 14.07it/s] 73%|#######3  | 19/26 [00:02<00:00, 18.13it/s] 88%|########8 | 23/26 [00:02<00:00, 21.76it/s]100%|##########| 26/26 [00:02<00:00,  9.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.411 (12.758)	train_nll   0.42 (  0.58)	train_penalty   0.05 (  0.27)	weight_norm   9.99 ( 12.18)	train_acc   0.84 (  0.80)	train_minacc   0.00 (  0.09)	train_majacc   0.98 (  0.93)	train_corr   0.00 (  0.00)	l1 7.6290 (8.4757)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.72it/s] 27%|##6       | 7/26 [00:00<00:00, 34.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.26it/s] 50%|#####     | 13/26 [00:00<00:00, 42.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.28it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.28it/s] 96%|#########6| 25/26 [00:00<00:00, 49.48it/s]100%|##########| 26/26 [00:00<00:00, 41.28it/s]
Test: [   0/  26]	Loss 0.419 (0.419)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.419 (0.419)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.377 (0.418)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.377 (0.418)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   1.00 (  0.99)
Test: [  20/  26]	Loss 0.457 (0.425)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.457 (0.425)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.99 (  0.99)
Test: [  26/  26]	Loss 0.421 (0.426)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.98 (  0.99)	Loss_d 0.421 (0.426)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.97 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]
Test: [  0/  1]	Loss 1.767 (1.767)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.767 (1.767)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.767 (1.767)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.767 (1.767)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/38/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0754 (0.0754)	validation_time 0.0069 (0.0069)	train_time 0.0660 (0.0660)
record: (train_acc, test_acc) (0.8456000274419785, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8456000274419785, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.57it/s] 19%|#9        | 5/26 [00:00<00:01, 18.72it/s] 35%|###4      | 9/26 [00:00<00:00, 24.85it/s] 50%|#####     | 13/26 [00:00<00:00, 28.13it/s] 65%|######5   | 17/26 [00:00<00:00, 30.17it/s] 81%|########  | 21/26 [00:00<00:00, 31.46it/s] 96%|#########6| 25/26 [00:00<00:00, 32.15it/s]100%|##########| 26/26 [00:00<00:00, 26.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.682 (7.719)	train_nll   0.42 (  0.43)	train_penalty   0.07 (  0.07)	weight_norm   5.26 (  7.29)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.00)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 7.3649 (7.6266)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 23%|##3       | 6/26 [00:00<00:00, 25.30it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.30it/s] 42%|####2     | 11/26 [00:00<00:00, 33.79it/s] 65%|######5   | 17/26 [00:00<00:00, 42.21it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.21it/s] 88%|########8 | 23/26 [00:00<00:00, 45.05it/s]100%|##########| 26/26 [00:00<00:00, 36.40it/s]
Test: [   0/  26]	Loss 0.405 (0.405)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.405 (0.405)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.365 (0.407)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.365 (0.407)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.439 (0.412)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  1.00)	Loss_d 0.439 (0.412)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.99)
Test: [  26/  26]	Loss 0.412 (0.413)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.98 (  1.00)	Loss_d 0.412 (0.413)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.98 (  1.00)	test_corr_d   0.97 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.81it/s]
Test: [  0/  1]	Loss 1.845 (1.845)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.845 (1.845)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.845 (1.845)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.845 (1.845)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Overall Timing[  1/  1]	epoch_time 0.0370 (0.0562)	validation_time 0.0004 (0.0036)	train_time 0.0366 (0.0513)
record: (train_acc, test_acc) (0.8456000274419785, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8474000226855278, 0.10400000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.88it/s] 19%|#9        | 5/26 [00:00<00:00, 22.39it/s] 35%|###4      | 9/26 [00:00<00:00, 26.45it/s] 50%|#####     | 13/26 [00:00<00:00, 29.40it/s] 65%|######5   | 17/26 [00:00<00:00, 31.15it/s] 81%|########  | 21/26 [00:00<00:00, 32.33it/s] 96%|#########6| 25/26 [00:00<00:00, 32.85it/s]100%|##########| 26/26 [00:00<00:00, 28.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.466 (4.413)	train_nll   0.39 (  0.41)	train_penalty   0.05 (  0.05)	weight_norm   3.08 (  4.00)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.02)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 6.5942 (7.0055)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s] 27%|##6       | 7/26 [00:00<00:00, 36.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.26it/s] 46%|####6     | 12/26 [00:00<00:00, 39.88it/s] 69%|######9   | 18/26 [00:00<00:00, 46.96it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.96it/s] 92%|#########2| 24/26 [00:00<00:00, 47.83it/s]100%|##########| 26/26 [00:00<00:00, 40.74it/s]
Test: [   0/  26]	Loss 0.386 (0.386)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.386 (0.386)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.344 (0.387)	test_acc   0.88 (  0.85)	test_minacc   0.04 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.344 (0.387)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.04 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.429 (0.391)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.429 (0.391)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.378 (0.391)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.378 (0.391)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.93it/s]
Test: [  0/  1]	Loss 1.678 (1.678)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.678 (1.678)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.678 (1.678)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.678 (1.678)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/38/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0358 (0.0494)	validation_time 0.0003 (0.0025)	train_time 0.0354 (0.0460)
record: (train_acc, test_acc) (0.847400026679039, 0.1210000067949295)
last accs (train_acc, test_acc) (0.847400026679039, 0.1210000067949295)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s] 19%|#9        | 5/26 [00:00<00:01, 20.95it/s] 35%|###4      | 9/26 [00:00<00:00, 26.80it/s] 50%|#####     | 13/26 [00:00<00:00, 29.42it/s] 65%|######5   | 17/26 [00:00<00:00, 30.95it/s] 81%|########  | 21/26 [00:00<00:00, 32.17it/s] 96%|#########6| 25/26 [00:00<00:00, 32.70it/s]100%|##########| 26/26 [00:00<00:00, 27.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.302 (2.827)	train_nll   0.36 (  0.39)	train_penalty   0.03 (  0.04)	weight_norm   1.94 (  2.44)	train_acc   0.87 (  0.84)	train_minacc   0.09 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.2111 (6.4060)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.67it/s] 27%|##6       | 7/26 [00:00<00:00, 29.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.64it/s] 46%|####6     | 12/26 [00:00<00:00, 36.94it/s] 69%|######9   | 18/26 [00:00<00:00, 43.81it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.81it/s] 92%|#########2| 24/26 [00:00<00:00, 44.76it/s]100%|##########| 26/26 [00:00<00:00, 36.84it/s]
Test: [   0/  26]	Loss 0.364 (0.364)	test_acc   0.85 (  0.85)	test_minacc   0.09 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 0.364 (0.364)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.334 (0.371)	test_acc   0.86 (  0.85)	test_minacc   0.04 (  0.05)	test_majacc   0.98 (  0.99)	Loss_d 0.334 (0.371)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.04 (  0.05)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  20/  26]	Loss 0.414 (0.374)	test_acc   0.83 (  0.85)	test_minacc   0.04 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.414 (0.374)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.04 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  26/  26]	Loss 0.342 (0.375)	test_acc   0.87 (  0.85)	test_minacc   0.11 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.342 (0.375)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.11 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.90it/s]
Test: [  0/  1]	Loss 1.741 (1.741)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.741 (1.741)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.741 (1.741)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.741 (1.741)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/38/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0377 (0.0465)	validation_time 0.0003 (0.0020)	train_time 0.0373 (0.0439)
record: (train_acc, test_acc) (0.8477000272870063, 0.13500000536441803)
last accs (train_acc, test_acc) (0.8477000272870063, 0.13500000536441803)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.43it/s] 19%|#9        | 5/26 [00:00<00:00, 22.42it/s] 35%|###4      | 9/26 [00:00<00:00, 27.32it/s] 50%|#####     | 13/26 [00:00<00:00, 29.61it/s] 65%|######5   | 17/26 [00:00<00:00, 31.05it/s] 81%|########  | 21/26 [00:00<00:00, 32.40it/s] 96%|#########6| 25/26 [00:00<00:00, 32.80it/s]100%|##########| 26/26 [00:00<00:00, 28.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.630 (1.950)	train_nll   0.36 (  0.38)	train_penalty   0.04 (  0.04)	weight_norm   1.27 (  1.57)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.9669 (6.1388)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.87it/s] 31%|###       | 8/26 [00:00<00:00, 42.34it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.34it/s] 50%|#####     | 13/26 [00:00<00:00, 42.98it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.09it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.09it/s] 96%|#########6| 25/26 [00:00<00:00, 48.85it/s]100%|##########| 26/26 [00:00<00:00, 41.92it/s]
Test: [   0/  26]	Loss 0.340 (0.340)	test_acc   0.86 (  0.86)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 0.340 (0.340)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.304 (0.351)	test_acc   0.88 (  0.85)	test_minacc   0.04 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.304 (0.351)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.04 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.406 (0.356)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.406 (0.356)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.338 (0.357)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.338 (0.357)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.67it/s]
Test: [  0/  1]	Loss 1.855 (1.855)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.855 (1.855)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.855 (1.855)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.855 (1.855)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Overall Timing[  4/  1]	epoch_time 0.0374 (0.0447)	validation_time 0.0003 (0.0016)	train_time 0.0370 (0.0425)
record: (train_acc, test_acc) (0.8477000272870063, 0.13500000536441803)
last accs (train_acc, test_acc) (0.8489000267982483, 0.12200000882148743)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.91it/s] 19%|#9        | 5/26 [00:00<00:00, 22.78it/s] 35%|###4      | 9/26 [00:00<00:00, 28.64it/s] 50%|#####     | 13/26 [00:00<00:00, 31.39it/s] 65%|######5   | 17/26 [00:00<00:00, 32.22it/s] 81%|########  | 21/26 [00:00<00:00, 33.11it/s] 96%|#########6| 25/26 [00:00<00:00, 32.81it/s]100%|##########| 26/26 [00:00<00:00, 28.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.195 (1.407)	train_nll   0.35 (  0.37)	train_penalty   0.03 (  0.04)	weight_norm   0.84 (  1.03)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.08)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.2573 (6.0832)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.66it/s] 27%|##6       | 7/26 [00:00<00:00, 33.10it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.10it/s] 50%|#####     | 13/26 [00:00<00:00, 42.05it/s] 69%|######9   | 18/26 [00:00<00:00, 43.20it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.20it/s] 92%|#########2| 24/26 [00:00<00:00, 47.61it/s]100%|##########| 26/26 [00:00<00:00, 40.09it/s]
Test: [   0/  26]	Loss 0.347 (0.347)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.347 (0.347)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.308 (0.353)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.308 (0.353)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.394 (0.358)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.394 (0.358)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.342 (0.359)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.342 (0.359)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.13it/s]
Test: [  0/  1]	Loss 1.956 (1.956)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.956 (1.956)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.956 (1.956)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.956 (1.956)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Overall Timing[  5/  1]	epoch_time 0.0358 (0.0432)	validation_time 0.0005 (0.0014)	train_time 0.0353 (0.0413)
record: (train_acc, test_acc) (0.8477000272870063, 0.13500000536441803)
last accs (train_acc, test_acc) (0.848500024497509, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 19%|#9        | 5/26 [00:00<00:01, 19.89it/s] 35%|###4      | 9/26 [00:00<00:00, 25.49it/s] 50%|#####     | 13/26 [00:00<00:00, 28.61it/s] 65%|######5   | 17/26 [00:00<00:00, 30.57it/s] 81%|########  | 21/26 [00:00<00:00, 32.09it/s] 96%|#########6| 25/26 [00:00<00:00, 32.82it/s]100%|##########| 26/26 [00:00<00:00, 27.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.913 (1.049)	train_nll   0.35 (  0.37)	train_penalty   0.03 (  0.03)	weight_norm   0.56 (  0.68)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.07)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.8893 (6.6607)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.39it/s] 19%|#9        | 5/26 [00:00<00:00, 22.37it/s] 38%|###8      | 10/26 [00:00<00:00, 33.36it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.36it/s] 62%|######1   | 16/26 [00:00<00:00, 39.01it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.01it/s] 85%|########4 | 22/26 [00:00<00:00, 45.15it/s]100%|##########| 26/26 [00:00<00:00, 35.48it/s]
Test: [   0/  26]	Loss 0.354 (0.354)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.354 (0.354)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.318 (0.355)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.318 (0.355)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.403 (0.361)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.403 (0.361)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.97)
Test: [  26/  26]	Loss 0.347 (0.361)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.347 (0.361)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.26it/s]
Test: [  0/  1]	Loss 1.827 (1.827)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.827 (1.827)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.827 (1.827)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.827 (1.827)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Overall Timing[  6/  1]	epoch_time 0.0366 (0.0422)	validation_time 0.0004 (0.0013)	train_time 0.0362 (0.0406)
record: (train_acc, test_acc) (0.8477000272870063, 0.13500000536441803)
last accs (train_acc, test_acc) (0.8496000218987465, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.66it/s]  8%|7         | 2/26 [00:00<00:05,  4.37it/s] 23%|##3       | 6/26 [00:00<00:01, 13.24it/s] 38%|###8      | 10/26 [00:00<00:00, 19.58it/s] 54%|#####3    | 14/26 [00:00<00:00, 24.14it/s] 69%|######9   | 18/26 [00:00<00:00, 27.36it/s] 85%|########4 | 22/26 [00:01<00:00, 29.48it/s]100%|##########| 26/26 [00:01<00:00, 31.22it/s]100%|##########| 26/26 [00:01<00:00, 22.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.727 (0.819)	train_nll   0.34 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.39 (  0.46)	train_acc   0.86 (  0.85)	train_minacc   0.09 (  0.08)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 8.1700 (7.6944)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.61it/s] 31%|###       | 8/26 [00:00<00:00, 40.81it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.81it/s] 50%|#####     | 13/26 [00:00<00:00, 43.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.17it/s] 96%|#########6| 25/26 [00:00<00:00, 48.54it/s]100%|##########| 26/26 [00:00<00:00, 42.28it/s]
Test: [   0/  26]	Loss 0.338 (0.338)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.338 (0.338)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.299 (0.338)	test_acc   0.88 (  0.85)	test_minacc   0.04 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.299 (0.338)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.04 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.372 (0.342)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.372 (0.342)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.325 (0.343)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.325 (0.343)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.08it/s]
Test: [  0/  1]	Loss 1.770 (1.770)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.770 (1.770)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.770 (1.770)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.770 (1.770)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.89 (  0.89)
Overall Timing[  7/  1]	epoch_time 0.0406 (0.0420)	validation_time 0.0003 (0.0012)	train_time 0.0402 (0.0405)
record: (train_acc, test_acc) (0.8477000272870063, 0.13500000536441803)
last accs (train_acc, test_acc) (0.8497000207304954, 0.11900000274181366)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.68it/s] 19%|#9        | 5/26 [00:00<00:01, 20.33it/s] 35%|###4      | 9/26 [00:00<00:00, 25.24it/s] 50%|#####     | 13/26 [00:00<00:00, 28.23it/s] 62%|######1   | 16/26 [00:00<00:00, 28.60it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.17it/s] 92%|#########2| 24/26 [00:00<00:00, 31.65it/s]100%|##########| 26/26 [00:00<00:00, 26.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.616 (0.670)	train_nll   0.35 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.27 (  0.32)	train_acc   0.87 (  0.85)	train_minacc   0.17 (  0.10)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 10.0154 (9.5006)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.34it/s] 27%|##6       | 7/26 [00:00<00:00, 34.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.05it/s] 50%|#####     | 13/26 [00:00<00:00, 39.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.18it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.18it/s] 96%|#########6| 25/26 [00:00<00:00, 46.87it/s]100%|##########| 26/26 [00:00<00:00, 39.38it/s]
Test: [   0/  26]	Loss 0.340 (0.340)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.340 (0.340)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.314 (0.343)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.314 (0.343)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.387 (0.347)	test_acc   0.84 (  0.85)	test_minacc   0.06 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.387 (0.347)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.06 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.325 (0.348)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.325 (0.348)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.41it/s]
Test: [  0/  1]	Loss 1.686 (1.686)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.686 (1.686)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.686 (1.686)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.686 (1.686)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.87 (  0.87)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/38/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0379 (0.0416)	validation_time 0.0003 (0.0011)	train_time 0.0376 (0.0402)
record: (train_acc, test_acc) (0.8510000218153, 0.1420000046491623)
last accs (train_acc, test_acc) (0.8510000218153, 0.1420000046491623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.84it/s] 19%|#9        | 5/26 [00:00<00:01, 20.76it/s] 35%|###4      | 9/26 [00:00<00:00, 25.90it/s] 50%|#####     | 13/26 [00:00<00:00, 29.00it/s] 65%|######5   | 17/26 [00:00<00:00, 31.06it/s] 81%|########  | 21/26 [00:00<00:00, 32.54it/s] 96%|#########6| 25/26 [00:00<00:00, 33.48it/s]100%|##########| 26/26 [00:00<00:00, 27.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.524 (0.579)	train_nll   0.33 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.20 (  0.23)	train_acc   0.85 (  0.85)	train_minacc   0.09 (  0.13)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 11.7779 (11.2107)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 27%|##6       | 7/26 [00:00<00:00, 31.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.88it/s] 50%|#####     | 13/26 [00:00<00:00, 38.70it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.55it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.55it/s] 96%|#########6| 25/26 [00:00<00:00, 46.82it/s]100%|##########| 26/26 [00:00<00:00, 38.43it/s]
Test: [   0/  26]	Loss 0.333 (0.333)	test_acc   0.86 (  0.86)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 0.333 (0.333)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.310 (0.338)	test_acc   0.88 (  0.86)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.310 (0.338)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.378 (0.344)	test_acc   0.83 (  0.85)	test_minacc   0.09 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.378 (0.344)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.09 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  26/  26]	Loss 0.307 (0.344)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.307 (0.344)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.09it/s]
Test: [  0/  1]	Loss 1.846 (1.846)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.846 (1.846)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.846 (1.846)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.846 (1.846)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Overall Timing[  9/  1]	epoch_time 0.0379 (0.0412)	validation_time 0.0003 (0.0010)	train_time 0.0375 (0.0399)
record: (train_acc, test_acc) (0.8510000218153, 0.1420000046491623)
last accs (train_acc, test_acc) (0.8502000241875648, 0.13199999928474426)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 19%|#9        | 5/26 [00:00<00:00, 22.04it/s] 35%|###4      | 9/26 [00:00<00:00, 26.97it/s] 50%|#####     | 13/26 [00:00<00:00, 29.68it/s] 65%|######5   | 17/26 [00:00<00:00, 31.48it/s] 81%|########  | 21/26 [00:00<00:00, 32.57it/s] 96%|#########6| 25/26 [00:00<00:00, 32.89it/s]100%|##########| 26/26 [00:00<00:00, 28.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.494 (0.519)	train_nll   0.33 (  0.34)	train_penalty   0.03 (  0.02)	weight_norm   0.17 (  0.18)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.17)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 13.4372 (12.7792)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.21it/s] 27%|##6       | 7/26 [00:00<00:00, 37.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.45it/s] 50%|#####     | 13/26 [00:00<00:00, 42.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.42it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.42it/s] 96%|#########6| 25/26 [00:00<00:00, 48.34it/s]100%|##########| 26/26 [00:00<00:00, 40.88it/s]
Test: [   0/  26]	Loss 0.321 (0.321)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.321 (0.321)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.291 (0.324)	test_acc   0.88 (  0.86)	test_minacc   0.08 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 0.291 (0.324)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.08 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.96)
Test: [  20/  26]	Loss 0.365 (0.331)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.365 (0.331)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.305 (0.331)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.305 (0.331)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.72it/s]
Test: [  0/  1]	Loss 1.924 (1.924)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.924 (1.924)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.924 (1.924)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.924 (1.924)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/38/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0371 (0.0408)	validation_time 0.0004 (0.0009)	train_time 0.0367 (0.0396)
record: (train_acc, test_acc) (0.8512000288963318, 0.14600001275539398)
last accs (train_acc, test_acc) (0.8512000288963318, 0.14600001275539398)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.21it/s] 19%|#9        | 5/26 [00:00<00:00, 22.57it/s] 35%|###4      | 9/26 [00:00<00:00, 27.49it/s] 50%|#####     | 13/26 [00:00<00:00, 30.19it/s] 65%|######5   | 17/26 [00:00<00:00, 31.61it/s] 81%|########  | 21/26 [00:00<00:00, 32.52it/s] 96%|#########6| 25/26 [00:00<00:00, 32.95it/s]100%|##########| 26/26 [00:00<00:00, 28.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.473 (0.489)	train_nll   0.35 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.13 (  0.15)	train_acc   0.86 (  0.85)	train_minacc   0.20 (  0.13)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 15.1648 (14.4578)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 27%|##6       | 7/26 [00:00<00:00, 30.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.27it/s] 50%|#####     | 13/26 [00:00<00:00, 37.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.34it/s] 96%|#########6| 25/26 [00:00<00:00, 45.77it/s]100%|##########| 26/26 [00:00<00:00, 36.91it/s]
Test: [   0/  26]	Loss 0.314 (0.314)	test_acc   0.86 (  0.86)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 0.314 (0.314)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.286 (0.320)	test_acc   0.88 (  0.86)	test_minacc   0.14 (  0.15)	test_majacc   0.99 (  0.98)	Loss_d 0.286 (0.320)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.14 (  0.15)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.343 (0.323)	test_acc   0.85 (  0.86)	test_minacc   0.18 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.343 (0.323)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.18 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.309 (0.324)	test_acc   0.86 (  0.86)	test_minacc   0.11 (  0.15)	test_majacc   0.99 (  0.98)	Loss_d 0.309 (0.324)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.11 (  0.15)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.31it/s]
Test: [  0/  1]	Loss 1.814 (1.814)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.96 (  0.96)	Loss_d 1.814 (1.814)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.814 (1.814)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.96 (  0.96)	Loss_d 1.814 (1.814)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.82 (  0.82)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/38/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0366 (0.0405)	validation_time 0.0004 (0.0009)	train_time 0.0361 (0.0393)
record: (train_acc, test_acc) (0.8572000204920769, 0.203000009059906)
last accs (train_acc, test_acc) (0.8572000204920769, 0.203000009059906)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.86it/s] 19%|#9        | 5/26 [00:00<00:01, 19.37it/s] 35%|###4      | 9/26 [00:00<00:00, 24.95it/s] 50%|#####     | 13/26 [00:00<00:00, 28.28it/s] 65%|######5   | 17/26 [00:00<00:00, 30.00it/s] 81%|########  | 21/26 [00:00<00:00, 31.66it/s] 96%|#########6| 25/26 [00:00<00:00, 32.35it/s]100%|##########| 26/26 [00:00<00:00, 26.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.433 (0.452)	train_nll   0.32 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.11 (  0.12)	train_acc   0.86 (  0.85)	train_minacc   0.23 (  0.19)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 16.3483 (15.8527)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 20.94it/s] 35%|###4      | 9/26 [00:00<00:00, 37.66it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 43.20it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.47it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.47it/s]100%|##########| 26/26 [00:00<00:00, 40.78it/s]
Test: [   0/  26]	Loss 0.325 (0.325)	test_acc   0.87 (  0.87)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 0.325 (0.325)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.304 (0.331)	test_acc   0.88 (  0.86)	test_minacc   0.22 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.304 (0.331)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.22 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.357 (0.333)	test_acc   0.85 (  0.86)	test_minacc   0.18 (  0.17)	test_majacc   0.99 (  0.98)	Loss_d 0.357 (0.333)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.18 (  0.17)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.312 (0.332)	test_acc   0.88 (  0.86)	test_minacc   0.20 (  0.16)	test_majacc   0.99 (  0.98)	Loss_d 0.312 (0.332)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.20 (  0.16)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.18it/s]
Test: [  0/  1]	Loss 1.692 (1.692)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 1.692 (1.692)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.692 (1.692)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 1.692 (1.692)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.80 (  0.80)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/38/checkpoints/model_best.pth
Overall Timing[ 12/  1]	epoch_time 0.0365 (0.0402)	validation_time 0.0003 (0.0009)	train_time 0.0362 (0.0391)
record: (train_acc, test_acc) (0.8585000293850898, 0.21800000965595245)
last accs (train_acc, test_acc) (0.8585000293850898, 0.21800000965595245)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 19%|#9        | 5/26 [00:00<00:01, 20.66it/s] 35%|###4      | 9/26 [00:00<00:00, 25.56it/s] 50%|#####     | 13/26 [00:00<00:00, 28.73it/s] 65%|######5   | 17/26 [00:00<00:00, 30.44it/s] 81%|########  | 21/26 [00:00<00:00, 31.76it/s] 96%|#########6| 25/26 [00:00<00:00, 32.68it/s]100%|##########| 26/26 [00:00<00:00, 27.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.446 (0.433)	train_nll   0.35 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.85 (  0.85)	train_minacc   0.23 (  0.24)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 17.7824 (17.2449)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.10it/s] 15%|#5        | 4/26 [00:00<00:01, 16.38it/s] 38%|###8      | 10/26 [00:00<00:00, 33.02it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.02it/s] 62%|######1   | 16/26 [00:00<00:00, 39.22it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.22it/s] 85%|########4 | 22/26 [00:00<00:00, 45.59it/s]100%|##########| 26/26 [00:00<00:00, 36.14it/s]
Test: [   0/  26]	Loss 0.327 (0.327)	test_acc   0.86 (  0.86)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.327 (0.327)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.300 (0.330)	test_acc   0.88 (  0.86)	test_minacc   0.16 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.300 (0.330)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.16 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.355 (0.333)	test_acc   0.84 (  0.86)	test_minacc   0.10 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.355 (0.333)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.10 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.322 (0.332)	test_acc   0.87 (  0.86)	test_minacc   0.11 (  0.10)	test_majacc   1.00 (  0.99)	Loss_d 0.322 (0.332)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.11 (  0.10)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.36it/s]
Test: [  0/  1]	Loss 1.830 (1.830)	test_acc   0.18 (  0.18)	test_minacc   0.10 (  0.10)	test_majacc   0.96 (  0.96)	Loss_d 1.830 (1.830)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.830 (1.830)	test_acc   0.18 (  0.18)	test_minacc   0.10 (  0.10)	test_majacc   0.96 (  0.96)	Loss_d 1.830 (1.830)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.84)
Overall Timing[ 13/  1]	epoch_time 0.0377 (0.0400)	validation_time 0.0004 (0.0008)	train_time 0.0373 (0.0390)
record: (train_acc, test_acc) (0.8585000293850898, 0.21800000965595245)
last accs (train_acc, test_acc) (0.8551000221967697, 0.18200001120567322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.51it/s] 19%|#9        | 5/26 [00:00<00:00, 22.11it/s] 35%|###4      | 9/26 [00:00<00:00, 26.55it/s] 50%|#####     | 13/26 [00:00<00:00, 29.18it/s] 65%|######5   | 17/26 [00:00<00:00, 30.41it/s] 81%|########  | 21/26 [00:00<00:00, 31.51it/s] 96%|#########6| 25/26 [00:00<00:00, 32.37it/s]100%|##########| 26/26 [00:00<00:00, 27.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.395 (0.415)	train_nll   0.31 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm   0.08 (  0.09)	train_acc   0.87 (  0.85)	train_minacc   0.26 (  0.25)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 18.9905 (18.4573)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.98it/s] 27%|##6       | 7/26 [00:00<00:00, 35.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.29it/s] 50%|#####     | 13/26 [00:00<00:00, 44.51it/s] 69%|######9   | 18/26 [00:00<00:00, 45.15it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.15it/s] 92%|#########2| 24/26 [00:00<00:00, 50.06it/s]100%|##########| 26/26 [00:00<00:00, 42.08it/s]
Test: [   0/  26]	Loss 0.302 (0.302)	test_acc   0.88 (  0.88)	test_minacc   0.33 (  0.33)	test_majacc   0.98 (  0.98)	Loss_d 0.302 (0.302)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.271 (0.311)	test_acc   0.89 (  0.87)	test_minacc   0.37 (  0.28)	test_majacc   0.97 (  0.97)	Loss_d 0.271 (0.311)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.37 (  0.28)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.333 (0.313)	test_acc   0.86 (  0.86)	test_minacc   0.33 (  0.28)	test_majacc   0.97 (  0.97)	Loss_d 0.333 (0.313)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.33 (  0.28)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.291 (0.310)	test_acc   0.87 (  0.86)	test_minacc   0.29 (  0.29)	test_majacc   0.96 (  0.97)	Loss_d 0.291 (0.310)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.31it/s]
Test: [  0/  1]	Loss 1.729 (1.729)	test_acc   0.28 (  0.28)	test_minacc   0.21 (  0.21)	test_majacc   0.95 (  0.95)	Loss_d 1.729 (1.729)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.729 (1.729)	test_acc   0.28 (  0.28)	test_minacc   0.21 (  0.21)	test_majacc   0.95 (  0.95)	Loss_d 1.729 (1.729)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.73 (  0.73)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/38/checkpoints/model_best.pth
Overall Timing[ 14/  1]	epoch_time 0.0367 (0.0398)	validation_time 0.0003 (0.0008)	train_time 0.0364 (0.0388)
record: (train_acc, test_acc) (0.8640000261068345, 0.2840000092983246)
last accs (train_acc, test_acc) (0.8640000261068345, 0.2840000092983246)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.03it/s] 19%|#9        | 5/26 [00:00<00:01, 18.44it/s] 35%|###4      | 9/26 [00:00<00:00, 24.85it/s] 50%|#####     | 13/26 [00:00<00:00, 28.47it/s] 65%|######5   | 17/26 [00:00<00:00, 30.70it/s] 81%|########  | 21/26 [00:00<00:00, 32.45it/s] 96%|#########6| 25/26 [00:00<00:00, 33.24it/s]100%|##########| 26/26 [00:00<00:00, 26.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.007 (0.160)	train_nll   0.66 (  0.43)	train_penalty   0.01 (  0.01)	weight_norm   0.11 (  0.09)	train_acc   0.65 (  0.80)	train_minacc   0.77 (  0.49)	train_majacc   0.63 (  0.85)	train_corr   0.00 (  0.00)	l1 19.0133 (19.1858)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.84it/s] 23%|##3       | 6/26 [00:00<00:00, 27.89it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.89it/s] 46%|####6     | 12/26 [00:00<00:00, 40.06it/s] 69%|######9   | 18/26 [00:00<00:00, 42.56it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.56it/s] 92%|#########2| 24/26 [00:00<00:00, 47.02it/s]100%|##########| 26/26 [00:00<00:00, 38.27it/s]
Test: [   0/  26]	Loss 0.585 (0.585)	test_acc   0.71 (  0.71)	test_minacc   0.79 (  0.79)	test_majacc   0.70 (  0.70)	Loss_d 0.585 (0.585)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.589 (0.594)	test_acc   0.72 (  0.69)	test_minacc   0.73 (  0.71)	test_majacc   0.71 (  0.69)	Loss_d 0.589 (0.594)	test_acc_d   0.72 (  0.69)	test_minacc_d   0.73 (  0.71)	test_majacc_d   0.71 (  0.69)	test_corr_d   0.31 (  0.30)
Test: [  20/  26]	Loss 0.602 (0.598)	test_acc   0.70 (  0.69)	test_minacc   0.72 (  0.71)	test_majacc   0.69 (  0.69)	Loss_d 0.602 (0.598)	test_acc_d   0.70 (  0.69)	test_minacc_d   0.72 (  0.71)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.25 (  0.29)
Test: [  26/  26]	Loss 0.649 (0.600)	test_acc   0.65 (  0.69)	test_minacc   0.77 (  0.71)	test_majacc   0.63 (  0.69)	Loss_d 0.649 (0.600)	test_acc_d   0.65 (  0.69)	test_minacc_d   0.77 (  0.71)	test_majacc_d   0.63 (  0.69)	test_corr_d   0.15 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.06it/s]
Test: [  0/  1]	Loss 0.633 (0.633)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.66 (  0.66)	Loss_d 0.633 (0.633)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.633 (0.633)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.66 (  0.66)	Loss_d 0.633 (0.633)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.25 ( -0.25)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/38/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0371 (0.0396)	validation_time 0.0004 (0.0008)	train_time 0.0367 (0.0387)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 19%|#9        | 5/26 [00:00<00:01, 20.94it/s] 35%|###4      | 9/26 [00:00<00:00, 26.01it/s] 50%|#####     | 13/26 [00:00<00:00, 29.00it/s] 65%|######5   | 17/26 [00:00<00:00, 30.07it/s] 81%|########  | 21/26 [00:00<00:00, 30.78it/s] 96%|#########6| 25/26 [00:00<00:00, 32.00it/s]100%|##########| 26/26 [00:00<00:00, 27.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.68 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.51 (  0.56)	train_minacc   0.63 (  0.59)	train_majacc   0.49 (  0.55)	train_corr   0.00 (  0.00)	l1 18.7350 (18.8305)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.09it/s] 23%|##3       | 6/26 [00:00<00:00, 29.81it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.81it/s] 42%|####2     | 11/26 [00:00<00:00, 37.54it/s] 65%|######5   | 17/26 [00:00<00:00, 42.50it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.50it/s] 88%|########8 | 23/26 [00:00<00:00, 48.01it/s]100%|##########| 26/26 [00:00<00:00, 38.30it/s]
Test: [   0/  26]	Loss 0.667 (0.667)	test_acc   0.54 (  0.54)	test_minacc   0.64 (  0.64)	test_majacc   0.52 (  0.52)	Loss_d 0.667 (0.667)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.671 (0.674)	test_acc   0.55 (  0.54)	test_minacc   0.57 (  0.61)	test_majacc   0.55 (  0.53)	Loss_d 0.671 (0.674)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.57 (  0.61)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.16 (  0.16)
Test: [  20/  26]	Loss 0.674 (0.674)	test_acc   0.58 (  0.55)	test_minacc   0.60 (  0.62)	test_majacc   0.57 (  0.54)	Loss_d 0.674 (0.674)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.60 (  0.62)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.10 (  0.15)
Test: [  26/  26]	Loss 0.684 (0.674)	test_acc   0.52 (  0.55)	test_minacc   0.63 (  0.63)	test_majacc   0.50 (  0.54)	Loss_d 0.684 (0.674)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.50 (  0.54)	test_corr_d   0.04 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.49it/s]
Test: [  0/  1]	Loss 0.668 (0.668)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.54 (  0.54)	Loss_d 0.668 (0.668)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.668 (0.668)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.54 (  0.54)	Loss_d 0.668 (0.668)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 16/  1]	epoch_time 0.0374 (0.0395)	validation_time 0.0004 (0.0007)	train_time 0.0370 (0.0386)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.550200011998415, 0.6030000448226929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 19%|#9        | 5/26 [00:00<00:00, 21.09it/s] 35%|###4      | 9/26 [00:00<00:00, 25.34it/s] 50%|#####     | 13/26 [00:00<00:00, 28.79it/s] 65%|######5   | 17/26 [00:00<00:00, 30.08it/s] 81%|########  | 21/26 [00:00<00:00, 31.69it/s] 96%|#########6| 25/26 [00:00<00:00, 32.97it/s]100%|##########| 26/26 [00:00<00:00, 27.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.49 (  0.50)	train_minacc   0.43 (  0.52)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 18.6942 (18.7094)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.23it/s] 15%|#5        | 4/26 [00:00<00:01, 15.21it/s] 38%|###8      | 10/26 [00:00<00:00, 28.73it/s]                                                38%|###8      | 10/26 [00:00<00:00, 28.73it/s] 65%|######5   | 17/26 [00:00<00:00, 40.33it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.33it/s] 85%|########4 | 22/26 [00:00<00:00, 41.93it/s]100%|##########| 26/26 [00:00<00:00, 34.04it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.685 (0.685)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.688 (0.689)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.689)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.00 (  0.05)
Test: [  20/  26]	Loss 0.688 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.688 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.01 (  0.04)
Test: [  26/  26]	Loss 0.694 (0.689)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.689)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.03it/s]
Test: [  0/  1]	Loss 0.683 (0.683)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.683 (0.683)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.683 (0.683)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.683 (0.683)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 17/  1]	epoch_time 0.0359 (0.0393)	validation_time 0.0004 (0.0007)	train_time 0.0355 (0.0384)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.49990001195669176, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.04it/s] 19%|#9        | 5/26 [00:00<00:00, 22.31it/s] 35%|###4      | 9/26 [00:00<00:00, 27.42it/s] 50%|#####     | 13/26 [00:00<00:00, 29.39it/s] 65%|######5   | 17/26 [00:00<00:00, 31.29it/s] 81%|########  | 21/26 [00:00<00:00, 32.39it/s] 96%|#########6| 25/26 [00:00<00:00, 32.82it/s]100%|##########| 26/26 [00:00<00:00, 28.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.49)	train_minacc   0.49 (  0.52)	train_majacc   0.46 (  0.48)	train_corr   0.00 (  0.00)	l1 18.6843 (18.6877)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.47it/s] 27%|##6       | 7/26 [00:00<00:00, 32.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.36it/s] 50%|#####     | 13/26 [00:00<00:00, 41.67it/s] 69%|######9   | 18/26 [00:00<00:00, 44.06it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.06it/s] 92%|#########2| 24/26 [00:00<00:00, 49.21it/s]100%|##########| 26/26 [00:00<00:00, 39.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.696 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.57 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.696 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.15 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.55 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.08 ( -0.05)
Test: [  26/  26]	Loss 0.696 (0.694)	test_acc   0.46 (  0.48)	test_minacc   0.46 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.696 (0.694)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.46 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.10 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.56it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 18/  1]	epoch_time 0.0366 (0.0391)	validation_time 0.0003 (0.0007)	train_time 0.0363 (0.0383)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.47940000507235525, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.88it/s] 19%|#9        | 5/26 [00:00<00:00, 22.02it/s] 35%|###4      | 9/26 [00:00<00:00, 27.62it/s] 50%|#####     | 13/26 [00:00<00:00, 30.54it/s] 65%|######5   | 17/26 [00:00<00:00, 32.38it/s] 81%|########  | 21/26 [00:00<00:00, 33.36it/s] 96%|#########6| 25/26 [00:00<00:00, 33.62it/s]100%|##########| 26/26 [00:00<00:00, 28.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.50)	train_minacc   0.49 (  0.53)	train_majacc   0.45 (  0.49)	train_corr   0.00 (  0.00)	l1 18.6817 (18.6824)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.56it/s] 27%|##6       | 7/26 [00:00<00:00, 37.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.94it/s] 46%|####6     | 12/26 [00:00<00:00, 41.77it/s] 69%|######9   | 18/26 [00:00<00:00, 47.26it/s]                                                69%|######9   | 18/26 [00:00<00:00, 47.26it/s] 92%|#########2| 24/26 [00:00<00:00, 48.35it/s]100%|##########| 26/26 [00:00<00:00, 41.02it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.44 (  0.44)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.695 (0.695)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.697 (0.695)	test_acc   0.44 (  0.47)	test_minacc   0.59 (  0.49)	test_majacc   0.41 (  0.47)	Loss_d 0.697 (0.695)	test_acc_d   0.44 (  0.47)	test_minacc_d   0.59 (  0.49)	test_majacc_d   0.41 (  0.47)	test_corr_d  -0.17 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.695)	test_acc   0.49 (  0.48)	test_minacc   0.60 (  0.51)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.695)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.07 ( -0.05)
Test: [  26/  26]	Loss 0.695 (0.695)	test_acc   0.46 (  0.48)	test_minacc   0.49 (  0.51)	test_majacc   0.46 (  0.47)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.09 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.08it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 19/  1]	epoch_time 0.0359 (0.0390)	validation_time 0.0004 (0.0007)	train_time 0.0356 (0.0382)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.4775000063478947, 0.4780000150203705)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.22it/s] 19%|#9        | 5/26 [00:00<00:00, 22.23it/s] 35%|###4      | 9/26 [00:00<00:00, 27.64it/s] 50%|#####     | 13/26 [00:00<00:00, 30.40it/s] 65%|######5   | 17/26 [00:00<00:00, 31.84it/s] 81%|########  | 21/26 [00:00<00:00, 32.80it/s] 96%|#########6| 25/26 [00:00<00:00, 33.68it/s]100%|##########| 26/26 [00:00<00:00, 28.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.48 (  0.51)	train_minacc   0.54 (  0.54)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 18.6802 (18.6806)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 23%|##3       | 6/26 [00:00<00:00, 29.27it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.27it/s] 42%|####2     | 11/26 [00:00<00:00, 37.82it/s] 62%|######1   | 16/26 [00:00<00:00, 40.37it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.37it/s] 85%|########4 | 22/26 [00:00<00:00, 45.93it/s]100%|##########| 26/26 [00:00<00:00, 37.86it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.695 (0.695)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.697 (0.695)	test_acc   0.43 (  0.47)	test_minacc   0.59 (  0.48)	test_majacc   0.41 (  0.46)	Loss_d 0.697 (0.695)	test_acc_d   0.43 (  0.47)	test_minacc_d   0.59 (  0.48)	test_majacc_d   0.41 (  0.46)	test_corr_d  -0.17 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.695)	test_acc   0.49 (  0.47)	test_minacc   0.60 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.695)	test_acc_d   0.49 (  0.47)	test_minacc_d   0.60 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.06 ( -0.06)
Test: [  26/  26]	Loss 0.695 (0.694)	test_acc   0.47 (  0.48)	test_minacc   0.51 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.695 (0.694)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.09 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.09it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 20/  1]	epoch_time 0.0368 (0.0389)	validation_time 0.0003 (0.0007)	train_time 0.0365 (0.0381)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.47520000690221786, 0.4830000102519989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.84it/s] 15%|#5        | 4/26 [00:00<00:01, 14.44it/s] 31%|###       | 8/26 [00:00<00:00, 21.88it/s] 46%|####6     | 12/26 [00:00<00:00, 26.27it/s] 62%|######1   | 16/26 [00:00<00:00, 29.20it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.39it/s] 92%|#########2| 24/26 [00:00<00:00, 32.28it/s]100%|##########| 26/26 [00:01<00:00, 25.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.47 (  0.51)	train_minacc   0.54 (  0.54)	train_majacc   0.46 (  0.51)	train_corr   0.00 (  0.00)	l1 18.6791 (18.6794)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.36it/s] 23%|##3       | 6/26 [00:00<00:00, 30.82it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.82it/s] 46%|####6     | 12/26 [00:00<00:00, 42.06it/s] 65%|######5   | 17/26 [00:00<00:00, 44.19it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.19it/s] 85%|########4 | 22/26 [00:00<00:00, 45.12it/s]100%|##########| 26/26 [00:00<00:00, 38.30it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.43)	test_minacc   0.41 (  0.41)	test_majacc   0.44 (  0.44)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.697 (0.695)	test_acc   0.42 (  0.46)	test_minacc   0.53 (  0.46)	test_majacc   0.41 (  0.46)	Loss_d 0.697 (0.695)	test_acc_d   0.42 (  0.46)	test_minacc_d   0.53 (  0.46)	test_majacc_d   0.41 (  0.46)	test_corr_d  -0.17 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.694)	test_acc   0.51 (  0.47)	test_minacc   0.58 (  0.48)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.694)	test_acc_d   0.51 (  0.47)	test_minacc_d   0.58 (  0.48)	test_majacc_d   0.50 (  0.47)	test_corr_d  -0.06 ( -0.06)
Test: [  26/  26]	Loss 0.695 (0.694)	test_acc   0.48 (  0.47)	test_minacc   0.54 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.695 (0.694)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.10 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.39it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 21/  1]	epoch_time 0.0359 (0.0387)	validation_time 0.0004 (0.0006)	train_time 0.0355 (0.0380)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.47240000674128535, 0.492000013589859)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.21it/s] 19%|#9        | 5/26 [00:00<00:00, 22.33it/s] 35%|###4      | 9/26 [00:00<00:00, 28.07it/s] 50%|#####     | 13/26 [00:00<00:00, 30.20it/s] 65%|######5   | 17/26 [00:00<00:00, 31.67it/s] 81%|########  | 21/26 [00:00<00:00, 32.64it/s] 96%|#########6| 25/26 [00:00<00:00, 33.30it/s]100%|##########| 26/26 [00:00<00:00, 28.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.47 (  0.51)	train_minacc   0.54 (  0.54)	train_majacc   0.46 (  0.51)	train_corr   0.00 (  0.00)	l1 18.6783 (18.6785)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.89it/s] 27%|##6       | 7/26 [00:00<00:00, 36.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.12it/s] 50%|#####     | 13/26 [00:00<00:00, 40.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.97it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.97it/s] 96%|#########6| 25/26 [00:00<00:00, 47.65it/s]100%|##########| 26/26 [00:00<00:00, 39.99it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.43 (  0.43)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.696 (0.695)	test_acc   0.41 (  0.46)	test_minacc   0.51 (  0.43)	test_majacc   0.39 (  0.46)	Loss_d 0.696 (0.695)	test_acc_d   0.41 (  0.46)	test_minacc_d   0.51 (  0.43)	test_majacc_d   0.39 (  0.46)	test_corr_d  -0.16 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.694)	test_acc   0.51 (  0.46)	test_minacc   0.54 (  0.46)	test_majacc   0.50 (  0.46)	Loss_d 0.693 (0.694)	test_acc_d   0.51 (  0.46)	test_minacc_d   0.54 (  0.46)	test_majacc_d   0.50 (  0.46)	test_corr_d  -0.04 ( -0.05)
Test: [  26/  26]	Loss 0.695 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.51 (  0.46)	test_majacc   0.46 (  0.47)	Loss_d 0.695 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.51 (  0.46)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.09 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.21it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 22/  1]	epoch_time 0.0367 (0.0387)	validation_time 0.0004 (0.0006)	train_time 0.0363 (0.0379)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.46580000725388526, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.54it/s] 19%|#9        | 5/26 [00:00<00:01, 20.68it/s] 35%|###4      | 9/26 [00:00<00:00, 25.61it/s] 50%|#####     | 13/26 [00:00<00:00, 28.42it/s] 65%|######5   | 17/26 [00:00<00:00, 31.09it/s] 81%|########  | 21/26 [00:00<00:00, 32.32it/s] 96%|#########6| 25/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:00<00:00, 28.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 312 tensor(-0.0108, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.003)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.14)	train_acc   0.49 (  0.53)	train_minacc   0.43 (  0.53)	train_majacc   0.50 (  0.53)	train_corr   0.00 (  0.00)	l1 12.9724 (13.6507)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.98it/s] 27%|##6       | 7/26 [00:00<00:00, 28.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.52it/s] 50%|#####     | 13/26 [00:00<00:00, 37.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.01it/s] 96%|#########6| 25/26 [00:00<00:00, 46.14it/s]100%|##########| 26/26 [00:00<00:00, 36.95it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.695 (0.699)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.695 (0.699)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.15 ( -0.11)
Test: [  20/  26]	Loss 0.698 (0.698)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.698 (0.698)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.19 ( -0.12)
Test: [  26/  26]	Loss 0.701 (0.699)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.701 (0.699)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.43it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 23/  1]	epoch_time 0.0375 (0.0386)	validation_time 0.0003 (0.0006)	train_time 0.0372 (0.0379)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5000000119507313, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 19%|#9        | 5/26 [00:00<00:00, 22.63it/s] 35%|###4      | 9/26 [00:00<00:00, 28.23it/s] 50%|#####     | 13/26 [00:00<00:00, 30.93it/s] 65%|######5   | 17/26 [00:00<00:00, 32.40it/s] 81%|########  | 21/26 [00:00<00:00, 33.55it/s] 96%|#########6| 25/26 [00:00<00:00, 33.84it/s]100%|##########| 26/26 [00:00<00:00, 28.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 12.7806 (12.8648)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.80it/s] 27%|##6       | 7/26 [00:00<00:00, 37.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.63it/s] 50%|#####     | 13/26 [00:00<00:00, 42.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.30it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.30it/s] 96%|#########6| 25/26 [00:00<00:00, 47.81it/s]100%|##########| 26/26 [00:00<00:00, 40.84it/s]
Test: [   0/  26]	Loss 0.683 (0.683)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.683 (0.683)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.685 (0.688)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.685 (0.688)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.30 (  0.29)
Test: [  20/  26]	Loss 0.688 (0.688)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.23 (  0.28)
Test: [  26/  26]	Loss 0.692 (0.689)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.689)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.17 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.27it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 24/  1]	epoch_time 0.0371 (0.0385)	validation_time 0.0003 (0.0006)	train_time 0.0368 (0.0378)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5000000119507313, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 19%|#9        | 5/26 [00:00<00:01, 20.43it/s] 35%|###4      | 9/26 [00:00<00:00, 26.00it/s] 50%|#####     | 13/26 [00:00<00:00, 28.97it/s] 65%|######5   | 17/26 [00:00<00:00, 30.76it/s] 81%|########  | 21/26 [00:00<00:00, 32.04it/s] 96%|#########6| 25/26 [00:00<00:00, 32.52it/s]100%|##########| 26/26 [00:00<00:00, 27.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 12.7145 (12.7426)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 31%|###       | 8/26 [00:00<00:00, 39.12it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.12it/s] 50%|#####     | 13/26 [00:00<00:00, 41.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.19it/s] 96%|#########6| 25/26 [00:00<00:00, 48.14it/s]100%|##########| 26/26 [00:00<00:00, 41.04it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.684 (0.684)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.685 (0.688)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.685 (0.688)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.31 (  0.29)
Test: [  20/  26]	Loss 0.688 (0.688)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.23 (  0.28)
Test: [  26/  26]	Loss 0.692 (0.689)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.689)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.17 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.55it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 25/  1]	epoch_time 0.0376 (0.0385)	validation_time 0.0004 (0.0006)	train_time 0.0372 (0.0378)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5000000119507313, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.93it/s] 27%|##6       | 7/26 [00:00<00:00, 28.85it/s] 42%|####2     | 11/26 [00:00<00:00, 31.44it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.16it/s] 88%|########8 | 23/26 [00:00<00:00, 33.38it/s]100%|##########| 26/26 [00:00<00:00, 29.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 12.6694 (12.6922)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.72it/s] 27%|##6       | 7/26 [00:00<00:00, 37.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.09it/s] 50%|#####     | 13/26 [00:00<00:00, 41.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.14it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.14it/s] 96%|#########6| 25/26 [00:00<00:00, 47.33it/s]100%|##########| 26/26 [00:00<00:00, 40.22it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.685 (0.685)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.687 (0.690)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.687 (0.690)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.29 (  0.29)
Test: [  20/  26]	Loss 0.689 (0.690)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.689 (0.690)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.27)
Test: [  26/  26]	Loss 0.693 (0.690)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.690)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.16 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.70it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 26/  1]	epoch_time 0.0373 (0.0385)	validation_time 0.0003 (0.0006)	train_time 0.0369 (0.0378)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5000000119507313, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.89it/s] 19%|#9        | 5/26 [00:00<00:00, 21.33it/s] 35%|###4      | 9/26 [00:00<00:00, 26.86it/s] 50%|#####     | 13/26 [00:00<00:00, 29.39it/s] 65%|######5   | 17/26 [00:00<00:00, 30.08it/s] 81%|########  | 21/26 [00:00<00:00, 32.03it/s] 96%|#########6| 25/26 [00:00<00:00, 32.89it/s]100%|##########| 26/26 [00:00<00:00, 27.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 12.6231 (12.6462)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.56it/s] 27%|##6       | 7/26 [00:00<00:00, 36.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.59it/s] 50%|#####     | 13/26 [00:00<00:00, 41.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.62it/s] 96%|#########6| 25/26 [00:00<00:00, 47.27it/s]100%|##########| 26/26 [00:00<00:00, 40.23it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.687 (0.690)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.687 (0.690)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.29 (  0.29)
Test: [  20/  26]	Loss 0.690 (0.690)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.27)
Test: [  26/  26]	Loss 0.693 (0.690)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.690)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.17 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.65it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 27/  1]	epoch_time 0.0362 (0.0384)	validation_time 0.0004 (0.0006)	train_time 0.0358 (0.0377)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5000000119507313, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.58it/s] 19%|#9        | 5/26 [00:00<00:00, 22.09it/s] 35%|###4      | 9/26 [00:00<00:00, 27.17it/s] 50%|#####     | 13/26 [00:00<00:00, 30.11it/s] 65%|######5   | 17/26 [00:00<00:00, 31.99it/s] 81%|########  | 21/26 [00:00<00:00, 33.69it/s] 96%|#########6| 25/26 [00:00<00:00, 34.35it/s]100%|##########| 26/26 [00:00<00:00, 28.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 12.5806 (12.6016)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.28it/s] 27%|##6       | 7/26 [00:00<00:00, 34.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.18it/s] 50%|#####     | 13/26 [00:00<00:00, 40.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.19it/s] 96%|#########6| 25/26 [00:00<00:00, 47.61it/s]100%|##########| 26/26 [00:00<00:00, 39.68it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.687 (0.687)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.688 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.28 (  0.28)
Test: [  20/  26]	Loss 0.690 (0.690)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.27)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.57it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 28/  1]	epoch_time 0.0354 (0.0383)	validation_time 0.0003 (0.0006)	train_time 0.0350 (0.0376)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5000000119507313, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.75it/s] 19%|#9        | 5/26 [00:00<00:00, 23.29it/s] 35%|###4      | 9/26 [00:00<00:00, 28.29it/s] 50%|#####     | 13/26 [00:00<00:00, 30.97it/s] 65%|######5   | 17/26 [00:00<00:00, 31.95it/s] 81%|########  | 21/26 [00:00<00:00, 33.02it/s] 96%|#########6| 25/26 [00:00<00:00, 33.53it/s]100%|##########| 26/26 [00:00<00:00, 28.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 12.5414 (12.5609)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.92it/s] 27%|##6       | 7/26 [00:00<00:00, 38.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.26it/s] 50%|#####     | 13/26 [00:00<00:00, 42.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.99it/s] 96%|#########6| 25/26 [00:00<00:00, 47.45it/s]100%|##########| 26/26 [00:00<00:00, 40.43it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.688 (0.688)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.689 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.28 (  0.28)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.26)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.44it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 29/  1]	epoch_time 0.0358 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0355 (0.0375)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5001000119447708, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.21it/s] 15%|#5        | 4/26 [00:00<00:01, 16.69it/s] 31%|###       | 8/26 [00:00<00:00, 23.89it/s] 46%|####6     | 12/26 [00:00<00:00, 28.01it/s] 62%|######1   | 16/26 [00:00<00:00, 30.43it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.03it/s] 92%|#########2| 24/26 [00:00<00:00, 32.23it/s]100%|##########| 26/26 [00:00<00:00, 26.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 12.5063 (12.5237)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 23%|##3       | 6/26 [00:00<00:00, 25.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.73it/s] 42%|####2     | 11/26 [00:00<00:00, 32.10it/s] 65%|######5   | 17/26 [00:00<00:00, 41.22it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.22it/s] 88%|########8 | 23/26 [00:00<00:00, 43.74it/s]100%|##########| 26/26 [00:00<00:00, 35.95it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.688 (0.688)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.689 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.28 (  0.27)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.26)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.19 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.57it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 30/  1]	epoch_time 0.0373 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0368 (0.0375)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5001000119447708, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 19%|#9        | 5/26 [00:00<00:00, 21.44it/s] 35%|###4      | 9/26 [00:00<00:00, 27.15it/s] 50%|#####     | 13/26 [00:00<00:00, 30.08it/s] 65%|######5   | 17/26 [00:00<00:00, 30.68it/s] 81%|########  | 21/26 [00:00<00:00, 31.93it/s] 96%|#########6| 25/26 [00:00<00:00, 32.43it/s]100%|##########| 26/26 [00:00<00:00, 27.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.4757 (12.4908)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.98it/s] 27%|##6       | 7/26 [00:00<00:00, 33.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.09it/s] 50%|#####     | 13/26 [00:00<00:00, 40.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.49it/s] 96%|#########6| 25/26 [00:00<00:00, 46.65it/s]100%|##########| 26/26 [00:00<00:00, 39.12it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.689 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.27 (  0.26)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.25)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.19 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.40it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 31/  1]	epoch_time 0.0363 (0.0381)	validation_time 0.0004 (0.0006)	train_time 0.0360 (0.0375)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5005000086426735, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.13it/s] 19%|#9        | 5/26 [00:00<00:00, 22.23it/s] 35%|###4      | 9/26 [00:00<00:00, 27.26it/s] 50%|#####     | 13/26 [00:00<00:00, 29.61it/s] 65%|######5   | 17/26 [00:00<00:00, 30.81it/s] 81%|########  | 21/26 [00:00<00:00, 31.97it/s] 96%|#########6| 25/26 [00:00<00:00, 32.40it/s]100%|##########| 26/26 [00:00<00:00, 27.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.4488 (12.4621)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.00it/s] 27%|##6       | 7/26 [00:00<00:00, 35.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.93it/s] 50%|#####     | 13/26 [00:00<00:00, 43.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.90it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.90it/s] 96%|#########6| 25/26 [00:00<00:00, 49.06it/s]100%|##########| 26/26 [00:00<00:00, 41.29it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.26 (  0.25)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.24)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.18 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.96it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 32/  1]	epoch_time 0.0368 (0.0381)	validation_time 0.0003 (0.0006)	train_time 0.0364 (0.0374)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5007000109553337, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.38it/s] 19%|#9        | 5/26 [00:00<00:00, 21.33it/s] 35%|###4      | 9/26 [00:00<00:00, 27.07it/s] 50%|#####     | 13/26 [00:00<00:00, 29.78it/s] 65%|######5   | 17/26 [00:00<00:00, 31.31it/s] 81%|########  | 21/26 [00:00<00:00, 32.58it/s] 96%|#########6| 25/26 [00:00<00:00, 33.35it/s]100%|##########| 26/26 [00:00<00:00, 28.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.4250 (12.4369)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.36it/s] 31%|###       | 8/26 [00:00<00:00, 41.08it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.08it/s] 50%|#####     | 13/26 [00:00<00:00, 42.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.21it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.21it/s] 96%|#########6| 25/26 [00:00<00:00, 47.73it/s]100%|##########| 26/26 [00:00<00:00, 41.28it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.25 (  0.23)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.23)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.18 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.46it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 33/  1]	epoch_time 0.0370 (0.0380)	validation_time 0.0004 (0.0005)	train_time 0.0366 (0.0374)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5010000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.64it/s] 19%|#9        | 5/26 [00:00<00:01, 19.23it/s] 35%|###4      | 9/26 [00:00<00:00, 24.54it/s] 50%|#####     | 13/26 [00:00<00:00, 28.07it/s] 65%|######5   | 17/26 [00:00<00:00, 30.16it/s] 81%|########  | 21/26 [00:00<00:00, 31.57it/s] 96%|#########6| 25/26 [00:00<00:00, 32.25it/s]100%|##########| 26/26 [00:00<00:00, 26.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.4035 (12.4143)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.53it/s] 27%|##6       | 7/26 [00:00<00:00, 35.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.11it/s] 50%|#####     | 13/26 [00:00<00:00, 40.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.79it/s] 96%|#########6| 25/26 [00:00<00:00, 47.84it/s]100%|##########| 26/26 [00:00<00:00, 40.10it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.24 (  0.22)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.21 (  0.21)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.17 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.85it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 34/  1]	epoch_time 0.0381 (0.0380)	validation_time 0.0003 (0.0005)	train_time 0.0378 (0.0374)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5013000109195709, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.22it/s] 15%|#5        | 4/26 [00:00<00:01, 19.60it/s] 27%|##6       | 7/26 [00:00<00:00, 24.05it/s] 42%|####2     | 11/26 [00:00<00:00, 28.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.04it/s] 88%|########8 | 23/26 [00:00<00:00, 32.58it/s]100%|##########| 26/26 [00:00<00:00, 27.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.3838 (12.3937)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 23%|##3       | 6/26 [00:00<00:00, 25.96it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.96it/s] 42%|####2     | 11/26 [00:00<00:00, 35.31it/s] 65%|######5   | 17/26 [00:00<00:00, 40.50it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.50it/s] 88%|########8 | 23/26 [00:00<00:00, 46.11it/s]100%|##########| 26/26 [00:00<00:00, 36.41it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.23 (  0.21)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.20 (  0.20)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.16 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.21it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 35/  1]	epoch_time 0.0378 (0.0380)	validation_time 0.0004 (0.0005)	train_time 0.0374 (0.0374)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5018000097274781, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.75it/s] 19%|#9        | 5/26 [00:00<00:01, 18.63it/s] 35%|###4      | 9/26 [00:00<00:00, 24.58it/s] 50%|#####     | 13/26 [00:00<00:00, 28.17it/s] 65%|######5   | 17/26 [00:00<00:00, 30.27it/s] 81%|########  | 21/26 [00:00<00:00, 31.96it/s] 96%|#########6| 25/26 [00:00<00:00, 32.83it/s]100%|##########| 26/26 [00:00<00:00, 26.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.3656 (12.3747)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s] 19%|#9        | 5/26 [00:00<00:00, 26.09it/s]                                               19%|#9        | 5/26 [00:00<00:00, 26.09it/s] 42%|####2     | 11/26 [00:00<00:00, 39.89it/s] 62%|######1   | 16/26 [00:00<00:00, 41.17it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.17it/s] 85%|########4 | 22/26 [00:00<00:00, 47.12it/s]100%|##########| 26/26 [00:00<00:00, 38.32it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.20)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.20 (  0.19)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.15 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.42it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 36/  1]	epoch_time 0.0367 (0.0380)	validation_time 0.0003 (0.0005)	train_time 0.0364 (0.0374)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5019000091850757, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.68it/s] 19%|#9        | 5/26 [00:00<00:01, 19.41it/s] 35%|###4      | 9/26 [00:00<00:00, 25.26it/s] 50%|#####     | 13/26 [00:00<00:00, 27.94it/s] 65%|######5   | 17/26 [00:00<00:00, 29.93it/s] 81%|########  | 21/26 [00:00<00:00, 31.12it/s] 96%|#########6| 25/26 [00:00<00:00, 32.19it/s]100%|##########| 26/26 [00:00<00:00, 26.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.51)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.3485 (12.3571)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.79it/s] 27%|##6       | 7/26 [00:00<00:00, 38.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.68it/s] 50%|#####     | 13/26 [00:00<00:00, 43.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.07it/s] 96%|#########6| 25/26 [00:00<00:00, 48.41it/s]100%|##########| 26/26 [00:00<00:00, 41.06it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.21 (  0.18)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.19 (  0.18)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.15 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.96it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 37/  1]	epoch_time 0.0364 (0.0380)	validation_time 0.0004 (0.0005)	train_time 0.0361 (0.0373)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5021000091731548, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.99it/s] 19%|#9        | 5/26 [00:00<00:00, 21.77it/s] 35%|###4      | 9/26 [00:00<00:00, 26.54it/s] 50%|#####     | 13/26 [00:00<00:00, 29.79it/s] 65%|######5   | 17/26 [00:00<00:00, 31.55it/s] 81%|########  | 21/26 [00:00<00:00, 32.47it/s] 96%|#########6| 25/26 [00:00<00:00, 33.37it/s]100%|##########| 26/26 [00:00<00:00, 28.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.51)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.3325 (12.3406)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.84it/s] 27%|##6       | 7/26 [00:00<00:00, 34.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.91it/s] 46%|####6     | 12/26 [00:00<00:00, 37.89it/s] 69%|######9   | 18/26 [00:00<00:00, 45.01it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.01it/s] 92%|#########2| 24/26 [00:00<00:00, 46.47it/s]100%|##########| 26/26 [00:00<00:00, 39.47it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.19 (  0.17)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.18 (  0.16)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.14 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.77it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 38/  1]	epoch_time 0.0375 (0.0379)	validation_time 0.0004 (0.0005)	train_time 0.0371 (0.0373)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5022000080049038, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 19%|#9        | 5/26 [00:00<00:01, 20.79it/s] 35%|###4      | 9/26 [00:00<00:00, 26.19it/s] 50%|#####     | 13/26 [00:00<00:00, 29.07it/s] 65%|######5   | 17/26 [00:00<00:00, 30.95it/s] 81%|########  | 21/26 [00:00<00:00, 32.27it/s] 96%|#########6| 25/26 [00:00<00:00, 33.15it/s]100%|##########| 26/26 [00:00<00:00, 27.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.51)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.3174 (12.3250)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.92it/s] 31%|###       | 8/26 [00:00<00:00, 42.78it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.78it/s] 50%|#####     | 13/26 [00:00<00:00, 42.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.57it/s] 96%|#########6| 25/26 [00:00<00:00, 48.61it/s]100%|##########| 26/26 [00:00<00:00, 42.07it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.18 (  0.15)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.17 (  0.15)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.13 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.01it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 39/  1]	epoch_time 0.0353 (0.0379)	validation_time 0.0003 (0.0005)	train_time 0.0349 (0.0373)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5022000080049038, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.60it/s] 19%|#9        | 5/26 [00:00<00:00, 24.24it/s] 35%|###4      | 9/26 [00:00<00:00, 29.14it/s] 50%|#####     | 13/26 [00:00<00:00, 31.62it/s] 65%|######5   | 17/26 [00:00<00:00, 32.09it/s] 81%|########  | 21/26 [00:00<00:00, 33.13it/s] 96%|#########6| 25/26 [00:00<00:00, 33.65it/s]100%|##########| 26/26 [00:00<00:00, 29.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.51)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.3031 (12.3103)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.24it/s] 27%|##6       | 7/26 [00:00<00:00, 32.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.53it/s] 50%|#####     | 13/26 [00:00<00:00, 39.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.19it/s] 96%|#########6| 25/26 [00:00<00:00, 45.95it/s]100%|##########| 26/26 [00:00<00:00, 38.05it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.16 (  0.14)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.16 (  0.14)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.12 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.19it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 40/  1]	epoch_time 0.0366 (0.0378)	validation_time 0.0004 (0.0005)	train_time 0.0362 (0.0373)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5022000080049038, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.63it/s] 19%|#9        | 5/26 [00:00<00:00, 21.18it/s] 35%|###4      | 9/26 [00:00<00:00, 26.06it/s] 50%|#####     | 13/26 [00:00<00:00, 28.78it/s] 65%|######5   | 17/26 [00:00<00:00, 30.89it/s] 81%|########  | 21/26 [00:00<00:00, 32.24it/s] 96%|#########6| 25/26 [00:00<00:00, 33.41it/s]100%|##########| 26/26 [00:00<00:00, 28.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.51)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.2895 (12.2963)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.20it/s] 27%|##6       | 7/26 [00:00<00:00, 34.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.57it/s] 46%|####6     | 12/26 [00:00<00:00, 40.80it/s] 65%|######5   | 17/26 [00:00<00:00, 41.38it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.38it/s] 88%|########8 | 23/26 [00:00<00:00, 46.87it/s]100%|##########| 26/26 [00:00<00:00, 38.79it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.15 (  0.12)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.15 (  0.12)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.11 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.92it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 41/  1]	epoch_time 0.0376 (0.0378)	validation_time 0.0004 (0.0005)	train_time 0.0372 (0.0373)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5023000091612339, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.60it/s] 15%|#5        | 4/26 [00:00<00:01, 19.21it/s] 27%|##6       | 7/26 [00:00<00:00, 23.64it/s] 42%|####2     | 11/26 [00:00<00:00, 27.02it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.07it/s] 88%|########8 | 23/26 [00:00<00:00, 32.82it/s]100%|##########| 26/26 [00:00<00:00, 27.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.51)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.2766 (12.2831)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.17it/s] 27%|##6       | 7/26 [00:00<00:00, 32.54it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.54it/s] 50%|#####     | 13/26 [00:00<00:00, 39.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.02it/s] 96%|#########6| 25/26 [00:00<00:00, 46.73it/s]100%|##########| 26/26 [00:00<00:00, 38.43it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.13 (  0.11)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.14 (  0.11)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.10 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.95it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 42/  1]	epoch_time 0.0369 (0.0378)	validation_time 0.0004 (0.0005)	train_time 0.0365 (0.0372)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.502600010305643, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.55it/s] 19%|#9        | 5/26 [00:00<00:01, 19.98it/s] 35%|###4      | 9/26 [00:00<00:00, 25.32it/s] 50%|#####     | 13/26 [00:00<00:00, 28.62it/s] 65%|######5   | 17/26 [00:00<00:00, 29.95it/s] 81%|########  | 21/26 [00:00<00:00, 31.27it/s] 96%|#########6| 25/26 [00:00<00:00, 32.40it/s]100%|##########| 26/26 [00:00<00:00, 26.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.51)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.2643 (12.2704)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.68it/s] 27%|##6       | 7/26 [00:00<00:00, 37.86it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.86it/s] 50%|#####     | 13/26 [00:00<00:00, 42.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.37it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.37it/s] 96%|#########6| 25/26 [00:00<00:00, 48.00it/s]100%|##########| 26/26 [00:00<00:00, 40.84it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.11 (  0.09)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.13 (  0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.09 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.69it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 43/  1]	epoch_time 0.0370 (0.0378)	validation_time 0.0004 (0.0005)	train_time 0.0366 (0.0372)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.502600010305643, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.93it/s] 19%|#9        | 5/26 [00:00<00:00, 23.44it/s] 35%|###4      | 9/26 [00:00<00:00, 27.84it/s] 50%|#####     | 13/26 [00:00<00:00, 30.48it/s] 65%|######5   | 17/26 [00:00<00:00, 31.70it/s] 81%|########  | 21/26 [00:00<00:00, 32.74it/s] 96%|#########6| 25/26 [00:00<00:00, 33.01it/s]100%|##########| 26/26 [00:00<00:00, 28.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.51)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.2526 (12.2584)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.87it/s] 23%|##3       | 6/26 [00:00<00:00, 32.35it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.35it/s] 46%|####6     | 12/26 [00:00<00:00, 43.04it/s] 69%|######9   | 18/26 [00:00<00:00, 45.20it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.20it/s] 92%|#########2| 24/26 [00:00<00:00, 48.16it/s]100%|##########| 26/26 [00:00<00:00, 40.57it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.10 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.12 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.09 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.70it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 44/  1]	epoch_time 0.0358 (0.0378)	validation_time 0.0005 (0.0005)	train_time 0.0353 (0.0372)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5027000114619732, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.98it/s] 19%|#9        | 5/26 [00:00<00:00, 22.98it/s] 35%|###4      | 9/26 [00:00<00:00, 28.78it/s] 50%|#####     | 13/26 [00:00<00:00, 31.92it/s] 65%|######5   | 17/26 [00:00<00:00, 33.34it/s] 81%|########  | 21/26 [00:00<00:00, 34.04it/s] 96%|#########6| 25/26 [00:00<00:00, 34.59it/s]100%|##########| 26/26 [00:00<00:00, 29.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.51)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.2414 (12.2470)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.43it/s] 27%|##6       | 7/26 [00:00<00:00, 38.00it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.00it/s] 50%|#####     | 13/26 [00:00<00:00, 43.15it/s] 69%|######9   | 18/26 [00:00<00:00, 44.57it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.57it/s] 92%|#########2| 24/26 [00:00<00:00, 48.51it/s]100%|##########| 26/26 [00:00<00:00, 41.00it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.08 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.11 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.08 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.79it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 45/  1]	epoch_time 0.0364 (0.0377)	validation_time 0.0003 (0.0005)	train_time 0.0360 (0.0372)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5030000126063824, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.30it/s] 19%|#9        | 5/26 [00:00<00:01, 20.88it/s] 35%|###4      | 9/26 [00:00<00:00, 26.70it/s] 50%|#####     | 13/26 [00:00<00:00, 29.93it/s] 65%|######5   | 17/26 [00:00<00:00, 31.72it/s] 81%|########  | 21/26 [00:00<00:00, 33.07it/s] 96%|#########6| 25/26 [00:00<00:00, 33.79it/s]100%|##########| 26/26 [00:00<00:00, 28.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.51)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.2308 (12.2361)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.74it/s] 27%|##6       | 7/26 [00:00<00:00, 35.34it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.34it/s] 50%|#####     | 13/26 [00:00<00:00, 40.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.23it/s] 96%|#########6| 25/26 [00:00<00:00, 46.02it/s]100%|##########| 26/26 [00:00<00:00, 39.03it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.07 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.10 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.07 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.91it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 46/  1]	epoch_time 0.0369 (0.0377)	validation_time 0.0004 (0.0005)	train_time 0.0365 (0.0371)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.503300012588501, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.30it/s] 19%|#9        | 5/26 [00:00<00:01, 20.32it/s] 35%|###4      | 9/26 [00:00<00:00, 25.33it/s] 50%|#####     | 13/26 [00:00<00:00, 28.35it/s] 65%|######5   | 17/26 [00:00<00:00, 30.61it/s] 81%|########  | 21/26 [00:00<00:00, 31.79it/s] 96%|#########6| 25/26 [00:00<00:00, 33.05it/s]100%|##########| 26/26 [00:00<00:00, 27.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.51)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 12.2207 (12.2257)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.49it/s] 27%|##6       | 7/26 [00:00<00:00, 30.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.79it/s] 50%|#####     | 13/26 [00:00<00:00, 38.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.27it/s] 96%|#########6| 25/26 [00:00<00:00, 46.63it/s]100%|##########| 26/26 [00:00<00:00, 37.90it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.53 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.05 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.10 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.07 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.17it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 47/  1]	epoch_time 0.0368 (0.0377)	validation_time 0.0003 (0.0005)	train_time 0.0365 (0.0371)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.5038000116050243, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.79it/s] 19%|#9        | 5/26 [00:00<00:00, 21.50it/s] 35%|###4      | 9/26 [00:00<00:00, 27.23it/s] 50%|#####     | 13/26 [00:00<00:00, 30.46it/s] 65%|######5   | 17/26 [00:00<00:00, 32.25it/s] 81%|########  | 21/26 [00:00<00:00, 33.73it/s] 96%|#########6| 25/26 [00:00<00:00, 34.64it/s]100%|##########| 26/26 [00:00<00:00, 28.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.51)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 12.2111 (12.2158)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.85it/s] 31%|###       | 8/26 [00:00<00:00, 41.33it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.33it/s] 50%|#####     | 13/26 [00:00<00:00, 42.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.23it/s] 96%|#########6| 25/26 [00:00<00:00, 47.88it/s]100%|##########| 26/26 [00:00<00:00, 42.04it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.53 (  0.49)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.45 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.09 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.06 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.37it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 48/  1]	epoch_time 0.0368 (0.0377)	validation_time 0.0005 (0.0005)	train_time 0.0364 (0.0371)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.504200012743473, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.96it/s] 19%|#9        | 5/26 [00:00<00:01, 17.70it/s] 35%|###4      | 9/26 [00:00<00:00, 23.55it/s] 50%|#####     | 13/26 [00:00<00:00, 27.16it/s] 65%|######5   | 17/26 [00:00<00:00, 29.76it/s] 81%|########  | 21/26 [00:00<00:00, 31.61it/s] 96%|#########6| 25/26 [00:00<00:00, 32.68it/s]100%|##########| 26/26 [00:00<00:00, 26.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.51)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 12.2020 (12.2065)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.65it/s] 31%|###       | 8/26 [00:00<00:00, 34.31it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.31it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.95it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.85it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.85it/s]100%|##########| 26/26 [00:00<00:00, 50.38it/s]100%|##########| 26/26 [00:00<00:00, 41.52it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.53 (  0.49)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.45 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.08 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.31it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 49/  1]	epoch_time 0.0374 (0.0377)	validation_time 0.0003 (0.0005)	train_time 0.0371 (0.0371)
record: (train_acc, test_acc) (0.6924000355005264, 0.64000004529953)
last accs (train_acc, test_acc) (0.504500011563301, 0.5)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.096 MB of 0.096 MB uploadedwandb: \ 0.096 MB of 0.096 MB uploadedwandb: | 0.096 MB of 0.096 MB uploadedwandb: / 0.096 MB of 0.096 MB uploadedwandb: - 0.096 MB of 0.096 MB uploadedwandb: \ 0.118 MB of 0.126 MB uploaded (0.003 MB deduped)wandb: | 0.494 MB of 0.494 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/diagnostics/epoch_time_val █▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/diagnostics/train_time_val █▁▁▂▁▁▂▂▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/Loss_avg ▇▇▇▇█▇▇▇█▇▇▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/Loss_d_avg ▇▇▇▇█▇▇▇█▇▇▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/Loss_d_val ▇▇▇▇█▇▇▇█▇▇▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/Loss_val ▇▇▇▇█▇▇▇█▇▇▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_acc_avg ▁▁▁▁▁▁▁▁▂▂▂▂██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_acc_d_avg ▁▁▁▁▁▁▁▁▂▂▂▂██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_acc_d_val ▁▁▁▁▁▁▁▁▂▂▂▂██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_acc_val ▁▁▁▁▁▁▁▁▂▂▂▂██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_corr_d_avg ██████▇▇▇▇▇▇▁▁▁▂▂▂▂▂▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_corr_d_val ██████▇▇▇▇▇▇▁▁▁▂▂▂▂▂▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_majacc_avg ████████████▄▃▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_majacc_d_avg ████████████▄▃▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_majacc_d_val ████████████▄▃▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_majacc_val ████████████▄▃▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_minacc_avg ▁▁▁▁▁▁▁▁▂▂▂▂██▆▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_minacc_d_avg ▁▁▁▁▁▁▁▁▂▂▂▂██▆▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_minacc_d_val ▁▁▁▁▁▁▁▁▂▂▂▂██▆▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_minacc_val ▁▁▁▁▁▁▁▁▂▂▂▂██▆▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/Loss_avg █▅▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/Loss_val █▅▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/l1_avg ▂▂▁▁▁▁▂▃▅▅▆▇███████▅▅▅▅▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/l1_val ▂▂▁▁▁▁▂▃▅▆▇▇███████▅▅▅▅▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_acc_avg ▇███████████▇▂▁▁▁▁▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_acc_val ▇███████████▄▂▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_majacc_avg ▇███████████▆▂▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_majacc_val ███████████▇▃▁▂▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_minacc_avg ▂▁▁▁▂▂▂▂▃▂▃▄▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_minacc_val ▁▁▁▂▁▁▂▃▁▃▃▃█▇▅▅▆▆▆▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_nll_avg ▆▃▃▂▂▂▂▁▁▁▁▁▃▇██████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_nll_val ▃▃▂▂▂▂▁▁▁▁▁▁▇███████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_penalty_avg █▃▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_penalty_val ▆█▆▄▅▅▃▃▅▄▃▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/weight_norm_avg █▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/weight_norm_val █▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/diagnostics/epoch_time_val 0.03745
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/diagnostics/train_time_val 0.0371
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/diagnostics/validation_time_val 0.00034
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/Loss_avg 0.69297
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/Loss_d_avg 0.69297
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/Loss_d_val 0.69297
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/Loss_val 0.69297
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_acc_avg 0.5
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_acc_d_avg 0.5
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_acc_d_val 0.5
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_acc_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_corr_d_avg -0.11353
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_corr_d_val -0.11353
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_majacc_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_majacc_d_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_majacc_d_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_majacc_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_minacc_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_minacc_d_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_minacc_d_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/test/test_minacc_val 0.5
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/Loss_val 8e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/l1_avg 12.20648
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/l1_val 12.20201
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_acc_avg 0.5045
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_acc_val 0.504
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_majacc_avg 0.50436
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_majacc_val 0.51628
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_minacc_avg 0.50726
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_minacc_val 0.42857
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_nll_avg 0.69283
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_nll_val 0.69297
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/weight_norm_avg 0.14916
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/38/logs/train/weight_norm_val 0.14904
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/0zj2texy
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_152505-0zj2texy/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_152738-2xucv1sf
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/2xucv1sf
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=13.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1202
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6028, 3, 32, 32) (5972, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:39,  1.58s/it] 19%|#9        | 5/26 [00:01<00:05,  3.81it/s] 35%|###4      | 9/26 [00:01<00:02,  7.42it/s] 50%|#####     | 13/26 [00:01<00:01, 11.34it/s] 65%|######5   | 17/26 [00:02<00:00, 15.11it/s] 81%|########  | 21/26 [00:02<00:00, 19.01it/s] 96%|#########6| 25/26 [00:02<00:00, 22.56it/s]100%|##########| 26/26 [00:02<00:00,  9.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.416 (12.170)	train_nll   0.47 (  0.53)	train_penalty   0.07 (  0.17)	weight_norm   8.95 ( 11.64)	train_acc   0.81 (  0.80)	train_minacc   0.02 (  0.08)	train_majacc   1.00 (  0.93)	train_corr   0.00 (  0.00)	l1 6.8356 (7.9641)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.76it/s] 31%|###       | 8/26 [00:00<00:00, 38.86it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.86it/s] 50%|#####     | 13/26 [00:00<00:00, 42.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.38it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.38it/s] 96%|#########6| 25/26 [00:00<00:00, 48.56it/s]100%|##########| 26/26 [00:00<00:00, 41.23it/s]
Test: [   0/  26]	Loss 0.392 (0.392)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.392 (0.392)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.417 (0.411)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.417 (0.411)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.406 (0.408)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.406 (0.408)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.466 (0.414)	test_acc   0.81 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.466 (0.414)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]
Test: [  0/  1]	Loss 1.546 (1.546)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.546 (1.546)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.546 (1.546)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.546 (1.546)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/39/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0727 (0.0727)	validation_time 0.0069 (0.0069)	train_time 0.0641 (0.0641)
record: (train_acc, test_acc) (0.8478000271320343, 0.10700000822544098)
last accs (train_acc, test_acc) (0.8478000271320343, 0.10700000822544098)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.56it/s] 19%|#9        | 5/26 [00:00<00:01, 20.97it/s] 35%|###4      | 9/26 [00:00<00:00, 25.88it/s] 50%|#####     | 13/26 [00:00<00:00, 28.98it/s] 65%|######5   | 17/26 [00:00<00:00, 30.63it/s] 81%|########  | 21/26 [00:00<00:00, 32.10it/s] 96%|#########6| 25/26 [00:00<00:00, 33.52it/s]100%|##########| 26/26 [00:00<00:00, 27.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.822 (6.669)	train_nll   0.47 (  0.41)	train_penalty   0.06 (  0.06)	weight_norm   4.35 (  6.26)	train_acc   0.81 (  0.85)	train_minacc   0.02 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.9551 (6.5516)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 27%|##6       | 7/26 [00:00<00:00, 34.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.18it/s] 50%|#####     | 13/26 [00:00<00:00, 40.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.65it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.65it/s] 96%|#########6| 25/26 [00:00<00:00, 47.11it/s]100%|##########| 26/26 [00:00<00:00, 39.14it/s]
Test: [   0/  26]	Loss 0.399 (0.399)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.399 (0.399)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.417 (0.412)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.417 (0.412)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.413 (0.411)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.413 (0.411)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.99)
Test: [  26/  26]	Loss 0.465 (0.415)	test_acc   0.81 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.465 (0.415)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.81it/s]
Test: [  0/  1]	Loss 1.490 (1.490)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.490 (1.490)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.490 (1.490)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.490 (1.490)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Overall Timing[  1/  1]	epoch_time 0.0367 (0.0547)	validation_time 0.0005 (0.0037)	train_time 0.0362 (0.0502)
record: (train_acc, test_acc) (0.8478000271320343, 0.10700000822544098)
last accs (train_acc, test_acc) (0.8485000236034393, 0.10300000756978989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.82it/s] 19%|#9        | 5/26 [00:00<00:00, 21.52it/s] 35%|###4      | 9/26 [00:00<00:00, 26.94it/s] 50%|#####     | 13/26 [00:00<00:00, 30.58it/s] 65%|######5   | 17/26 [00:00<00:00, 32.15it/s] 81%|########  | 21/26 [00:00<00:00, 33.07it/s] 96%|#########6| 25/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:00<00:00, 28.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.956 (3.665)	train_nll   0.47 (  0.40)	train_penalty   0.06 (  0.05)	weight_norm   2.48 (  3.26)	train_acc   0.81 (  0.85)	train_minacc   0.02 (  0.05)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.1719 (5.6020)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.38it/s] 27%|##6       | 7/26 [00:00<00:00, 34.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.68it/s] 50%|#####     | 13/26 [00:00<00:00, 41.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.73it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.73it/s] 96%|#########6| 25/26 [00:00<00:00, 48.22it/s]100%|##########| 26/26 [00:00<00:00, 41.04it/s]
Test: [   0/  26]	Loss 0.419 (0.419)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.419 (0.419)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.426 (0.431)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.426 (0.431)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.424 (0.428)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.424 (0.428)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.98)
Test: [  26/  26]	Loss 0.471 (0.432)	test_acc   0.81 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.471 (0.432)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.80it/s]
Test: [  0/  1]	Loss 1.284 (1.284)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.284 (1.284)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.284 (1.284)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.284 (1.284)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  2/  1]	epoch_time 0.0355 (0.0483)	validation_time 0.0003 (0.0026)	train_time 0.0351 (0.0452)
record: (train_acc, test_acc) (0.8478000271320343, 0.10700000822544098)
last accs (train_acc, test_acc) (0.8491000235676766, 0.10300000756978989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.35it/s] 19%|#9        | 5/26 [00:00<00:00, 22.16it/s] 35%|###4      | 9/26 [00:00<00:00, 27.76it/s] 50%|#####     | 13/26 [00:00<00:00, 30.41it/s] 65%|######5   | 17/26 [00:00<00:00, 32.20it/s] 81%|########  | 21/26 [00:00<00:00, 33.35it/s] 96%|#########6| 25/26 [00:00<00:00, 33.91it/s]100%|##########| 26/26 [00:00<00:00, 28.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.012 (2.368)	train_nll   0.45 (  0.39)	train_penalty   0.05 (  0.04)	weight_norm   1.56 (  1.98)	train_acc   0.81 (  0.85)	train_minacc   0.02 (  0.07)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.2089 (5.2684)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.63it/s] 27%|##6       | 7/26 [00:00<00:00, 37.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.03it/s] 46%|####6     | 12/26 [00:00<00:00, 42.50it/s] 65%|######5   | 17/26 [00:00<00:00, 43.58it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.58it/s] 88%|########8 | 23/26 [00:00<00:00, 48.82it/s]100%|##########| 26/26 [00:00<00:00, 40.35it/s]
Test: [   0/  26]	Loss 0.380 (0.380)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.380 (0.380)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.398 (0.401)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.398 (0.401)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.393 (0.397)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.393 (0.397)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.432 (0.401)	test_acc   0.81 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.432 (0.401)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 1.374 (1.374)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.374 (1.374)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.374 (1.374)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.374 (1.374)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/39/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0357 (0.0452)	validation_time 0.0004 (0.0020)	train_time 0.0353 (0.0427)
record: (train_acc, test_acc) (0.8491000189185143, 0.11400000751018524)
last accs (train_acc, test_acc) (0.8491000189185143, 0.11400000751018524)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.19it/s] 19%|#9        | 5/26 [00:00<00:00, 24.51it/s] 35%|###4      | 9/26 [00:00<00:00, 29.35it/s] 50%|#####     | 13/26 [00:00<00:00, 31.96it/s] 65%|######5   | 17/26 [00:00<00:00, 33.57it/s] 81%|########  | 21/26 [00:00<00:00, 34.60it/s] 96%|#########6| 25/26 [00:00<00:00, 34.81it/s]100%|##########| 26/26 [00:00<00:00, 29.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.411 (1.631)	train_nll   0.41 (  0.37)	train_penalty   0.05 (  0.04)	weight_norm   1.00 (  1.26)	train_acc   0.81 (  0.85)	train_minacc   0.02 (  0.10)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.3377 (5.3322)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.56it/s] 27%|##6       | 7/26 [00:00<00:00, 36.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.01it/s] 50%|#####     | 13/26 [00:00<00:00, 40.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.29it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.29it/s] 96%|#########6| 25/26 [00:00<00:00, 46.71it/s]100%|##########| 26/26 [00:00<00:00, 39.49it/s]
Test: [   0/  26]	Loss 0.362 (0.362)	test_acc   0.87 (  0.87)	test_minacc   0.15 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 0.362 (0.362)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.374 (0.378)	test_acc   0.85 (  0.86)	test_minacc   0.12 (  0.11)	test_majacc   0.98 (  0.99)	Loss_d 0.374 (0.378)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.12 (  0.11)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.370 (0.376)	test_acc   0.85 (  0.86)	test_minacc   0.14 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.370 (0.376)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.14 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.390 (0.380)	test_acc   0.82 (  0.85)	test_minacc   0.10 (  0.11)	test_majacc   0.99 (  0.98)	Loss_d 0.390 (0.380)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.10 (  0.11)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.89 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.00it/s]
Test: [  0/  1]	Loss 1.348 (1.348)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   1.00 (  1.00)	Loss_d 1.348 (1.348)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.348 (1.348)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   1.00 (  1.00)	Loss_d 1.348 (1.348)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.75 (  0.75)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/39/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0364 (0.0434)	validation_time 0.0003 (0.0017)	train_time 0.0361 (0.0414)
record: (train_acc, test_acc) (0.8526000226140023, 0.19300000369548798)
last accs (train_acc, test_acc) (0.8526000226140023, 0.19300000369548798)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.93it/s] 19%|#9        | 5/26 [00:00<00:00, 22.15it/s] 35%|###4      | 9/26 [00:00<00:00, 27.21it/s] 50%|#####     | 13/26 [00:00<00:00, 30.02it/s] 65%|######5   | 17/26 [00:00<00:00, 31.92it/s] 81%|########  | 21/26 [00:00<00:00, 32.87it/s] 96%|#########6| 25/26 [00:00<00:00, 33.51it/s]100%|##########| 26/26 [00:00<00:00, 28.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.081 (1.175)	train_nll   0.42 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm   0.66 (  0.82)	train_acc   0.82 (  0.85)	train_minacc   0.15 (  0.15)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 6.0383 (5.7283)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 27%|##6       | 7/26 [00:00<00:00, 33.86it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.86it/s] 50%|#####     | 13/26 [00:00<00:00, 39.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.04it/s] 96%|#########6| 25/26 [00:00<00:00, 47.00it/s]100%|##########| 26/26 [00:00<00:00, 39.40it/s]
Test: [   0/  26]	Loss 0.335 (0.335)	test_acc   0.87 (  0.87)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.335 (0.335)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.360 (0.349)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.360 (0.349)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.350 (0.348)	test_acc   0.86 (  0.86)	test_minacc   0.14 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.350 (0.348)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.14 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.377 (0.352)	test_acc   0.81 (  0.85)	test_minacc   0.06 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.377 (0.352)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.06 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.07it/s]
Test: [  0/  1]	Loss 1.626 (1.626)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.626 (1.626)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.626 (1.626)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.626 (1.626)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/39/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0359 (0.0422)	validation_time 0.0004 (0.0015)	train_time 0.0355 (0.0404)
record: (train_acc, test_acc) (0.8528000175356865, 0.20600001513957977)
last accs (train_acc, test_acc) (0.8528000175356865, 0.20600001513957977)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.91it/s]  8%|7         | 2/26 [00:00<00:03,  7.02it/s] 23%|##3       | 6/26 [00:00<00:01, 18.17it/s] 38%|###8      | 10/26 [00:00<00:00, 24.00it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.68it/s] 69%|######9   | 18/26 [00:00<00:00, 30.21it/s] 85%|########4 | 22/26 [00:00<00:00, 31.78it/s]100%|##########| 26/26 [00:00<00:00, 33.26it/s]100%|##########| 26/26 [00:01<00:00, 25.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.846 (0.908)	train_nll   0.40 (  0.37)	train_penalty   0.04 (  0.04)	weight_norm   0.44 (  0.53)	train_acc   0.82 (  0.85)	train_minacc   0.04 (  0.08)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.8332 (6.3658)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.42it/s] 27%|##6       | 7/26 [00:00<00:00, 35.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.64it/s] 50%|#####     | 13/26 [00:00<00:00, 41.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.64it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.64it/s] 96%|#########6| 25/26 [00:00<00:00, 48.45it/s]100%|##########| 26/26 [00:00<00:00, 40.49it/s]
Test: [   0/  26]	Loss 0.369 (0.369)	test_acc   0.87 (  0.87)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.369 (0.369)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.362 (0.361)	test_acc   0.85 (  0.86)	test_minacc   0.10 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.362 (0.361)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.10 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.347 (0.357)	test_acc   0.86 (  0.86)	test_minacc   0.14 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.347 (0.357)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.14 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.87 (  0.88)
Test: [  26/  26]	Loss 0.371 (0.358)	test_acc   0.82 (  0.85)	test_minacc   0.12 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.371 (0.358)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.12 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 50.36it/s]
Test: [  0/  1]	Loss 1.288 (1.288)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   1.00 (  1.00)	Loss_d 1.288 (1.288)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.288 (1.288)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   1.00 (  1.00)	Loss_d 1.288 (1.288)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.73 (  0.73)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/39/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0362 (0.0413)	validation_time 0.0005 (0.0013)	train_time 0.0357 (0.0397)
record: (train_acc, test_acc) (0.854100026011467, 0.20900000631809235)
last accs (train_acc, test_acc) (0.854100026011467, 0.20900000631809235)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.45it/s] 19%|#9        | 5/26 [00:00<00:00, 24.46it/s] 35%|###4      | 9/26 [00:00<00:00, 29.50it/s] 50%|#####     | 13/26 [00:00<00:00, 31.79it/s] 65%|######5   | 17/26 [00:00<00:00, 33.38it/s] 81%|########  | 21/26 [00:00<00:00, 34.29it/s] 96%|#########6| 25/26 [00:00<00:00, 34.93it/s]100%|##########| 26/26 [00:00<00:00, 29.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.686 (0.734)	train_nll   0.38 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm   0.31 (  0.38)	train_acc   0.81 (  0.85)	train_minacc   0.08 (  0.13)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 8.3834 (7.7742)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.18it/s] 35%|###4      | 9/26 [00:00<00:00, 42.39it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.39it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.43it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.43it/s] 81%|########  | 21/26 [00:00<00:00, 49.53it/s]100%|##########| 26/26 [00:00<00:00, 42.76it/s]
Test: [   0/  26]	Loss 0.367 (0.367)	test_acc   0.86 (  0.86)	test_minacc   0.28 (  0.28)	test_majacc   0.95 (  0.95)	Loss_d 0.367 (0.367)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.369 (0.366)	test_acc   0.85 (  0.85)	test_minacc   0.25 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 0.369 (0.366)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.25 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.83 (  0.83)
Test: [  20/  26]	Loss 0.356 (0.363)	test_acc   0.86 (  0.86)	test_minacc   0.32 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 0.356 (0.363)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.32 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.82 (  0.83)
Test: [  26/  26]	Loss 0.343 (0.364)	test_acc   0.84 (  0.85)	test_minacc   0.27 (  0.27)	test_majacc   0.97 (  0.96)	Loss_d 0.343 (0.364)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.82 (  0.83)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.54it/s]
Test: [  0/  1]	Loss 1.273 (1.273)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.97 (  0.97)	Loss_d 1.273 (1.273)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.51 (  0.51)
Test: [  1/  1]	Loss 1.273 (1.273)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.97 (  0.97)	Loss_d 1.273 (1.273)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.51 (  0.51)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/39/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0361 (0.0407)	validation_time 0.0003 (0.0012)	train_time 0.0357 (0.0392)
record: (train_acc, test_acc) (0.8541000230312348, 0.33800002932548523)
last accs (train_acc, test_acc) (0.8541000230312348, 0.33800002932548523)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 19%|#9        | 5/26 [00:00<00:01, 20.60it/s] 35%|###4      | 9/26 [00:00<00:00, 26.63it/s] 50%|#####     | 13/26 [00:00<00:00, 29.94it/s] 65%|######5   | 17/26 [00:00<00:00, 31.91it/s] 81%|########  | 21/26 [00:00<00:00, 32.97it/s] 96%|#########6| 25/26 [00:00<00:00, 33.12it/s]100%|##########| 26/26 [00:01<00:00, 24.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.602 (0.603)	train_nll   0.38 (  0.35)	train_penalty   0.04 (  0.03)	weight_norm   0.22 (  0.26)	train_acc   0.82 (  0.85)	train_minacc   0.08 (  0.18)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 10.1081 (9.4285)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.28it/s] 19%|#9        | 5/26 [00:00<00:00, 25.14it/s]                                               19%|#9        | 5/26 [00:00<00:00, 25.14it/s] 42%|####2     | 11/26 [00:00<00:00, 39.21it/s] 62%|######1   | 16/26 [00:00<00:00, 42.85it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.85it/s] 85%|########4 | 22/26 [00:00<00:00, 48.24it/s]100%|##########| 26/26 [00:00<00:00, 39.50it/s]
Test: [   0/  26]	Loss 0.349 (0.349)	test_acc   0.87 (  0.87)	test_minacc   0.28 (  0.28)	test_majacc   0.97 (  0.97)	Loss_d 0.349 (0.349)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.335 (0.348)	test_acc   0.88 (  0.86)	test_minacc   0.40 (  0.29)	test_majacc   0.97 (  0.96)	Loss_d 0.335 (0.348)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.40 (  0.29)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  20/  26]	Loss 0.333 (0.343)	test_acc   0.86 (  0.86)	test_minacc   0.32 (  0.28)	test_majacc   0.95 (  0.96)	Loss_d 0.333 (0.343)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.32 (  0.28)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  26/  26]	Loss 0.335 (0.344)	test_acc   0.82 (  0.86)	test_minacc   0.23 (  0.28)	test_majacc   0.97 (  0.96)	Loss_d 0.335 (0.344)	test_acc_d   0.82 (  0.86)	test_minacc_d   0.23 (  0.28)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.86 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.92it/s]
Test: [  0/  1]	Loss 1.413 (1.413)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 1.413 (1.413)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.70 (  0.70)
Test: [  1/  1]	Loss 1.413 (1.413)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 1.413 (1.413)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.70 (  0.70)
Overall Timing[  8/  1]	epoch_time 0.0387 (0.0404)	validation_time 0.0004 (0.0011)	train_time 0.0382 (0.0391)
record: (train_acc, test_acc) (0.8541000230312348, 0.33800002932548523)
last accs (train_acc, test_acc) (0.8584000189900398, 0.27400001883506775)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 19%|#9        | 5/26 [00:00<00:00, 21.46it/s] 35%|###4      | 9/26 [00:00<00:00, 27.23it/s] 50%|#####     | 13/26 [00:00<00:00, 30.22it/s] 65%|######5   | 17/26 [00:00<00:00, 31.68it/s] 81%|########  | 21/26 [00:00<00:00, 32.91it/s] 96%|#########6| 25/26 [00:00<00:00, 33.18it/s]100%|##########| 26/26 [00:00<00:00, 28.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.529 (0.524)	train_nll   0.37 (  0.34)	train_penalty   0.04 (  0.02)	weight_norm   0.16 (  0.19)	train_acc   0.82 (  0.85)	train_minacc   0.08 (  0.23)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 12.2125 (11.1941)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.51it/s] 31%|###       | 8/26 [00:00<00:00, 40.65it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.65it/s] 50%|#####     | 13/26 [00:00<00:00, 41.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.57it/s] 96%|#########6| 25/26 [00:00<00:00, 46.08it/s]100%|##########| 26/26 [00:00<00:00, 40.62it/s]
Test: [   0/  26]	Loss 0.327 (0.327)	test_acc   0.86 (  0.86)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.327 (0.327)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.322 (0.330)	test_acc   0.85 (  0.86)	test_minacc   0.13 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.322 (0.330)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.13 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.329 (0.327)	test_acc   0.86 (  0.86)	test_minacc   0.20 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.329 (0.327)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.20 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.317 (0.328)	test_acc   0.84 (  0.86)	test_minacc   0.21 (  0.16)	test_majacc   0.99 (  0.98)	Loss_d 0.317 (0.328)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.21 (  0.16)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.87 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.22it/s]
Test: [  0/  1]	Loss 1.458 (1.458)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   1.00 (  1.00)	Loss_d 1.458 (1.458)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.458 (1.458)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   1.00 (  1.00)	Loss_d 1.458 (1.458)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.68 (  0.68)
Overall Timing[  9/  1]	epoch_time 0.0380 (0.0402)	validation_time 0.0003 (0.0010)	train_time 0.0377 (0.0390)
record: (train_acc, test_acc) (0.8541000230312348, 0.33800002932548523)
last accs (train_acc, test_acc) (0.8595000273585319, 0.2290000170469284)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.50it/s] 19%|#9        | 5/26 [00:00<00:01, 19.10it/s] 35%|###4      | 9/26 [00:00<00:00, 24.98it/s] 50%|#####     | 13/26 [00:00<00:00, 28.76it/s] 65%|######5   | 17/26 [00:00<00:00, 30.66it/s] 81%|########  | 21/26 [00:00<00:00, 31.89it/s] 96%|#########6| 25/26 [00:00<00:00, 32.25it/s]100%|##########| 26/26 [00:00<00:00, 26.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.514 (0.488)	train_nll   0.36 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.16 (  0.15)	train_acc   0.81 (  0.85)	train_minacc   0.19 (  0.23)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 13.8304 (13.1225)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.25it/s] 31%|###       | 8/26 [00:00<00:00, 38.10it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.10it/s] 50%|#####     | 13/26 [00:00<00:00, 41.49it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.92it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.92it/s] 96%|#########6| 25/26 [00:00<00:00, 48.11it/s]100%|##########| 26/26 [00:00<00:00, 41.34it/s]
Test: [   0/  26]	Loss 0.332 (0.332)	test_acc   0.88 (  0.88)	test_minacc   0.19 (  0.19)	test_majacc   0.99 (  0.99)	Loss_d 0.332 (0.332)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.321 (0.327)	test_acc   0.85 (  0.86)	test_minacc   0.18 (  0.16)	test_majacc   0.97 (  0.98)	Loss_d 0.321 (0.327)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.18 (  0.16)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.319 (0.323)	test_acc   0.86 (  0.86)	test_minacc   0.20 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.319 (0.323)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.20 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.318 (0.325)	test_acc   0.82 (  0.86)	test_minacc   0.12 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 0.318 (0.325)	test_acc_d   0.82 (  0.86)	test_minacc_d   0.12 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.20it/s]
Test: [  0/  1]	Loss 1.500 (1.500)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   1.00 (  1.00)	Loss_d 1.500 (1.500)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.500 (1.500)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   1.00 (  1.00)	Loss_d 1.500 (1.500)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.69 (  0.69)
Overall Timing[ 10/  1]	epoch_time 0.0363 (0.0398)	validation_time 0.0004 (0.0010)	train_time 0.0359 (0.0387)
record: (train_acc, test_acc) (0.8541000230312348, 0.33800002932548523)
last accs (train_acc, test_acc) (0.8584000232219696, 0.23100000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.52it/s] 19%|#9        | 5/26 [00:00<00:00, 24.24it/s] 35%|###4      | 9/26 [00:00<00:00, 28.55it/s] 50%|#####     | 13/26 [00:00<00:00, 30.61it/s] 65%|######5   | 17/26 [00:00<00:00, 32.37it/s] 81%|########  | 21/26 [00:00<00:00, 33.73it/s] 96%|#########6| 25/26 [00:00<00:00, 34.52it/s]100%|##########| 26/26 [00:00<00:00, 29.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.444 (0.454)	train_nll   0.34 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.11 (  0.13)	train_acc   0.86 (  0.86)	train_minacc   0.42 (  0.28)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 15.3923 (14.7992)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.12it/s] 27%|##6       | 7/26 [00:00<00:00, 30.54it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.54it/s] 50%|#####     | 13/26 [00:00<00:00, 39.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.85it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.85it/s] 96%|#########6| 25/26 [00:00<00:00, 46.71it/s]100%|##########| 26/26 [00:00<00:00, 38.07it/s]
Test: [   0/  26]	Loss 0.371 (0.371)	test_acc   0.86 (  0.86)	test_minacc   0.46 (  0.46)	test_majacc   0.92 (  0.92)	Loss_d 0.371 (0.371)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.78 (  0.78)
Test: [  10/  26]	Loss 0.333 (0.356)	test_acc   0.87 (  0.84)	test_minacc   0.63 (  0.54)	test_majacc   0.91 (  0.90)	Loss_d 0.333 (0.356)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.63 (  0.54)	test_majacc_d   0.91 (  0.90)	test_corr_d   0.78 (  0.78)
Test: [  20/  26]	Loss 0.350 (0.350)	test_acc   0.85 (  0.85)	test_minacc   0.59 (  0.55)	test_majacc   0.90 (  0.90)	Loss_d 0.350 (0.350)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.59 (  0.55)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.77 (  0.79)
Test: [  26/  26]	Loss 0.304 (0.349)	test_acc   0.91 (  0.85)	test_minacc   0.77 (  0.56)	test_majacc   0.94 (  0.90)	Loss_d 0.304 (0.349)	test_acc_d   0.91 (  0.85)	test_minacc_d   0.77 (  0.56)	test_majacc_d   0.94 (  0.90)	test_corr_d   0.76 (  0.78)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.57it/s]
Test: [  0/  1]	Loss 1.164 (1.164)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.47)	test_majacc   0.96 (  0.96)	Loss_d 1.164 (1.164)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.34 (  0.34)
Test: [  1/  1]	Loss 1.164 (1.164)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.47)	test_majacc   0.96 (  0.96)	Loss_d 1.164 (1.164)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.34 (  0.34)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/39/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0360 (0.0395)	validation_time 0.0004 (0.0009)	train_time 0.0356 (0.0384)
record: (train_acc, test_acc) (0.8497000287175178, 0.5230000019073486)
last accs (train_acc, test_acc) (0.8497000287175178, 0.5230000019073486)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.79it/s] 19%|#9        | 5/26 [00:00<00:01, 20.12it/s] 35%|###4      | 9/26 [00:00<00:00, 25.50it/s] 50%|#####     | 13/26 [00:00<00:00, 27.71it/s] 65%|######5   | 17/26 [00:00<00:00, 28.60it/s] 81%|########  | 21/26 [00:00<00:00, 30.09it/s] 96%|#########6| 25/26 [00:00<00:00, 31.27it/s]100%|##########| 26/26 [00:00<00:00, 26.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.435 (0.433)	train_nll   0.34 (  0.33)	train_penalty   0.03 (  0.02)	weight_norm   0.10 (  0.11)	train_acc   0.84 (  0.86)	train_minacc   0.27 (  0.33)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 16.9247 (16.2969)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 20.95it/s] 35%|###4      | 9/26 [00:00<00:00, 38.73it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.73it/s] 58%|#####7    | 15/26 [00:00<00:00, 42.50it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 42.50it/s] 81%|########  | 21/26 [00:00<00:00, 47.12it/s]100%|##########| 26/26 [00:00<00:00, 41.13it/s]
Test: [   0/  26]	Loss 0.327 (0.327)	test_acc   0.88 (  0.88)	test_minacc   0.35 (  0.35)	test_majacc   0.96 (  0.96)	Loss_d 0.327 (0.327)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.316 (0.326)	test_acc   0.89 (  0.87)	test_minacc   0.53 (  0.43)	test_majacc   0.95 (  0.95)	Loss_d 0.316 (0.326)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.53 (  0.43)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.83 (  0.86)
Test: [  20/  26]	Loss 0.314 (0.321)	test_acc   0.86 (  0.87)	test_minacc   0.41 (  0.43)	test_majacc   0.95 (  0.95)	Loss_d 0.314 (0.321)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.41 (  0.43)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.85 (  0.85)
Test: [  26/  26]	Loss 0.304 (0.322)	test_acc   0.88 (  0.87)	test_minacc   0.48 (  0.43)	test_majacc   0.97 (  0.95)	Loss_d 0.304 (0.322)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.48 (  0.43)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.83 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.52it/s]
Test: [  0/  1]	Loss 1.202 (1.202)	test_acc   0.43 (  0.43)	test_minacc   0.37 (  0.37)	test_majacc   0.97 (  0.97)	Loss_d 1.202 (1.202)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.52 (  0.52)
Test: [  1/  1]	Loss 1.202 (1.202)	test_acc   0.43 (  0.43)	test_minacc   0.37 (  0.37)	test_majacc   0.97 (  0.97)	Loss_d 1.202 (1.202)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.52 (  0.52)
Overall Timing[ 12/  1]	epoch_time 0.0377 (0.0394)	validation_time 0.0004 (0.0009)	train_time 0.0372 (0.0383)
record: (train_acc, test_acc) (0.8497000287175178, 0.5230000019073486)
last accs (train_acc, test_acc) (0.8728000259995461, 0.42600002884864807)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.72it/s] 19%|#9        | 5/26 [00:00<00:00, 22.28it/s] 35%|###4      | 9/26 [00:00<00:00, 27.42it/s] 50%|#####     | 13/26 [00:00<00:00, 30.33it/s] 65%|######5   | 17/26 [00:00<00:00, 31.45it/s] 81%|########  | 21/26 [00:00<00:00, 32.63it/s] 96%|#########6| 25/26 [00:00<00:00, 33.59it/s]100%|##########| 26/26 [00:00<00:00, 28.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.423 (0.413)	train_nll   0.33 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.84 (  0.86)	train_minacc   0.38 (  0.33)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 18.2933 (17.7366)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.56it/s] 31%|###       | 8/26 [00:00<00:00, 41.59it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.59it/s] 50%|#####     | 13/26 [00:00<00:00, 44.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.43it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.43it/s] 96%|#########6| 25/26 [00:00<00:00, 49.00it/s]100%|##########| 26/26 [00:00<00:00, 42.49it/s]
Test: [   0/  26]	Loss 0.316 (0.316)	test_acc   0.90 (  0.90)	test_minacc   0.50 (  0.50)	test_majacc   0.96 (  0.96)	Loss_d 0.316 (0.316)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.299 (0.310)	test_acc   0.89 (  0.87)	test_minacc   0.57 (  0.45)	test_majacc   0.95 (  0.95)	Loss_d 0.299 (0.310)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.57 (  0.45)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.83 (  0.84)
Test: [  20/  26]	Loss 0.303 (0.308)	test_acc   0.87 (  0.88)	test_minacc   0.46 (  0.46)	test_majacc   0.95 (  0.95)	Loss_d 0.303 (0.308)	test_acc_d   0.87 (  0.88)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.84 (  0.84)
Test: [  26/  26]	Loss 0.291 (0.310)	test_acc   0.86 (  0.88)	test_minacc   0.46 (  0.46)	test_majacc   0.96 (  0.95)	Loss_d 0.291 (0.310)	test_acc_d   0.86 (  0.88)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.82 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.42it/s]
Test: [  0/  1]	Loss 1.265 (1.265)	test_acc   0.39 (  0.39)	test_minacc   0.32 (  0.32)	test_majacc   1.00 (  1.00)	Loss_d 1.265 (1.265)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.32 (  0.32)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.50 (  0.50)
Test: [  1/  1]	Loss 1.265 (1.265)	test_acc   0.39 (  0.39)	test_minacc   0.32 (  0.32)	test_majacc   1.00 (  1.00)	Loss_d 1.265 (1.265)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.32 (  0.32)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.50 (  0.50)
Overall Timing[ 13/  1]	epoch_time 0.0356 (0.0391)	validation_time 0.0003 (0.0008)	train_time 0.0353 (0.0381)
record: (train_acc, test_acc) (0.8497000287175178, 0.5230000019073486)
last accs (train_acc, test_acc) (0.8759000205397606, 0.39100003242492676)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.44it/s] 19%|#9        | 5/26 [00:00<00:00, 23.93it/s] 35%|###4      | 9/26 [00:00<00:00, 28.57it/s] 46%|####6     | 12/26 [00:00<00:00, 29.01it/s] 62%|######1   | 16/26 [00:00<00:00, 31.15it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.23it/s] 92%|#########2| 24/26 [00:00<00:00, 32.91it/s]100%|##########| 26/26 [00:00<00:00, 28.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.425 (0.406)	train_nll   0.34 (  0.32)	train_penalty   0.03 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.84 (  0.87)	train_minacc   0.35 (  0.36)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 19.3887 (18.9888)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.46it/s] 31%|###       | 8/26 [00:00<00:00, 39.32it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.32it/s] 50%|#####     | 13/26 [00:00<00:00, 40.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.45it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.45it/s] 96%|#########6| 25/26 [00:00<00:00, 46.86it/s]100%|##########| 26/26 [00:00<00:00, 40.53it/s]
Test: [   0/  26]	Loss 0.318 (0.318)	test_acc   0.89 (  0.89)	test_minacc   0.48 (  0.48)	test_majacc   0.95 (  0.95)	Loss_d 0.318 (0.318)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.299 (0.306)	test_acc   0.87 (  0.87)	test_minacc   0.53 (  0.49)	test_majacc   0.93 (  0.94)	Loss_d 0.299 (0.306)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.82 (  0.83)
Test: [  20/  26]	Loss 0.311 (0.303)	test_acc   0.87 (  0.87)	test_minacc   0.49 (  0.50)	test_majacc   0.93 (  0.94)	Loss_d 0.311 (0.303)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.81 (  0.82)
Test: [  26/  26]	Loss 0.281 (0.303)	test_acc   0.87 (  0.87)	test_minacc   0.50 (  0.50)	test_majacc   0.96 (  0.94)	Loss_d 0.281 (0.303)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.82 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.82it/s]
Test: [  0/  1]	Loss 1.171 (1.171)	test_acc   0.44 (  0.44)	test_minacc   0.38 (  0.38)	test_majacc   0.99 (  0.99)	Loss_d 1.171 (1.171)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.43 (  0.43)
Test: [  1/  1]	Loss 1.171 (1.171)	test_acc   0.44 (  0.44)	test_minacc   0.38 (  0.38)	test_majacc   0.99 (  0.99)	Loss_d 1.171 (1.171)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.43 (  0.43)
Overall Timing[ 14/  1]	epoch_time 0.0364 (0.0389)	validation_time 0.0004 (0.0008)	train_time 0.0360 (0.0380)
record: (train_acc, test_acc) (0.8497000287175178, 0.5230000019073486)
last accs (train_acc, test_acc) (0.8735000234246254, 0.4440000355243683)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.55it/s] 19%|#9        | 5/26 [00:00<00:00, 24.12it/s] 35%|###4      | 9/26 [00:00<00:00, 28.81it/s] 50%|#####     | 13/26 [00:00<00:00, 30.86it/s] 65%|######5   | 17/26 [00:00<00:00, 32.27it/s] 81%|########  | 21/26 [00:00<00:00, 33.00it/s] 96%|#########6| 25/26 [00:00<00:00, 34.06it/s]100%|##########| 26/26 [00:00<00:00, 29.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.004 (0.153)	train_nll   0.50 (  0.38)	train_penalty   0.00 (  0.01)	weight_norm   0.12 (  0.09)	train_acc   0.74 (  0.82)	train_minacc   0.60 (  0.55)	train_majacc   0.77 (  0.87)	train_corr   0.00 (  0.00)	l1 19.8006 (19.8319)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.12it/s] 35%|###4      | 9/26 [00:00<00:00, 41.45it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.45it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.80it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.14it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.14it/s]100%|##########| 26/26 [00:00<00:00, 51.68it/s]100%|##########| 26/26 [00:00<00:00, 42.88it/s]
Test: [   0/  26]	Loss 0.570 (0.570)	test_acc   0.68 (  0.68)	test_minacc   0.59 (  0.59)	test_majacc   0.69 (  0.69)	Loss_d 0.570 (0.570)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.560 (0.569)	test_acc   0.71 (  0.71)	test_minacc   0.67 (  0.72)	test_majacc   0.72 (  0.71)	Loss_d 0.560 (0.569)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.67 (  0.72)	test_majacc_d   0.72 (  0.71)	test_corr_d   0.39 (  0.36)
Test: [  20/  26]	Loss 0.560 (0.572)	test_acc   0.70 (  0.70)	test_minacc   0.68 (  0.70)	test_majacc   0.71 (  0.71)	Loss_d 0.560 (0.572)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.68 (  0.70)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.37 (  0.37)
Test: [  26/  26]	Loss 0.527 (0.576)	test_acc   0.72 (  0.70)	test_minacc   0.67 (  0.69)	test_majacc   0.74 (  0.70)	Loss_d 0.527 (0.576)	test_acc_d   0.72 (  0.70)	test_minacc_d   0.67 (  0.69)	test_majacc_d   0.74 (  0.70)	test_corr_d   0.40 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.72it/s]
Test: [  0/  1]	Loss 0.664 (0.664)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.77 (  0.77)	Loss_d 0.664 (0.664)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.664 (0.664)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.77 (  0.77)	Loss_d 0.664 (0.664)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.19 ( -0.19)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/39/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0360 (0.0387)	validation_time 0.0005 (0.0008)	train_time 0.0355 (0.0378)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.55it/s] 19%|#9        | 5/26 [00:00<00:01, 19.77it/s] 35%|###4      | 9/26 [00:00<00:00, 25.90it/s] 50%|#####     | 13/26 [00:00<00:00, 29.44it/s] 65%|######5   | 17/26 [00:00<00:00, 31.87it/s] 81%|########  | 21/26 [00:00<00:00, 33.58it/s] 96%|#########6| 25/26 [00:00<00:00, 34.88it/s]100%|##########| 26/26 [00:00<00:00, 28.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.67 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.15)	train_acc   0.61 (  0.64)	train_minacc   0.60 (  0.63)	train_majacc   0.61 (  0.64)	train_corr   0.00 (  0.00)	l1 19.2446 (19.5095)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 27%|##6       | 7/26 [00:00<00:00, 36.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.73it/s] 50%|#####     | 13/26 [00:00<00:00, 42.09it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.87it/s] 96%|#########6| 25/26 [00:00<00:00, 48.21it/s]100%|##########| 26/26 [00:00<00:00, 41.01it/s]
Test: [   0/  26]	Loss 0.675 (0.675)	test_acc   0.60 (  0.60)	test_minacc   0.65 (  0.65)	test_majacc   0.59 (  0.59)	Loss_d 0.675 (0.675)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.678 (0.675)	test_acc   0.59 (  0.59)	test_minacc   0.53 (  0.69)	test_majacc   0.60 (  0.58)	Loss_d 0.678 (0.675)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.53 (  0.69)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.11 (  0.04)
Test: [  20/  26]	Loss 0.683 (0.678)	test_acc   0.55 (  0.58)	test_minacc   0.61 (  0.66)	test_majacc   0.54 (  0.57)	Loss_d 0.683 (0.678)	test_acc_d   0.55 (  0.58)	test_minacc_d   0.61 (  0.66)	test_majacc_d   0.54 (  0.57)	test_corr_d   0.05 (  0.05)
Test: [  26/  26]	Loss 0.678 (0.678)	test_acc   0.60 (  0.59)	test_minacc   0.60 (  0.66)	test_majacc   0.60 (  0.57)	Loss_d 0.678 (0.678)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.60 (  0.66)	test_majacc_d   0.60 (  0.57)	test_corr_d   0.07 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.77it/s]
Test: [  0/  1]	Loss 0.644 (0.644)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.57 (  0.57)	Loss_d 0.644 (0.644)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.644 (0.644)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.57 (  0.57)	Loss_d 0.644 (0.644)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 16/  1]	epoch_time 0.0365 (0.0386)	validation_time 0.0004 (0.0008)	train_time 0.0361 (0.0377)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.5850000107884407, 0.6450000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.88it/s] 19%|#9        | 5/26 [00:00<00:00, 22.74it/s] 35%|###4      | 9/26 [00:00<00:00, 27.24it/s] 50%|#####     | 13/26 [00:00<00:00, 29.62it/s] 65%|######5   | 17/26 [00:00<00:00, 30.79it/s] 81%|########  | 21/26 [00:00<00:00, 32.08it/s] 96%|#########6| 25/26 [00:00<00:00, 32.86it/s]100%|##########| 26/26 [00:00<00:00, 28.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.57)	train_minacc   0.60 (  0.62)	train_majacc   0.52 (  0.56)	train_corr   0.00 (  0.00)	l1 19.1107 (19.1545)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.89it/s] 23%|##3       | 6/26 [00:00<00:00, 27.64it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.64it/s] 46%|####6     | 12/26 [00:00<00:00, 36.67it/s] 69%|######9   | 18/26 [00:00<00:00, 44.35it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.35it/s] 92%|#########2| 24/26 [00:00<00:00, 45.60it/s]100%|##########| 26/26 [00:00<00:00, 37.62it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.56 (  0.56)	test_minacc   0.69 (  0.69)	test_majacc   0.54 (  0.54)	Loss_d 0.685 (0.685)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.686 (0.685)	test_acc   0.55 (  0.57)	test_minacc   0.45 (  0.62)	test_majacc   0.57 (  0.56)	Loss_d 0.686 (0.685)	test_acc_d   0.55 (  0.57)	test_minacc_d   0.45 (  0.62)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.13 (  0.08)
Test: [  20/  26]	Loss 0.689 (0.686)	test_acc   0.53 (  0.56)	test_minacc   0.56 (  0.60)	test_majacc   0.53 (  0.55)	Loss_d 0.689 (0.686)	test_acc_d   0.53 (  0.56)	test_minacc_d   0.56 (  0.60)	test_majacc_d   0.53 (  0.55)	test_corr_d   0.07 (  0.09)
Test: [  26/  26]	Loss 0.688 (0.686)	test_acc   0.54 (  0.56)	test_minacc   0.60 (  0.60)	test_majacc   0.52 (  0.56)	Loss_d 0.688 (0.686)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.52 (  0.56)	test_corr_d   0.05 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.53it/s]
Test: [  0/  1]	Loss 0.678 (0.678)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.60 (  0.60)	Loss_d 0.678 (0.678)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.678 (0.678)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.60 (  0.60)	Loss_d 0.678 (0.678)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 17/  1]	epoch_time 0.0374 (0.0385)	validation_time 0.0004 (0.0007)	train_time 0.0370 (0.0377)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.5629000082612038, 0.5900000333786011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.96it/s] 19%|#9        | 5/26 [00:00<00:00, 24.16it/s] 35%|###4      | 9/26 [00:00<00:00, 29.23it/s] 50%|#####     | 13/26 [00:00<00:00, 31.89it/s] 65%|######5   | 17/26 [00:00<00:00, 32.99it/s] 81%|########  | 21/26 [00:00<00:00, 33.70it/s] 96%|#########6| 25/26 [00:00<00:00, 34.20it/s]100%|##########| 26/26 [00:00<00:00, 29.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.51 (  0.53)	train_minacc   0.52 (  0.55)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 19.0951 (19.0983)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.72it/s] 27%|##6       | 7/26 [00:00<00:00, 32.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.78it/s] 50%|#####     | 13/26 [00:00<00:00, 39.81it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.66it/s] 96%|#########6| 25/26 [00:00<00:00, 46.63it/s]100%|##########| 26/26 [00:00<00:00, 38.95it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.58 (  0.54)	test_minacc   0.58 (  0.53)	test_majacc   0.58 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.58 (  0.53)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.49 (  0.51)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.55 (  0.53)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.51)	test_majacc   0.52 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.52 (  0.54)	test_corr_d  -0.09 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.51it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.59 (  0.59)	Loss_d 0.687 (0.687)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.59 (  0.59)	Loss_d 0.687 (0.687)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 18/  1]	epoch_time 0.0372 (0.0385)	validation_time 0.0003 (0.0007)	train_time 0.0369 (0.0376)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.5310000167191029, 0.5870000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.97it/s] 23%|##3       | 6/26 [00:00<00:00, 24.77it/s] 38%|###8      | 10/26 [00:00<00:00, 28.63it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.12it/s] 69%|######9   | 18/26 [00:00<00:00, 32.64it/s] 85%|########4 | 22/26 [00:00<00:00, 33.13it/s]100%|##########| 26/26 [00:00<00:00, 33.75it/s]100%|##########| 26/26 [00:00<00:00, 29.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.46 (  0.48)	train_minacc   0.56 (  0.48)	train_majacc   0.44 (  0.48)	train_corr   0.00 (  0.00)	l1 19.0943 (19.0948)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.70it/s] 35%|###4      | 9/26 [00:00<00:00, 38.53it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.53it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.37it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.37it/s] 81%|########  | 21/26 [00:00<00:00, 46.75it/s]100%|##########| 26/26 [00:00<00:00, 41.88it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.45)	test_minacc   0.57 (  0.47)	test_majacc   0.47 (  0.45)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.45)	test_minacc_d   0.57 (  0.47)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.02 ( -0.03)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.51 (  0.47)	test_majacc   0.45 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.51 (  0.47)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.06 ( -0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.56 (  0.48)	test_majacc   0.44 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.56 (  0.48)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.13 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.27it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.59 (  0.59)	Loss_d 0.689 (0.689)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.59 (  0.59)	Loss_d 0.689 (0.689)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 19/  1]	epoch_time 0.0368 (0.0384)	validation_time 0.0004 (0.0007)	train_time 0.0364 (0.0376)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.4593000048995018, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 19%|#9        | 5/26 [00:00<00:00, 22.43it/s] 35%|###4      | 9/26 [00:00<00:00, 27.99it/s] 50%|#####     | 13/26 [00:00<00:00, 29.55it/s] 65%|######5   | 17/26 [00:00<00:00, 30.14it/s] 81%|########  | 21/26 [00:00<00:00, 30.91it/s] 96%|#########6| 25/26 [00:00<00:00, 31.61it/s]100%|##########| 26/26 [00:00<00:00, 27.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.47 (  0.48)	train_minacc   0.54 (  0.45)	train_majacc   0.45 (  0.48)	train_corr   0.00 (  0.00)	l1 19.0929 (19.0934)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.74it/s] 27%|##6       | 7/26 [00:00<00:00, 31.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.49it/s] 50%|#####     | 13/26 [00:00<00:00, 41.41it/s] 69%|######9   | 18/26 [00:00<00:00, 42.68it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.68it/s] 92%|#########2| 24/26 [00:00<00:00, 47.75it/s]100%|##########| 26/26 [00:00<00:00, 39.23it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.47 (  0.43)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.47 (  0.43)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.00 ( -0.01)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.42 (  0.43)	test_majacc   0.48 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.42 (  0.43)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.54 (  0.44)	test_majacc   0.47 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.54 (  0.44)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.10 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.14it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.45)	test_majacc   0.65 (  0.65)	Loss_d 0.689 (0.689)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.45)	test_majacc   0.65 (  0.65)	Loss_d 0.689 (0.689)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 20/  1]	epoch_time 0.0366 (0.0383)	validation_time 0.0003 (0.0007)	train_time 0.0362 (0.0375)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.49510001003742216, 0.46700000762939453)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 19%|#9        | 5/26 [00:00<00:01, 19.27it/s] 35%|###4      | 9/26 [00:00<00:00, 24.88it/s] 50%|#####     | 13/26 [00:00<00:00, 28.49it/s] 65%|######5   | 17/26 [00:00<00:00, 30.47it/s] 81%|########  | 21/26 [00:00<00:00, 32.08it/s] 96%|#########6| 25/26 [00:00<00:00, 32.62it/s]100%|##########| 26/26 [00:00<00:00, 27.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.47 (  0.50)	train_minacc   0.50 (  0.43)	train_majacc   0.46 (  0.51)	train_corr   0.00 (  0.00)	l1 19.0926 (19.0926)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 27%|##6       | 7/26 [00:00<00:00, 30.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.35it/s] 46%|####6     | 12/26 [00:00<00:00, 37.99it/s] 69%|######9   | 18/26 [00:00<00:00, 41.70it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.70it/s] 92%|#########2| 24/26 [00:00<00:00, 46.56it/s]100%|##########| 26/26 [00:00<00:00, 38.04it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.45 (  0.43)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.45 (  0.43)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.01 ( -0.00)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.41 (  0.42)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.41 (  0.42)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.02 (  0.00)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.42)	test_majacc   0.47 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.42)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.08 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.05it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.46 (  0.46)	test_minacc   0.43 (  0.43)	test_majacc   0.69 (  0.69)	Loss_d 0.690 (0.690)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.46 (  0.46)	test_minacc   0.43 (  0.43)	test_majacc   0.69 (  0.69)	Loss_d 0.690 (0.690)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 21/  1]	epoch_time 0.0366 (0.0382)	validation_time 0.0004 (0.0007)	train_time 0.0362 (0.0375)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.4982000086903572, 0.45900002121925354)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.95it/s] 19%|#9        | 5/26 [00:00<00:01, 20.50it/s] 35%|###4      | 9/26 [00:00<00:00, 25.43it/s] 50%|#####     | 13/26 [00:00<00:00, 28.76it/s] 65%|######5   | 17/26 [00:00<00:00, 31.18it/s] 81%|########  | 21/26 [00:00<00:00, 32.46it/s] 96%|#########6| 25/26 [00:00<00:00, 33.42it/s]100%|##########| 26/26 [00:00<00:00, 28.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.47 (  0.50)	train_minacc   0.52 (  0.42)	train_majacc   0.46 (  0.52)	train_corr   0.00 (  0.00)	l1 19.0924 (19.0925)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.69it/s] 31%|###       | 8/26 [00:00<00:00, 35.72it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.72it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.20it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.15it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.15it/s]100%|##########| 26/26 [00:00<00:00, 50.08it/s]100%|##########| 26/26 [00:00<00:00, 41.61it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.47 (  0.42)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.47 (  0.42)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.01 (  0.01)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.41 (  0.41)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.02 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.52 (  0.41)	test_majacc   0.46 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.52 (  0.41)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.06 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.49it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.69 (  0.69)	Loss_d 0.690 (0.690)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.69 (  0.69)	Loss_d 0.690 (0.690)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 22/  1]	epoch_time 0.0381 (0.0382)	validation_time 0.0004 (0.0007)	train_time 0.0377 (0.0375)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.49570000568032263, 0.4610000252723694)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.86it/s] 15%|#5        | 4/26 [00:00<00:01, 16.35it/s] 31%|###       | 8/26 [00:00<00:00, 24.09it/s] 46%|####6     | 12/26 [00:00<00:00, 28.45it/s] 62%|######1   | 16/26 [00:00<00:00, 30.28it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.26it/s] 92%|#########2| 24/26 [00:00<00:00, 33.77it/s]100%|##########| 26/26 [00:00<00:00, 27.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 312 tensor(-0.0094, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.012)	train_nll   0.70 (  0.72)	train_penalty   0.00 (  0.01)	weight_norm   0.20 (  0.18)	train_acc   0.48 (  0.49)	train_minacc   0.52 (  0.47)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 11.2080 (13.0720)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.33it/s] 31%|###       | 8/26 [00:00<00:00, 41.09it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.09it/s] 50%|#####     | 13/26 [00:00<00:00, 41.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.80it/s] 96%|#########6| 25/26 [00:00<00:00, 47.90it/s]100%|##########| 26/26 [00:00<00:00, 41.43it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.79 (  0.79)
Test: [  10/  26]	Loss 0.693 (0.684)	test_acc   0.47 (  0.51)	test_minacc   0.35 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.684)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.35 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.79 (  0.78)
Test: [  20/  26]	Loss 0.694 (0.687)	test_acc   0.47 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.687)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.78 (  0.78)
Test: [  26/  26]	Loss 0.694 (0.686)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.686)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.81 (  0.78)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.52it/s]
Test: [  0/  1]	Loss 0.715 (0.715)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.715 (0.715)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 0.715 (0.715)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.715 (0.715)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.68 (  0.68)
Overall Timing[ 23/  1]	epoch_time 0.0362 (0.0381)	validation_time 0.0004 (0.0007)	train_time 0.0358 (0.0374)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.500000007212162, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.89it/s] 19%|#9        | 5/26 [00:00<00:01, 20.04it/s] 35%|###4      | 9/26 [00:00<00:00, 26.99it/s] 50%|#####     | 13/26 [00:00<00:00, 30.54it/s] 65%|######5   | 17/26 [00:00<00:00, 32.64it/s] 81%|########  | 21/26 [00:00<00:00, 34.03it/s] 96%|#########6| 25/26 [00:00<00:00, 34.90it/s]100%|##########| 26/26 [00:00<00:00, 28.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.20)	train_acc   0.48 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 10.4809 (10.6920)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.33it/s] 31%|###       | 8/26 [00:00<00:00, 39.36it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.36it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.54it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.97it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.97it/s]100%|##########| 26/26 [00:00<00:00, 51.18it/s]100%|##########| 26/26 [00:00<00:00, 42.53it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.694 (0.688)	test_acc   0.47 (  0.51)	test_minacc   0.35 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.688)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.35 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.72 (  0.72)
Test: [  20/  26]	Loss 0.694 (0.689)	test_acc   0.47 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.689)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.71 (  0.72)
Test: [  26/  26]	Loss 0.694 (0.689)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.689)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.77 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.84it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.701 (0.701)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.701 (0.701)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.53 (  0.53)
Overall Timing[ 24/  1]	epoch_time 0.0352 (0.0380)	validation_time 0.0003 (0.0006)	train_time 0.0349 (0.0373)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.500000007212162, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.11it/s] 19%|#9        | 5/26 [00:00<00:00, 23.30it/s] 35%|###4      | 9/26 [00:00<00:00, 27.34it/s] 50%|#####     | 13/26 [00:00<00:00, 30.06it/s] 65%|######5   | 17/26 [00:00<00:00, 31.91it/s] 81%|########  | 21/26 [00:00<00:00, 33.20it/s] 96%|#########6| 25/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 29.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.48 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 10.4165 (10.4387)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.68it/s] 27%|##6       | 7/26 [00:00<00:00, 36.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.20it/s] 46%|####6     | 12/26 [00:00<00:00, 42.36it/s] 65%|######5   | 17/26 [00:00<00:00, 44.37it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.37it/s] 85%|########4 | 22/26 [00:00<00:00, 45.53it/s]100%|##########| 26/26 [00:00<00:00, 40.79it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.65 (  0.65)
Test: [  10/  26]	Loss 0.694 (0.689)	test_acc   0.47 (  0.51)	test_minacc   0.35 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.689)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.35 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.65 (  0.64)
Test: [  20/  26]	Loss 0.695 (0.690)	test_acc   0.47 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.47 (  0.50)	Loss_d 0.695 (0.690)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.63 (  0.64)
Test: [  26/  26]	Loss 0.694 (0.690)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.690)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.70 (  0.64)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.01it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.698 (0.698)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.40 (  0.40)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.698 (0.698)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.40 (  0.40)
Overall Timing[ 25/  1]	epoch_time 0.0356 (0.0379)	validation_time 0.0003 (0.0006)	train_time 0.0353 (0.0372)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.500000007212162, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.71it/s] 23%|##3       | 6/26 [00:00<00:00, 26.18it/s] 38%|###8      | 10/26 [00:00<00:00, 30.56it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.74it/s] 69%|######9   | 18/26 [00:00<00:00, 33.98it/s] 85%|########4 | 22/26 [00:00<00:00, 34.44it/s]100%|##########| 26/26 [00:00<00:00, 33.59it/s]100%|##########| 26/26 [00:00<00:00, 29.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.48 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 10.4001 (10.4075)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.75it/s] 27%|##6       | 7/26 [00:00<00:00, 29.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.40it/s] 46%|####6     | 12/26 [00:00<00:00, 36.82it/s] 69%|######9   | 18/26 [00:00<00:00, 44.13it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.13it/s] 92%|#########2| 24/26 [00:00<00:00, 45.49it/s]100%|##########| 26/26 [00:00<00:00, 37.14it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.58 (  0.58)
Test: [  10/  26]	Loss 0.694 (0.689)	test_acc   0.47 (  0.51)	test_minacc   0.35 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.689)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.35 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.58 (  0.57)
Test: [  20/  26]	Loss 0.694 (0.690)	test_acc   0.47 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.690)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.56 (  0.58)
Test: [  26/  26]	Loss 0.694 (0.690)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.690)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.63 (  0.58)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.07it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.31 (  0.31)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.31 (  0.31)
Overall Timing[ 26/  1]	epoch_time 0.0356 (0.0378)	validation_time 0.0003 (0.0006)	train_time 0.0353 (0.0371)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.500000007212162, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.97it/s] 19%|#9        | 5/26 [00:00<00:01, 19.65it/s] 35%|###4      | 9/26 [00:00<00:00, 25.21it/s] 50%|#####     | 13/26 [00:00<00:00, 28.65it/s] 65%|######5   | 17/26 [00:00<00:00, 31.05it/s] 81%|########  | 21/26 [00:00<00:00, 32.66it/s] 96%|#########6| 25/26 [00:00<00:00, 33.42it/s]100%|##########| 26/26 [00:00<00:00, 27.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.48 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 10.3899 (10.3951)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.68it/s] 35%|###4      | 9/26 [00:00<00:00, 40.11it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.29it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.29it/s] 81%|########  | 21/26 [00:00<00:00, 47.79it/s]100%|##########| 26/26 [00:00<00:00, 42.57it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.46 (  0.46)
Test: [  10/  26]	Loss 0.694 (0.690)	test_acc   0.47 (  0.51)	test_minacc   0.35 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.690)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.35 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.48 (  0.46)
Test: [  20/  26]	Loss 0.694 (0.691)	test_acc   0.47 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.691)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.45 (  0.47)
Test: [  26/  26]	Loss 0.694 (0.691)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.691)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.51 (  0.47)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.69it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.18)
Overall Timing[ 27/  1]	epoch_time 0.0365 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0360 (0.0371)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.500000007212162, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.55it/s] 19%|#9        | 5/26 [00:00<00:01, 20.59it/s] 35%|###4      | 9/26 [00:00<00:00, 26.22it/s] 50%|#####     | 13/26 [00:00<00:00, 29.01it/s] 65%|######5   | 17/26 [00:00<00:00, 31.03it/s] 81%|########  | 21/26 [00:00<00:00, 32.58it/s] 96%|#########6| 25/26 [00:00<00:00, 32.89it/s]100%|##########| 26/26 [00:00<00:00, 27.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.48 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 10.3817 (10.3859)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.79it/s] 27%|##6       | 7/26 [00:00<00:00, 32.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.51it/s] 50%|#####     | 13/26 [00:00<00:00, 39.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.02it/s] 96%|#########6| 25/26 [00:00<00:00, 47.04it/s]100%|##########| 26/26 [00:00<00:00, 38.68it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.36 (  0.36)
Test: [  10/  26]	Loss 0.694 (0.690)	test_acc   0.47 (  0.51)	test_minacc   0.35 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.690)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.35 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.38 (  0.37)
Test: [  20/  26]	Loss 0.695 (0.691)	test_acc   0.47 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.47 (  0.50)	Loss_d 0.695 (0.691)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.36 (  0.37)
Test: [  26/  26]	Loss 0.694 (0.691)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.691)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.41 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.22it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Overall Timing[ 28/  1]	epoch_time 0.0366 (0.0378)	validation_time 0.0003 (0.0006)	train_time 0.0363 (0.0371)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.500000007212162, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.70it/s] 19%|#9        | 5/26 [00:00<00:00, 23.10it/s] 35%|###4      | 9/26 [00:00<00:00, 28.51it/s] 50%|#####     | 13/26 [00:00<00:00, 31.78it/s] 65%|######5   | 17/26 [00:00<00:00, 33.56it/s] 81%|########  | 21/26 [00:00<00:00, 34.74it/s] 96%|#########6| 25/26 [00:00<00:00, 34.59it/s]100%|##########| 26/26 [00:00<00:00, 29.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.48 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 10.3751 (10.3785)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.29it/s] 27%|##6       | 7/26 [00:00<00:00, 30.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.32it/s] 46%|####6     | 12/26 [00:00<00:00, 36.20it/s] 65%|######5   | 17/26 [00:00<00:00, 40.79it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.79it/s] 88%|########8 | 23/26 [00:00<00:00, 46.22it/s]100%|##########| 26/26 [00:00<00:00, 36.97it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.694 (0.690)	test_acc   0.47 (  0.51)	test_minacc   0.35 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.690)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.35 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.29 (  0.28)
Test: [  20/  26]	Loss 0.695 (0.691)	test_acc   0.47 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.47 (  0.50)	Loss_d 0.695 (0.691)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.28 (  0.29)
Test: [  26/  26]	Loss 0.694 (0.691)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.691)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.32 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.38it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Overall Timing[ 29/  1]	epoch_time 0.0365 (0.0377)	validation_time 0.0003 (0.0006)	train_time 0.0362 (0.0371)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.500000007212162, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.37it/s] 19%|#9        | 5/26 [00:00<00:01, 20.31it/s] 35%|###4      | 9/26 [00:00<00:00, 26.07it/s] 50%|#####     | 13/26 [00:00<00:00, 28.77it/s] 65%|######5   | 17/26 [00:00<00:00, 31.07it/s] 81%|########  | 21/26 [00:00<00:00, 32.54it/s] 96%|#########6| 25/26 [00:00<00:00, 33.64it/s]100%|##########| 26/26 [00:00<00:00, 27.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.48 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 10.3698 (10.3726)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.90it/s] 27%|##6       | 7/26 [00:00<00:00, 35.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.30it/s] 50%|#####     | 13/26 [00:00<00:00, 42.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.42it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.42it/s] 96%|#########6| 25/26 [00:00<00:00, 48.77it/s]100%|##########| 26/26 [00:00<00:00, 41.26it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.694 (0.690)	test_acc   0.47 (  0.51)	test_minacc   0.35 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.690)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.35 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.22 (  0.21)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.21 (  0.22)
Test: [  26/  26]	Loss 0.694 (0.691)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.691)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.25 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.47it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 30/  1]	epoch_time 0.0366 (0.0377)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0370)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.500000007212162, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.53it/s] 19%|#9        | 5/26 [00:00<00:00, 24.24it/s] 35%|###4      | 9/26 [00:00<00:00, 28.33it/s] 50%|#####     | 13/26 [00:00<00:00, 30.92it/s] 65%|######5   | 17/26 [00:00<00:00, 32.44it/s] 81%|########  | 21/26 [00:00<00:00, 33.60it/s] 96%|#########6| 25/26 [00:00<00:00, 34.10it/s]100%|##########| 26/26 [00:00<00:00, 29.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.48 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 10.3654 (10.3677)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s] 19%|#9        | 5/26 [00:00<00:00, 25.78it/s]                                               19%|#9        | 5/26 [00:00<00:00, 25.78it/s] 42%|####2     | 11/26 [00:00<00:00, 38.53it/s] 62%|######1   | 16/26 [00:00<00:00, 41.34it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.34it/s] 85%|########4 | 22/26 [00:00<00:00, 46.53it/s]100%|##########| 26/26 [00:00<00:00, 38.20it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.694 (0.691)	test_acc   0.47 (  0.51)	test_minacc   0.35 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.691)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.35 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.16 (  0.16)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.16 (  0.17)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.19 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.68it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 31/  1]	epoch_time 0.0352 (0.0376)	validation_time 0.0003 (0.0006)	train_time 0.0348 (0.0370)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.500000007212162, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.64it/s] 19%|#9        | 5/26 [00:00<00:00, 23.05it/s] 35%|###4      | 9/26 [00:00<00:00, 28.37it/s] 50%|#####     | 13/26 [00:00<00:00, 31.18it/s] 65%|######5   | 17/26 [00:00<00:00, 32.66it/s] 81%|########  | 21/26 [00:00<00:00, 33.53it/s] 96%|#########6| 25/26 [00:00<00:00, 33.82it/s]100%|##########| 26/26 [00:00<00:00, 29.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.48 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 10.3617 (10.3637)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.13it/s] 31%|###       | 8/26 [00:00<00:00, 40.22it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.22it/s] 50%|#####     | 13/26 [00:00<00:00, 41.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.01it/s] 96%|#########6| 25/26 [00:00<00:00, 47.06it/s]100%|##########| 26/26 [00:00<00:00, 40.97it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.694 (0.691)	test_acc   0.47 (  0.51)	test_minacc   0.35 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.691)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.35 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.12 (  0.12)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.12 (  0.12)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.14 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.46it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 32/  1]	epoch_time 0.0375 (0.0376)	validation_time 0.0004 (0.0006)	train_time 0.0370 (0.0370)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.5002000083625316, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.53it/s] 19%|#9        | 5/26 [00:00<00:00, 24.79it/s] 35%|###4      | 9/26 [00:00<00:00, 30.12it/s] 50%|#####     | 13/26 [00:00<00:00, 32.63it/s] 65%|######5   | 17/26 [00:00<00:00, 33.77it/s] 81%|########  | 21/26 [00:00<00:00, 34.77it/s] 96%|#########6| 25/26 [00:00<00:00, 34.89it/s]100%|##########| 26/26 [00:00<00:00, 30.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.48 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 10.3586 (10.3603)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.40it/s] 35%|###4      | 9/26 [00:00<00:00, 40.09it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.09it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.01it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.01it/s] 81%|########  | 21/26 [00:00<00:00, 48.93it/s]100%|##########| 26/26 [00:00<00:00, 42.71it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.54 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.694 (0.691)	test_acc   0.47 (  0.51)	test_minacc   0.35 (  0.51)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.691)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.35 (  0.51)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.08 (  0.09)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.09 (  0.09)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.11 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.32it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 33/  1]	epoch_time 0.0339 (0.0375)	validation_time 0.0004 (0.0006)	train_time 0.0335 (0.0369)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.50080001065135, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 19%|#9        | 5/26 [00:00<00:00, 22.53it/s] 35%|###4      | 9/26 [00:00<00:00, 26.98it/s] 50%|#####     | 13/26 [00:00<00:00, 29.84it/s] 65%|######5   | 17/26 [00:00<00:00, 32.09it/s] 81%|########  | 21/26 [00:00<00:00, 33.56it/s] 96%|#########6| 25/26 [00:00<00:00, 34.54it/s]100%|##########| 26/26 [00:00<00:00, 28.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.48 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 10.3560 (10.3575)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.85it/s] 27%|##6       | 7/26 [00:00<00:00, 32.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.83it/s] 50%|#####     | 13/26 [00:00<00:00, 40.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.33it/s] 96%|#########6| 25/26 [00:00<00:00, 47.01it/s]100%|##########| 26/26 [00:00<00:00, 39.14it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.54 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.694 (0.691)	test_acc   0.47 (  0.51)	test_minacc   0.35 (  0.51)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.691)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.35 (  0.51)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.05 (  0.06)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.06 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.08 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.54it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 34/  1]	epoch_time 0.0350 (0.0374)	validation_time 0.0004 (0.0006)	train_time 0.0346 (0.0368)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.5028000093698501, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 19%|#9        | 5/26 [00:00<00:00, 23.95it/s] 35%|###4      | 9/26 [00:00<00:00, 27.76it/s] 50%|#####     | 13/26 [00:00<00:00, 30.52it/s] 65%|######5   | 17/26 [00:00<00:00, 31.93it/s] 81%|########  | 21/26 [00:00<00:00, 32.98it/s] 96%|#########6| 25/26 [00:00<00:00, 33.81it/s]100%|##########| 26/26 [00:00<00:00, 29.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.21)	train_acc   0.48 (  0.50)	train_minacc   0.50 (  0.51)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 10.3538 (10.3550)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.39it/s] 31%|###       | 8/26 [00:00<00:00, 39.85it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.85it/s] 50%|#####     | 13/26 [00:00<00:00, 41.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.55it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.55it/s] 96%|#########6| 25/26 [00:00<00:00, 48.07it/s]100%|##########| 26/26 [00:00<00:00, 41.30it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.57 (  0.57)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.691)	test_acc   0.48 (  0.51)	test_minacc   0.37 (  0.52)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.691)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.37 (  0.52)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.03 (  0.04)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.04 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.50 (  0.51)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.06 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.80it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 35/  1]	epoch_time 0.0363 (0.0374)	validation_time 0.0003 (0.0006)	train_time 0.0360 (0.0368)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.5040000129938126, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.83it/s] 19%|#9        | 5/26 [00:00<00:00, 24.22it/s] 35%|###4      | 9/26 [00:00<00:00, 29.30it/s] 50%|#####     | 13/26 [00:00<00:00, 31.58it/s] 65%|######5   | 17/26 [00:00<00:00, 33.06it/s] 81%|########  | 21/26 [00:00<00:00, 33.92it/s] 96%|#########6| 25/26 [00:00<00:00, 34.53it/s]100%|##########| 26/26 [00:00<00:00, 29.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.48 (  0.51)	train_minacc   0.52 (  0.51)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 10.3519 (10.3530)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 27%|##6       | 7/26 [00:00<00:00, 33.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.17it/s] 50%|#####     | 13/26 [00:00<00:00, 39.81it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.23it/s] 96%|#########6| 25/26 [00:00<00:00, 46.68it/s]100%|##########| 26/26 [00:00<00:00, 38.98it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.691)	test_acc   0.47 (  0.52)	test_minacc   0.37 (  0.52)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.691)	test_acc_d   0.47 (  0.52)	test_minacc_d   0.37 (  0.52)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.01 (  0.02)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.47 (  0.52)	test_majacc   0.48 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.04 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.18it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 36/  1]	epoch_time 0.0367 (0.0374)	validation_time 0.0004 (0.0006)	train_time 0.0363 (0.0368)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.5070000118613243, 0.5170000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 19%|#9        | 5/26 [00:00<00:01, 20.93it/s] 35%|###4      | 9/26 [00:00<00:00, 26.66it/s] 50%|#####     | 13/26 [00:00<00:00, 30.14it/s] 65%|######5   | 17/26 [00:00<00:00, 32.40it/s] 81%|########  | 21/26 [00:00<00:00, 32.78it/s] 96%|#########6| 25/26 [00:00<00:00, 33.06it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.49 (  0.51)	train_minacc   0.50 (  0.53)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 10.3502 (10.3512)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.11it/s] 27%|##6       | 7/26 [00:00<00:00, 35.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.37it/s] 46%|####6     | 12/26 [00:00<00:00, 41.62it/s] 65%|######5   | 17/26 [00:00<00:00, 44.37it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.37it/s] 88%|########8 | 23/26 [00:00<00:00, 49.14it/s]100%|##########| 26/26 [00:00<00:00, 40.31it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.61 (  0.61)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.40 (  0.55)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.40 (  0.55)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.00 (  0.01)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.47 (  0.54)	test_majacc   0.48 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.47 (  0.54)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.01 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.51)	test_minacc   0.50 (  0.53)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.87it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 37/  1]	epoch_time 0.0352 (0.0373)	validation_time 0.0003 (0.0005)	train_time 0.0348 (0.0367)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.5086000102758408, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.13it/s] 19%|#9        | 5/26 [00:00<00:01, 17.94it/s] 35%|###4      | 9/26 [00:00<00:00, 23.95it/s] 50%|#####     | 13/26 [00:00<00:00, 27.15it/s] 65%|######5   | 17/26 [00:00<00:00, 29.61it/s] 81%|########  | 21/26 [00:00<00:00, 31.09it/s] 96%|#########6| 25/26 [00:00<00:00, 31.92it/s]100%|##########| 26/26 [00:00<00:00, 26.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.51)	train_minacc   0.54 (  0.54)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 10.3488 (10.3496)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.24it/s] 27%|##6       | 7/26 [00:00<00:00, 32.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.94it/s] 50%|#####     | 13/26 [00:00<00:00, 38.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.88it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.88it/s] 96%|#########6| 25/26 [00:00<00:00, 46.10it/s]100%|##########| 26/26 [00:00<00:00, 38.38it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.61 (  0.61)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.43 (  0.56)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.43 (  0.56)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.01 (  0.00)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.50)	test_minacc   0.51 (  0.56)	test_majacc   0.46 (  0.49)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.51 (  0.56)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.00 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.54 (  0.55)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.02 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.10it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 38/  1]	epoch_time 0.0364 (0.0373)	validation_time 0.0003 (0.0005)	train_time 0.0361 (0.0367)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.5045000101923942, 0.5360000133514404)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.69it/s] 19%|#9        | 5/26 [00:00<00:00, 23.16it/s] 35%|###4      | 9/26 [00:00<00:00, 27.60it/s] 50%|#####     | 13/26 [00:00<00:00, 30.18it/s] 65%|######5   | 17/26 [00:00<00:00, 31.98it/s] 81%|########  | 21/26 [00:00<00:00, 33.52it/s] 96%|#########6| 25/26 [00:00<00:00, 34.14it/s]100%|##########| 26/26 [00:00<00:00, 29.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.48 (  0.50)	train_minacc   0.56 (  0.55)	train_majacc   0.46 (  0.49)	train_corr   0.00 (  0.00)	l1 10.3476 (10.3483)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.78it/s] 31%|###       | 8/26 [00:00<00:00, 40.95it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.95it/s] 50%|#####     | 13/26 [00:00<00:00, 41.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.83it/s] 96%|#########6| 25/26 [00:00<00:00, 47.50it/s]100%|##########| 26/26 [00:00<00:00, 41.19it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.63 (  0.63)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.47 (  0.58)	test_majacc   0.48 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.47 (  0.58)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.02 ( -0.01)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.49 (  0.57)	test_majacc   0.46 (  0.49)	Loss_d 0.694 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.49 (  0.57)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.01 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.58it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 39/  1]	epoch_time 0.0357 (0.0372)	validation_time 0.0004 (0.0005)	train_time 0.0352 (0.0366)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.5019000119566918, 0.5509999990463257)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.15it/s] 23%|##3       | 6/26 [00:00<00:00, 26.14it/s] 38%|###8      | 10/26 [00:00<00:00, 30.65it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.75it/s] 69%|######9   | 18/26 [00:00<00:00, 34.31it/s] 85%|########4 | 22/26 [00:00<00:00, 35.27it/s]100%|##########| 26/26 [00:00<00:00, 36.07it/s]100%|##########| 26/26 [00:00<00:00, 30.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.47 (  0.50)	train_minacc   0.56 (  0.57)	train_majacc   0.45 (  0.49)	train_corr   0.00 (  0.00)	l1 10.3465 (10.3471)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.89it/s] 27%|##6       | 7/26 [00:00<00:00, 36.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.50it/s] 46%|####6     | 12/26 [00:00<00:00, 39.52it/s] 69%|######9   | 18/26 [00:00<00:00, 46.58it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.58it/s] 92%|#########2| 24/26 [00:00<00:00, 47.25it/s]100%|##########| 26/26 [00:00<00:00, 40.75it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.67 (  0.67)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.46 (  0.51)	test_minacc   0.47 (  0.59)	test_majacc   0.46 (  0.49)	Loss_d 0.694 (0.692)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.47 (  0.59)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.03 ( -0.02)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.51 (  0.58)	test_majacc   0.45 (  0.48)	Loss_d 0.694 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.51 (  0.58)	test_majacc_d   0.45 (  0.48)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.47 (  0.50)	test_minacc   0.56 (  0.57)	test_majacc   0.45 (  0.48)	Loss_d 0.693 (0.692)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.56 (  0.57)	test_majacc_d   0.45 (  0.48)	test_corr_d  -0.00 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.18it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 40/  1]	epoch_time 0.0346 (0.0372)	validation_time 0.0003 (0.0005)	train_time 0.0343 (0.0366)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.49780001136660573, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.99it/s] 19%|#9        | 5/26 [00:00<00:00, 21.16it/s] 35%|###4      | 9/26 [00:00<00:00, 26.79it/s] 50%|#####     | 13/26 [00:00<00:00, 29.06it/s] 65%|######5   | 17/26 [00:00<00:00, 30.63it/s] 81%|########  | 21/26 [00:00<00:00, 32.45it/s] 96%|#########6| 25/26 [00:00<00:00, 33.28it/s]100%|##########| 26/26 [00:00<00:00, 27.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.47 (  0.50)	train_minacc   0.58 (  0.58)	train_majacc   0.45 (  0.48)	train_corr   0.00 (  0.00)	l1 10.3456 (10.3461)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.68it/s] 27%|##6       | 7/26 [00:00<00:00, 30.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.37it/s] 50%|#####     | 13/26 [00:00<00:00, 40.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.54it/s] 96%|#########6| 25/26 [00:00<00:00, 48.84it/s]100%|##########| 26/26 [00:00<00:00, 40.58it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.70 (  0.70)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.47 (  0.60)	test_majacc   0.46 (  0.48)	Loss_d 0.694 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.47 (  0.60)	test_majacc_d   0.46 (  0.48)	test_corr_d  -0.04 ( -0.02)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.53 (  0.58)	test_majacc   0.46 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.46 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.47 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.45 (  0.48)	Loss_d 0.693 (0.692)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.45 (  0.48)	test_corr_d  -0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.58it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 41/  1]	epoch_time 0.0361 (0.0372)	validation_time 0.0004 (0.0005)	train_time 0.0357 (0.0366)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.4940000115931034, 0.5690000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.40it/s] 19%|#9        | 5/26 [00:00<00:00, 23.23it/s] 35%|###4      | 9/26 [00:00<00:00, 28.09it/s] 50%|#####     | 13/26 [00:00<00:00, 30.05it/s] 65%|######5   | 17/26 [00:00<00:00, 31.49it/s] 81%|########  | 21/26 [00:00<00:00, 32.45it/s] 96%|#########6| 25/26 [00:00<00:00, 32.95it/s]100%|##########| 26/26 [00:00<00:00, 28.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.47 (  0.49)	train_minacc   0.58 (  0.58)	train_majacc   0.45 (  0.47)	train_corr   0.00 (  0.00)	l1 10.3448 (10.3453)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.89it/s] 27%|##6       | 7/26 [00:00<00:00, 36.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.20it/s] 50%|#####     | 13/26 [00:00<00:00, 42.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.08it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.08it/s] 92%|#########2| 24/26 [00:00<00:00, 47.62it/s]100%|##########| 26/26 [00:00<00:00, 40.47it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.72 (  0.72)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.47 (  0.62)	test_majacc   0.45 (  0.48)	Loss_d 0.693 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.47 (  0.62)	test_majacc_d   0.45 (  0.48)	test_corr_d  -0.04 ( -0.03)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.53 (  0.59)	test_majacc   0.46 (  0.47)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.53 (  0.59)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.03 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.47 (  0.49)	test_minacc   0.58 (  0.59)	test_majacc   0.45 (  0.47)	Loss_d 0.693 (0.692)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.58 (  0.59)	test_majacc_d   0.45 (  0.47)	test_corr_d  -0.01 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.56it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 42/  1]	epoch_time 0.0369 (0.0371)	validation_time 0.0004 (0.0005)	train_time 0.0365 (0.0366)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.49010000601410864, 0.578000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 19%|#9        | 5/26 [00:00<00:01, 19.82it/s] 35%|###4      | 9/26 [00:00<00:00, 25.38it/s] 50%|#####     | 13/26 [00:00<00:00, 28.93it/s] 65%|######5   | 17/26 [00:00<00:00, 30.91it/s] 81%|########  | 21/26 [00:00<00:00, 32.16it/s] 96%|#########6| 25/26 [00:00<00:00, 33.18it/s]100%|##########| 26/26 [00:00<00:00, 27.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.48 (  0.49)	train_minacc   0.58 (  0.59)	train_majacc   0.46 (  0.47)	train_corr   0.00 (  0.00)	l1 10.3441 (10.3445)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.87it/s] 27%|##6       | 7/26 [00:00<00:00, 29.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.90it/s] 50%|#####     | 13/26 [00:00<00:00, 38.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.69it/s] 96%|#########6| 25/26 [00:00<00:00, 46.07it/s]100%|##########| 26/26 [00:00<00:00, 37.15it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.72 (  0.72)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.45 (  0.49)	test_minacc   0.47 (  0.62)	test_majacc   0.45 (  0.47)	Loss_d 0.693 (0.692)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.47 (  0.62)	test_majacc_d   0.45 (  0.47)	test_corr_d  -0.05 ( -0.03)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.54 (  0.60)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.54 (  0.60)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.49)	test_minacc   0.58 (  0.59)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.58 (  0.59)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.01 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.79it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 43/  1]	epoch_time 0.0365 (0.0371)	validation_time 0.0004 (0.0005)	train_time 0.0361 (0.0366)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.48820000579953193, 0.5800000429153442)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.65it/s] 19%|#9        | 5/26 [00:00<00:01, 19.10it/s] 35%|###4      | 9/26 [00:00<00:00, 24.78it/s] 50%|#####     | 13/26 [00:00<00:00, 28.43it/s] 65%|######5   | 17/26 [00:00<00:00, 30.88it/s] 81%|########  | 21/26 [00:00<00:00, 32.46it/s] 96%|#########6| 25/26 [00:00<00:00, 33.26it/s]100%|##########| 26/26 [00:00<00:00, 27.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.48 (  0.48)	train_minacc   0.60 (  0.60)	train_majacc   0.45 (  0.46)	train_corr   0.00 (  0.00)	l1 10.3434 (10.3438)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.55it/s] 27%|##6       | 7/26 [00:00<00:00, 31.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.21it/s] 46%|####6     | 12/26 [00:00<00:00, 38.12it/s] 65%|######5   | 17/26 [00:00<00:00, 41.25it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.25it/s] 88%|########8 | 23/26 [00:00<00:00, 47.40it/s]100%|##########| 26/26 [00:00<00:00, 37.32it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.72 (  0.72)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.45 (  0.49)	test_minacc   0.47 (  0.63)	test_majacc   0.44 (  0.46)	Loss_d 0.693 (0.692)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.47 (  0.63)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.05 ( -0.03)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.54 (  0.60)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.54 (  0.60)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.60 (  0.60)	test_majacc   0.45 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.02 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.00it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 44/  1]	epoch_time 0.0357 (0.0371)	validation_time 0.0003 (0.0005)	train_time 0.0354 (0.0365)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.4836000116765499, 0.5890000462532043)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.08it/s] 19%|#9        | 5/26 [00:00<00:00, 22.07it/s] 35%|###4      | 9/26 [00:00<00:00, 27.61it/s] 50%|#####     | 13/26 [00:00<00:00, 30.65it/s] 65%|######5   | 17/26 [00:00<00:00, 32.47it/s] 81%|########  | 21/26 [00:00<00:00, 33.66it/s] 96%|#########6| 25/26 [00:00<00:00, 34.49it/s]100%|##########| 26/26 [00:00<00:00, 29.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.48 (  0.48)	train_minacc   0.60 (  0.61)	train_majacc   0.45 (  0.46)	train_corr   0.00 (  0.00)	l1 10.3429 (10.3432)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.48it/s] 27%|##6       | 7/26 [00:00<00:00, 32.92it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.92it/s] 46%|####6     | 12/26 [00:00<00:00, 37.84it/s] 69%|######9   | 18/26 [00:00<00:00, 45.02it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.02it/s] 92%|#########2| 24/26 [00:00<00:00, 46.05it/s]100%|##########| 26/26 [00:00<00:00, 38.22it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.72 (  0.72)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.44 (  0.49)	test_minacc   0.50 (  0.63)	test_majacc   0.43 (  0.46)	Loss_d 0.693 (0.692)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.50 (  0.63)	test_majacc_d   0.43 (  0.46)	test_corr_d  -0.05 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.54 (  0.61)	test_majacc   0.45 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.54 (  0.61)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.60 (  0.61)	test_majacc   0.45 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.60 (  0.61)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.02 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.89it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 45/  1]	epoch_time 0.0370 (0.0371)	validation_time 0.0004 (0.0005)	train_time 0.0366 (0.0365)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.4830000105500221, 0.5910000205039978)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.83it/s] 19%|#9        | 5/26 [00:00<00:00, 21.55it/s] 35%|###4      | 9/26 [00:00<00:00, 26.80it/s] 50%|#####     | 13/26 [00:00<00:00, 30.43it/s] 65%|######5   | 17/26 [00:00<00:00, 31.84it/s] 81%|########  | 21/26 [00:00<00:00, 33.20it/s] 96%|#########6| 25/26 [00:00<00:00, 33.99it/s]100%|##########| 26/26 [00:00<00:00, 28.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.48 (  0.48)	train_minacc   0.60 (  0.62)	train_majacc   0.45 (  0.46)	train_corr   0.00 (  0.00)	l1 10.3424 (10.3427)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.92it/s] 31%|###       | 8/26 [00:00<00:00, 42.40it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.40it/s] 50%|#####     | 13/26 [00:00<00:00, 43.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.67it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.67it/s] 96%|#########6| 25/26 [00:00<00:00, 48.76it/s]100%|##########| 26/26 [00:00<00:00, 42.60it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.72 (  0.72)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.44 (  0.49)	test_minacc   0.50 (  0.64)	test_majacc   0.42 (  0.46)	Loss_d 0.693 (0.692)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.50 (  0.64)	test_majacc_d   0.42 (  0.46)	test_corr_d  -0.05 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.56 (  0.62)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.56 (  0.62)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.04 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.60 (  0.62)	test_majacc   0.45 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.60 (  0.62)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.02 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.89it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 46/  1]	epoch_time 0.0361 (0.0371)	validation_time 0.0004 (0.0005)	train_time 0.0357 (0.0365)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.482700009405613, 0.5950000286102295)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.17it/s] 27%|##6       | 7/26 [00:00<00:00, 28.71it/s] 42%|####2     | 11/26 [00:00<00:00, 31.58it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.56it/s] 88%|########8 | 23/26 [00:00<00:00, 34.78it/s]100%|##########| 26/26 [00:00<00:00, 30.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.48 (  0.48)	train_minacc   0.62 (  0.62)	train_majacc   0.45 (  0.46)	train_corr   0.00 (  0.00)	l1 10.3419 (10.3422)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.34it/s] 27%|##6       | 7/26 [00:00<00:00, 30.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.68it/s] 50%|#####     | 13/26 [00:00<00:00, 38.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.28it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.28it/s] 96%|#########6| 25/26 [00:00<00:00, 46.41it/s]100%|##########| 26/26 [00:00<00:00, 37.65it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.72 (  0.72)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.44 (  0.48)	test_minacc   0.52 (  0.64)	test_majacc   0.43 (  0.46)	Loss_d 0.693 (0.692)	test_acc_d   0.44 (  0.48)	test_minacc_d   0.52 (  0.64)	test_majacc_d   0.43 (  0.46)	test_corr_d  -0.06 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.56 (  0.62)	test_majacc   0.44 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.56 (  0.62)	test_majacc_d   0.44 (  0.45)	test_corr_d  -0.05 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.62 (  0.62)	test_majacc   0.45 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.02 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.30it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 47/  1]	epoch_time 0.0352 (0.0370)	validation_time 0.0003 (0.0005)	train_time 0.0349 (0.0365)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.48060001322627066, 0.5990000367164612)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.46it/s] 19%|#9        | 5/26 [00:00<00:00, 22.00it/s] 35%|###4      | 9/26 [00:00<00:00, 26.47it/s] 50%|#####     | 13/26 [00:00<00:00, 29.38it/s] 65%|######5   | 17/26 [00:00<00:00, 30.58it/s] 81%|########  | 21/26 [00:00<00:00, 31.92it/s] 96%|#########6| 25/26 [00:00<00:00, 32.53it/s]100%|##########| 26/26 [00:00<00:00, 27.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.48 (  0.48)	train_minacc   0.65 (  0.62)	train_majacc   0.45 (  0.45)	train_corr   0.00 (  0.00)	l1 10.3415 (10.3418)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.33it/s] 35%|###4      | 9/26 [00:00<00:00, 41.46it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.46it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.51it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.54it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.54it/s]100%|##########| 26/26 [00:00<00:00, 51.95it/s]100%|##########| 26/26 [00:00<00:00, 43.73it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.74 (  0.74)	test_majacc   0.45 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.44 (  0.48)	test_minacc   0.50 (  0.64)	test_majacc   0.43 (  0.46)	Loss_d 0.693 (0.692)	test_acc_d   0.44 (  0.48)	test_minacc_d   0.50 (  0.64)	test_majacc_d   0.43 (  0.46)	test_corr_d  -0.06 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.58 (  0.62)	test_majacc   0.44 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.58 (  0.62)	test_majacc_d   0.44 (  0.45)	test_corr_d  -0.05 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.65 (  0.62)	test_majacc   0.45 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.65 (  0.62)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.02 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.74it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 48/  1]	epoch_time 0.0355 (0.0370)	validation_time 0.0004 (0.0005)	train_time 0.0351 (0.0365)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.4802000134587288, 0.6050000190734863)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.44it/s] 19%|#9        | 5/26 [00:00<00:00, 22.03it/s] 35%|###4      | 9/26 [00:00<00:00, 27.84it/s] 50%|#####     | 13/26 [00:00<00:00, 30.64it/s] 65%|######5   | 17/26 [00:00<00:00, 31.42it/s] 81%|########  | 21/26 [00:00<00:00, 32.86it/s] 96%|#########6| 25/26 [00:00<00:00, 33.32it/s]100%|##########| 26/26 [00:00<00:00, 28.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.48 (  0.48)	train_minacc   0.65 (  0.62)	train_majacc   0.44 (  0.45)	train_corr   0.00 (  0.00)	l1 10.3412 (10.3414)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.59it/s] 35%|###4      | 9/26 [00:00<00:00, 38.54it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.54it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.35it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.35it/s] 81%|########  | 21/26 [00:00<00:00, 46.67it/s]100%|##########| 26/26 [00:00<00:00, 42.05it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.74 (  0.74)	test_majacc   0.45 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.44 (  0.48)	test_minacc   0.52 (  0.64)	test_majacc   0.42 (  0.45)	Loss_d 0.693 (0.692)	test_acc_d   0.44 (  0.48)	test_minacc_d   0.52 (  0.64)	test_majacc_d   0.42 (  0.45)	test_corr_d  -0.06 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.59 (  0.62)	test_majacc   0.44 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.59 (  0.62)	test_majacc_d   0.44 (  0.45)	test_corr_d  -0.05 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.65 (  0.62)	test_majacc   0.44 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.65 (  0.62)	test_majacc_d   0.44 (  0.45)	test_corr_d  -0.02 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.47it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 49/  1]	epoch_time 0.0351 (0.0370)	validation_time 0.0003 (0.0005)	train_time 0.0348 (0.0364)
record: (train_acc, test_acc) (0.7005000299811364, 0.6690000295639038)
last accs (train_acc, test_acc) (0.478000009894371, 0.6110000014305115)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.097 MB of 0.097 MB uploadedwandb: \ 0.097 MB of 0.097 MB uploadedwandb: | 0.097 MB of 0.097 MB uploadedwandb: / 0.097 MB of 0.097 MB uploadedwandb: - 0.097 MB of 0.097 MB uploadedwandb: \ 0.119 MB of 0.127 MB uploaded (0.003 MB deduped)wandb: | 0.493 MB of 0.493 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/diagnostics/epoch_time_val █▂▁▁▁▁▁▂▁▁▂▁▁▁▂▂▁▁▂▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▂▁▂▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/diagnostics/train_time_val █▂▁▁▁▂▂▂▂▁▂▁▁▂▂▂▂▂▂▂▁▁▂▂▂▁▂▁▂▂▁▂▁▂▂▂▂▂▁▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/Loss_avg ▇▇▆▆█▆▅▆▇▅▅▅▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/Loss_d_avg ▇▇▆▆█▆▅▆▇▅▅▅▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/Loss_d_val ▇▇▆▆█▆▅▆▇▅▅▅▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/Loss_val ▇▇▆▆█▆▅▆▇▅▅▅▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_acc_avg ▁▁▁▁▂▂▄▃▃▆▅▅██▇▇▆▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_acc_d_avg ▁▁▁▁▂▂▄▃▃▆▅▅██▇▇▆▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_acc_d_val ▁▁▁▁▂▂▄▃▃▆▅▅██▇▇▆▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_acc_val ▁▁▁▁▂▂▄▃▃▆▅▅██▇▇▆▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_corr_d_avg ████▇▇▅▆▆▅▆▅▂▁▁▂▂▂▂▆▅▄▄▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_corr_d_val ████▇▇▅▆▆▅▆▅▂▁▁▂▂▂▂▆▅▄▄▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_majacc_avg █████████▇██▅▂▂▂▃▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_majacc_d_avg █████████▇██▅▂▂▂▃▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_majacc_d_val █████████▇██▅▂▂▂▃▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_majacc_val █████████▇██▅▂▂▂▃▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_minacc_avg ▁▁▁▁▂▂▄▃▃▆▅▄██▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇█
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_minacc_d_avg ▁▁▁▁▂▂▄▃▃▆▅▄██▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇█
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_minacc_d_val ▁▁▁▁▂▂▄▃▃▆▅▄██▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇█
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_minacc_val ▁▁▁▁▂▂▄▃▃▆▅▄██▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇█
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/Loss_val █▅▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/l1_avg ▂▂▁▁▁▂▂▃▅▆▆▇███████▅▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/l1_val ▂▁▁▁▁▂▃▃▅▆▇▇███████▄▄▄▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_acc_avg ▇███████████▇▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_acc_val ▇▇▇▇▇▇▇▇▇███▆▄▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_majacc_avg ▇███████████▆▃▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_majacc_val ████████▇██▇▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_minacc_avg ▂▁▁▂▃▂▂▃▃▄▅▅▇██▇▆▆▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_minacc_val ▁▁▁▁▂▁▂▂▃▅▄▅███▇▇▆▇▇▇▇▇▇▇▇▇▇▆▇▆▇▇▇▇▇████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_nll_avg ▅▃▂▂▂▂▂▁▁▁▁▁▂▇▇▇▇▇▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_nll_val ▄▄▄▃▃▂▂▂▁▁▁▁▄███████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_penalty_avg █▃▃▃▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_penalty_val █▇▇▆▅▅▅▅▃▃▄▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/diagnostics/epoch_time_val 0.03512
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/diagnostics/train_time_val 0.03476
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/diagnostics/validation_time_val 0.00034
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/Loss_avg 0.69079
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/Loss_d_avg 0.69079
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/Loss_d_val 0.69079
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/Loss_val 0.69079
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_acc_avg 0.611
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_acc_d_avg 0.611
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_acc_d_val 0.611
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_acc_val 0.611
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_corr_d_avg -0.20562
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_corr_d_val -0.20562
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_majacc_avg 0.53
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_majacc_d_avg 0.53
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_majacc_d_val 0.53
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_majacc_val 0.53
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_minacc_avg 0.62
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_minacc_d_avg 0.62
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_minacc_d_val 0.62
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/test/test_minacc_val 0.62
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/l1_avg 10.34142
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/l1_val 10.34118
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_acc_avg 0.4773
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_acc_val 0.48
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_majacc_avg 0.45227
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_majacc_val 0.44059
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_minacc_avg 0.61977
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_minacc_val 0.64583
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_nll_avg 0.69277
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_nll_val 0.69272
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/weight_norm_avg 0.2003
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/39/logs/train/weight_norm_val 0.20011
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/2xucv1sf
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_152738-2xucv1sf/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_153008-630tnm71
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/630tnm71
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=13.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1189
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6015, 3, 32, 32) (5985, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:43,  1.72s/it] 19%|#9        | 5/26 [00:01<00:05,  3.54it/s] 35%|###4      | 9/26 [00:01<00:02,  6.97it/s] 50%|#####     | 13/26 [00:02<00:01, 10.61it/s] 65%|######5   | 17/26 [00:02<00:00, 14.43it/s] 81%|########  | 21/26 [00:02<00:00, 18.46it/s] 96%|#########6| 25/26 [00:02<00:00, 21.90it/s]100%|##########| 26/26 [00:02<00:00,  9.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.258 (12.175)	train_nll   0.40 (  0.56)	train_penalty   0.05 (  0.33)	weight_norm   8.86 ( 11.62)	train_acc   0.87 (  0.81)	train_minacc   0.03 (  0.06)	train_majacc   0.99 (  0.94)	train_corr   0.00 (  0.00)	l1 7.2361 (8.5868)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.90it/s] 23%|##3       | 6/26 [00:00<00:00, 30.26it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.26it/s] 46%|####6     | 12/26 [00:00<00:00, 40.71it/s] 69%|######9   | 18/26 [00:00<00:00, 47.52it/s]                                                69%|######9   | 18/26 [00:00<00:00, 47.52it/s] 88%|########8 | 23/26 [00:00<00:00, 47.25it/s]100%|##########| 26/26 [00:00<00:00, 41.68it/s]
Test: [   0/  26]	Loss 0.413 (0.413)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.413 (0.413)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.370 (0.408)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.370 (0.408)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.98)
Test: [  20/  26]	Loss 0.342 (0.410)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.342 (0.410)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.382 (0.410)	test_acc   0.88 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.382 (0.410)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]
Test: [  0/  1]	Loss 1.724 (1.724)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.724 (1.724)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.724 (1.724)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.724 (1.724)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/40/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0758 (0.0758)	validation_time 0.0067 (0.0067)	train_time 0.0657 (0.0657)
record: (train_acc, test_acc) (0.8463000264167786, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8463000264167786, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.14it/s] 19%|#9        | 5/26 [00:00<00:00, 23.50it/s] 35%|###4      | 9/26 [00:00<00:00, 28.30it/s] 50%|#####     | 13/26 [00:00<00:00, 31.10it/s] 65%|######5   | 17/26 [00:00<00:00, 32.73it/s] 81%|########  | 21/26 [00:00<00:00, 33.42it/s] 96%|#########6| 25/26 [00:00<00:00, 33.80it/s]100%|##########| 26/26 [00:00<00:00, 29.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.709 (6.588)	train_nll   0.41 (  0.42)	train_penalty   0.04 (  0.06)	weight_norm   4.30 (  6.17)	train_acc   0.87 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.3679 (6.8857)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.78it/s] 27%|##6       | 7/26 [00:00<00:00, 35.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.09it/s] 50%|#####     | 13/26 [00:00<00:00, 41.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.36it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.36it/s] 96%|#########6| 25/26 [00:00<00:00, 47.66it/s]100%|##########| 26/26 [00:00<00:00, 40.35it/s]
Test: [   0/  26]	Loss 0.401 (0.401)	test_acc   0.86 (  0.86)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.401 (0.401)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.367 (0.405)	test_acc   0.87 (  0.85)	test_minacc   0.02 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.367 (0.405)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.02 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.353 (0.406)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.353 (0.406)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.395 (0.405)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.395 (0.405)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.06it/s]
Test: [  0/  1]	Loss 1.543 (1.543)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.543 (1.543)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.543 (1.543)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.543 (1.543)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/40/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0358 (0.0558)	validation_time 0.0006 (0.0036)	train_time 0.0352 (0.0504)
record: (train_acc, test_acc) (0.8478000247478485, 0.11900000274181366)
last accs (train_acc, test_acc) (0.8478000247478485, 0.11900000274181366)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.60it/s] 19%|#9        | 5/26 [00:00<00:01, 14.83it/s] 35%|###4      | 9/26 [00:00<00:00, 21.67it/s] 50%|#####     | 13/26 [00:00<00:00, 26.01it/s] 65%|######5   | 17/26 [00:00<00:00, 28.92it/s] 81%|########  | 21/26 [00:00<00:00, 30.96it/s] 96%|#########6| 25/26 [00:00<00:00, 32.34it/s]100%|##########| 26/26 [00:01<00:00, 24.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.838 (3.632)	train_nll   0.37 (  0.40)	train_penalty   0.04 (  0.05)	weight_norm   2.47 (  3.23)	train_acc   0.87 (  0.85)	train_minacc   0.00 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.4178 (5.9317)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.77it/s] 27%|##6       | 7/26 [00:00<00:00, 33.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.94it/s] 50%|#####     | 13/26 [00:00<00:00, 40.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.77it/s] 96%|#########6| 25/26 [00:00<00:00, 47.28it/s]100%|##########| 26/26 [00:00<00:00, 39.84it/s]
Test: [   0/  26]	Loss 0.401 (0.401)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   0.98 (  0.98)	Loss_d 0.401 (0.401)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.340 (0.393)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.340 (0.393)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.357 (0.395)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.357 (0.395)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.351 (0.395)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.351 (0.395)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.33it/s]
Test: [  0/  1]	Loss 1.676 (1.676)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.676 (1.676)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.676 (1.676)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.676 (1.676)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  2/  1]	epoch_time 0.0349 (0.0489)	validation_time 0.0003 (0.0025)	train_time 0.0346 (0.0452)
record: (train_acc, test_acc) (0.8478000247478485, 0.11900000274181366)
last accs (train_acc, test_acc) (0.8469000296592712, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.78it/s] 19%|#9        | 5/26 [00:00<00:01, 19.55it/s] 35%|###4      | 9/26 [00:00<00:00, 25.26it/s] 50%|#####     | 13/26 [00:00<00:00, 28.86it/s] 65%|######5   | 17/26 [00:00<00:00, 30.96it/s] 81%|########  | 21/26 [00:00<00:00, 32.36it/s] 96%|#########6| 25/26 [00:00<00:00, 32.91it/s]100%|##########| 26/26 [00:00<00:00, 27.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.999 (2.437)	train_nll   0.37 (  0.41)	train_penalty   0.04 (  0.05)	weight_norm   1.63 (  2.03)	train_acc   0.86 (  0.84)	train_minacc   0.00 (  0.04)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 4.5725 (4.9147)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 27%|##6       | 7/26 [00:00<00:00, 33.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.98it/s] 50%|#####     | 13/26 [00:00<00:00, 39.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.28it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.28it/s] 96%|#########6| 25/26 [00:00<00:00, 47.25it/s]100%|##########| 26/26 [00:00<00:00, 39.67it/s]
Test: [   0/  26]	Loss 0.409 (0.409)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.409 (0.409)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.341 (0.392)	test_acc   0.87 (  0.85)	test_minacc   0.02 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.341 (0.392)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.02 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.358 (0.393)	test_acc   0.88 (  0.84)	test_minacc   0.00 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.358 (0.393)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.00 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.341 (0.393)	test_acc   0.87 (  0.85)	test_minacc   0.03 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.341 (0.393)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.03 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.15it/s]
Test: [  0/  1]	Loss 1.647 (1.647)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.97 (  0.97)	Loss_d 1.647 (1.647)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.647 (1.647)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.97 (  0.97)	Loss_d 1.647 (1.647)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/40/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0356 (0.0455)	validation_time 0.0004 (0.0020)	train_time 0.0352 (0.0427)
record: (train_acc, test_acc) (0.8455000250935555, 0.14600001275539398)
last accs (train_acc, test_acc) (0.8455000250935555, 0.14600001275539398)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.72it/s] 19%|#9        | 5/26 [00:00<00:00, 22.97it/s] 35%|###4      | 9/26 [00:00<00:00, 27.10it/s] 50%|#####     | 13/26 [00:00<00:00, 29.05it/s] 65%|######5   | 17/26 [00:00<00:00, 30.72it/s] 81%|########  | 21/26 [00:00<00:00, 31.77it/s] 96%|#########6| 25/26 [00:00<00:00, 32.59it/s]100%|##########| 26/26 [00:00<00:00, 28.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.356 (1.657)	train_nll   0.34 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm   1.02 (  1.28)	train_acc   0.87 (  0.85)	train_minacc   0.03 (  0.04)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 4.9857 (4.7374)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 23%|##3       | 6/26 [00:00<00:00, 29.65it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.65it/s] 46%|####6     | 12/26 [00:00<00:00, 38.62it/s] 69%|######9   | 18/26 [00:00<00:00, 45.81it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.81it/s] 92%|#########2| 24/26 [00:00<00:00, 46.94it/s]100%|##########| 26/26 [00:00<00:00, 39.39it/s]
Test: [   0/  26]	Loss 0.363 (0.363)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.363 (0.363)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.308 (0.361)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.308 (0.361)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.332 (0.364)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.332 (0.364)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.308 (0.363)	test_acc   0.87 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.308 (0.363)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.38it/s]
Test: [  0/  1]	Loss 1.720 (1.720)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   0.98 (  0.98)	Loss_d 1.720 (1.720)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.720 (1.720)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   0.98 (  0.98)	Loss_d 1.720 (1.720)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.86 (  0.86)
Overall Timing[  4/  1]	epoch_time 0.0353 (0.0435)	validation_time 0.0004 (0.0017)	train_time 0.0349 (0.0411)
record: (train_acc, test_acc) (0.8455000250935555, 0.14600001275539398)
last accs (train_acc, test_acc) (0.8481000202894211, 0.1290000081062317)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.99it/s] 19%|#9        | 5/26 [00:00<00:00, 23.25it/s] 35%|###4      | 9/26 [00:00<00:00, 28.30it/s] 50%|#####     | 13/26 [00:00<00:00, 31.05it/s] 65%|######5   | 17/26 [00:00<00:00, 32.43it/s] 81%|########  | 21/26 [00:00<00:00, 33.38it/s] 96%|#########6| 25/26 [00:00<00:00, 34.22it/s]100%|##########| 26/26 [00:00<00:00, 29.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.019 (1.191)	train_nll   0.34 (  0.37)	train_penalty   0.02 (  0.03)	weight_norm   0.68 (  0.82)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.06)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 5.5749 (5.3646)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.06it/s] 31%|###       | 8/26 [00:00<00:00, 39.18it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.18it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.85it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.20it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.20it/s]100%|##########| 26/26 [00:00<00:00, 51.45it/s]100%|##########| 26/26 [00:00<00:00, 43.40it/s]
Test: [   0/  26]	Loss 0.341 (0.341)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.341 (0.341)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.321 (0.355)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.321 (0.355)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.322 (0.358)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.322 (0.358)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.306 (0.357)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.306 (0.357)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.75it/s]
Test: [  0/  1]	Loss 1.716 (1.716)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.716 (1.716)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.716 (1.716)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.716 (1.716)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
Overall Timing[  5/  1]	epoch_time 0.0345 (0.0420)	validation_time 0.0003 (0.0014)	train_time 0.0342 (0.0400)
record: (train_acc, test_acc) (0.8455000250935555, 0.14600001275539398)
last accs (train_acc, test_acc) (0.8490000260472298, 0.10700000822544098)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.19it/s] 19%|#9        | 5/26 [00:00<00:00, 24.17it/s] 35%|###4      | 9/26 [00:00<00:00, 28.74it/s] 50%|#####     | 13/26 [00:00<00:00, 31.44it/s] 65%|######5   | 17/26 [00:00<00:00, 33.29it/s] 81%|########  | 21/26 [00:00<00:00, 34.59it/s] 96%|#########6| 25/26 [00:00<00:00, 34.87it/s]100%|##########| 26/26 [00:00<00:00, 30.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.815 (0.911)	train_nll   0.36 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.46 (  0.55)	train_acc   0.85 (  0.84)	train_minacc   0.31 (  0.10)	train_majacc   0.93 (  0.98)	train_corr   0.00 (  0.00)	l1 6.6739 (6.2201)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.58it/s] 27%|##6       | 7/26 [00:00<00:00, 34.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.48it/s] 50%|#####     | 13/26 [00:00<00:00, 43.43it/s] 69%|######9   | 18/26 [00:00<00:00, 44.47it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.47it/s] 92%|#########2| 24/26 [00:00<00:00, 49.29it/s]100%|##########| 26/26 [00:00<00:00, 41.59it/s]
Test: [   0/  26]	Loss 0.339 (0.339)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.339 (0.339)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.330 (0.355)	test_acc   0.88 (  0.85)	test_minacc   0.12 (  0.11)	test_majacc   0.99 (  0.98)	Loss_d 0.330 (0.355)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.12 (  0.11)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.319 (0.358)	test_acc   0.90 (  0.85)	test_minacc   0.20 (  0.12)	test_majacc   0.99 (  0.98)	Loss_d 0.319 (0.358)	test_acc_d   0.90 (  0.85)	test_minacc_d   0.20 (  0.12)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.312 (0.357)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.312 (0.357)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.83it/s]
Test: [  0/  1]	Loss 1.603 (1.603)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 1.603 (1.603)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.603 (1.603)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 1.603 (1.603)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.83 (  0.83)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/40/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0340 (0.0408)	validation_time 0.0003 (0.0013)	train_time 0.0337 (0.0391)
record: (train_acc, test_acc) (0.8518000311851501, 0.18200001120567322)
last accs (train_acc, test_acc) (0.8518000311851501, 0.18200001120567322)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.29it/s] 19%|#9        | 5/26 [00:00<00:01, 20.70it/s] 35%|###4      | 9/26 [00:00<00:00, 27.25it/s] 50%|#####     | 13/26 [00:00<00:00, 30.74it/s] 65%|######5   | 17/26 [00:00<00:00, 32.94it/s] 81%|########  | 21/26 [00:00<00:00, 34.29it/s] 96%|#########6| 25/26 [00:00<00:00, 35.02it/s]100%|##########| 26/26 [00:00<00:00, 29.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.637 (0.732)	train_nll   0.33 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.30 (  0.38)	train_acc   0.84 (  0.85)	train_minacc   0.03 (  0.07)	train_majacc   0.96 (  0.98)	train_corr   0.00 (  0.00)	l1 8.7896 (7.9159)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 35.55it/s] 35%|###4      | 9/26 [00:00<00:00, 42.37it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.37it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.82it/s] 77%|#######6  | 20/26 [00:00<00:00, 50.30it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 50.30it/s]100%|##########| 26/26 [00:00<00:00, 51.75it/s]100%|##########| 26/26 [00:00<00:00, 44.76it/s]
Test: [   0/  26]	Loss 0.354 (0.354)	test_acc   0.85 (  0.85)	test_minacc   0.19 (  0.19)	test_majacc   0.96 (  0.96)	Loss_d 0.354 (0.354)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.324 (0.351)	test_acc   0.87 (  0.85)	test_minacc   0.12 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.324 (0.351)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.12 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.327 (0.358)	test_acc   0.88 (  0.85)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.327 (0.358)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.89)
Test: [  26/  26]	Loss 0.308 (0.357)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.11)	test_majacc   0.99 (  0.98)	Loss_d 0.308 (0.357)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.11)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.90 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.34it/s]
Test: [  0/  1]	Loss 1.574 (1.574)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.95 (  0.95)	Loss_d 1.574 (1.574)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.574 (1.574)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.95 (  0.95)	Loss_d 1.574 (1.574)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.75 (  0.75)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/40/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0339 (0.0400)	validation_time 0.0004 (0.0012)	train_time 0.0335 (0.0384)
record: (train_acc, test_acc) (0.8489000235199928, 0.20800000429153442)
last accs (train_acc, test_acc) (0.8489000235199928, 0.20800000429153442)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 19%|#9        | 5/26 [00:00<00:00, 21.72it/s] 35%|###4      | 9/26 [00:00<00:00, 27.06it/s] 50%|#####     | 13/26 [00:00<00:00, 30.26it/s] 65%|######5   | 17/26 [00:00<00:00, 30.95it/s] 81%|########  | 21/26 [00:00<00:00, 32.30it/s] 96%|#########6| 25/26 [00:00<00:00, 33.22it/s]100%|##########| 26/26 [00:00<00:00, 28.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.617 (0.618)	train_nll   0.36 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.26 (  0.26)	train_acc   0.85 (  0.85)	train_minacc   0.09 (  0.10)	train_majacc   0.96 (  0.98)	train_corr   0.00 (  0.00)	l1 10.3903 (9.6759)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.35it/s] 35%|###4      | 9/26 [00:00<00:00, 41.71it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.71it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.37it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.37it/s] 81%|########  | 21/26 [00:00<00:00, 48.64it/s]100%|##########| 26/26 [00:00<00:00, 43.69it/s]
Test: [   0/  26]	Loss 0.334 (0.334)	test_acc   0.86 (  0.86)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.334 (0.334)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.320 (0.343)	test_acc   0.88 (  0.85)	test_minacc   0.10 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.320 (0.343)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.10 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.90)
Test: [  20/  26]	Loss 0.317 (0.345)	test_acc   0.89 (  0.85)	test_minacc   0.16 (  0.10)	test_majacc   0.99 (  0.98)	Loss_d 0.317 (0.345)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.16 (  0.10)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.310 (0.345)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.10)	test_majacc   0.98 (  0.99)	Loss_d 0.310 (0.345)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.10)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.92 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.54it/s]
Test: [  0/  1]	Loss 1.546 (1.546)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 1.546 (1.546)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.546 (1.546)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 1.546 (1.546)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.79 (  0.79)
Overall Timing[  8/  1]	epoch_time 0.0342 (0.0393)	validation_time 0.0003 (0.0011)	train_time 0.0339 (0.0379)
record: (train_acc, test_acc) (0.8489000235199928, 0.20800000429153442)
last accs (train_acc, test_acc) (0.8520000217556953, 0.1850000023841858)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.26it/s] 15%|#5        | 4/26 [00:00<00:01, 20.36it/s] 31%|###       | 8/26 [00:00<00:00, 26.22it/s] 46%|####6     | 12/26 [00:00<00:00, 29.27it/s] 62%|######1   | 16/26 [00:00<00:00, 31.21it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.68it/s] 92%|#########2| 24/26 [00:00<00:00, 32.46it/s]100%|##########| 26/26 [00:00<00:00, 28.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.543 (0.551)	train_nll   0.37 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.17 (  0.20)	train_acc   0.84 (  0.84)	train_minacc   0.28 (  0.10)	train_majacc   0.93 (  0.98)	train_corr   0.00 (  0.00)	l1 12.0850 (11.4126)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.25it/s] 27%|##6       | 7/26 [00:00<00:00, 35.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.69it/s] 50%|#####     | 13/26 [00:00<00:00, 41.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.29it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.29it/s] 96%|#########6| 25/26 [00:00<00:00, 48.13it/s]100%|##########| 26/26 [00:00<00:00, 41.62it/s]
Test: [   0/  26]	Loss 0.332 (0.332)	test_acc   0.87 (  0.87)	test_minacc   0.46 (  0.46)	test_majacc   0.95 (  0.95)	Loss_d 0.332 (0.332)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.307 (0.338)	test_acc   0.85 (  0.85)	test_minacc   0.33 (  0.40)	test_majacc   0.93 (  0.93)	Loss_d 0.307 (0.338)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.33 (  0.40)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.87 (  0.86)
Test: [  20/  26]	Loss 0.319 (0.338)	test_acc   0.87 (  0.85)	test_minacc   0.38 (  0.38)	test_majacc   0.94 (  0.93)	Loss_d 0.319 (0.338)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.87 (  0.86)
Test: [  26/  26]	Loss 0.308 (0.338)	test_acc   0.87 (  0.85)	test_minacc   0.31 (  0.38)	test_majacc   0.95 (  0.93)	Loss_d 0.308 (0.338)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.31 (  0.38)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.89 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.98it/s]
Test: [  0/  1]	Loss 1.344 (1.344)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.91 (  0.91)	Loss_d 1.344 (1.344)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.62 (  0.62)
Test: [  1/  1]	Loss 1.344 (1.344)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.91 (  0.91)	Loss_d 1.344 (1.344)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.62 (  0.62)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/40/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0361 (0.0390)	validation_time 0.0004 (0.0010)	train_time 0.0357 (0.0376)
record: (train_acc, test_acc) (0.8512000235915184, 0.3800000250339508)
last accs (train_acc, test_acc) (0.8512000235915184, 0.3800000250339508)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.69it/s] 19%|#9        | 5/26 [00:00<00:00, 23.71it/s] 35%|###4      | 9/26 [00:00<00:00, 28.81it/s] 50%|#####     | 13/26 [00:00<00:00, 31.15it/s] 65%|######5   | 17/26 [00:00<00:00, 32.57it/s] 81%|########  | 21/26 [00:00<00:00, 33.64it/s] 96%|#########6| 25/26 [00:00<00:00, 33.93it/s]100%|##########| 26/26 [00:00<00:00, 29.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.514 (0.495)	train_nll   0.37 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.14 (  0.15)	train_acc   0.84 (  0.85)	train_minacc   0.06 (  0.16)	train_majacc   0.95 (  0.97)	train_corr   0.00 (  0.00)	l1 13.7905 (13.0876)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.77it/s] 27%|##6       | 7/26 [00:00<00:00, 34.00it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.00it/s] 46%|####6     | 12/26 [00:00<00:00, 39.59it/s] 69%|######9   | 18/26 [00:00<00:00, 46.88it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.88it/s] 92%|#########2| 24/26 [00:00<00:00, 47.47it/s]100%|##########| 26/26 [00:00<00:00, 41.11it/s]
Test: [   0/  26]	Loss 0.334 (0.334)	test_acc   0.86 (  0.86)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.334 (0.334)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.297 (0.335)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.297 (0.335)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.90)
Test: [  20/  26]	Loss 0.308 (0.337)	test_acc   0.89 (  0.85)	test_minacc   0.18 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.308 (0.337)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.18 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.91)
Test: [  26/  26]	Loss 0.298 (0.337)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.298 (0.337)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.71it/s]
Test: [  0/  1]	Loss 1.506 (1.506)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 1.506 (1.506)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.506 (1.506)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 1.506 (1.506)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.76 (  0.76)
Overall Timing[ 10/  1]	epoch_time 0.0357 (0.0387)	validation_time 0.0004 (0.0009)	train_time 0.0353 (0.0374)
record: (train_acc, test_acc) (0.8512000235915184, 0.3800000250339508)
last accs (train_acc, test_acc) (0.8505000254511833, 0.21900001168251038)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.64it/s] 23%|##3       | 6/26 [00:00<00:00, 27.22it/s] 38%|###8      | 10/26 [00:00<00:00, 29.81it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.37it/s] 69%|######9   | 18/26 [00:00<00:00, 32.01it/s] 85%|########4 | 22/26 [00:00<00:00, 33.12it/s]100%|##########| 26/26 [00:00<00:00, 33.68it/s]100%|##########| 26/26 [00:00<00:00, 29.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.478 (0.469)	train_nll   0.37 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.11 (  0.13)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.15)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 15.5232 (14.7504)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.86it/s] 27%|##6       | 7/26 [00:00<00:00, 34.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.13it/s] 50%|#####     | 13/26 [00:00<00:00, 43.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.48it/s] 96%|#########6| 25/26 [00:00<00:00, 49.28it/s]100%|##########| 26/26 [00:00<00:00, 41.64it/s]
Test: [   0/  26]	Loss 0.339 (0.339)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.339 (0.339)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.317 (0.344)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.317 (0.344)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.303 (0.346)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.303 (0.346)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.313 (0.345)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.313 (0.345)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.61it/s]
Test: [  0/  1]	Loss 1.728 (1.728)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.728 (1.728)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.728 (1.728)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.728 (1.728)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Overall Timing[ 11/  1]	epoch_time 0.0355 (0.0384)	validation_time 0.0003 (0.0009)	train_time 0.0352 (0.0372)
record: (train_acc, test_acc) (0.8512000235915184, 0.3800000250339508)
last accs (train_acc, test_acc) (0.8487000295519829, 0.11800000816583633)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.05it/s] 15%|#5        | 4/26 [00:00<00:01, 14.46it/s] 31%|###       | 8/26 [00:00<00:00, 22.34it/s] 46%|####6     | 12/26 [00:00<00:00, 26.74it/s] 62%|######1   | 16/26 [00:00<00:00, 29.59it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.48it/s] 92%|#########2| 24/26 [00:00<00:00, 32.64it/s]100%|##########| 26/26 [00:00<00:00, 26.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.417 (0.455)	train_nll   0.31 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.11 (  0.11)	train_acc   0.86 (  0.84)	train_minacc   0.00 (  0.14)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 16.8305 (16.0961)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.57it/s] 27%|##6       | 7/26 [00:00<00:00, 37.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.23it/s] 50%|#####     | 13/26 [00:00<00:00, 42.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.54it/s] 96%|#########6| 25/26 [00:00<00:00, 48.01it/s]100%|##########| 26/26 [00:00<00:00, 41.34it/s]
Test: [   0/  26]	Loss 0.347 (0.347)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.347 (0.347)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.301 (0.341)	test_acc   0.88 (  0.85)	test_minacc   0.06 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.301 (0.341)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.06 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.312 (0.342)	test_acc   0.89 (  0.85)	test_minacc   0.11 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.312 (0.342)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.11 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.299 (0.342)	test_acc   0.87 (  0.85)	test_minacc   0.03 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.299 (0.342)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.03 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.00it/s]
Test: [  0/  1]	Loss 1.607 (1.607)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.607 (1.607)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.607 (1.607)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.607 (1.607)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
Overall Timing[ 12/  1]	epoch_time 0.0347 (0.0382)	validation_time 0.0004 (0.0009)	train_time 0.0343 (0.0370)
record: (train_acc, test_acc) (0.8512000235915184, 0.3800000250339508)
last accs (train_acc, test_acc) (0.8499000304341316, 0.15900000929832458)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.16it/s] 19%|#9        | 5/26 [00:00<00:01, 19.39it/s] 35%|###4      | 9/26 [00:00<00:00, 24.35it/s] 50%|#####     | 13/26 [00:00<00:00, 28.21it/s] 65%|######5   | 17/26 [00:00<00:00, 30.11it/s] 81%|########  | 21/26 [00:00<00:00, 31.87it/s] 96%|#########6| 25/26 [00:00<00:00, 32.98it/s]100%|##########| 26/26 [00:00<00:00, 27.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.415 (0.440)	train_nll   0.32 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.10)	train_acc   0.85 (  0.85)	train_minacc   0.16 (  0.18)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 17.8921 (17.3862)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.77it/s] 31%|###       | 8/26 [00:00<00:00, 40.86it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.86it/s] 50%|#####     | 13/26 [00:00<00:00, 42.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.58it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.58it/s] 96%|#########6| 25/26 [00:00<00:00, 48.55it/s]100%|##########| 26/26 [00:00<00:00, 42.24it/s]
Test: [   0/  26]	Loss 0.324 (0.324)	test_acc   0.86 (  0.86)	test_minacc   0.28 (  0.28)	test_majacc   0.95 (  0.95)	Loss_d 0.324 (0.324)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.311 (0.330)	test_acc   0.85 (  0.85)	test_minacc   0.17 (  0.23)	test_majacc   0.95 (  0.96)	Loss_d 0.311 (0.330)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.17 (  0.23)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.299 (0.331)	test_acc   0.88 (  0.85)	test_minacc   0.27 (  0.22)	test_majacc   0.96 (  0.97)	Loss_d 0.299 (0.331)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.27 (  0.22)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.294 (0.330)	test_acc   0.87 (  0.85)	test_minacc   0.19 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.294 (0.330)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.19 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.16it/s]
Test: [  0/  1]	Loss 1.478 (1.478)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.97 (  0.97)	Loss_d 1.478 (1.478)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.70 (  0.70)
Test: [  1/  1]	Loss 1.478 (1.478)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.97 (  0.97)	Loss_d 1.478 (1.478)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.70 (  0.70)
Overall Timing[ 13/  1]	epoch_time 0.0364 (0.0380)	validation_time 0.0004 (0.0008)	train_time 0.0360 (0.0369)
record: (train_acc, test_acc) (0.8512000235915184, 0.3800000250339508)
last accs (train_acc, test_acc) (0.8548000220060349, 0.23400001227855682)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.89it/s] 19%|#9        | 5/26 [00:00<00:01, 20.82it/s] 35%|###4      | 9/26 [00:00<00:00, 25.62it/s] 50%|#####     | 13/26 [00:00<00:00, 27.87it/s] 65%|######5   | 17/26 [00:00<00:00, 29.76it/s] 81%|########  | 21/26 [00:00<00:00, 31.76it/s] 96%|#########6| 25/26 [00:00<00:00, 32.66it/s]100%|##########| 26/26 [00:00<00:00, 27.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.394 (0.421)	train_nll   0.31 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.86 (  0.85)	train_minacc   0.22 (  0.22)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 18.8482 (18.4336)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.81it/s] 31%|###       | 8/26 [00:00<00:00, 39.20it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.20it/s] 50%|#####     | 13/26 [00:00<00:00, 41.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.65it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.65it/s] 96%|#########6| 25/26 [00:00<00:00, 47.99it/s]100%|##########| 26/26 [00:00<00:00, 41.15it/s]
Test: [   0/  26]	Loss 0.321 (0.321)	test_acc   0.85 (  0.85)	test_minacc   0.37 (  0.37)	test_majacc   0.94 (  0.94)	Loss_d 0.321 (0.321)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.314 (0.329)	test_acc   0.86 (  0.86)	test_minacc   0.27 (  0.34)	test_majacc   0.94 (  0.95)	Loss_d 0.314 (0.329)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.27 (  0.34)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.298 (0.328)	test_acc   0.86 (  0.85)	test_minacc   0.33 (  0.32)	test_majacc   0.93 (  0.95)	Loss_d 0.298 (0.328)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.33 (  0.32)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.281 (0.326)	test_acc   0.88 (  0.85)	test_minacc   0.28 (  0.32)	test_majacc   0.97 (  0.95)	Loss_d 0.281 (0.326)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.28 (  0.32)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.90 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.80it/s]
Test: [  0/  1]	Loss 1.491 (1.491)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 1.491 (1.491)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.71 (  0.71)
Test: [  1/  1]	Loss 1.491 (1.491)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 1.491 (1.491)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.71 (  0.71)
Overall Timing[ 14/  1]	epoch_time 0.0375 (0.0380)	validation_time 0.0004 (0.0008)	train_time 0.0371 (0.0370)
record: (train_acc, test_acc) (0.8512000235915184, 0.3800000250339508)
last accs (train_acc, test_acc) (0.8536000298857689, 0.2800000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.67it/s] 19%|#9        | 5/26 [00:00<00:00, 24.91it/s] 35%|###4      | 9/26 [00:00<00:00, 30.05it/s] 50%|#####     | 13/26 [00:00<00:00, 31.85it/s] 65%|######5   | 17/26 [00:00<00:00, 32.65it/s] 81%|########  | 21/26 [00:00<00:00, 33.82it/s] 96%|#########6| 25/26 [00:00<00:00, 34.76it/s]100%|##########| 26/26 [00:00<00:00, 30.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.003 (0.165)	train_nll   0.64 (  0.42)	train_penalty   0.00 (  0.01)	weight_norm   0.12 (  0.09)	train_acc   0.64 (  0.79)	train_minacc   0.69 (  0.49)	train_majacc   0.63 (  0.84)	train_corr   0.00 (  0.00)	l1 19.2336 (19.2373)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.29it/s] 27%|##6       | 7/26 [00:00<00:00, 27.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.12it/s] 50%|#####     | 13/26 [00:00<00:00, 34.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.76it/s] 96%|#########6| 25/26 [00:00<00:00, 43.29it/s]100%|##########| 26/26 [00:00<00:00, 35.11it/s]
Test: [   0/  26]	Loss 0.582 (0.582)	test_acc   0.66 (  0.66)	test_minacc   0.74 (  0.74)	test_majacc   0.65 (  0.65)	Loss_d 0.582 (0.582)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.34 (  0.34)
Test: [  10/  26]	Loss 0.564 (0.583)	test_acc   0.68 (  0.68)	test_minacc   0.79 (  0.76)	test_majacc   0.66 (  0.66)	Loss_d 0.564 (0.583)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.36 (  0.32)
Test: [  20/  26]	Loss 0.602 (0.584)	test_acc   0.66 (  0.68)	test_minacc   0.67 (  0.76)	test_majacc   0.66 (  0.67)	Loss_d 0.602 (0.584)	test_acc_d   0.66 (  0.68)	test_minacc_d   0.67 (  0.76)	test_majacc_d   0.66 (  0.67)	test_corr_d   0.34 (  0.32)
Test: [  26/  26]	Loss 0.610 (0.584)	test_acc   0.67 (  0.68)	test_minacc   0.66 (  0.74)	test_majacc   0.67 (  0.67)	Loss_d 0.610 (0.584)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.66 (  0.74)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.35 (  0.32)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.69it/s]
Test: [  0/  1]	Loss 0.652 (0.652)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.62 (  0.62)	Loss_d 0.652 (0.652)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.652 (0.652)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.62 (  0.62)	Loss_d 0.652 (0.652)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.23 ( -0.23)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/40/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0359 (0.0379)	validation_time 0.0003 (0.0008)	train_time 0.0356 (0.0369)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.89it/s] 19%|#9        | 5/26 [00:00<00:00, 24.15it/s] 35%|###4      | 9/26 [00:00<00:00, 29.42it/s] 50%|#####     | 13/26 [00:00<00:00, 32.32it/s] 65%|######5   | 17/26 [00:00<00:00, 33.89it/s] 81%|########  | 21/26 [00:00<00:00, 35.10it/s] 96%|#########6| 25/26 [00:00<00:00, 35.36it/s]100%|##########| 26/26 [00:00<00:00, 30.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.14)	train_acc   0.58 (  0.63)	train_minacc   0.56 (  0.65)	train_majacc   0.59 (  0.62)	train_corr   0.00 (  0.00)	l1 19.0056 (19.0741)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.55it/s] 31%|###       | 8/26 [00:00<00:00, 37.78it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.78it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.35it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.13it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.13it/s]100%|##########| 26/26 [00:00<00:00, 50.38it/s]100%|##########| 26/26 [00:00<00:00, 41.94it/s]
Test: [   0/  26]	Loss 0.678 (0.678)	test_acc   0.48 (  0.48)	test_minacc   0.65 (  0.65)	test_majacc   0.46 (  0.46)	Loss_d 0.678 (0.678)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.675 (0.678)	test_acc   0.55 (  0.54)	test_minacc   0.69 (  0.69)	test_majacc   0.53 (  0.51)	Loss_d 0.675 (0.678)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.15 (  0.06)
Test: [  20/  26]	Loss 0.688 (0.680)	test_acc   0.49 (  0.54)	test_minacc   0.60 (  0.67)	test_majacc   0.48 (  0.52)	Loss_d 0.688 (0.680)	test_acc_d   0.49 (  0.54)	test_minacc_d   0.60 (  0.67)	test_majacc_d   0.48 (  0.52)	test_corr_d   0.09 (  0.07)
Test: [  26/  26]	Loss 0.665 (0.679)	test_acc   0.57 (  0.54)	test_minacc   0.56 (  0.66)	test_majacc   0.57 (  0.52)	Loss_d 0.665 (0.679)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.56 (  0.66)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.19 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.71it/s]
Test: [  0/  1]	Loss 0.663 (0.663)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.46 (  0.46)	Loss_d 0.663 (0.663)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.663 (0.663)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.46 (  0.46)	Loss_d 0.663 (0.663)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 16/  1]	epoch_time 0.0350 (0.0377)	validation_time 0.0004 (0.0007)	train_time 0.0347 (0.0367)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5412000062465667, 0.6430000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.95it/s] 23%|##3       | 6/26 [00:00<00:00, 25.33it/s] 38%|###8      | 10/26 [00:00<00:00, 30.18it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.89it/s] 69%|######9   | 18/26 [00:00<00:00, 34.48it/s] 85%|########4 | 22/26 [00:00<00:00, 35.61it/s]100%|##########| 26/26 [00:00<00:00, 35.73it/s]100%|##########| 26/26 [00:00<00:00, 30.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.62 (  0.55)	train_minacc   0.56 (  0.62)	train_majacc   0.62 (  0.54)	train_corr   0.00 (  0.00)	l1 18.9535 (18.9771)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.85it/s] 31%|###       | 8/26 [00:00<00:00, 42.86it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.86it/s] 50%|#####     | 13/26 [00:00<00:00, 43.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.09it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.09it/s] 96%|#########6| 25/26 [00:00<00:00, 48.93it/s]100%|##########| 26/26 [00:00<00:00, 42.43it/s]
Test: [   0/  26]	Loss 0.677 (0.677)	test_acc   0.55 (  0.55)	test_minacc   0.65 (  0.65)	test_majacc   0.54 (  0.54)	Loss_d 0.677 (0.677)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.670 (0.674)	test_acc   0.59 (  0.58)	test_minacc   0.58 (  0.61)	test_majacc   0.59 (  0.58)	Loss_d 0.670 (0.674)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.58 (  0.61)	test_majacc_d   0.59 (  0.58)	test_corr_d   0.23 (  0.14)
Test: [  20/  26]	Loss 0.681 (0.675)	test_acc   0.53 (  0.59)	test_minacc   0.40 (  0.58)	test_majacc   0.54 (  0.59)	Loss_d 0.681 (0.675)	test_acc_d   0.53 (  0.59)	test_minacc_d   0.40 (  0.58)	test_majacc_d   0.54 (  0.59)	test_corr_d   0.16 (  0.14)
Test: [  26/  26]	Loss 0.671 (0.675)	test_acc   0.61 (  0.58)	test_minacc   0.53 (  0.57)	test_majacc   0.62 (  0.59)	Loss_d 0.671 (0.675)	test_acc_d   0.61 (  0.58)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.62 (  0.59)	test_corr_d   0.23 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.63it/s]
Test: [  0/  1]	Loss 0.683 (0.683)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.56 (  0.56)	Loss_d 0.683 (0.683)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.683 (0.683)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.56 (  0.56)	Loss_d 0.683 (0.683)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 17/  1]	epoch_time 0.0346 (0.0375)	validation_time 0.0004 (0.0007)	train_time 0.0342 (0.0366)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5835000115036965, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.91it/s] 19%|#9        | 5/26 [00:00<00:01, 19.15it/s] 35%|###4      | 9/26 [00:00<00:00, 25.65it/s] 50%|#####     | 13/26 [00:00<00:00, 29.41it/s] 65%|######5   | 17/26 [00:00<00:00, 31.57it/s] 81%|########  | 21/26 [00:00<00:00, 33.07it/s] 96%|#########6| 25/26 [00:00<00:00, 34.19it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.60 (  0.55)	train_minacc   0.47 (  0.57)	train_majacc   0.62 (  0.54)	train_corr   0.00 (  0.00)	l1 18.9341 (18.9434)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.12it/s] 27%|##6       | 7/26 [00:00<00:00, 36.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.33it/s] 50%|#####     | 13/26 [00:00<00:00, 41.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.34it/s] 96%|#########6| 25/26 [00:00<00:00, 47.56it/s]100%|##########| 26/26 [00:00<00:00, 40.36it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.53 (  0.53)	test_minacc   0.60 (  0.60)	test_majacc   0.52 (  0.52)	Loss_d 0.688 (0.688)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.680 (0.684)	test_acc   0.57 (  0.56)	test_minacc   0.56 (  0.59)	test_majacc   0.57 (  0.56)	Loss_d 0.680 (0.684)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.56 (  0.59)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.22 (  0.14)
Test: [  20/  26]	Loss 0.689 (0.684)	test_acc   0.52 (  0.57)	test_minacc   0.40 (  0.56)	test_majacc   0.54 (  0.57)	Loss_d 0.689 (0.684)	test_acc_d   0.52 (  0.57)	test_minacc_d   0.40 (  0.56)	test_majacc_d   0.54 (  0.57)	test_corr_d   0.15 (  0.15)
Test: [  26/  26]	Loss 0.681 (0.684)	test_acc   0.60 (  0.57)	test_minacc   0.47 (  0.55)	test_majacc   0.62 (  0.57)	Loss_d 0.681 (0.684)	test_acc_d   0.60 (  0.57)	test_minacc_d   0.47 (  0.55)	test_majacc_d   0.62 (  0.57)	test_corr_d   0.22 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.34it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 18/  1]	epoch_time 0.0362 (0.0375)	validation_time 0.0004 (0.0007)	train_time 0.0358 (0.0366)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5659000098109245, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 19%|#9        | 5/26 [00:00<00:00, 22.68it/s] 35%|###4      | 9/26 [00:00<00:00, 28.43it/s] 50%|#####     | 13/26 [00:00<00:00, 31.63it/s] 65%|######5   | 17/26 [00:00<00:00, 33.04it/s] 81%|########  | 21/26 [00:00<00:00, 33.01it/s] 96%|#########6| 25/26 [00:00<00:00, 33.24it/s]100%|##########| 26/26 [00:00<00:00, 29.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.60 (  0.53)	train_minacc   0.47 (  0.53)	train_majacc   0.61 (  0.53)	train_corr   0.00 (  0.00)	l1 18.9270 (18.9311)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 27%|##6       | 7/26 [00:00<00:00, 31.61it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.61it/s] 50%|#####     | 13/26 [00:00<00:00, 39.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.10it/s] 96%|#########6| 25/26 [00:00<00:00, 46.40it/s]100%|##########| 26/26 [00:00<00:00, 38.75it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.685 (0.688)	test_acc   0.57 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.57 (  0.55)	Loss_d 0.685 (0.688)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.18 (  0.12)
Test: [  20/  26]	Loss 0.691 (0.688)	test_acc   0.52 (  0.56)	test_minacc   0.40 (  0.54)	test_majacc   0.53 (  0.56)	Loss_d 0.691 (0.688)	test_acc_d   0.52 (  0.56)	test_minacc_d   0.40 (  0.54)	test_majacc_d   0.53 (  0.56)	test_corr_d   0.12 (  0.12)
Test: [  26/  26]	Loss 0.688 (0.689)	test_acc   0.60 (  0.56)	test_minacc   0.47 (  0.53)	test_majacc   0.62 (  0.56)	Loss_d 0.688 (0.689)	test_acc_d   0.60 (  0.56)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.62 (  0.56)	test_corr_d   0.17 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.33it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.696 (0.696)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.696 (0.696)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.03)
Overall Timing[ 19/  1]	epoch_time 0.0370 (0.0374)	validation_time 0.0003 (0.0007)	train_time 0.0367 (0.0366)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5589000055789948, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.54it/s] 19%|#9        | 5/26 [00:00<00:00, 24.44it/s] 35%|###4      | 9/26 [00:00<00:00, 29.30it/s] 50%|#####     | 13/26 [00:00<00:00, 31.29it/s] 65%|######5   | 17/26 [00:00<00:00, 32.78it/s] 81%|########  | 21/26 [00:00<00:00, 33.67it/s] 96%|#########6| 25/26 [00:00<00:00, 34.20it/s]100%|##########| 26/26 [00:00<00:00, 29.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.48 (  0.52)	train_minacc   0.41 (  0.52)	train_majacc   0.49 (  0.52)	train_corr   0.00 (  0.00)	l1 18.9225 (18.9246)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.48it/s] 27%|##6       | 7/26 [00:00<00:00, 25.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.32it/s] 46%|####6     | 12/26 [00:00<00:00, 33.90it/s] 65%|######5   | 17/26 [00:00<00:00, 38.11it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.11it/s] 88%|########8 | 23/26 [00:00<00:00, 44.54it/s]100%|##########| 26/26 [00:00<00:00, 34.34it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.47)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.48)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.08 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.47 (  0.49)	test_majacc   0.46 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.05 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.41 (  0.48)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.09 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.42it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.03 (  0.03)
Overall Timing[ 20/  1]	epoch_time 0.0358 (0.0374)	validation_time 0.0004 (0.0007)	train_time 0.0354 (0.0365)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.49720000874996184, 0.4780000150203705)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.51it/s] 23%|##3       | 6/26 [00:00<00:00, 25.60it/s] 35%|###4      | 9/26 [00:00<00:00, 26.92it/s] 50%|#####     | 13/26 [00:00<00:00, 29.85it/s] 65%|######5   | 17/26 [00:00<00:00, 31.70it/s] 81%|########  | 21/26 [00:00<00:00, 32.85it/s] 96%|#########6| 25/26 [00:00<00:00, 33.31it/s]100%|##########| 26/26 [00:00<00:00, 28.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.50)	train_minacc   0.47 (  0.49)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 18.9200 (18.9209)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.28it/s] 31%|###       | 8/26 [00:00<00:00, 38.48it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.48it/s] 50%|#####     | 13/26 [00:00<00:00, 41.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.28it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.28it/s] 92%|#########2| 24/26 [00:00<00:00, 48.57it/s]100%|##########| 26/26 [00:00<00:00, 41.22it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.40 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.53 (  0.50)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.03 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.47 (  0.49)	test_majacc   0.50 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.50 (  0.48)	test_corr_d   0.06 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.53it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.43 (  0.43)	Loss_d 0.696 (0.696)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.43 (  0.43)	Loss_d 0.696 (0.696)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.04 (  0.04)
Overall Timing[ 21/  1]	epoch_time 0.0350 (0.0372)	validation_time 0.0004 (0.0007)	train_time 0.0346 (0.0364)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.482000007212162, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.94it/s] 19%|#9        | 5/26 [00:00<00:01, 20.06it/s] 35%|###4      | 9/26 [00:00<00:00, 25.95it/s] 50%|#####     | 13/26 [00:00<00:00, 29.19it/s] 65%|######5   | 17/26 [00:00<00:00, 31.48it/s] 81%|########  | 21/26 [00:00<00:00, 33.27it/s] 96%|#########6| 25/26 [00:00<00:00, 34.19it/s]100%|##########| 26/26 [00:00<00:00, 28.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.50)	train_minacc   0.47 (  0.49)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 18.9188 (18.9192)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.37it/s] 27%|##6       | 7/26 [00:00<00:00, 32.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.96it/s] 50%|#####     | 13/26 [00:00<00:00, 43.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.25it/s] 96%|#########6| 25/26 [00:00<00:00, 49.77it/s]100%|##########| 26/26 [00:00<00:00, 41.35it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.44 (  0.44)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.40 (  0.47)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.40 (  0.47)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.49 (  0.48)	test_majacc   0.46 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.05 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.47 (  0.48)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.08 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.52it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.04 (  0.04)
Overall Timing[ 22/  1]	epoch_time 0.0345 (0.0371)	validation_time 0.0003 (0.0006)	train_time 0.0342 (0.0363)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.4868000106215477, 0.47600001096725464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.24it/s] 15%|#5        | 4/26 [00:00<00:01, 18.66it/s] 31%|###       | 8/26 [00:00<00:00, 26.19it/s] 42%|####2     | 11/26 [00:00<00:00, 26.58it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.41it/s] 88%|########8 | 23/26 [00:00<00:00, 34.00it/s]100%|##########| 26/26 [00:00<00:00, 28.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 304 tensor(-0.0103, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 435 tensor(-0.0015, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.004)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.17)	train_acc   0.56 (  0.55)	train_minacc   0.50 (  0.52)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 12.9622 (13.6736)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.77it/s] 31%|###       | 8/26 [00:00<00:00, 40.58it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.58it/s] 50%|#####     | 13/26 [00:00<00:00, 41.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.27it/s] 96%|#########6| 25/26 [00:00<00:00, 48.22it/s]100%|##########| 26/26 [00:00<00:00, 42.75it/s]
Test: [   0/  26]	Loss 0.700 (0.700)	test_acc   0.47 (  0.47)	test_minacc   0.58 (  0.58)	test_majacc   0.45 (  0.45)	Loss_d 0.700 (0.700)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.65 (  0.62)	test_majacc   0.53 (  0.52)	Loss_d 0.691 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.65 (  0.62)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.06 ( -0.12)
Test: [  20/  26]	Loss 0.696 (0.693)	test_acc   0.51 (  0.54)	test_minacc   0.40 (  0.60)	test_majacc   0.53 (  0.53)	Loss_d 0.696 (0.693)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.40 (  0.60)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.04 ( -0.10)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.50 (  0.59)	test_majacc   0.56 (  0.53)	Loss_d 0.690 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.50 (  0.59)	test_majacc_d   0.56 (  0.53)	test_corr_d  -0.00 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.55it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.677 (0.677)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.38 ( -0.38)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.677 (0.677)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.38 ( -0.38)
Overall Timing[ 23/  1]	epoch_time 0.0348 (0.0370)	validation_time 0.0004 (0.0006)	train_time 0.0344 (0.0362)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5371000129580498, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.17it/s] 23%|##3       | 6/26 [00:00<00:00, 25.61it/s] 38%|###8      | 10/26 [00:00<00:00, 29.08it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.45it/s] 69%|######9   | 18/26 [00:00<00:00, 32.68it/s] 85%|########4 | 22/26 [00:00<00:00, 33.64it/s]100%|##########| 26/26 [00:00<00:00, 34.32it/s]100%|##########| 26/26 [00:00<00:00, 30.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.53)	train_minacc   0.50 (  0.57)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 12.8871 (12.9274)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 27%|##6       | 7/26 [00:00<00:00, 36.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.45it/s] 50%|#####     | 13/26 [00:00<00:00, 41.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.04it/s] 96%|#########6| 25/26 [00:00<00:00, 48.28it/s]100%|##########| 26/26 [00:00<00:00, 41.37it/s]
Test: [   0/  26]	Loss 0.699 (0.699)	test_acc   0.47 (  0.47)	test_minacc   0.58 (  0.58)	test_majacc   0.45 (  0.45)	Loss_d 0.699 (0.699)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.65 (  0.60)	test_majacc   0.53 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.03 ( -0.02)
Test: [  20/  26]	Loss 0.695 (0.691)	test_acc   0.50 (  0.53)	test_minacc   0.38 (  0.58)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.691)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.38 (  0.58)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 ( -0.01)
Test: [  26/  26]	Loss 0.688 (0.691)	test_acc   0.54 (  0.53)	test_minacc   0.50 (  0.57)	test_majacc   0.55 (  0.52)	Loss_d 0.688 (0.691)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.50 (  0.57)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.08 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.25it/s]
Test: [  0/  1]	Loss 0.684 (0.684)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.684 (0.684)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.684 (0.684)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.684 (0.684)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 24/  1]	epoch_time 0.0351 (0.0370)	validation_time 0.0003 (0.0006)	train_time 0.0348 (0.0362)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5313000091910363, 0.5490000247955322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.03it/s] 19%|#9        | 5/26 [00:00<00:01, 18.02it/s] 35%|###4      | 9/26 [00:00<00:00, 24.59it/s] 50%|#####     | 13/26 [00:00<00:00, 28.53it/s] 65%|######5   | 17/26 [00:00<00:00, 31.14it/s] 81%|########  | 21/26 [00:00<00:00, 32.99it/s] 96%|#########6| 25/26 [00:00<00:00, 34.08it/s]100%|##########| 26/26 [00:00<00:00, 27.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.53)	train_minacc   0.50 (  0.57)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 12.8369 (12.8555)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.69it/s] 27%|##6       | 7/26 [00:00<00:00, 37.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.59it/s] 50%|#####     | 13/26 [00:00<00:00, 41.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.63it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.63it/s] 96%|#########6| 25/26 [00:00<00:00, 47.91it/s]100%|##########| 26/26 [00:00<00:00, 41.30it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.48 (  0.48)	test_minacc   0.58 (  0.58)	test_majacc   0.46 (  0.46)	Loss_d 0.697 (0.697)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.688 (0.690)	test_acc   0.54 (  0.53)	test_minacc   0.65 (  0.60)	test_majacc   0.53 (  0.52)	Loss_d 0.688 (0.690)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.694 (0.690)	test_acc   0.51 (  0.54)	test_minacc   0.38 (  0.58)	test_majacc   0.52 (  0.53)	Loss_d 0.694 (0.690)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.38 (  0.58)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.11 (  0.04)
Test: [  26/  26]	Loss 0.687 (0.690)	test_acc   0.54 (  0.53)	test_minacc   0.50 (  0.57)	test_majacc   0.55 (  0.53)	Loss_d 0.687 (0.690)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.50 (  0.57)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.13 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.79it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.685 (0.685)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.685 (0.685)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 25/  1]	epoch_time 0.0352 (0.0369)	validation_time 0.0004 (0.0006)	train_time 0.0349 (0.0361)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5346000113189221, 0.550000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.68it/s] 19%|#9        | 5/26 [00:00<00:00, 23.06it/s] 35%|###4      | 9/26 [00:00<00:00, 28.01it/s] 50%|#####     | 13/26 [00:00<00:00, 31.01it/s] 65%|######5   | 17/26 [00:00<00:00, 33.05it/s] 81%|########  | 21/26 [00:00<00:00, 34.07it/s] 96%|#########6| 25/26 [00:00<00:00, 34.65it/s]100%|##########| 26/26 [00:00<00:00, 29.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.53)	train_minacc   0.50 (  0.57)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 12.8132 (12.8241)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.20it/s] 27%|##6       | 7/26 [00:00<00:00, 36.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.12it/s] 50%|#####     | 13/26 [00:00<00:00, 42.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.29it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.29it/s] 96%|#########6| 25/26 [00:00<00:00, 48.82it/s]100%|##########| 26/26 [00:00<00:00, 41.74it/s]
Test: [   0/  26]	Loss 0.698 (0.698)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.698 (0.698)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.54 (  0.52)	test_minacc   0.65 (  0.59)	test_majacc   0.52 (  0.51)	Loss_d 0.689 (0.691)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.65 (  0.59)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.07 (  0.02)
Test: [  20/  26]	Loss 0.694 (0.690)	test_acc   0.50 (  0.53)	test_minacc   0.38 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.690)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.38 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.10 (  0.03)
Test: [  26/  26]	Loss 0.688 (0.690)	test_acc   0.54 (  0.53)	test_minacc   0.50 (  0.56)	test_majacc   0.55 (  0.52)	Loss_d 0.688 (0.690)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.50 (  0.56)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.12 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.20it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.686 (0.686)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.686 (0.686)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 26/  1]	epoch_time 0.0354 (0.0368)	validation_time 0.0006 (0.0006)	train_time 0.0348 (0.0361)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5291000176668167, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.58it/s] 23%|##3       | 6/26 [00:00<00:00, 27.13it/s] 38%|###8      | 10/26 [00:00<00:00, 30.75it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.80it/s] 69%|######9   | 18/26 [00:00<00:00, 33.85it/s] 85%|########4 | 22/26 [00:00<00:00, 34.51it/s]100%|##########| 26/26 [00:00<00:00, 34.21it/s]100%|##########| 26/26 [00:00<00:00, 30.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.53)	train_minacc   0.50 (  0.56)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 12.7873 (12.7994)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.51it/s] 31%|###       | 8/26 [00:00<00:00, 37.72it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.72it/s] 50%|#####     | 13/26 [00:00<00:00, 40.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.01it/s] 96%|#########6| 25/26 [00:00<00:00, 47.99it/s]100%|##########| 26/26 [00:00<00:00, 40.17it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.697 (0.697)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.54 (  0.52)	test_minacc   0.65 (  0.59)	test_majacc   0.52 (  0.51)	Loss_d 0.690 (0.691)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.65 (  0.59)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.07 (  0.02)
Test: [  20/  26]	Loss 0.694 (0.691)	test_acc   0.51 (  0.53)	test_minacc   0.38 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.691)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.38 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.09 (  0.03)
Test: [  26/  26]	Loss 0.688 (0.691)	test_acc   0.54 (  0.53)	test_minacc   0.50 (  0.56)	test_majacc   0.55 (  0.52)	Loss_d 0.688 (0.691)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.50 (  0.56)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.12 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.15it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.686 (0.686)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.686 (0.686)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 27/  1]	epoch_time 0.0354 (0.0368)	validation_time 0.0003 (0.0006)	train_time 0.0350 (0.0360)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5276000119447708, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.71it/s] 19%|#9        | 5/26 [00:00<00:00, 22.61it/s] 35%|###4      | 9/26 [00:00<00:00, 28.49it/s] 50%|#####     | 13/26 [00:00<00:00, 31.80it/s] 65%|######5   | 17/26 [00:00<00:00, 33.90it/s] 81%|########  | 21/26 [00:00<00:00, 35.32it/s] 96%|#########6| 25/26 [00:00<00:00, 35.74it/s]100%|##########| 26/26 [00:00<00:00, 30.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.53)	train_minacc   0.50 (  0.56)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 12.7617 (12.7735)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.94it/s] 31%|###       | 8/26 [00:00<00:00, 36.20it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.20it/s] 50%|#####     | 13/26 [00:00<00:00, 39.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.68it/s] 96%|#########6| 25/26 [00:00<00:00, 46.67it/s]100%|##########| 26/26 [00:00<00:00, 39.30it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.697 (0.697)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.65 (  0.59)	test_majacc   0.52 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.65 (  0.59)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.07 (  0.01)
Test: [  20/  26]	Loss 0.694 (0.691)	test_acc   0.51 (  0.53)	test_minacc   0.38 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.691)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.38 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.09 (  0.03)
Test: [  26/  26]	Loss 0.689 (0.691)	test_acc   0.54 (  0.53)	test_minacc   0.50 (  0.56)	test_majacc   0.55 (  0.52)	Loss_d 0.689 (0.691)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.50 (  0.56)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.11 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.52it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.687 (0.687)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.687 (0.687)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 28/  1]	epoch_time 0.0356 (0.0367)	validation_time 0.0004 (0.0006)	train_time 0.0351 (0.0360)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5262000106573105, 0.5430000424385071)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.16it/s] 15%|#5        | 4/26 [00:00<00:01, 17.18it/s] 31%|###       | 8/26 [00:00<00:00, 23.99it/s] 46%|####6     | 12/26 [00:00<00:00, 27.24it/s] 62%|######1   | 16/26 [00:00<00:00, 30.04it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.35it/s] 92%|#########2| 24/26 [00:00<00:00, 32.73it/s]100%|##########| 26/26 [00:00<00:00, 26.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.53)	train_minacc   0.53 (  0.56)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 12.7372 (12.7485)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.98it/s] 27%|##6       | 7/26 [00:00<00:00, 33.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.01it/s] 50%|#####     | 13/26 [00:00<00:00, 42.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.18it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.18it/s] 96%|#########6| 25/26 [00:00<00:00, 49.03it/s]100%|##########| 26/26 [00:00<00:00, 40.31it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.697 (0.697)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.65 (  0.58)	test_majacc   0.52 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.06 (  0.01)
Test: [  20/  26]	Loss 0.694 (0.691)	test_acc   0.51 (  0.53)	test_minacc   0.38 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.691)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.02)
Test: [  26/  26]	Loss 0.689 (0.691)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.52)	Loss_d 0.689 (0.691)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.11 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.83it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.687 (0.687)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.687 (0.687)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 29/  1]	epoch_time 0.0355 (0.0367)	validation_time 0.0006 (0.0006)	train_time 0.0349 (0.0360)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5241000144779682, 0.5420000553131104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.22it/s] 19%|#9        | 5/26 [00:00<00:00, 24.25it/s] 35%|###4      | 9/26 [00:00<00:00, 29.95it/s] 50%|#####     | 13/26 [00:00<00:00, 32.73it/s] 65%|######5   | 17/26 [00:00<00:00, 34.26it/s] 81%|########  | 21/26 [00:00<00:00, 35.31it/s] 96%|#########6| 25/26 [00:00<00:00, 35.15it/s]100%|##########| 26/26 [00:00<00:00, 30.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 12.7134 (12.7244)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.46it/s] 27%|##6       | 7/26 [00:00<00:00, 36.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.23it/s] 50%|#####     | 13/26 [00:00<00:00, 42.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.93it/s] 96%|#########6| 25/26 [00:00<00:00, 47.75it/s]100%|##########| 26/26 [00:00<00:00, 41.60it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.697 (0.697)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.65 (  0.58)	test_majacc   0.52 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.06 (  0.01)
Test: [  20/  26]	Loss 0.694 (0.691)	test_acc   0.50 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.691)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.02)
Test: [  26/  26]	Loss 0.689 (0.691)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.52)	Loss_d 0.689 (0.691)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.10 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.56it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 30/  1]	epoch_time 0.0356 (0.0367)	validation_time 0.0004 (0.0006)	train_time 0.0351 (0.0359)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5229000110626221, 0.5420000553131104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.30it/s] 19%|#9        | 5/26 [00:00<00:01, 20.62it/s] 35%|###4      | 9/26 [00:00<00:00, 26.96it/s] 50%|#####     | 13/26 [00:00<00:00, 30.73it/s] 65%|######5   | 17/26 [00:00<00:00, 33.08it/s] 81%|########  | 21/26 [00:00<00:00, 34.13it/s] 96%|#########6| 25/26 [00:00<00:00, 34.30it/s]100%|##########| 26/26 [00:00<00:00, 28.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 12.6905 (12.7011)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.98it/s] 23%|##3       | 6/26 [00:00<00:00, 32.85it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.85it/s] 46%|####6     | 12/26 [00:00<00:00, 42.86it/s] 65%|######5   | 17/26 [00:00<00:00, 44.07it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.07it/s] 88%|########8 | 23/26 [00:00<00:00, 48.60it/s]100%|##########| 26/26 [00:00<00:00, 40.81it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.697 (0.697)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.05 ( -0.00)
Test: [  20/  26]	Loss 0.694 (0.691)	test_acc   0.50 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.691)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.07 (  0.01)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.10 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.85it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 31/  1]	epoch_time 0.0356 (0.0366)	validation_time 0.0003 (0.0006)	train_time 0.0353 (0.0359)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5213000123202801, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.61it/s] 19%|#9        | 5/26 [00:00<00:00, 22.98it/s] 35%|###4      | 9/26 [00:00<00:00, 28.58it/s] 50%|#####     | 13/26 [00:00<00:00, 31.24it/s] 65%|######5   | 17/26 [00:00<00:00, 31.11it/s] 81%|########  | 21/26 [00:00<00:00, 32.09it/s] 96%|#########6| 25/26 [00:00<00:00, 33.17it/s]100%|##########| 26/26 [00:00<00:00, 28.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 12.6683 (12.6787)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.21it/s] 31%|###       | 8/26 [00:00<00:00, 42.50it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.50it/s] 50%|#####     | 13/26 [00:00<00:00, 44.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.69it/s] 96%|#########6| 25/26 [00:00<00:00, 48.83it/s]100%|##########| 26/26 [00:00<00:00, 43.11it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.697 (0.697)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.05 ( -0.01)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.06 (  0.00)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.09 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.87it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 32/  1]	epoch_time 0.0347 (0.0366)	validation_time 0.0003 (0.0006)	train_time 0.0344 (0.0359)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5210000158250332, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.51it/s] 19%|#9        | 5/26 [00:00<00:01, 20.60it/s] 35%|###4      | 9/26 [00:00<00:00, 26.72it/s] 50%|#####     | 13/26 [00:00<00:00, 30.60it/s] 65%|######5   | 17/26 [00:00<00:00, 32.64it/s] 81%|########  | 21/26 [00:00<00:00, 34.25it/s] 96%|#########6| 25/26 [00:00<00:00, 34.89it/s]100%|##########| 26/26 [00:00<00:00, 28.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 12.6471 (12.6571)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.89it/s] 27%|##6       | 7/26 [00:00<00:00, 35.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.02it/s] 50%|#####     | 13/26 [00:00<00:00, 43.32it/s] 69%|######9   | 18/26 [00:00<00:00, 44.12it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.12it/s] 92%|#########2| 24/26 [00:00<00:00, 48.86it/s]100%|##########| 26/26 [00:00<00:00, 41.56it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.04 ( -0.01)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 ( -0.00)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.09 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.87it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 33/  1]	epoch_time 0.0358 (0.0365)	validation_time 0.0004 (0.0006)	train_time 0.0354 (0.0359)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5205000123679638, 0.5390000343322754)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 19%|#9        | 5/26 [00:00<00:00, 22.32it/s] 35%|###4      | 9/26 [00:00<00:00, 28.17it/s] 50%|#####     | 13/26 [00:00<00:00, 31.37it/s] 65%|######5   | 17/26 [00:00<00:00, 33.15it/s] 81%|########  | 21/26 [00:00<00:00, 34.06it/s] 96%|#########6| 25/26 [00:00<00:00, 34.67it/s]100%|##########| 26/26 [00:00<00:00, 29.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 12.6269 (12.6364)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.27it/s] 27%|##6       | 7/26 [00:00<00:00, 37.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.22it/s] 50%|#####     | 13/26 [00:00<00:00, 42.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.41it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.41it/s] 96%|#########6| 25/26 [00:00<00:00, 48.16it/s]100%|##########| 26/26 [00:00<00:00, 41.54it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.04 ( -0.02)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.05 ( -0.01)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.08 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.13it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 34/  1]	epoch_time 0.0356 (0.0365)	validation_time 0.0004 (0.0006)	train_time 0.0352 (0.0358)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5196000077724456, 0.5390000343322754)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.39it/s] 19%|#9        | 5/26 [00:00<00:01, 19.80it/s] 35%|###4      | 9/26 [00:00<00:00, 26.02it/s] 50%|#####     | 13/26 [00:00<00:00, 29.19it/s] 65%|######5   | 17/26 [00:00<00:00, 30.36it/s] 81%|########  | 21/26 [00:00<00:00, 31.54it/s] 96%|#########6| 25/26 [00:00<00:00, 32.41it/s]100%|##########| 26/26 [00:00<00:00, 27.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 12.6075 (12.6167)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 36.37it/s] 35%|###4      | 9/26 [00:00<00:00, 41.19it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.19it/s] 58%|#####7    | 15/26 [00:00<00:00, 48.04it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 48.04it/s] 81%|########  | 21/26 [00:00<00:00, 48.37it/s]100%|##########| 26/26 [00:00<00:00, 44.06it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.03 ( -0.02)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.04 ( -0.02)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.08 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.59it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 35/  1]	epoch_time 0.0413 (0.0367)	validation_time 0.0003 (0.0006)	train_time 0.0410 (0.0360)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5193000112771988, 0.5390000343322754)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.45it/s] 19%|#9        | 5/26 [00:00<00:00, 24.06it/s] 35%|###4      | 9/26 [00:00<00:00, 29.20it/s] 50%|#####     | 13/26 [00:00<00:00, 32.15it/s] 65%|######5   | 17/26 [00:00<00:00, 33.44it/s] 81%|########  | 21/26 [00:00<00:00, 33.57it/s] 96%|#########6| 25/26 [00:00<00:00, 33.75it/s]100%|##########| 26/26 [00:00<00:00, 29.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 12.5889 (12.5977)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 27%|##6       | 7/26 [00:00<00:00, 32.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.47it/s] 50%|#####     | 13/26 [00:00<00:00, 38.61it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.22it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.22it/s] 96%|#########6| 25/26 [00:00<00:00, 45.19it/s]100%|##########| 26/26 [00:00<00:00, 38.20it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.02 ( -0.03)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.03 ( -0.02)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.07 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.62it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 36/  1]	epoch_time 0.0349 (0.0366)	validation_time 0.0004 (0.0006)	train_time 0.0345 (0.0359)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5189000101387501, 0.5390000343322754)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.17it/s] 19%|#9        | 5/26 [00:00<00:00, 22.04it/s] 35%|###4      | 9/26 [00:00<00:00, 27.61it/s] 50%|#####     | 13/26 [00:00<00:00, 30.77it/s] 65%|######5   | 17/26 [00:00<00:00, 33.00it/s] 81%|########  | 21/26 [00:00<00:00, 34.47it/s] 96%|#########6| 25/26 [00:00<00:00, 34.72it/s]100%|##########| 26/26 [00:00<00:00, 29.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 12.5711 (12.5796)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.23it/s] 31%|###       | 8/26 [00:00<00:00, 34.37it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.37it/s] 50%|#####     | 13/26 [00:00<00:00, 38.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.91it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.91it/s] 96%|#########6| 25/26 [00:00<00:00, 46.58it/s]100%|##########| 26/26 [00:00<00:00, 38.48it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.02 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.03 ( -0.03)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.07 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.92it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 37/  1]	epoch_time 0.0347 (0.0366)	validation_time 0.0003 (0.0005)	train_time 0.0344 (0.0359)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5184000124931335, 0.5400000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 19%|#9        | 5/26 [00:00<00:00, 21.04it/s] 35%|###4      | 9/26 [00:00<00:00, 27.46it/s] 50%|#####     | 13/26 [00:00<00:00, 30.81it/s] 65%|######5   | 17/26 [00:00<00:00, 32.48it/s] 81%|########  | 21/26 [00:00<00:00, 32.97it/s] 96%|#########6| 25/26 [00:00<00:00, 34.04it/s]100%|##########| 26/26 [00:00<00:00, 28.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 12.5541 (12.5622)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.94it/s] 31%|###       | 8/26 [00:00<00:00, 37.23it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.23it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.66it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.55it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.55it/s]100%|##########| 26/26 [00:00<00:00, 50.45it/s]100%|##########| 26/26 [00:00<00:00, 42.49it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.01 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.02 ( -0.04)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.06 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.35it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 38/  1]	epoch_time 0.0362 (0.0366)	validation_time 0.0004 (0.0005)	train_time 0.0358 (0.0359)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5184000136554241, 0.5420000553131104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.86it/s] 19%|#9        | 5/26 [00:00<00:00, 21.29it/s] 35%|###4      | 9/26 [00:00<00:00, 27.08it/s] 50%|#####     | 13/26 [00:00<00:00, 30.46it/s] 65%|######5   | 17/26 [00:00<00:00, 32.47it/s] 81%|########  | 21/26 [00:00<00:00, 33.69it/s] 96%|#########6| 25/26 [00:00<00:00, 33.88it/s]100%|##########| 26/26 [00:00<00:00, 28.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 12.5380 (12.5457)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.90it/s] 27%|##6       | 7/26 [00:00<00:00, 36.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.73it/s] 50%|#####     | 13/26 [00:00<00:00, 40.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.12it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.12it/s] 96%|#########6| 25/26 [00:00<00:00, 46.91it/s]100%|##########| 26/26 [00:00<00:00, 40.39it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.01 ( -0.05)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.01 ( -0.04)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.06 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.99it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 39/  1]	epoch_time 0.0358 (0.0365)	validation_time 0.0003 (0.0005)	train_time 0.0354 (0.0359)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5180000160038472, 0.5430000424385071)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.71it/s] 19%|#9        | 5/26 [00:00<00:01, 18.98it/s] 35%|###4      | 9/26 [00:00<00:00, 24.96it/s] 50%|#####     | 13/26 [00:00<00:00, 28.85it/s] 65%|######5   | 17/26 [00:00<00:00, 30.88it/s] 81%|########  | 21/26 [00:00<00:00, 32.35it/s] 96%|#########6| 25/26 [00:00<00:00, 33.41it/s]100%|##########| 26/26 [00:00<00:00, 27.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 12.5229 (12.5301)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.66it/s] 27%|##6       | 7/26 [00:00<00:00, 38.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.47it/s] 50%|#####     | 13/26 [00:00<00:00, 43.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.60it/s] 96%|#########6| 25/26 [00:00<00:00, 48.56it/s]100%|##########| 26/26 [00:00<00:00, 42.05it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.00 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.00 ( -0.05)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.691 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.05 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.19it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 40/  1]	epoch_time 0.0348 (0.0365)	validation_time 0.0004 (0.0005)	train_time 0.0344 (0.0359)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5178000171780586, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 19%|#9        | 5/26 [00:00<00:01, 20.54it/s] 35%|###4      | 9/26 [00:00<00:00, 26.56it/s] 50%|#####     | 13/26 [00:00<00:00, 30.34it/s] 65%|######5   | 17/26 [00:00<00:00, 31.04it/s] 81%|########  | 21/26 [00:00<00:00, 32.10it/s] 96%|#########6| 25/26 [00:00<00:00, 32.99it/s]100%|##########| 26/26 [00:00<00:00, 28.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 12.5099 (12.5159)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.49it/s] 31%|###       | 8/26 [00:00<00:00, 40.86it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.86it/s] 50%|#####     | 13/26 [00:00<00:00, 42.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.54it/s] 96%|#########6| 25/26 [00:00<00:00, 47.46it/s]100%|##########| 26/26 [00:00<00:00, 41.65it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.00 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.00 ( -0.06)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.05 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.22it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 41/  1]	epoch_time 0.0349 (0.0365)	validation_time 0.0003 (0.0005)	train_time 0.0346 (0.0358)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.517600016027689, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.20it/s] 19%|#9        | 5/26 [00:00<00:00, 23.11it/s] 35%|###4      | 9/26 [00:00<00:00, 28.40it/s] 50%|#####     | 13/26 [00:00<00:00, 31.33it/s] 65%|######5   | 17/26 [00:00<00:00, 32.85it/s] 81%|########  | 21/26 [00:00<00:00, 33.98it/s] 96%|#########6| 25/26 [00:00<00:00, 34.72it/s]100%|##########| 26/26 [00:00<00:00, 29.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 12.4988 (12.5039)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.73it/s] 23%|##3       | 6/26 [00:00<00:00, 33.04it/s]                                               23%|##3       | 6/26 [00:00<00:00, 33.04it/s] 42%|####2     | 11/26 [00:00<00:00, 40.54it/s] 65%|######5   | 17/26 [00:00<00:00, 43.67it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.67it/s] 88%|########8 | 23/26 [00:00<00:00, 46.61it/s]100%|##########| 26/26 [00:00<00:00, 39.20it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.01 ( -0.07)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.01 ( -0.06)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.04 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.81it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 42/  1]	epoch_time 0.0355 (0.0364)	validation_time 0.0004 (0.0005)	train_time 0.0351 (0.0358)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5179000136852264, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.76it/s] 19%|#9        | 5/26 [00:00<00:01, 20.31it/s] 35%|###4      | 9/26 [00:00<00:00, 26.78it/s] 50%|#####     | 13/26 [00:00<00:00, 30.53it/s] 65%|######5   | 17/26 [00:00<00:00, 32.90it/s] 81%|########  | 21/26 [00:00<00:00, 34.32it/s] 96%|#########6| 25/26 [00:00<00:00, 35.41it/s]100%|##########| 26/26 [00:00<00:00, 29.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 12.4916 (12.4946)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s] 27%|##6       | 7/26 [00:00<00:00, 33.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.91it/s] 46%|####6     | 12/26 [00:00<00:00, 38.98it/s] 69%|######9   | 18/26 [00:00<00:00, 41.86it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.86it/s] 92%|#########2| 24/26 [00:00<00:00, 47.13it/s]100%|##########| 26/26 [00:00<00:00, 39.59it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.01 ( -0.08)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.01 ( -0.07)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.04 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.14it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 43/  1]	epoch_time 0.0351 (0.0364)	validation_time 0.0004 (0.0005)	train_time 0.0347 (0.0358)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5178000125288963, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.52it/s] 19%|#9        | 5/26 [00:00<00:00, 24.26it/s] 35%|###4      | 9/26 [00:00<00:00, 28.56it/s] 50%|#####     | 13/26 [00:00<00:00, 31.24it/s] 65%|######5   | 17/26 [00:00<00:00, 32.20it/s] 81%|########  | 21/26 [00:00<00:00, 33.31it/s] 96%|#########6| 25/26 [00:00<00:00, 33.52it/s]100%|##########| 26/26 [00:00<00:00, 29.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 12.4865 (12.4886)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 23%|##3       | 6/26 [00:00<00:00, 31.70it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.70it/s] 42%|####2     | 11/26 [00:00<00:00, 39.10it/s] 65%|######5   | 17/26 [00:00<00:00, 43.74it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.74it/s] 88%|########8 | 23/26 [00:00<00:00, 49.11it/s]100%|##########| 26/26 [00:00<00:00, 40.27it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.02 ( -0.08)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.02 ( -0.07)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.03 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.68it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 44/  1]	epoch_time 0.0348 (0.0364)	validation_time 0.0003 (0.0005)	train_time 0.0344 (0.0358)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5177000125348568, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.53it/s] 19%|#9        | 5/26 [00:00<00:01, 20.00it/s] 35%|###4      | 9/26 [00:00<00:00, 25.87it/s] 50%|#####     | 13/26 [00:00<00:00, 28.97it/s] 65%|######5   | 17/26 [00:00<00:00, 30.62it/s] 81%|########  | 21/26 [00:00<00:00, 32.44it/s] 96%|#########6| 25/26 [00:00<00:00, 33.68it/s]100%|##########| 26/26 [00:00<00:00, 28.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 12.4830 (12.4841)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.50it/s] 31%|###       | 8/26 [00:00<00:00, 40.52it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.52it/s] 50%|#####     | 13/26 [00:00<00:00, 41.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.79it/s] 96%|#########6| 25/26 [00:00<00:00, 48.00it/s]100%|##########| 26/26 [00:00<00:00, 41.14it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.02 ( -0.08)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.02 ( -0.08)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.03 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.74it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 45/  1]	epoch_time 0.0351 (0.0363)	validation_time 0.0003 (0.0005)	train_time 0.0347 (0.0357)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5177000136971474, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.05it/s] 19%|#9        | 5/26 [00:00<00:00, 23.73it/s] 35%|###4      | 9/26 [00:00<00:00, 29.53it/s] 50%|#####     | 13/26 [00:00<00:00, 32.41it/s] 65%|######5   | 17/26 [00:00<00:00, 33.15it/s] 81%|########  | 21/26 [00:00<00:00, 33.87it/s] 96%|#########6| 25/26 [00:00<00:00, 33.97it/s]100%|##########| 26/26 [00:00<00:00, 29.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 12.4827 (12.4824)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.98it/s] 23%|##3       | 6/26 [00:00<00:00, 31.75it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.75it/s] 42%|####2     | 11/26 [00:00<00:00, 39.23it/s] 65%|######5   | 17/26 [00:00<00:00, 43.07it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.07it/s] 88%|########8 | 23/26 [00:00<00:00, 46.95it/s]100%|##########| 26/26 [00:00<00:00, 39.08it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.02 ( -0.09)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.03 ( -0.08)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.03 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.53it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 46/  1]	epoch_time 0.0359 (0.0363)	validation_time 0.0004 (0.0005)	train_time 0.0354 (0.0357)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5178000160157681, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.58it/s] 19%|#9        | 5/26 [00:00<00:00, 23.74it/s] 35%|###4      | 9/26 [00:00<00:00, 28.85it/s] 50%|#####     | 13/26 [00:00<00:00, 31.49it/s] 65%|######5   | 17/26 [00:00<00:00, 33.00it/s] 81%|########  | 21/26 [00:00<00:00, 33.78it/s] 96%|#########6| 25/26 [00:00<00:00, 34.26it/s]100%|##########| 26/26 [00:00<00:00, 29.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 12.4833 (12.4826)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.40it/s] 27%|##6       | 7/26 [00:00<00:00, 36.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.50it/s] 50%|#####     | 13/26 [00:00<00:00, 42.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.23it/s] 96%|#########6| 25/26 [00:00<00:00, 48.44it/s]100%|##########| 26/26 [00:00<00:00, 40.96it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.02 ( -0.09)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.03 ( -0.08)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.02 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.35it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 47/  1]	epoch_time 0.0369 (0.0363)	validation_time 0.0004 (0.0005)	train_time 0.0365 (0.0357)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5183000148236752, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.53it/s] 19%|#9        | 5/26 [00:00<00:01, 20.60it/s] 35%|###4      | 9/26 [00:00<00:00, 26.38it/s] 50%|#####     | 13/26 [00:00<00:00, 29.26it/s] 65%|######5   | 17/26 [00:00<00:00, 31.41it/s] 81%|########  | 21/26 [00:00<00:00, 32.76it/s] 96%|#########6| 25/26 [00:00<00:00, 33.88it/s]100%|##########| 26/26 [00:00<00:00, 28.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 12.4850 (12.4837)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.22it/s] 27%|##6       | 7/26 [00:00<00:00, 31.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.07it/s] 50%|#####     | 13/26 [00:00<00:00, 37.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.86it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.86it/s] 96%|#########6| 25/26 [00:00<00:00, 45.85it/s]100%|##########| 26/26 [00:00<00:00, 37.56it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.57)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.57)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.02 ( -0.09)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.03 ( -0.09)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.02 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.11it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 48/  1]	epoch_time 0.0357 (0.0363)	validation_time 0.0006 (0.0005)	train_time 0.0351 (0.0357)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5183000159859658, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.62it/s] 23%|##3       | 6/26 [00:00<00:00, 24.86it/s] 38%|###8      | 10/26 [00:00<00:00, 29.47it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.26it/s] 69%|######9   | 18/26 [00:00<00:00, 33.41it/s] 85%|########4 | 22/26 [00:00<00:00, 34.61it/s]100%|##########| 26/26 [00:00<00:00, 34.77it/s]100%|##########| 26/26 [00:00<00:00, 30.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 12.4875 (12.4859)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 27%|##6       | 7/26 [00:00<00:00, 35.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.17it/s] 50%|#####     | 13/26 [00:00<00:00, 40.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.66it/s] 96%|#########6| 25/26 [00:00<00:00, 47.28it/s]100%|##########| 26/26 [00:00<00:00, 40.23it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.57)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.57)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.02 ( -0.09)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.38 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.38 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.03 ( -0.09)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.55)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.02 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.42it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 49/  1]	epoch_time 0.0341 (0.0363)	validation_time 0.0004 (0.0005)	train_time 0.0337 (0.0357)
record: (train_acc, test_acc) (0.6836000266075134, 0.6660000085830688)
last accs (train_acc, test_acc) (0.5187000159621239, 0.5460000038146973)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.099 MB of 0.099 MB uploadedwandb: \ 0.099 MB of 0.099 MB uploadedwandb: | 0.099 MB of 0.099 MB uploadedwandb: / 0.099 MB of 0.099 MB uploadedwandb: - 0.099 MB of 0.099 MB uploadedwandb: \ 0.099 MB of 0.099 MB uploadedwandb: | 0.099 MB of 0.099 MB uploadedwandb: / 0.099 MB of 0.099 MB uploadedwandb: - 0.099 MB of 0.099 MB uploadedwandb: \ 0.121 MB of 0.121 MB uploaded (0.003 MB deduped)wandb: | 0.493 MB of 0.493 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▂▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/diagnostics/train_time_val █▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▁▁▁▁▂▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/Loss_avg █▇█▇█▇▇▇▇█▇▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/Loss_d_avg █▇█▇█▇▇▇▇█▇▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/Loss_d_val █▇█▇█▇▇▇▇█▇▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/Loss_val █▇█▇█▇▇▇▇█▇▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_acc_avg ▁▁▁▂▁▂▂▂▂▁▂▃██▆▆▆▆▆▇▇▇▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_acc_d_avg ▁▁▁▂▁▂▂▂▂▁▂▃██▆▆▆▆▆▇▇▇▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_acc_d_val ▁▁▁▂▁▂▂▂▂▁▂▃██▆▆▆▆▆▇▇▇▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_acc_val ▁▁▁▂▁▂▂▂▂▁▂▃██▆▆▆▆▆▇▇▇▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_corr_d_avg ████▇▇▇▇▇█▇▇▂▂▂▃▃▃▃▁▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_corr_d_val ████▇▇▇▇▇█▇▇▂▂▂▃▃▃▃▁▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_majacc_avg ██████▇█████▃▁▃▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_majacc_d_avg ██████▇█████▃▁▃▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_majacc_d_val ██████▇█████▃▁▃▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_majacc_val ██████▇█████▃▁▃▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_minacc_avg ▁▁▁▂▁▂▂▂▂▁▂▃██▇▆▆▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_minacc_d_avg ▁▁▁▂▁▂▂▂▂▁▂▃██▇▆▆▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_minacc_d_val ▁▁▁▂▁▂▂▂▂▁▂▃██▇▆▆▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_minacc_val ▁▁▁▂▁▂▂▂▂▁▂▃██▇▆▆▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/Loss_val █▅▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/l1_avg ▃▂▁▁▁▂▂▃▅▆▆▇███████▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/l1_val ▂▂▁▁▁▂▃▄▅▆▇▇███████▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_acc_avg ▇███████████▇▄▂▂▁▁▁▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_acc_val ████████▇███▄▃▃▃▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_majacc_avg ▇███████████▆▃▂▂▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_majacc_val █████▇▇▇▇██▇▃▂▃▃▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_minacc_avg ▂▁▁▁▂▂▂▂▃▃▂▃▆██▇▇▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_minacc_val ▁▁▁▁▁▄▁▂▂▁▁▃█▇▇▆▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_nll_avg ▅▂▂▂▁▁▁▁▁▁▁▁▃▇██████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_nll_val ▃▃▂▂▂▂▁▂▂▂▁▁▇▇▇█████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_penalty_avg █▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_penalty_val █▇▇▇▃▃▄▃▄▄▄▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/diagnostics/epoch_time_val 0.03413
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/diagnostics/train_time_val 0.03371
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/diagnostics/validation_time_val 0.0004
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/Loss_avg 0.69051
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/Loss_d_avg 0.69051
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/Loss_d_val 0.69051
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/Loss_val 0.69051
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_acc_avg 0.546
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_acc_d_avg 0.546
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_acc_d_val 0.546
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_acc_val 0.546
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_corr_d_avg -0.30542
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_corr_d_val -0.30542
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_majacc_avg 0.49
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_majacc_d_avg 0.49
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_majacc_d_val 0.49
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_majacc_val 0.49
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_minacc_avg 0.55222
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_minacc_d_avg 0.55222
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_minacc_d_val 0.55222
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/test/test_minacc_val 0.55222
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/l1_avg 12.48588
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/l1_val 12.48747
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_acc_avg 0.519
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_acc_val 0.544
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_majacc_avg 0.51388
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_majacc_val 0.54587
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_minacc_avg 0.54828
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_minacc_val 0.53125
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_nll_avg 0.69286
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_nll_val 0.69226
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/weight_norm_avg 0.18457
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/40/logs/train/weight_norm_val 0.18443
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/630tnm71
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_153008-630tnm71/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_153243-pyg44me9
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/pyg44me9
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=13.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1200
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6028, 3, 32, 32) (5972, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:38,  1.56s/it] 19%|#9        | 5/26 [00:01<00:05,  3.87it/s] 35%|###4      | 9/26 [00:01<00:02,  7.57it/s] 50%|#####     | 13/26 [00:01<00:01, 11.50it/s] 65%|######5   | 17/26 [00:02<00:00, 15.46it/s] 81%|########  | 21/26 [00:02<00:00, 18.94it/s] 96%|#########6| 25/26 [00:02<00:00, 22.30it/s]100%|##########| 26/26 [00:02<00:00,  9.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.267 (12.779)	train_nll   0.39 (  0.63)	train_penalty   0.06 (  0.33)	weight_norm   9.88 ( 12.15)	train_acc   0.87 (  0.75)	train_minacc   0.03 (  0.15)	train_majacc   1.00 (  0.85)	train_corr   0.00 (  0.00)	l1 6.5743 (7.5294)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.56it/s] 27%|##6       | 7/26 [00:00<00:00, 37.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.12it/s] 50%|#####     | 13/26 [00:00<00:00, 42.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.11it/s] 96%|#########6| 25/26 [00:00<00:00, 48.40it/s]100%|##########| 26/26 [00:00<00:00, 41.04it/s]
Test: [   0/  26]	Loss 0.508 (0.508)	test_acc   0.81 (  0.81)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.508 (0.508)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.360 (0.426)	test_acc   0.88 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.360 (0.426)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  20/  26]	Loss 0.461 (0.426)	test_acc   0.83 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.461 (0.426)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.384 (0.425)	test_acc   0.87 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.384 (0.425)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.58it/s]100%|##########| 1/1 [00:00<00:00,  2.57it/s]
Test: [  0/  1]	Loss 1.894 (1.894)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.894 (1.894)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.894 (1.894)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.894 (1.894)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/41/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0731 (0.0731)	validation_time 0.0068 (0.0068)	train_time 0.0647 (0.0647)
record: (train_acc, test_acc) (0.8428000250458717, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8428000250458717, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 19%|#9        | 5/26 [00:00<00:01, 20.45it/s] 35%|###4      | 9/26 [00:00<00:00, 26.30it/s] 50%|#####     | 13/26 [00:00<00:00, 29.63it/s] 65%|######5   | 17/26 [00:00<00:00, 31.54it/s] 81%|########  | 21/26 [00:00<00:00, 32.76it/s] 96%|#########6| 25/26 [00:00<00:00, 33.09it/s]100%|##########| 26/26 [00:00<00:00, 27.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.404 (7.513)	train_nll   0.39 (  0.42)	train_penalty   0.04 (  0.06)	weight_norm   5.02 (  7.09)	train_acc   0.87 (  0.84)	train_minacc   0.00 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.3224 (6.4862)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.40it/s] 27%|##6       | 7/26 [00:00<00:00, 34.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.02it/s] 50%|#####     | 13/26 [00:00<00:00, 39.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.83it/s] 96%|#########6| 25/26 [00:00<00:00, 46.71it/s]100%|##########| 26/26 [00:00<00:00, 39.73it/s]
Test: [   0/  26]	Loss 0.490 (0.490)	test_acc   0.81 (  0.81)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.490 (0.490)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.361 (0.410)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.361 (0.410)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.434 (0.410)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.434 (0.410)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
Test: [  26/  26]	Loss 0.367 (0.410)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.367 (0.410)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.70it/s]
Test: [  0/  1]	Loss 1.809 (1.809)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.809 (1.809)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.809 (1.809)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.809 (1.809)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Overall Timing[  1/  1]	epoch_time 0.0378 (0.0554)	validation_time 0.0005 (0.0036)	train_time 0.0373 (0.0510)
record: (train_acc, test_acc) (0.8428000250458717, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8478000200986863, 0.10200000554323196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.63it/s] 19%|#9        | 5/26 [00:00<00:01, 18.87it/s] 35%|###4      | 9/26 [00:00<00:00, 24.43it/s] 50%|#####     | 13/26 [00:00<00:00, 27.07it/s] 65%|######5   | 17/26 [00:00<00:00, 28.74it/s] 81%|########  | 21/26 [00:00<00:00, 30.20it/s] 96%|#########6| 25/26 [00:00<00:00, 31.53it/s]100%|##########| 26/26 [00:01<00:00, 25.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.236 (4.182)	train_nll   0.37 (  0.41)	train_penalty   0.03 (  0.06)	weight_norm   2.86 (  3.77)	train_acc   0.87 (  0.84)	train_minacc   0.00 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.5329 (5.9917)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 27%|##6       | 7/26 [00:00<00:00, 32.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.67it/s] 50%|#####     | 13/26 [00:00<00:00, 38.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.64it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.64it/s] 96%|#########6| 25/26 [00:00<00:00, 46.57it/s]100%|##########| 26/26 [00:00<00:00, 38.21it/s]
Test: [   0/  26]	Loss 0.475 (0.475)	test_acc   0.81 (  0.81)	test_minacc   0.03 (  0.03)	test_majacc   0.98 (  0.98)	Loss_d 0.475 (0.475)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.351 (0.398)	test_acc   0.88 (  0.85)	test_minacc   0.06 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.351 (0.398)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.06 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.421 (0.397)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.421 (0.397)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.353 (0.397)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.353 (0.397)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.54it/s]
Test: [  0/  1]	Loss 1.672 (1.672)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.672 (1.672)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.672 (1.672)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.672 (1.672)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/41/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0372 (0.0494)	validation_time 0.0004 (0.0026)	train_time 0.0368 (0.0463)
record: (train_acc, test_acc) (0.8455000204443932, 0.13100001215934753)
last accs (train_acc, test_acc) (0.8455000204443932, 0.13100001215934753)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.23it/s] 23%|##3       | 6/26 [00:00<00:00, 26.15it/s] 38%|###8      | 10/26 [00:00<00:00, 29.71it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.45it/s] 69%|######9   | 18/26 [00:00<00:00, 32.74it/s] 85%|########4 | 22/26 [00:00<00:00, 33.39it/s]100%|##########| 26/26 [00:00<00:00, 33.63it/s]100%|##########| 26/26 [00:00<00:00, 29.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.128 (2.646)	train_nll   0.34 (  0.39)	train_penalty   0.03 (  0.04)	weight_norm   1.79 (  2.26)	train_acc   0.87 (  0.85)	train_minacc   0.03 (  0.05)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.0259 (5.3141)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 27%|##6       | 7/26 [00:00<00:00, 35.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.59it/s] 50%|#####     | 13/26 [00:00<00:00, 39.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.10it/s] 96%|#########6| 25/26 [00:00<00:00, 46.21it/s]100%|##########| 26/26 [00:00<00:00, 39.30it/s]
Test: [   0/  26]	Loss 0.446 (0.446)	test_acc   0.81 (  0.81)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.446 (0.446)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.339 (0.376)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.339 (0.376)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.394 (0.373)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.394 (0.373)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.319 (0.371)	test_acc   0.87 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.319 (0.371)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.36it/s]
Test: [  0/  1]	Loss 1.845 (1.845)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.845 (1.845)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.845 (1.845)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.845 (1.845)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Overall Timing[  3/  1]	epoch_time 0.0375 (0.0464)	validation_time 0.0004 (0.0020)	train_time 0.0371 (0.0440)
record: (train_acc, test_acc) (0.8455000204443932, 0.13100001215934753)
last accs (train_acc, test_acc) (0.8492000260353089, 0.10000000149011612)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.75it/s] 23%|##3       | 6/26 [00:00<00:00, 25.72it/s] 38%|###8      | 10/26 [00:00<00:00, 29.67it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.69it/s] 69%|######9   | 18/26 [00:00<00:00, 32.83it/s] 85%|########4 | 22/26 [00:00<00:00, 33.52it/s]100%|##########| 26/26 [00:00<00:00, 34.11it/s]100%|##########| 26/26 [00:00<00:00, 29.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.498 (1.820)	train_nll   0.33 (  0.37)	train_penalty   0.03 (  0.04)	weight_norm   1.17 (  1.45)	train_acc   0.87 (  0.85)	train_minacc   0.03 (  0.08)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 4.9298 (5.0509)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.75it/s] 27%|##6       | 7/26 [00:00<00:00, 32.71it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.71it/s] 50%|#####     | 13/26 [00:00<00:00, 39.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.98it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.98it/s] 96%|#########6| 25/26 [00:00<00:00, 46.69it/s]100%|##########| 26/26 [00:00<00:00, 39.05it/s]
Test: [   0/  26]	Loss 0.420 (0.420)	test_acc   0.82 (  0.82)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.420 (0.420)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.333 (0.363)	test_acc   0.88 (  0.85)	test_minacc   0.06 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.333 (0.363)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.06 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.355 (0.357)	test_acc   0.83 (  0.85)	test_minacc   0.05 (  0.04)	test_majacc   0.99 (  1.00)	Loss_d 0.355 (0.357)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.05 (  0.04)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.310 (0.356)	test_acc   0.87 (  0.85)	test_minacc   0.03 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.310 (0.356)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.03 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.95it/s]
Test: [  0/  1]	Loss 1.685 (1.685)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.685 (1.685)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.685 (1.685)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.685 (1.685)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.89 (  0.89)
Overall Timing[  4/  1]	epoch_time 0.0371 (0.0445)	validation_time 0.0003 (0.0017)	train_time 0.0367 (0.0425)
record: (train_acc, test_acc) (0.8455000204443932, 0.13100001215934753)
last accs (train_acc, test_acc) (0.8519000200629234, 0.13100001215934753)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.41it/s] 19%|#9        | 5/26 [00:00<00:00, 25.08it/s] 35%|###4      | 9/26 [00:00<00:00, 29.94it/s] 50%|#####     | 13/26 [00:00<00:00, 31.32it/s] 65%|######5   | 17/26 [00:00<00:00, 32.65it/s] 81%|########  | 21/26 [00:00<00:00, 27.77it/s] 96%|#########6| 25/26 [00:00<00:00, 29.61it/s]100%|##########| 26/26 [00:00<00:00, 27.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.092 (1.317)	train_nll   0.32 (  0.37)	train_penalty   0.02 (  0.03)	weight_norm   0.78 (  0.95)	train_acc   0.87 (  0.85)	train_minacc   0.00 (  0.09)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.8477 (5.4335)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.47it/s] 27%|##6       | 7/26 [00:00<00:00, 36.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.97it/s] 50%|#####     | 13/26 [00:00<00:00, 42.49it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.66it/s] 96%|#########6| 25/26 [00:00<00:00, 48.21it/s]100%|##########| 26/26 [00:00<00:00, 41.40it/s]
Test: [   0/  26]	Loss 0.410 (0.410)	test_acc   0.81 (  0.81)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.410 (0.410)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.312 (0.350)	test_acc   0.88 (  0.85)	test_minacc   0.04 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.312 (0.350)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.04 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.339 (0.340)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.339 (0.340)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.282 (0.340)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.282 (0.340)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.08it/s]
Test: [  0/  1]	Loss 1.732 (1.732)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.732 (1.732)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.732 (1.732)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.732 (1.732)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
Overall Timing[  5/  1]	epoch_time 0.0358 (0.0431)	validation_time 0.0003 (0.0015)	train_time 0.0355 (0.0413)
record: (train_acc, test_acc) (0.8455000204443932, 0.13100001215934753)
last accs (train_acc, test_acc) (0.8506000232100487, 0.1080000028014183)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.80it/s] 19%|#9        | 5/26 [00:00<00:00, 22.31it/s] 35%|###4      | 9/26 [00:00<00:00, 27.54it/s] 50%|#####     | 13/26 [00:00<00:00, 29.75it/s] 65%|######5   | 17/26 [00:00<00:00, 31.37it/s] 81%|########  | 21/26 [00:00<00:00, 32.35it/s] 96%|#########6| 25/26 [00:00<00:00, 32.64it/s]100%|##########| 26/26 [00:00<00:00, 27.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.827 (0.994)	train_nll   0.31 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.51 (  0.64)	train_acc   0.87 (  0.85)	train_minacc   0.00 (  0.10)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 7.1328 (6.5096)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.01it/s] 31%|###       | 8/26 [00:00<00:00, 36.41it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.41it/s] 50%|#####     | 13/26 [00:00<00:00, 40.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.59it/s] 96%|#########6| 25/26 [00:00<00:00, 47.32it/s]100%|##########| 26/26 [00:00<00:00, 39.04it/s]
Test: [   0/  26]	Loss 0.392 (0.392)	test_acc   0.82 (  0.82)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.392 (0.392)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.324 (0.348)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 0.324 (0.348)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.90)
Test: [  20/  26]	Loss 0.351 (0.343)	test_acc   0.84 (  0.85)	test_minacc   0.09 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.351 (0.343)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.09 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.284 (0.343)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.284 (0.343)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.32it/s]
Test: [  0/  1]	Loss 1.459 (1.459)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 1.459 (1.459)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.459 (1.459)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 1.459 (1.459)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/41/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0371 (0.0422)	validation_time 0.0005 (0.0013)	train_time 0.0366 (0.0407)
record: (train_acc, test_acc) (0.8520000258684158, 0.17500001192092896)
last accs (train_acc, test_acc) (0.8520000258684158, 0.17500001192092896)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 15%|#5        | 4/26 [00:00<00:01, 17.86it/s] 31%|###       | 8/26 [00:00<00:00, 24.03it/s] 46%|####6     | 12/26 [00:00<00:00, 27.06it/s] 62%|######1   | 16/26 [00:00<00:00, 29.28it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.93it/s] 92%|#########2| 24/26 [00:00<00:00, 32.17it/s]100%|##########| 26/26 [00:00<00:00, 26.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.668 (0.774)	train_nll   0.32 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm   0.35 (  0.43)	train_acc   0.86 (  0.85)	train_minacc   0.48 (  0.17)	train_majacc   0.92 (  0.97)	train_corr   0.00 (  0.00)	l1 8.4233 (7.8820)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.51it/s] 27%|##6       | 7/26 [00:00<00:00, 32.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.49it/s] 46%|####6     | 12/26 [00:00<00:00, 37.98it/s] 62%|######1   | 16/26 [00:00<00:00, 32.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 32.07it/s] 92%|#########2| 24/26 [00:00<00:00, 44.92it/s]100%|##########| 26/26 [00:00<00:00, 36.62it/s]
Test: [   0/  26]	Loss 0.427 (0.427)	test_acc   0.80 (  0.80)	test_minacc   0.18 (  0.18)	test_majacc   0.94 (  0.94)	Loss_d 0.427 (0.427)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.324 (0.368)	test_acc   0.86 (  0.84)	test_minacc   0.23 (  0.25)	test_majacc   0.94 (  0.94)	Loss_d 0.324 (0.368)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.23 (  0.25)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.88 (  0.87)
Test: [  20/  26]	Loss 0.368 (0.358)	test_acc   0.83 (  0.84)	test_minacc   0.33 (  0.27)	test_majacc   0.93 (  0.94)	Loss_d 0.368 (0.358)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.33 (  0.27)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.85 (  0.87)
Test: [  26/  26]	Loss 0.300 (0.356)	test_acc   0.89 (  0.84)	test_minacc   0.33 (  0.28)	test_majacc   0.97 (  0.94)	Loss_d 0.300 (0.356)	test_acc_d   0.89 (  0.84)	test_minacc_d   0.33 (  0.28)	test_majacc_d   0.97 (  0.94)	test_corr_d   0.90 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.13it/s]
Test: [  0/  1]	Loss 1.573 (1.573)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.97 (  0.97)	Loss_d 1.573 (1.573)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 1.573 (1.573)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.97 (  0.97)	Loss_d 1.573 (1.573)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.67 (  0.67)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/41/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0392 (0.0419)	validation_time 0.0004 (0.0012)	train_time 0.0388 (0.0404)
record: (train_acc, test_acc) (0.8446000271439552, 0.3530000150203705)
last accs (train_acc, test_acc) (0.8446000271439552, 0.3530000150203705)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.76it/s] 19%|#9        | 5/26 [00:00<00:00, 22.33it/s] 35%|###4      | 9/26 [00:00<00:00, 26.45it/s] 50%|#####     | 13/26 [00:00<00:00, 29.23it/s] 65%|######5   | 17/26 [00:00<00:00, 31.52it/s] 81%|########  | 21/26 [00:00<00:00, 32.58it/s] 96%|#########6| 25/26 [00:00<00:00, 33.12it/s]100%|##########| 26/26 [00:00<00:00, 28.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.525 (0.636)	train_nll   0.28 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.24 (  0.29)	train_acc   0.88 (  0.85)	train_minacc   0.09 (  0.16)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 9.9345 (9.1880)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 20.29it/s] 35%|###4      | 9/26 [00:00<00:00, 37.92it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.92it/s] 58%|#####7    | 15/26 [00:00<00:00, 41.91it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 41.91it/s] 81%|########  | 21/26 [00:00<00:00, 47.63it/s]100%|##########| 26/26 [00:00<00:00, 41.05it/s]
Test: [   0/  26]	Loss 0.356 (0.356)	test_acc   0.85 (  0.85)	test_minacc   0.33 (  0.33)	test_majacc   0.97 (  0.97)	Loss_d 0.356 (0.356)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.307 (0.337)	test_acc   0.88 (  0.86)	test_minacc   0.30 (  0.33)	test_majacc   0.97 (  0.96)	Loss_d 0.307 (0.337)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.30 (  0.33)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.87)
Test: [  20/  26]	Loss 0.329 (0.330)	test_acc   0.87 (  0.86)	test_minacc   0.41 (  0.32)	test_majacc   0.97 (  0.96)	Loss_d 0.329 (0.330)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.41 (  0.32)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  26/  26]	Loss 0.262 (0.328)	test_acc   0.90 (  0.86)	test_minacc   0.39 (  0.32)	test_majacc   0.98 (  0.96)	Loss_d 0.262 (0.328)	test_acc_d   0.90 (  0.86)	test_minacc_d   0.39 (  0.32)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.91 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.44it/s]
Test: [  0/  1]	Loss 1.474 (1.474)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 1.474 (1.474)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.66 (  0.66)
Test: [  1/  1]	Loss 1.474 (1.474)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 1.474 (1.474)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.66 (  0.66)
Overall Timing[  8/  1]	epoch_time 0.0361 (0.0412)	validation_time 0.0003 (0.0011)	train_time 0.0358 (0.0399)
record: (train_acc, test_acc) (0.8446000271439552, 0.3530000150203705)
last accs (train_acc, test_acc) (0.8610000218153, 0.31800001859664917)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.15it/s] 19%|#9        | 5/26 [00:00<00:01, 20.17it/s] 35%|###4      | 9/26 [00:00<00:00, 25.98it/s] 50%|#####     | 13/26 [00:00<00:00, 29.03it/s] 65%|######5   | 17/26 [00:00<00:00, 30.94it/s] 81%|########  | 21/26 [00:00<00:00, 31.99it/s] 96%|#########6| 25/26 [00:00<00:00, 32.84it/s]100%|##########| 26/26 [00:00<00:00, 27.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.486 (0.557)	train_nll   0.30 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.19 (  0.22)	train_acc   0.88 (  0.85)	train_minacc   0.15 (  0.20)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 12.2879 (11.1210)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 27%|##6       | 7/26 [00:00<00:00, 32.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.13it/s] 50%|#####     | 13/26 [00:00<00:00, 37.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.88it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.88it/s] 96%|#########6| 25/26 [00:00<00:00, 45.75it/s]100%|##########| 26/26 [00:00<00:00, 37.42it/s]
Test: [   0/  26]	Loss 0.376 (0.376)	test_acc   0.83 (  0.83)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.376 (0.376)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.300 (0.334)	test_acc   0.89 (  0.86)	test_minacc   0.13 (  0.13)	test_majacc   1.00 (  0.98)	Loss_d 0.300 (0.334)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.13 (  0.13)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.94 (  0.92)
Test: [  20/  26]	Loss 0.330 (0.329)	test_acc   0.84 (  0.85)	test_minacc   0.15 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.330 (0.329)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.15 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.268 (0.326)	test_acc   0.88 (  0.86)	test_minacc   0.12 (  0.13)	test_majacc   1.00 (  0.98)	Loss_d 0.268 (0.326)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.12 (  0.13)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.94 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.10it/s]
Test: [  0/  1]	Loss 1.678 (1.678)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 1.678 (1.678)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.678 (1.678)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 1.678 (1.678)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
Overall Timing[  9/  1]	epoch_time 0.0361 (0.0407)	validation_time 0.0006 (0.0011)	train_time 0.0354 (0.0395)
record: (train_acc, test_acc) (0.8446000271439552, 0.3530000150203705)
last accs (train_acc, test_acc) (0.8553000249266625, 0.20100000500679016)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.14it/s] 19%|#9        | 5/26 [00:00<00:00, 21.56it/s] 35%|###4      | 9/26 [00:00<00:00, 27.02it/s] 50%|#####     | 13/26 [00:00<00:00, 28.89it/s] 65%|######5   | 17/26 [00:00<00:00, 31.05it/s] 81%|########  | 21/26 [00:00<00:00, 32.26it/s] 96%|#########6| 25/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:00<00:00, 27.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.417 (0.495)	train_nll   0.27 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.14 (  0.16)	train_acc   0.89 (  0.85)	train_minacc   0.27 (  0.21)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 14.2784 (13.3472)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.22it/s] 31%|###       | 8/26 [00:00<00:00, 33.13it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.13it/s] 54%|#####3    | 14/26 [00:00<00:00, 38.66it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.22it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.22it/s]100%|##########| 26/26 [00:00<00:00, 49.53it/s]100%|##########| 26/26 [00:00<00:00, 38.92it/s]
Test: [   0/  26]	Loss 0.357 (0.357)	test_acc   0.83 (  0.83)	test_minacc   0.31 (  0.31)	test_majacc   0.94 (  0.94)	Loss_d 0.357 (0.357)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.328 (0.339)	test_acc   0.88 (  0.85)	test_minacc   0.36 (  0.34)	test_majacc   0.95 (  0.94)	Loss_d 0.328 (0.339)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.36 (  0.34)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.87 (  0.86)
Test: [  20/  26]	Loss 0.324 (0.332)	test_acc   0.86 (  0.85)	test_minacc   0.44 (  0.33)	test_majacc   0.95 (  0.94)	Loss_d 0.324 (0.332)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.44 (  0.33)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.85 (  0.86)
Test: [  26/  26]	Loss 0.254 (0.330)	test_acc   0.88 (  0.85)	test_minacc   0.36 (  0.34)	test_majacc   0.96 (  0.94)	Loss_d 0.254 (0.330)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.36 (  0.34)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.89 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.26it/s]
Test: [  0/  1]	Loss 1.507 (1.507)	test_acc   0.35 (  0.35)	test_minacc   0.29 (  0.29)	test_majacc   0.95 (  0.95)	Loss_d 1.507 (1.507)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.61 (  0.61)
Test: [  1/  1]	Loss 1.507 (1.507)	test_acc   0.35 (  0.35)	test_minacc   0.29 (  0.29)	test_majacc   0.95 (  0.95)	Loss_d 1.507 (1.507)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.61 (  0.61)
Overall Timing[ 10/  1]	epoch_time 0.0362 (0.0403)	validation_time 0.0004 (0.0010)	train_time 0.0358 (0.0391)
record: (train_acc, test_acc) (0.8446000271439552, 0.3530000150203705)
last accs (train_acc, test_acc) (0.8540000228881836, 0.35200002789497375)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.20it/s] 19%|#9        | 5/26 [00:00<00:00, 22.52it/s] 35%|###4      | 9/26 [00:00<00:00, 28.39it/s] 50%|#####     | 13/26 [00:00<00:00, 30.48it/s] 65%|######5   | 17/26 [00:00<00:00, 31.72it/s] 81%|########  | 21/26 [00:00<00:00, 32.70it/s] 96%|#########6| 25/26 [00:00<00:00, 33.23it/s]100%|##########| 26/26 [00:00<00:00, 28.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.431 (0.474)	train_nll   0.30 (  0.34)	train_penalty   0.03 (  0.02)	weight_norm   0.13 (  0.14)	train_acc   0.87 (  0.85)	train_minacc   0.06 (  0.23)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 15.5322 (14.9538)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 27%|##6       | 7/26 [00:00<00:00, 37.61it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.61it/s] 50%|#####     | 13/26 [00:00<00:00, 43.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.84it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.84it/s] 96%|#########6| 25/26 [00:00<00:00, 48.51it/s]100%|##########| 26/26 [00:00<00:00, 41.23it/s]
Test: [   0/  26]	Loss 0.361 (0.361)	test_acc   0.83 (  0.83)	test_minacc   0.10 (  0.10)	test_majacc   1.00 (  1.00)	Loss_d 0.361 (0.361)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.10 (  0.10)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.293 (0.324)	test_acc   0.89 (  0.86)	test_minacc   0.15 (  0.12)	test_majacc   1.00 (  0.99)	Loss_d 0.293 (0.324)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.15 (  0.12)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.92)
Test: [  20/  26]	Loss 0.318 (0.318)	test_acc   0.85 (  0.86)	test_minacc   0.20 (  0.13)	test_majacc   0.98 (  0.99)	Loss_d 0.318 (0.318)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.20 (  0.13)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.260 (0.317)	test_acc   0.88 (  0.86)	test_minacc   0.12 (  0.13)	test_majacc   1.00 (  0.99)	Loss_d 0.260 (0.317)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.12 (  0.13)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.31it/s]
Test: [  0/  1]	Loss 1.540 (1.540)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 1.540 (1.540)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.540 (1.540)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 1.540 (1.540)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.77 (  0.77)
Overall Timing[ 11/  1]	epoch_time 0.0373 (0.0400)	validation_time 0.0006 (0.0010)	train_time 0.0367 (0.0389)
record: (train_acc, test_acc) (0.8446000271439552, 0.3530000150203705)
last accs (train_acc, test_acc) (0.8580000305771828, 0.23100000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 19%|#9        | 5/26 [00:00<00:00, 22.61it/s] 35%|###4      | 9/26 [00:00<00:00, 27.54it/s] 50%|#####     | 13/26 [00:00<00:00, 29.81it/s] 65%|######5   | 17/26 [00:00<00:00, 30.01it/s] 81%|########  | 21/26 [00:00<00:00, 31.42it/s] 96%|#########6| 25/26 [00:00<00:00, 32.48it/s]100%|##########| 26/26 [00:00<00:00, 27.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.409 (0.448)	train_nll   0.30 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.11 (  0.12)	train_acc   0.88 (  0.86)	train_minacc   0.15 (  0.27)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 17.0157 (16.3735)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.89it/s] 19%|#9        | 5/26 [00:00<00:01, 20.82it/s]                                               19%|#9        | 5/26 [00:00<00:01, 20.82it/s] 42%|####2     | 11/26 [00:00<00:00, 32.97it/s] 65%|######5   | 17/26 [00:00<00:00, 41.86it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.86it/s] 88%|########8 | 23/26 [00:00<00:00, 44.34it/s]100%|##########| 26/26 [00:00<00:00, 35.97it/s]
Test: [   0/  26]	Loss 0.353 (0.353)	test_acc   0.85 (  0.85)	test_minacc   0.33 (  0.33)	test_majacc   0.97 (  0.97)	Loss_d 0.353 (0.353)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.295 (0.328)	test_acc   0.89 (  0.86)	test_minacc   0.34 (  0.35)	test_majacc   0.97 (  0.95)	Loss_d 0.295 (0.328)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.34 (  0.35)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.90 (  0.88)
Test: [  20/  26]	Loss 0.328 (0.323)	test_acc   0.85 (  0.86)	test_minacc   0.38 (  0.34)	test_majacc   0.94 (  0.95)	Loss_d 0.328 (0.323)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.38 (  0.34)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.86 (  0.88)
Test: [  26/  26]	Loss 0.249 (0.322)	test_acc   0.90 (  0.86)	test_minacc   0.30 (  0.34)	test_majacc   0.99 (  0.95)	Loss_d 0.249 (0.322)	test_acc_d   0.90 (  0.86)	test_minacc_d   0.30 (  0.34)	test_majacc_d   0.99 (  0.95)	test_corr_d   0.93 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.11it/s]
Test: [  0/  1]	Loss 1.444 (1.444)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.94 (  0.94)	Loss_d 1.444 (1.444)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.444 (1.444)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.94 (  0.94)	Loss_d 1.444 (1.444)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.65 (  0.65)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/41/checkpoints/model_best.pth
Overall Timing[ 12/  1]	epoch_time 0.0358 (0.0397)	validation_time 0.0003 (0.0009)	train_time 0.0355 (0.0387)
record: (train_acc, test_acc) (0.8605000206828117, 0.3700000047683716)
last accs (train_acc, test_acc) (0.8605000206828117, 0.3700000047683716)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.03it/s] 19%|#9        | 5/26 [00:00<00:01, 19.87it/s] 35%|###4      | 9/26 [00:00<00:00, 26.14it/s] 50%|#####     | 13/26 [00:00<00:00, 29.70it/s] 65%|######5   | 17/26 [00:00<00:00, 31.76it/s] 81%|########  | 21/26 [00:00<00:00, 32.98it/s] 96%|#########6| 25/26 [00:00<00:00, 33.61it/s]100%|##########| 26/26 [00:00<00:00, 27.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.371 (0.433)	train_nll   0.27 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.89 (  0.86)	train_minacc   0.18 (  0.27)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 18.1187 (17.5422)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.43it/s] 27%|##6       | 7/26 [00:00<00:00, 33.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.40it/s] 50%|#####     | 13/26 [00:00<00:00, 39.74it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.74it/s] 92%|#########2| 24/26 [00:00<00:00, 46.67it/s]100%|##########| 26/26 [00:00<00:00, 37.98it/s]
Test: [   0/  26]	Loss 0.323 (0.323)	test_acc   0.86 (  0.86)	test_minacc   0.40 (  0.40)	test_majacc   0.97 (  0.97)	Loss_d 0.323 (0.323)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.317 (0.333)	test_acc   0.86 (  0.86)	test_minacc   0.23 (  0.40)	test_majacc   0.94 (  0.94)	Loss_d 0.317 (0.333)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.23 (  0.40)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.89 (  0.85)
Test: [  20/  26]	Loss 0.325 (0.328)	test_acc   0.87 (  0.86)	test_minacc   0.55 (  0.40)	test_majacc   0.94 (  0.94)	Loss_d 0.325 (0.328)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.55 (  0.40)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.82 (  0.85)
Test: [  26/  26]	Loss 0.252 (0.326)	test_acc   0.89 (  0.86)	test_minacc   0.30 (  0.40)	test_majacc   0.98 (  0.94)	Loss_d 0.252 (0.326)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.30 (  0.40)	test_majacc_d   0.98 (  0.94)	test_corr_d   0.91 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.79it/s]
Test: [  0/  1]	Loss 1.376 (1.376)	test_acc   0.41 (  0.41)	test_minacc   0.35 (  0.35)	test_majacc   0.91 (  0.91)	Loss_d 1.376 (1.376)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.55 (  0.55)
Test: [  1/  1]	Loss 1.376 (1.376)	test_acc   0.41 (  0.41)	test_minacc   0.35 (  0.35)	test_majacc   0.91 (  0.91)	Loss_d 1.376 (1.376)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.55 (  0.55)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/41/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0366 (0.0395)	validation_time 0.0004 (0.0009)	train_time 0.0362 (0.0385)
record: (train_acc, test_acc) (0.8605000249147415, 0.40700000524520874)
last accs (train_acc, test_acc) (0.8605000249147415, 0.40700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.23it/s] 19%|#9        | 5/26 [00:00<00:01, 19.73it/s] 35%|###4      | 9/26 [00:00<00:00, 25.16it/s] 50%|#####     | 13/26 [00:00<00:00, 28.20it/s] 65%|######5   | 17/26 [00:00<00:00, 30.33it/s] 81%|########  | 21/26 [00:00<00:00, 31.96it/s] 96%|#########6| 25/26 [00:00<00:00, 33.24it/s]100%|##########| 26/26 [00:00<00:00, 27.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.370 (0.414)	train_nll   0.28 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.88 (  0.86)	train_minacc   0.12 (  0.32)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 19.2788 (18.8139)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.77it/s] 27%|##6       | 7/26 [00:00<00:00, 30.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.02it/s] 50%|#####     | 13/26 [00:00<00:00, 38.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.38it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.38it/s] 96%|#########6| 25/26 [00:00<00:00, 46.43it/s]100%|##########| 26/26 [00:00<00:00, 37.41it/s]
Test: [   0/  26]	Loss 0.368 (0.368)	test_acc   0.84 (  0.84)	test_minacc   0.21 (  0.21)	test_majacc   0.98 (  0.98)	Loss_d 0.368 (0.368)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.290 (0.333)	test_acc   0.89 (  0.86)	test_minacc   0.28 (  0.29)	test_majacc   0.97 (  0.97)	Loss_d 0.290 (0.333)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.28 (  0.29)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.90)
Test: [  20/  26]	Loss 0.325 (0.323)	test_acc   0.84 (  0.86)	test_minacc   0.24 (  0.28)	test_majacc   0.96 (  0.97)	Loss_d 0.325 (0.323)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.24 (  0.28)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.257 (0.321)	test_acc   0.90 (  0.86)	test_minacc   0.27 (  0.28)	test_majacc   1.00 (  0.97)	Loss_d 0.257 (0.321)	test_acc_d   0.90 (  0.86)	test_minacc_d   0.27 (  0.28)	test_majacc_d   1.00 (  0.97)	test_corr_d   0.94 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.06it/s]
Test: [  0/  1]	Loss 1.544 (1.544)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.96 (  0.96)	Loss_d 1.544 (1.544)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 1.544 (1.544)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.96 (  0.96)	Loss_d 1.544 (1.544)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.72 (  0.72)
Overall Timing[ 14/  1]	epoch_time 0.0363 (0.0393)	validation_time 0.0005 (0.0008)	train_time 0.0358 (0.0383)
record: (train_acc, test_acc) (0.8605000249147415, 0.40700000524520874)
last accs (train_acc, test_acc) (0.8649000204205513, 0.32600000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.28it/s] 19%|#9        | 5/26 [00:00<00:00, 21.48it/s] 35%|###4      | 9/26 [00:00<00:00, 26.53it/s] 50%|#####     | 13/26 [00:00<00:00, 28.79it/s] 65%|######5   | 17/26 [00:00<00:00, 30.79it/s] 81%|########  | 21/26 [00:00<00:00, 32.28it/s] 96%|#########6| 25/26 [00:00<00:00, 32.72it/s]100%|##########| 26/26 [00:00<00:00, 27.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.001 (0.166)	train_nll   0.64 (  0.45)	train_penalty   0.00 (  0.01)	weight_norm   0.12 (  0.09)	train_acc   0.64 (  0.78)	train_minacc   0.76 (  0.50)	train_majacc   0.62 (  0.83)	train_corr   0.00 (  0.00)	l1 18.7407 (19.2704)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.96it/s] 31%|###       | 8/26 [00:00<00:00, 40.52it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.52it/s] 50%|#####     | 13/26 [00:00<00:00, 43.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.15it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.15it/s] 96%|#########6| 25/26 [00:00<00:00, 47.93it/s]100%|##########| 26/26 [00:00<00:00, 41.52it/s]
Test: [   0/  26]	Loss 0.649 (0.649)	test_acc   0.64 (  0.64)	test_minacc   0.72 (  0.72)	test_majacc   0.62 (  0.62)	Loss_d 0.649 (0.649)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.648 (0.657)	test_acc   0.63 (  0.61)	test_minacc   0.79 (  0.70)	test_majacc   0.60 (  0.60)	Loss_d 0.648 (0.657)	test_acc_d   0.63 (  0.61)	test_minacc_d   0.79 (  0.70)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.16 (  0.13)
Test: [  20/  26]	Loss 0.665 (0.658)	test_acc   0.59 (  0.61)	test_minacc   0.73 (  0.69)	test_majacc   0.57 (  0.60)	Loss_d 0.665 (0.658)	test_acc_d   0.59 (  0.61)	test_minacc_d   0.73 (  0.69)	test_majacc_d   0.57 (  0.60)	test_corr_d   0.03 (  0.13)
Test: [  26/  26]	Loss 0.641 (0.658)	test_acc   0.64 (  0.61)	test_minacc   0.73 (  0.69)	test_majacc   0.63 (  0.60)	Loss_d 0.641 (0.658)	test_acc_d   0.64 (  0.61)	test_minacc_d   0.73 (  0.69)	test_majacc_d   0.63 (  0.60)	test_corr_d   0.21 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.32it/s]
Test: [  0/  1]	Loss 0.621 (0.621)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.62 (  0.62)	Loss_d 0.621 (0.621)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.37 ( -0.37)
Test: [  1/  1]	Loss 0.621 (0.621)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.62 (  0.62)	Loss_d 0.621 (0.621)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.37 ( -0.37)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/41/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0362 (0.0391)	validation_time 0.0003 (0.0008)	train_time 0.0359 (0.0382)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.28it/s] 19%|#9        | 5/26 [00:00<00:00, 21.99it/s] 35%|###4      | 9/26 [00:00<00:00, 27.80it/s] 50%|#####     | 13/26 [00:00<00:00, 30.88it/s] 65%|######5   | 17/26 [00:00<00:00, 32.47it/s] 81%|########  | 21/26 [00:00<00:00, 33.27it/s] 96%|#########6| 25/26 [00:00<00:00, 33.29it/s]100%|##########| 26/26 [00:00<00:00, 28.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.14)	train_acc   0.58 (  0.59)	train_minacc   0.70 (  0.65)	train_majacc   0.57 (  0.57)	train_corr   0.00 (  0.00)	l1 18.3367 (18.4589)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.38it/s] 27%|##6       | 7/26 [00:00<00:00, 33.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.68it/s] 46%|####6     | 12/26 [00:00<00:00, 39.54it/s] 69%|######9   | 18/26 [00:00<00:00, 45.44it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.44it/s] 92%|#########2| 24/26 [00:00<00:00, 49.39it/s]100%|##########| 26/26 [00:00<00:00, 39.41it/s]
Test: [   0/  26]	Loss 0.679 (0.679)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.55 (  0.55)	Loss_d 0.679 (0.679)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.678 (0.681)	test_acc   0.57 (  0.55)	test_minacc   0.66 (  0.58)	test_majacc   0.56 (  0.55)	Loss_d 0.678 (0.681)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.66 (  0.58)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.13 (  0.11)
Test: [  20/  26]	Loss 0.682 (0.681)	test_acc   0.55 (  0.55)	test_minacc   0.62 (  0.58)	test_majacc   0.54 (  0.55)	Loss_d 0.682 (0.681)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.62 (  0.58)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.04 (  0.11)
Test: [  26/  26]	Loss 0.676 (0.681)	test_acc   0.57 (  0.55)	test_minacc   0.67 (  0.59)	test_majacc   0.56 (  0.55)	Loss_d 0.676 (0.681)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.67 (  0.59)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.17 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.26it/s]
Test: [  0/  1]	Loss 0.670 (0.670)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.56 (  0.56)	Loss_d 0.670 (0.670)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.670 (0.670)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.56 (  0.56)	Loss_d 0.670 (0.670)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 16/  1]	epoch_time 0.0350 (0.0389)	validation_time 0.0004 (0.0008)	train_time 0.0345 (0.0379)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.552700012743473, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.83it/s] 19%|#9        | 5/26 [00:00<00:00, 24.17it/s] 35%|###4      | 9/26 [00:00<00:00, 28.29it/s] 50%|#####     | 13/26 [00:00<00:00, 30.67it/s] 65%|######5   | 17/26 [00:00<00:00, 32.01it/s] 81%|########  | 21/26 [00:00<00:00, 32.65it/s] 96%|#########6| 25/26 [00:00<00:00, 32.89it/s]100%|##########| 26/26 [00:00<00:00, 28.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.53)	train_minacc   0.64 (  0.57)	train_majacc   0.48 (  0.53)	train_corr   0.00 (  0.00)	l1 18.2928 (18.3075)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.68it/s] 31%|###       | 8/26 [00:00<00:00, 40.40it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.40it/s] 50%|#####     | 13/26 [00:00<00:00, 43.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.67it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.67it/s] 96%|#########6| 25/26 [00:00<00:00, 49.82it/s]100%|##########| 26/26 [00:00<00:00, 42.71it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.687 (0.687)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.688 (0.689)	test_acc   0.54 (  0.52)	test_minacc   0.55 (  0.53)	test_majacc   0.53 (  0.52)	Loss_d 0.688 (0.689)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.07 (  0.05)
Test: [  20/  26]	Loss 0.689 (0.689)	test_acc   0.52 (  0.51)	test_minacc   0.56 (  0.53)	test_majacc   0.52 (  0.51)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.01 (  0.05)
Test: [  26/  26]	Loss 0.686 (0.689)	test_acc   0.50 (  0.52)	test_minacc   0.61 (  0.54)	test_majacc   0.48 (  0.51)	Loss_d 0.686 (0.689)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.11 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.21it/s]
Test: [  0/  1]	Loss 0.680 (0.680)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.680 (0.680)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.680 (0.680)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.680 (0.680)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 17/  1]	epoch_time 0.0376 (0.0388)	validation_time 0.0003 (0.0008)	train_time 0.0373 (0.0379)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5156000141799449, 0.5550000071525574)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.71it/s] 19%|#9        | 5/26 [00:00<00:00, 24.20it/s] 35%|###4      | 9/26 [00:00<00:00, 28.35it/s] 50%|#####     | 13/26 [00:00<00:00, 31.13it/s] 65%|######5   | 17/26 [00:00<00:00, 32.13it/s] 81%|########  | 21/26 [00:00<00:00, 33.37it/s] 96%|#########6| 25/26 [00:00<00:00, 33.55it/s]100%|##########| 26/26 [00:00<00:00, 29.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.51)	train_minacc   0.64 (  0.55)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 18.2837 (18.2873)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.53it/s] 15%|#5        | 4/26 [00:00<00:01, 20.98it/s] 38%|###8      | 10/26 [00:00<00:00, 38.09it/s]                                                38%|###8      | 10/26 [00:00<00:00, 38.09it/s] 62%|######1   | 16/26 [00:00<00:00, 42.64it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.64it/s] 85%|########4 | 22/26 [00:00<00:00, 47.98it/s]100%|##########| 26/26 [00:00<00:00, 38.86it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.57 (  0.57)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.50)	test_minacc   0.64 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.64 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.00)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.59 (  0.56)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.59 (  0.56)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.06 (  0.01)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.48 (  0.49)	test_minacc   0.61 (  0.57)	test_majacc   0.46 (  0.48)	Loss_d 0.690 (0.691)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.61 (  0.57)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.06 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.47it/s]
Test: [  0/  1]	Loss 0.683 (0.683)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.683 (0.683)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.683 (0.683)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.683 (0.683)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 18/  1]	epoch_time 0.0363 (0.0387)	validation_time 0.0004 (0.0007)	train_time 0.0358 (0.0378)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.49390001338720324, 0.5670000314712524)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 19%|#9        | 5/26 [00:00<00:00, 22.35it/s] 35%|###4      | 9/26 [00:00<00:00, 27.68it/s] 50%|#####     | 13/26 [00:00<00:00, 30.19it/s] 65%|######5   | 17/26 [00:00<00:00, 31.58it/s] 81%|########  | 21/26 [00:00<00:00, 32.61it/s] 96%|#########6| 25/26 [00:00<00:00, 33.30it/s]100%|##########| 26/26 [00:00<00:00, 28.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.46 (  0.48)	train_minacc   0.67 (  0.57)	train_majacc   0.43 (  0.47)	train_corr   0.00 (  0.00)	l1 18.2803 (18.2818)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 27%|##6       | 7/26 [00:00<00:00, 33.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.39it/s] 50%|#####     | 13/26 [00:00<00:00, 39.81it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.30it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.30it/s] 96%|#########6| 25/26 [00:00<00:00, 47.27it/s]100%|##########| 26/26 [00:00<00:00, 39.12it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.48 (  0.48)	test_minacc   0.62 (  0.62)	test_majacc   0.45 (  0.45)	Loss_d 0.691 (0.691)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.48)	test_minacc   0.66 (  0.58)	test_majacc   0.50 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.48)	test_minacc_d   0.66 (  0.58)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.01 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.48)	test_minacc   0.58 (  0.57)	test_majacc   0.47 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.58 (  0.57)	test_majacc_d   0.47 (  0.46)	test_corr_d  -0.09 ( -0.02)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.46 (  0.48)	test_minacc   0.67 (  0.58)	test_majacc   0.43 (  0.46)	Loss_d 0.691 (0.692)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.67 (  0.58)	test_majacc_d   0.43 (  0.46)	test_corr_d   0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.41it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.685 (0.685)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.685 (0.685)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 19/  1]	epoch_time 0.0369 (0.0386)	validation_time 0.0004 (0.0007)	train_time 0.0364 (0.0377)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.4804000082910061, 0.5630000233650208)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.87it/s] 19%|#9        | 5/26 [00:00<00:00, 22.76it/s] 35%|###4      | 9/26 [00:00<00:00, 27.74it/s] 50%|#####     | 13/26 [00:00<00:00, 30.45it/s] 65%|######5   | 17/26 [00:00<00:00, 31.53it/s] 81%|########  | 21/26 [00:00<00:00, 32.68it/s] 96%|#########6| 25/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:00<00:00, 28.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.44 (  0.47)	train_minacc   0.61 (  0.59)	train_majacc   0.41 (  0.45)	train_corr   0.00 (  0.00)	l1 18.2789 (18.2795)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 27%|##6       | 7/26 [00:00<00:00, 35.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.73it/s] 50%|#####     | 13/26 [00:00<00:00, 40.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.93it/s] 96%|#########6| 25/26 [00:00<00:00, 47.45it/s]100%|##########| 26/26 [00:00<00:00, 39.75it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.46 (  0.46)	test_minacc   0.65 (  0.65)	test_majacc   0.42 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.47)	test_minacc   0.68 (  0.59)	test_majacc   0.48 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.47)	test_minacc_d   0.68 (  0.59)	test_majacc_d   0.48 (  0.45)	test_corr_d  -0.00 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.47)	test_minacc   0.53 (  0.58)	test_majacc   0.50 (  0.45)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.47)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.50 (  0.45)	test_corr_d  -0.11 ( -0.04)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.43 (  0.47)	test_minacc   0.61 (  0.59)	test_majacc   0.41 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.43 (  0.47)	test_minacc_d   0.61 (  0.59)	test_majacc_d   0.41 (  0.45)	test_corr_d   0.01 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.96it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.51 (  0.51)	Loss_d 0.687 (0.687)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.51 (  0.51)	Loss_d 0.687 (0.687)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 20/  1]	epoch_time 0.0368 (0.0385)	validation_time 0.0004 (0.0007)	train_time 0.0364 (0.0377)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.47000000777840617, 0.5700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 19%|#9        | 5/26 [00:00<00:01, 19.53it/s] 35%|###4      | 9/26 [00:00<00:00, 24.67it/s] 50%|#####     | 13/26 [00:00<00:00, 28.08it/s] 62%|######1   | 16/26 [00:00<00:00, 27.68it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.72it/s] 92%|#########2| 24/26 [00:00<00:00, 31.27it/s]100%|##########| 26/26 [00:00<00:00, 26.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.44 (  0.46)	train_minacc   0.61 (  0.60)	train_majacc   0.41 (  0.44)	train_corr   0.00 (  0.00)	l1 18.2782 (18.2785)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 27%|##6       | 7/26 [00:00<00:00, 36.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.01it/s] 50%|#####     | 13/26 [00:00<00:00, 41.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.96it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.96it/s] 96%|#########6| 25/26 [00:00<00:00, 47.57it/s]100%|##########| 26/26 [00:00<00:00, 39.91it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.65 (  0.65)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.10 ( -0.10)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.46)	test_minacc   0.68 (  0.59)	test_majacc   0.46 (  0.43)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.68 (  0.59)	test_majacc_d   0.46 (  0.43)	test_corr_d  -0.01 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.46)	test_minacc   0.52 (  0.58)	test_majacc   0.51 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.46)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.51 (  0.44)	test_corr_d  -0.12 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.46)	test_minacc   0.61 (  0.60)	test_majacc   0.41 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.61 (  0.60)	test_majacc_d   0.41 (  0.44)	test_corr_d  -0.01 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.00it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.49 (  0.49)	Loss_d 0.688 (0.688)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.49 (  0.49)	Loss_d 0.688 (0.688)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 21/  1]	epoch_time 0.0369 (0.0384)	validation_time 0.0003 (0.0007)	train_time 0.0366 (0.0376)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.46470000249147414, 0.5649999976158142)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.04it/s] 19%|#9        | 5/26 [00:00<00:01, 20.49it/s] 31%|###       | 8/26 [00:00<00:00, 23.66it/s] 46%|####6     | 12/26 [00:00<00:00, 27.59it/s] 62%|######1   | 16/26 [00:00<00:00, 29.61it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.16it/s] 92%|#########2| 24/26 [00:00<00:00, 32.31it/s]100%|##########| 26/26 [00:00<00:00, 26.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.46 (  0.47)	train_minacc   0.61 (  0.59)	train_majacc   0.44 (  0.44)	train_corr   0.00 (  0.00)	l1 18.2778 (18.2780)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.50it/s] 23%|##3       | 6/26 [00:00<00:00, 32.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.73it/s] 46%|####6     | 12/26 [00:00<00:00, 43.19it/s] 65%|######5   | 17/26 [00:00<00:00, 43.78it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.78it/s] 88%|########8 | 23/26 [00:00<00:00, 48.28it/s]100%|##########| 26/26 [00:00<00:00, 40.35it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.61 (  0.61)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.12 ( -0.12)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.46)	test_minacc   0.66 (  0.59)	test_majacc   0.46 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.66 (  0.59)	test_majacc_d   0.46 (  0.44)	test_corr_d  -0.01 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.47)	test_minacc   0.48 (  0.58)	test_majacc   0.52 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.47)	test_minacc_d   0.48 (  0.58)	test_majacc_d   0.52 (  0.45)	test_corr_d  -0.09 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.61 (  0.59)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.61 (  0.59)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.03 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.75it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 22/  1]	epoch_time 0.0381 (0.0384)	validation_time 0.0004 (0.0007)	train_time 0.0377 (0.0376)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.4735000079572201, 0.5570000410079956)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 15%|#5        | 4/26 [00:00<00:01, 17.43it/s] 27%|##6       | 7/26 [00:00<00:00, 20.54it/s] 38%|###8      | 10/26 [00:00<00:00, 18.95it/s] 46%|####6     | 12/26 [00:00<00:00, 18.24it/s] 54%|#####3    | 14/26 [00:00<00:00, 17.80it/s] 62%|######1   | 16/26 [00:00<00:00, 17.53it/s] 69%|######9   | 18/26 [00:01<00:00, 17.35it/s] 77%|#######6  | 20/26 [00:01<00:00, 17.17it/s] 85%|########4 | 22/26 [00:01<00:00, 17.20it/s] 92%|#########2| 24/26 [00:01<00:00, 17.23it/s]100%|##########| 26/26 [00:01<00:00, 17.17it/s]100%|##########| 26/26 [00:01<00:00, 16.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 315 tensor(-0.0117, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
rho, theta 473 tensor(-0.0006, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 485 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 490 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 493 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 501 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
rho, theta 505 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 507 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
rho, theta 509 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
rho, theta 507 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [23][  26/  26]	Loss 0.000 (0.003)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.15)	train_acc   0.51 (  0.55)	train_minacc   0.58 (  0.46)	train_majacc   0.50 (  0.57)	train_corr   0.00 (  0.00)	l1 13.0306 (13.6447)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.31it/s] 23%|##3       | 6/26 [00:00<00:00, 24.49it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.49it/s] 46%|####6     | 12/26 [00:00<00:00, 37.43it/s] 69%|######9   | 18/26 [00:00<00:00, 42.02it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.02it/s] 92%|#########2| 24/26 [00:00<00:00, 47.03it/s]100%|##########| 26/26 [00:00<00:00, 36.36it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.48)	test_majacc   0.50 (  0.51)	Loss_d 0.692 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.47 (  0.46)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.51)	test_minacc   0.52 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.45 (  0.47)
Test: [  26/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.42 (  0.46)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.08it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.39 (  0.39)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.39 (  0.39)
Overall Timing[ 23/  1]	epoch_time 0.0454 (0.0387)	validation_time 0.0003 (0.0007)	train_time 0.0451 (0.0379)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5051000152230263, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.89it/s] 12%|#1        | 3/26 [00:00<00:02, 11.00it/s] 19%|#9        | 5/26 [00:00<00:01, 13.44it/s] 27%|##6       | 7/26 [00:00<00:01, 14.80it/s] 35%|###4      | 9/26 [00:00<00:01, 15.72it/s] 42%|####2     | 11/26 [00:00<00:00, 16.16it/s] 50%|#####     | 13/26 [00:00<00:00, 16.26it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.24it/s] 65%|######5   | 17/26 [00:01<00:00, 16.49it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.67it/s] 81%|########  | 21/26 [00:01<00:00, 16.66it/s] 88%|########8 | 23/26 [00:01<00:00, 16.82it/s] 96%|#########6| 25/26 [00:01<00:00, 16.80it/s]100%|##########| 26/26 [00:01<00:00, 15.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.0262 (13.0297)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.02it/s] 31%|###       | 8/26 [00:00<00:00, 40.93it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.93it/s] 50%|#####     | 13/26 [00:00<00:00, 42.49it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.92it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.92it/s] 96%|#########6| 25/26 [00:00<00:00, 47.37it/s]100%|##########| 26/26 [00:00<00:00, 41.19it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.48)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.33 (  0.31)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.27 (  0.30)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.26 (  0.30)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.28it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.21 (  0.21)
Overall Timing[ 24/  1]	epoch_time 0.0502 (0.0391)	validation_time 0.0004 (0.0007)	train_time 0.0498 (0.0384)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5005000167787075, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.57it/s] 12%|#1        | 3/26 [00:00<00:02,  9.67it/s] 19%|#9        | 5/26 [00:00<00:01, 12.30it/s] 27%|##6       | 7/26 [00:00<00:01, 13.86it/s] 35%|###4      | 9/26 [00:00<00:01, 14.84it/s] 42%|####2     | 11/26 [00:00<00:00, 15.44it/s] 50%|#####     | 13/26 [00:00<00:00, 15.67it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.03it/s] 65%|######5   | 17/26 [00:01<00:00, 16.19it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.37it/s] 81%|########  | 21/26 [00:01<00:00, 16.29it/s] 88%|########8 | 23/26 [00:01<00:00, 16.36it/s] 96%|#########6| 25/26 [00:01<00:00, 16.51it/s]100%|##########| 26/26 [00:01<00:00, 14.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.0112 (13.0188)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.86it/s] 27%|##6       | 7/26 [00:00<00:00, 30.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.23it/s] 50%|#####     | 13/26 [00:00<00:00, 38.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.10it/s] 96%|#########6| 25/26 [00:00<00:00, 45.78it/s]100%|##########| 26/26 [00:00<00:00, 37.26it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.48)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.34 (  0.31)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.27 (  0.31)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.27 (  0.30)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.02it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.22 (  0.22)
Overall Timing[ 25/  1]	epoch_time 0.0518 (0.0396)	validation_time 0.0004 (0.0006)	train_time 0.0513 (0.0389)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5006000156104564, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 12%|#1        | 3/26 [00:00<00:01, 11.53it/s] 19%|#9        | 5/26 [00:00<00:01, 13.47it/s] 27%|##6       | 7/26 [00:00<00:01, 14.60it/s] 35%|###4      | 9/26 [00:00<00:01, 15.40it/s] 42%|####2     | 11/26 [00:00<00:00, 15.98it/s] 50%|#####     | 13/26 [00:00<00:00, 16.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.59it/s] 65%|######5   | 17/26 [00:01<00:00, 16.69it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.79it/s] 88%|########8 | 23/26 [00:01<00:00, 22.20it/s]100%|##########| 26/26 [00:01<00:00, 17.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 12.9976 (13.0036)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.55it/s] 31%|###       | 8/26 [00:00<00:00, 41.19it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.19it/s] 50%|#####     | 13/26 [00:00<00:00, 40.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.69it/s] 96%|#########6| 25/26 [00:00<00:00, 47.41it/s]100%|##########| 26/26 [00:00<00:00, 41.26it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.48)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.34 (  0.32)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.28 (  0.31)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.27 (  0.31)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.09it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.24 (  0.24)
Overall Timing[ 26/  1]	epoch_time 0.0465 (0.0399)	validation_time 0.0003 (0.0006)	train_time 0.0461 (0.0392)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5010000150501728, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 19%|#9        | 5/26 [00:00<00:01, 19.93it/s] 35%|###4      | 9/26 [00:00<00:00, 25.44it/s] 50%|#####     | 13/26 [00:00<00:00, 28.47it/s] 65%|######5   | 17/26 [00:00<00:00, 30.49it/s] 81%|########  | 21/26 [00:00<00:00, 31.84it/s] 96%|#########6| 25/26 [00:00<00:00, 32.49it/s]100%|##########| 26/26 [00:00<00:00, 26.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 12.9995 (12.9969)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.90it/s] 31%|###       | 8/26 [00:00<00:00, 39.25it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.25it/s] 50%|#####     | 13/26 [00:00<00:00, 40.81it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.09it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.09it/s] 96%|#########6| 25/26 [00:00<00:00, 47.93it/s]100%|##########| 26/26 [00:00<00:00, 40.72it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.30 (  0.30)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.48)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.32 (  0.29)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.24 (  0.28)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.24 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.72it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.22 (  0.22)
Overall Timing[ 27/  1]	epoch_time 0.0379 (0.0398)	validation_time 0.0004 (0.0006)	train_time 0.0375 (0.0391)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5015000150203704, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 12%|#1        | 3/26 [00:00<00:01, 12.75it/s] 19%|#9        | 5/26 [00:00<00:01, 14.34it/s] 27%|##6       | 7/26 [00:00<00:01, 15.46it/s] 35%|###4      | 9/26 [00:00<00:01, 16.04it/s] 42%|####2     | 11/26 [00:00<00:00, 16.50it/s] 50%|#####     | 13/26 [00:00<00:00, 16.76it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.97it/s] 65%|######5   | 17/26 [00:01<00:00, 17.00it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.15it/s] 81%|########  | 21/26 [00:01<00:00, 17.21it/s] 88%|########8 | 23/26 [00:01<00:00, 17.10it/s] 96%|#########6| 25/26 [00:01<00:00, 17.12it/s]100%|##########| 26/26 [00:01<00:00, 15.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.51 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 13.0133 (13.0064)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.50it/s] 35%|###4      | 9/26 [00:00<00:00, 36.76it/s]                                               35%|###4      | 9/26 [00:00<00:00, 36.76it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.96it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.96it/s] 81%|########  | 21/26 [00:00<00:00, 46.24it/s]100%|##########| 26/26 [00:00<00:00, 39.38it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.48)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.28 (  0.25)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.20 (  0.24)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.19it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.18)
Overall Timing[ 28/  1]	epoch_time 0.0512 (0.0402)	validation_time 0.0003 (0.0006)	train_time 0.0509 (0.0395)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5022000130712986, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.83it/s] 12%|#1        | 3/26 [00:00<00:02, 11.07it/s] 19%|#9        | 5/26 [00:00<00:01, 13.21it/s] 27%|##6       | 7/26 [00:00<00:01, 14.59it/s] 35%|###4      | 9/26 [00:00<00:01, 15.37it/s] 42%|####2     | 11/26 [00:00<00:00, 15.93it/s] 50%|#####     | 13/26 [00:00<00:00, 16.23it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.48it/s] 65%|######5   | 17/26 [00:01<00:00, 16.37it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.32it/s] 81%|########  | 21/26 [00:01<00:00, 16.61it/s] 88%|########8 | 23/26 [00:01<00:00, 16.61it/s] 96%|#########6| 25/26 [00:01<00:00, 16.70it/s]100%|##########| 26/26 [00:01<00:00, 15.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.51 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 13.0278 (13.0208)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.73it/s] 27%|##6       | 7/26 [00:00<00:00, 34.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.99it/s] 50%|#####     | 13/26 [00:00<00:00, 41.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.86it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.86it/s] 96%|#########6| 25/26 [00:00<00:00, 48.60it/s]100%|##########| 26/26 [00:00<00:00, 40.70it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.48)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.24 (  0.21)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.16 (  0.20)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.16 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.95it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.15 (  0.15)
Overall Timing[ 29/  1]	epoch_time 0.0498 (0.0405)	validation_time 0.0006 (0.0006)	train_time 0.0492 (0.0398)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5029000118672847, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.69it/s] 12%|#1        | 3/26 [00:00<00:01, 11.99it/s] 19%|#9        | 5/26 [00:00<00:01, 13.99it/s] 27%|##6       | 7/26 [00:00<00:01, 15.10it/s] 35%|###4      | 9/26 [00:00<00:01, 15.47it/s] 42%|####2     | 11/26 [00:00<00:00, 15.88it/s] 50%|#####     | 13/26 [00:00<00:00, 16.07it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.25it/s] 65%|######5   | 17/26 [00:01<00:00, 16.39it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.65it/s] 81%|########  | 21/26 [00:01<00:00, 16.68it/s] 88%|########8 | 23/26 [00:01<00:00, 16.72it/s] 96%|#########6| 25/26 [00:01<00:00, 16.79it/s]100%|##########| 26/26 [00:01<00:00, 15.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.51 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 13.0419 (13.0350)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.86it/s] 27%|##6       | 7/26 [00:00<00:00, 36.58it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.58it/s] 50%|#####     | 13/26 [00:00<00:00, 41.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.34it/s] 96%|#########6| 25/26 [00:00<00:00, 47.82it/s]100%|##########| 26/26 [00:00<00:00, 40.45it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.48)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.21 (  0.18)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.12 (  0.16)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.13 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.19it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.12)
Overall Timing[ 30/  1]	epoch_time 0.0483 (0.0408)	validation_time 0.0004 (0.0006)	train_time 0.0478 (0.0401)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5034000118374824, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.68it/s] 12%|#1        | 3/26 [00:00<00:02,  9.59it/s] 19%|#9        | 5/26 [00:00<00:01, 12.22it/s] 27%|##6       | 7/26 [00:00<00:01, 13.92it/s] 35%|###4      | 9/26 [00:00<00:01, 14.99it/s] 42%|####2     | 11/26 [00:00<00:00, 15.68it/s] 50%|#####     | 13/26 [00:00<00:00, 16.15it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.48it/s] 65%|######5   | 17/26 [00:01<00:00, 16.72it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.85it/s] 81%|########  | 21/26 [00:01<00:00, 16.69it/s] 88%|########8 | 23/26 [00:01<00:00, 16.76it/s] 96%|#########6| 25/26 [00:01<00:00, 16.78it/s]100%|##########| 26/26 [00:01<00:00, 14.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.51 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 13.0553 (13.0488)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.60it/s] 27%|##6       | 7/26 [00:00<00:00, 37.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.24it/s] 50%|#####     | 13/26 [00:00<00:00, 42.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.68it/s] 96%|#########6| 25/26 [00:00<00:00, 47.98it/s]100%|##########| 26/26 [00:00<00:00, 41.02it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.48)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.18 (  0.15)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.09 (  0.13)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.10 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.68it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Overall Timing[ 31/  1]	epoch_time 0.0501 (0.0411)	validation_time 0.0003 (0.0006)	train_time 0.0497 (0.0404)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5038000129759311, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.86it/s] 12%|#1        | 3/26 [00:00<00:02, 10.87it/s] 19%|#9        | 5/26 [00:00<00:01, 13.27it/s] 27%|##6       | 7/26 [00:00<00:01, 14.64it/s] 35%|###4      | 9/26 [00:00<00:01, 15.42it/s] 42%|####2     | 11/26 [00:00<00:00, 15.68it/s] 50%|#####     | 13/26 [00:00<00:00, 16.09it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.39it/s] 65%|######5   | 17/26 [00:01<00:00, 16.59it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.74it/s] 81%|########  | 21/26 [00:01<00:00, 16.61it/s] 88%|########8 | 23/26 [00:01<00:00, 16.66it/s] 96%|#########6| 25/26 [00:01<00:00, 16.75it/s]100%|##########| 26/26 [00:01<00:00, 15.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.51 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 13.0682 (13.0620)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.24it/s] 31%|###       | 8/26 [00:00<00:00, 41.28it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.28it/s] 50%|#####     | 13/26 [00:00<00:00, 42.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.42it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.42it/s] 96%|#########6| 25/26 [00:00<00:00, 48.49it/s]100%|##########| 26/26 [00:00<00:00, 41.35it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.48)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.16 (  0.12)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.06 (  0.10)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.58 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.02it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Overall Timing[ 32/  1]	epoch_time 0.0494 (0.0413)	validation_time 0.0005 (0.0006)	train_time 0.0489 (0.0407)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5045000129342079, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.24it/s] 12%|#1        | 3/26 [00:00<00:02,  9.72it/s] 19%|#9        | 5/26 [00:00<00:01, 12.36it/s] 27%|##6       | 7/26 [00:00<00:01, 13.85it/s] 35%|###4      | 9/26 [00:00<00:01, 14.81it/s] 42%|####2     | 11/26 [00:00<00:00, 15.42it/s] 50%|#####     | 13/26 [00:00<00:00, 15.87it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.15it/s] 65%|######5   | 17/26 [00:01<00:00, 16.26it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.31it/s] 81%|########  | 21/26 [00:01<00:00, 16.40it/s] 88%|########8 | 23/26 [00:01<00:00, 16.53it/s] 96%|#########6| 25/26 [00:01<00:00, 16.56it/s]100%|##########| 26/26 [00:01<00:00, 14.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.51 (  0.50)	train_minacc   0.58 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 13.0806 (13.0746)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.46it/s] 27%|##6       | 7/26 [00:00<00:00, 30.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.47it/s] 46%|####6     | 12/26 [00:00<00:00, 37.29it/s] 65%|######5   | 17/26 [00:00<00:00, 41.76it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.76it/s] 88%|########8 | 23/26 [00:00<00:00, 46.63it/s]100%|##########| 26/26 [00:00<00:00, 37.44it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.48)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.13 (  0.10)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.52 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.04 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.05 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.71it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.05)
Overall Timing[ 33/  1]	epoch_time 0.0585 (0.0418)	validation_time 0.0080 (0.0008)	train_time 0.0505 (0.0409)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5052000140547752, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.12it/s] 12%|#1        | 3/26 [00:00<00:02, 10.42it/s] 19%|#9        | 5/26 [00:00<00:01, 12.76it/s] 27%|##6       | 7/26 [00:00<00:01, 14.23it/s] 35%|###4      | 9/26 [00:00<00:01, 14.96it/s] 42%|####2     | 11/26 [00:00<00:00, 15.61it/s] 50%|#####     | 13/26 [00:00<00:00, 15.88it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.19it/s] 65%|######5   | 17/26 [00:01<00:00, 16.24it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.37it/s] 81%|########  | 21/26 [00:01<00:00, 16.54it/s] 88%|########8 | 23/26 [00:01<00:00, 16.66it/s] 96%|#########6| 25/26 [00:01<00:00, 16.64it/s]100%|##########| 26/26 [00:01<00:00, 14.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.17)	train_acc   0.51 (  0.51)	train_minacc   0.58 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 13.0924 (13.0866)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.86it/s] 35%|###4      | 9/26 [00:00<00:00, 42.16it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.16it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.37it/s] 77%|#######6  | 20/26 [00:00<00:00, 50.06it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 50.06it/s]100%|##########| 26/26 [00:00<00:00, 51.15it/s]100%|##########| 26/26 [00:00<00:00, 43.03it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.48)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.12 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.53 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.03 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.12it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Overall Timing[ 34/  1]	epoch_time 0.0515 (0.0421)	validation_time 0.0005 (0.0008)	train_time 0.0509 (0.0412)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5054000128805637, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.81it/s] 12%|#1        | 3/26 [00:00<00:02, 10.13it/s] 19%|#9        | 5/26 [00:00<00:01, 12.76it/s] 27%|##6       | 7/26 [00:00<00:01, 14.34it/s] 35%|###4      | 9/26 [00:00<00:01, 15.17it/s] 42%|####2     | 11/26 [00:00<00:00, 15.73it/s] 50%|#####     | 13/26 [00:00<00:00, 16.10it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.35it/s] 65%|######5   | 17/26 [00:01<00:00, 16.42it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.50it/s] 81%|########  | 21/26 [00:01<00:00, 16.46it/s] 88%|########8 | 23/26 [00:01<00:00, 16.46it/s] 96%|#########6| 25/26 [00:01<00:00, 16.59it/s]100%|##########| 26/26 [00:01<00:00, 14.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.51 (  0.51)	train_minacc   0.58 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 13.1035 (13.0981)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.70it/s] 31%|###       | 8/26 [00:00<00:00, 29.56it/s]                                               31%|###       | 8/26 [00:00<00:00, 29.56it/s] 50%|#####     | 13/26 [00:00<00:00, 35.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.21it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.21it/s] 96%|#########6| 25/26 [00:00<00:00, 44.89it/s]100%|##########| 26/26 [00:00<00:00, 35.42it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.47 (  0.48)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.10 (  0.07)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.00 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.59it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 (  0.02)
Overall Timing[ 35/  1]	epoch_time 0.0519 (0.0424)	validation_time 0.0004 (0.0008)	train_time 0.0514 (0.0415)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.506100014001131, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 12%|#1        | 3/26 [00:00<00:02, 11.47it/s] 19%|#9        | 5/26 [00:00<00:01, 13.45it/s] 27%|##6       | 7/26 [00:00<00:01, 14.51it/s] 35%|###4      | 9/26 [00:00<00:01, 15.32it/s] 42%|####2     | 11/26 [00:00<00:00, 15.67it/s] 50%|#####     | 13/26 [00:00<00:00, 16.06it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.12it/s] 65%|######5   | 17/26 [00:01<00:00, 16.37it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.33it/s] 81%|########  | 21/26 [00:01<00:00, 16.27it/s] 88%|########8 | 23/26 [00:01<00:00, 16.48it/s] 96%|#########6| 25/26 [00:01<00:00, 16.64it/s]100%|##########| 26/26 [00:01<00:00, 15.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.51 (  0.51)	train_minacc   0.58 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 13.1141 (13.1089)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 27%|##6       | 7/26 [00:00<00:00, 35.43it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.43it/s] 50%|#####     | 13/26 [00:00<00:00, 41.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.60it/s] 96%|#########6| 25/26 [00:00<00:00, 47.35it/s]100%|##########| 26/26 [00:00<00:00, 39.87it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.09 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.56 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.01 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.58it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Overall Timing[ 36/  1]	epoch_time 0.0506 (0.0426)	validation_time 0.0004 (0.0008)	train_time 0.0501 (0.0417)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5069000104665756, 0.49500003457069397)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 12%|#1        | 3/26 [00:00<00:01, 11.51it/s] 19%|#9        | 5/26 [00:00<00:01, 13.48it/s] 27%|##6       | 7/26 [00:00<00:01, 14.63it/s] 35%|###4      | 9/26 [00:00<00:01, 15.36it/s] 42%|####2     | 11/26 [00:00<00:00, 15.85it/s] 50%|#####     | 13/26 [00:00<00:00, 16.17it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.30it/s] 65%|######5   | 17/26 [00:01<00:00, 16.48it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.58it/s] 81%|########  | 21/26 [00:01<00:00, 16.57it/s] 88%|########8 | 23/26 [00:01<00:00, 16.69it/s] 96%|#########6| 25/26 [00:01<00:00, 16.73it/s]100%|##########| 26/26 [00:01<00:00, 15.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.52 (  0.51)	train_minacc   0.61 (  0.52)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 13.1240 (13.1192)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.38it/s] 27%|##6       | 7/26 [00:00<00:00, 36.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.22it/s] 50%|#####     | 13/26 [00:00<00:00, 42.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.25it/s] 96%|#########6| 25/26 [00:00<00:00, 48.51it/s]100%|##########| 26/26 [00:00<00:00, 41.34it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.49 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.56 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.61 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.61 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.99it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.00 (  0.00)
Overall Timing[ 37/  1]	epoch_time 0.0497 (0.0428)	validation_time 0.0004 (0.0008)	train_time 0.0493 (0.0419)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5068000143766404, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.46it/s] 12%|#1        | 3/26 [00:00<00:02, 10.59it/s] 19%|#9        | 5/26 [00:00<00:01, 12.83it/s] 27%|##6       | 7/26 [00:00<00:01, 14.21it/s] 35%|###4      | 9/26 [00:00<00:01, 15.21it/s] 42%|####2     | 11/26 [00:00<00:00, 15.83it/s] 50%|#####     | 13/26 [00:00<00:00, 16.15it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.36it/s] 65%|######5   | 17/26 [00:01<00:00, 16.43it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.30it/s] 81%|########  | 21/26 [00:01<00:00, 16.54it/s] 88%|########8 | 23/26 [00:01<00:00, 16.62it/s] 96%|#########6| 25/26 [00:01<00:00, 16.73it/s]100%|##########| 26/26 [00:01<00:00, 14.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.51 (  0.51)	train_minacc   0.61 (  0.52)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 13.1333 (13.1288)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.41it/s] 19%|#9        | 5/26 [00:00<00:01, 19.72it/s]                                               19%|#9        | 5/26 [00:00<00:01, 19.72it/s] 42%|####2     | 11/26 [00:00<00:00, 34.61it/s] 65%|######5   | 17/26 [00:00<00:00, 40.36it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.36it/s] 88%|########8 | 23/26 [00:00<00:00, 46.25it/s]100%|##########| 26/26 [00:00<00:00, 35.14it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.56 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.61 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.61 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.94it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 38/  1]	epoch_time 0.0509 (0.0430)	validation_time 0.0004 (0.0008)	train_time 0.0505 (0.0422)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5067000095248222, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 12%|#1        | 3/26 [00:00<00:02, 11.41it/s] 19%|#9        | 5/26 [00:00<00:01, 13.58it/s] 27%|##6       | 7/26 [00:00<00:01, 14.82it/s] 35%|###4      | 9/26 [00:00<00:01, 15.59it/s] 42%|####2     | 11/26 [00:00<00:00, 16.06it/s] 50%|#####     | 13/26 [00:00<00:00, 16.35it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.49it/s] 65%|######5   | 17/26 [00:01<00:00, 16.61it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.77it/s] 81%|########  | 21/26 [00:01<00:00, 16.81it/s] 88%|########8 | 23/26 [00:01<00:00, 16.92it/s] 96%|#########6| 25/26 [00:01<00:00, 16.83it/s]100%|##########| 26/26 [00:01<00:00, 15.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.50 (  0.51)	train_minacc   0.61 (  0.54)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.1421 (13.1378)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 27%|##6       | 7/26 [00:00<00:00, 32.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.24it/s] 50%|#####     | 13/26 [00:00<00:00, 38.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.38it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.38it/s] 96%|#########6| 25/26 [00:00<00:00, 46.73it/s]100%|##########| 26/26 [00:00<00:00, 38.09it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.51 (  0.52)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.06 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.58 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.58 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.61 (  0.54)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.02 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.06it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 39/  1]	epoch_time 0.0491 (0.0431)	validation_time 0.0004 (0.0008)	train_time 0.0487 (0.0423)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5038000081181526, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.98it/s] 12%|#1        | 3/26 [00:00<00:02, 11.02it/s] 19%|#9        | 5/26 [00:00<00:01, 13.36it/s] 27%|##6       | 7/26 [00:00<00:01, 14.43it/s] 35%|###4      | 9/26 [00:00<00:01, 15.26it/s] 42%|####2     | 11/26 [00:00<00:00, 15.78it/s] 50%|#####     | 13/26 [00:00<00:00, 16.12it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.39it/s] 65%|######5   | 17/26 [00:01<00:00, 16.52it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.32it/s] 81%|########  | 21/26 [00:01<00:00, 16.42it/s] 88%|########8 | 23/26 [00:01<00:00, 16.62it/s] 96%|#########6| 25/26 [00:01<00:00, 16.83it/s]100%|##########| 26/26 [00:01<00:00, 15.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.50 (  0.50)	train_minacc   0.61 (  0.54)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.1503 (13.1463)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 27%|##6       | 7/26 [00:00<00:00, 31.84it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.84it/s] 50%|#####     | 13/26 [00:00<00:00, 38.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.59it/s] 96%|#########6| 25/26 [00:00<00:00, 46.02it/s]100%|##########| 26/26 [00:00<00:00, 37.72it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.55 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.59 (  0.54)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.04 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.61 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.36it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 40/  1]	epoch_time 0.0499 (0.0433)	validation_time 0.0004 (0.0007)	train_time 0.0495 (0.0425)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5014000094234944, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.74it/s] 12%|#1        | 3/26 [00:00<00:01, 11.84it/s] 19%|#9        | 5/26 [00:00<00:01, 13.83it/s] 27%|##6       | 7/26 [00:00<00:01, 15.00it/s] 35%|###4      | 9/26 [00:00<00:01, 15.62it/s] 42%|####2     | 11/26 [00:00<00:00, 16.13it/s] 50%|#####     | 13/26 [00:00<00:00, 16.41it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.60it/s] 65%|######5   | 17/26 [00:01<00:00, 16.68it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.77it/s] 81%|########  | 21/26 [00:01<00:00, 16.65it/s] 88%|########8 | 23/26 [00:01<00:00, 16.76it/s] 96%|#########6| 25/26 [00:01<00:00, 16.87it/s]100%|##########| 26/26 [00:01<00:00, 15.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.50 (  0.50)	train_minacc   0.64 (  0.55)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 13.1579 (13.1542)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.55it/s] 31%|###       | 8/26 [00:00<00:00, 32.36it/s]                                               31%|###       | 8/26 [00:00<00:00, 32.36it/s] 50%|#####     | 13/26 [00:00<00:00, 36.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.18it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.18it/s] 96%|#########6| 25/26 [00:00<00:00, 45.40it/s]100%|##########| 26/26 [00:00<00:00, 36.96it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.55 (  0.54)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.05 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.61 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.64 (  0.56)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.64 (  0.56)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 10.44it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 41/  1]	epoch_time 0.0509 (0.0435)	validation_time 0.0017 (0.0008)	train_time 0.0491 (0.0427)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.4997000069916248, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.56it/s] 12%|#1        | 3/26 [00:00<00:01, 12.04it/s] 19%|#9        | 5/26 [00:00<00:01, 13.96it/s] 27%|##6       | 7/26 [00:00<00:01, 14.92it/s] 35%|###4      | 9/26 [00:00<00:01, 15.48it/s] 42%|####2     | 11/26 [00:00<00:00, 15.68it/s] 50%|#####     | 13/26 [00:00<00:00, 16.04it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.14it/s] 65%|######5   | 17/26 [00:01<00:00, 16.40it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.62it/s] 81%|########  | 21/26 [00:01<00:00, 16.72it/s] 88%|########8 | 23/26 [00:01<00:00, 16.82it/s] 96%|#########6| 25/26 [00:01<00:00, 16.89it/s]100%|##########| 26/26 [00:01<00:00, 15.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.49 (  0.50)	train_minacc   0.64 (  0.56)	train_majacc   0.47 (  0.49)	train_corr   0.00 (  0.00)	l1 13.1650 (13.1615)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 34.31it/s] 38%|###8      | 10/26 [00:00<00:00, 46.61it/s]                                                38%|###8      | 10/26 [00:00<00:00, 46.61it/s] 62%|######1   | 16/26 [00:00<00:00, 47.29it/s]                                                62%|######1   | 16/26 [00:00<00:00, 47.29it/s] 85%|########4 | 22/26 [00:00<00:00, 50.75it/s]100%|##########| 26/26 [00:00<00:00, 43.78it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.62 (  0.56)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.62 (  0.56)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.64 (  0.56)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.64 (  0.56)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.35it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 42/  1]	epoch_time 0.0504 (0.0437)	validation_time 0.0003 (0.0008)	train_time 0.0500 (0.0428)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.49660000517964364, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.18it/s] 12%|#1        | 3/26 [00:00<00:02, 10.12it/s] 19%|#9        | 5/26 [00:00<00:01, 12.63it/s] 27%|##6       | 7/26 [00:00<00:01, 14.13it/s] 35%|###4      | 9/26 [00:00<00:01, 15.10it/s] 42%|####2     | 11/26 [00:00<00:00, 15.67it/s] 50%|#####     | 13/26 [00:00<00:00, 16.18it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.37it/s] 65%|######5   | 17/26 [00:01<00:00, 16.67it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.63it/s] 81%|########  | 21/26 [00:01<00:00, 16.68it/s] 88%|########8 | 23/26 [00:01<00:00, 16.58it/s] 96%|#########6| 25/26 [00:01<00:00, 16.62it/s]100%|##########| 26/26 [00:01<00:00, 14.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.48 (  0.49)	train_minacc   0.64 (  0.57)	train_majacc   0.46 (  0.48)	train_corr   0.00 (  0.00)	l1 13.1715 (13.1683)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.76it/s] 27%|##6       | 7/26 [00:00<00:00, 28.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.76it/s] 50%|#####     | 13/26 [00:00<00:00, 36.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.02it/s] 96%|#########6| 25/26 [00:00<00:00, 45.63it/s]100%|##########| 26/26 [00:00<00:00, 36.60it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.62 (  0.56)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.62 (  0.56)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.64 (  0.57)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.64 (  0.57)	test_majacc_d   0.46 (  0.48)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.98it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 43/  1]	epoch_time 0.0487 (0.0438)	validation_time 0.0004 (0.0008)	train_time 0.0483 (0.0430)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.4942000077664852, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.25it/s] 12%|#1        | 3/26 [00:00<00:02, 11.42it/s] 19%|#9        | 5/26 [00:00<00:01, 13.42it/s] 27%|##6       | 7/26 [00:00<00:01, 14.58it/s] 35%|###4      | 9/26 [00:00<00:01, 15.36it/s] 42%|####2     | 11/26 [00:00<00:00, 15.93it/s] 50%|#####     | 13/26 [00:00<00:00, 16.24it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.48it/s] 65%|######5   | 17/26 [00:01<00:00, 16.62it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.75it/s] 81%|########  | 21/26 [00:01<00:00, 16.70it/s] 88%|########8 | 23/26 [00:01<00:00, 16.82it/s] 96%|#########6| 25/26 [00:01<00:00, 16.91it/s]100%|##########| 26/26 [00:01<00:00, 15.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.47 (  0.49)	train_minacc   0.64 (  0.57)	train_majacc   0.44 (  0.48)	train_corr   0.00 (  0.00)	l1 13.1776 (13.1746)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.34it/s] 23%|##3       | 6/26 [00:00<00:00, 29.29it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.29it/s] 46%|####6     | 12/26 [00:00<00:00, 40.31it/s] 69%|######9   | 18/26 [00:00<00:00, 43.46it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.46it/s] 92%|#########2| 24/26 [00:00<00:00, 48.66it/s]100%|##########| 26/26 [00:00<00:00, 39.37it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.64 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.64 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.64 (  0.58)	test_majacc   0.44 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.64 (  0.58)	test_majacc_d   0.44 (  0.48)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.09it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.00 (  0.00)
Overall Timing[ 44/  1]	epoch_time 0.0500 (0.0439)	validation_time 0.0004 (0.0007)	train_time 0.0496 (0.0431)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.49250001379847524, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.33it/s] 12%|#1        | 3/26 [00:00<00:02, 10.54it/s] 19%|#9        | 5/26 [00:00<00:01, 12.63it/s] 27%|##6       | 7/26 [00:00<00:01, 13.88it/s] 35%|###4      | 9/26 [00:00<00:01, 10.49it/s] 42%|####2     | 11/26 [00:00<00:01, 12.03it/s] 50%|#####     | 13/26 [00:01<00:00, 13.22it/s] 58%|#####7    | 15/26 [00:01<00:00, 14.15it/s] 65%|######5   | 17/26 [00:01<00:00, 14.86it/s] 73%|#######3  | 19/26 [00:01<00:00, 15.38it/s] 81%|########  | 21/26 [00:01<00:00, 15.70it/s] 88%|########8 | 23/26 [00:01<00:00, 15.97it/s] 96%|#########6| 25/26 [00:01<00:00, 16.23it/s]100%|##########| 26/26 [00:01<00:00, 13.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.47 (  0.49)	train_minacc   0.64 (  0.58)	train_majacc   0.44 (  0.48)	train_corr   0.00 (  0.00)	l1 13.1832 (13.1804)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.36it/s] 31%|###       | 8/26 [00:00<00:00, 40.75it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.75it/s] 50%|#####     | 13/26 [00:00<00:00, 41.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.60it/s] 96%|#########6| 25/26 [00:00<00:00, 48.38it/s]100%|##########| 26/26 [00:00<00:00, 42.02it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.55 (  0.56)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.62 (  0.57)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.62 (  0.57)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.64 (  0.58)	test_majacc   0.44 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.64 (  0.58)	test_majacc_d   0.44 (  0.47)	test_corr_d  -0.05 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.32it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.01)
Overall Timing[ 45/  1]	epoch_time 0.0527 (0.0441)	validation_time 0.0004 (0.0007)	train_time 0.0523 (0.0433)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.4901000104546547, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.51it/s] 12%|#1        | 3/26 [00:00<00:02, 10.71it/s] 19%|#9        | 5/26 [00:00<00:01, 12.89it/s] 27%|##6       | 7/26 [00:00<00:01, 14.23it/s] 35%|###4      | 9/26 [00:00<00:01, 15.12it/s] 42%|####2     | 11/26 [00:00<00:00, 15.68it/s] 50%|#####     | 13/26 [00:00<00:00, 16.05it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.28it/s] 65%|######5   | 17/26 [00:01<00:00, 16.54it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.56it/s] 81%|########  | 21/26 [00:01<00:00, 16.52it/s] 88%|########8 | 23/26 [00:01<00:00, 16.76it/s] 96%|#########6| 25/26 [00:01<00:00, 16.92it/s]100%|##########| 26/26 [00:01<00:00, 15.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.47 (  0.49)	train_minacc   0.64 (  0.59)	train_majacc   0.44 (  0.47)	train_corr   0.00 (  0.00)	l1 13.1883 (13.1857)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.40it/s] 35%|###4      | 9/26 [00:00<00:00, 39.19it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.19it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.56it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.56it/s] 81%|########  | 21/26 [00:00<00:00, 45.29it/s]100%|##########| 26/26 [00:00<00:00, 41.56it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.57 (  0.56)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.62 (  0.58)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.62 (  0.58)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.64 (  0.59)	test_majacc   0.44 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.64 (  0.59)	test_majacc_d   0.44 (  0.47)	test_corr_d  -0.05 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.47it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Overall Timing[ 46/  1]	epoch_time 0.0493 (0.0442)	validation_time 0.0003 (0.0007)	train_time 0.0490 (0.0434)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.4875000094473362, 0.5420000553131104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.45it/s] 12%|#1        | 3/26 [00:00<00:01, 12.46it/s] 19%|#9        | 5/26 [00:00<00:01, 14.30it/s] 27%|##6       | 7/26 [00:00<00:01, 15.32it/s] 35%|###4      | 9/26 [00:00<00:01, 15.96it/s] 42%|####2     | 11/26 [00:00<00:00, 16.30it/s] 50%|#####     | 13/26 [00:00<00:00, 16.64it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.86it/s] 65%|######5   | 17/26 [00:01<00:00, 16.99it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.00it/s] 81%|########  | 21/26 [00:01<00:00, 16.76it/s] 88%|########8 | 23/26 [00:01<00:00, 16.77it/s] 96%|#########6| 25/26 [00:01<00:00, 16.75it/s]100%|##########| 26/26 [00:01<00:00, 15.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.47 (  0.49)	train_minacc   0.67 (  0.59)	train_majacc   0.44 (  0.47)	train_corr   0.00 (  0.00)	l1 13.1930 (13.1906)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 27%|##6       | 7/26 [00:00<00:00, 32.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.48it/s] 50%|#####     | 13/26 [00:00<00:00, 40.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.97it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.97it/s] 96%|#########6| 25/26 [00:00<00:00, 47.59it/s]100%|##########| 26/26 [00:00<00:00, 39.16it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.54 (  0.54)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.60 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.60 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.62 (  0.58)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.62 (  0.58)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.67 (  0.59)	test_majacc   0.44 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.67 (  0.59)	test_majacc_d   0.44 (  0.47)	test_corr_d  -0.05 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.34it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 (  0.02)
Overall Timing[ 47/  1]	epoch_time 0.0528 (0.0444)	validation_time 0.0004 (0.0007)	train_time 0.0524 (0.0436)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.4856000083982944, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.49it/s] 12%|#1        | 3/26 [00:00<00:01, 12.15it/s] 19%|#9        | 5/26 [00:00<00:01, 14.04it/s] 27%|##6       | 7/26 [00:00<00:01, 15.05it/s] 35%|###4      | 9/26 [00:00<00:01, 15.69it/s] 42%|####2     | 11/26 [00:00<00:00, 16.05it/s] 50%|#####     | 13/26 [00:00<00:00, 16.15it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.28it/s] 65%|######5   | 17/26 [00:01<00:00, 16.41it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.46it/s] 81%|########  | 21/26 [00:01<00:00, 14.84it/s] 88%|########8 | 23/26 [00:01<00:00, 15.39it/s] 96%|#########6| 25/26 [00:01<00:00, 15.83it/s]100%|##########| 26/26 [00:01<00:00, 14.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.47 (  0.48)	train_minacc   0.67 (  0.59)	train_majacc   0.44 (  0.46)	train_corr   0.00 (  0.00)	l1 13.1972 (13.1951)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.71it/s] 31%|###       | 8/26 [00:00<00:00, 42.19it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.19it/s] 50%|#####     | 13/26 [00:00<00:00, 44.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.58it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.58it/s] 96%|#########6| 25/26 [00:00<00:00, 49.23it/s]100%|##########| 26/26 [00:00<00:00, 42.44it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.57 (  0.57)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.60 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.60 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.62 (  0.58)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.62 (  0.58)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.67 (  0.59)	test_majacc   0.44 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.67 (  0.59)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.05 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.62it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.02 (  0.02)
Overall Timing[ 48/  1]	epoch_time 0.0502 (0.0445)	validation_time 0.0004 (0.0007)	train_time 0.0498 (0.0437)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.4834000073671341, 0.550000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.99it/s] 15%|#5        | 4/26 [00:00<00:01, 16.03it/s] 23%|##3       | 6/26 [00:00<00:01, 16.52it/s] 31%|###       | 8/26 [00:00<00:01, 16.77it/s] 38%|###8      | 10/26 [00:00<00:00, 16.82it/s] 46%|####6     | 12/26 [00:00<00:00, 16.74it/s] 54%|#####3    | 14/26 [00:00<00:00, 16.71it/s] 62%|######1   | 16/26 [00:00<00:00, 16.64it/s] 69%|######9   | 18/26 [00:01<00:00, 16.74it/s] 77%|#######6  | 20/26 [00:01<00:00, 16.60it/s] 85%|########4 | 22/26 [00:01<00:00, 16.66it/s] 92%|#########2| 24/26 [00:01<00:00, 16.81it/s]100%|##########| 26/26 [00:01<00:00, 16.87it/s]100%|##########| 26/26 [00:01<00:00, 15.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.45 (  0.48)	train_minacc   0.58 (  0.59)	train_majacc   0.43 (  0.46)	train_corr   0.00 (  0.00)	l1 13.2012 (13.1992)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 27%|##6       | 7/26 [00:00<00:00, 32.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.66it/s] 50%|#####     | 13/26 [00:00<00:00, 39.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.19it/s] 96%|#########6| 25/26 [00:00<00:00, 47.12it/s]100%|##########| 26/26 [00:00<00:00, 38.66it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.60 (  0.56)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.60 (  0.56)	test_majacc_d   0.48 (  0.47)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.62 (  0.58)	test_majacc   0.47 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.62 (  0.58)	test_majacc_d   0.47 (  0.46)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.48)	test_minacc   0.58 (  0.59)	test_majacc   0.43 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.58 (  0.59)	test_majacc_d   0.43 (  0.46)	test_corr_d  -0.05 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.03 (  0.03)
Overall Timing[ 49/  1]	epoch_time 0.0515 (0.0446)	validation_time 0.0004 (0.0007)	train_time 0.0512 (0.0439)
record: (train_acc, test_acc) (0.6109000086784363, 0.6520000100135803)
last accs (train_acc, test_acc) (0.4818000096976757, 0.5430000424385071)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.156 MB of 0.156 MB uploadedwandb: \ 0.156 MB of 0.156 MB uploadedwandb: | 0.156 MB of 0.156 MB uploadedwandb: / 0.156 MB of 0.156 MB uploadedwandb: - 0.178 MB of 0.186 MB uploaded (0.003 MB deduped)wandb: \ 0.512 MB of 0.512 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/diagnostics/epoch_time_val █▂▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▂▃▄▃▂▄▃▄▄▅▄▄▄▄▄▄▄▄▄▄▄▄
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/diagnostics/train_time_val █▂▂▂▁▁▂▁▁▂▁▁▁▁▂▁▁▁▂▃▅▄▂▅▄▅▄▅▅▅▄▅▄▄▅▄▅▄▅▅
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/diagnostics/validation_time_val ▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▂▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/Loss_avg ██▇█▇▆▆▆▆▆▆▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/Loss_d_avg ██▇█▇▆▆▆▆▆▆▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/Loss_d_val ██▇█▇▆▆▆▆▆▆▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/Loss_val ██▇█▇▆▆▆▆▆▆▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_acc_avg ▁▁▁▁▁▂▄▄▄▃▄▅█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_acc_d_avg ▁▁▁▁▁▂▄▄▄▃▄▅█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_acc_d_val ▁▁▁▁▁▂▄▄▄▃▄▅█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_acc_val ▁▁▁▁▁▂▄▄▄▃▄▅█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_corr_d_avg ████▇▇▆▆▆▇▆▆▁▂▂▂▂▂▂▅▄▄▄▄▄▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_corr_d_val ████▇▇▆▆▆▇▆▆▁▂▂▂▂▂▂▅▄▄▄▄▄▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_majacc_avg ████████▇█▇▇▃▂▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_majacc_d_avg ████████▇█▇▇▃▂▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_majacc_d_val ████████▇█▇▇▃▂▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_majacc_val ████████▇█▇▇▃▂▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_minacc_avg ▁▁▁▁▁▂▄▄▄▃▄▅█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_minacc_d_avg ▁▁▁▁▁▂▄▄▄▃▄▅█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_minacc_d_val ▁▁▁▁▁▂▄▄▄▃▄▅█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_minacc_val ▁▁▁▁▁▂▄▄▄▃▄▅█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/Loss_val █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/l1_avg ▂▂▁▁▁▂▂▃▅▆▇▇███████▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/l1_val ▂▂▁▁▁▂▃▄▆▆▇████████▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_acc_avg ▆███████████▇▃▂▂▁▁▁▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_acc_val ████████████▄▃▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_majacc_avg ▆███████████▆▃▂▂▁▁▁▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_majacc_val ██████▇█████▄▃▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_minacc_avg ▂▁▁▁▂▂▃▃▃▃▄▄▆█▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_minacc_val ▁▁▁▁▁▁▅▂▄▂▂▃█▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_nll_avg ▇▃▃▂▂▂▁▁▁▁▁▁▃███████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_nll_val ▃▃▃▂▂▂▂▁▁▁▁▁▇███████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_penalty_avg █▂▂▂▂▂▂▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_penalty_val █▆▅▄▄▄▃▄▃▄▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/weight_norm_val █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/diagnostics/epoch_time_val 0.05155
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/diagnostics/train_time_val 0.05115
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/diagnostics/validation_time_val 0.00038
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/Loss_avg 0.69321
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/Loss_d_avg 0.69321
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/Loss_d_val 0.69321
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/Loss_val 0.69321
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_acc_avg 0.543
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_acc_d_avg 0.543
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_acc_d_val 0.543
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_acc_val 0.543
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_corr_d_avg 0.02555
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_corr_d_val 0.02555
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_majacc_avg 0.47
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_majacc_d_avg 0.47
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_majacc_d_val 0.47
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_majacc_val 0.47
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_minacc_avg 0.55111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_minacc_d_avg 0.55111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_minacc_d_val 0.55111
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/test/test_minacc_val 0.55111
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/l1_avg 13.19922
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/l1_val 13.20116
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_acc_avg 0.4825
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_acc_val 0.452
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_majacc_avg 0.46322
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_majacc_val 0.43318
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_minacc_avg 0.58984
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_minacc_val 0.57576
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_nll_avg 0.69304
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_nll_val 0.69333
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/weight_norm_avg 0.16169
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/41/logs/train/weight_norm_val 0.16157
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/pyg44me9
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_153243-pyg44me9/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: - Waiting for wandb.init()...wandb: \ Waiting for wandb.init()...wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_153531-u4s1ot1a
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/u4s1ot1a
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=13.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1228
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6010, 3, 32, 32) (5990, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:43,  1.73s/it] 19%|#9        | 5/26 [00:01<00:05,  3.55it/s] 35%|###4      | 9/26 [00:01<00:02,  7.03it/s] 50%|#####     | 13/26 [00:02<00:01, 10.87it/s] 65%|######5   | 17/26 [00:02<00:00, 14.81it/s] 81%|########  | 21/26 [00:02<00:00, 18.76it/s] 96%|#########6| 25/26 [00:02<00:00, 22.08it/s]100%|##########| 26/26 [00:02<00:00,  9.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.318 (12.108)	train_nll   0.43 (  0.53)	train_penalty   0.07 (  0.25)	weight_norm   8.88 ( 11.58)	train_acc   0.83 (  0.81)	train_minacc   0.05 (  0.07)	train_majacc   1.00 (  0.94)	train_corr   0.00 (  0.00)	l1 6.9048 (8.2219)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.23it/s] 31%|###       | 8/26 [00:00<00:00, 34.66it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.66it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.32it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.17it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.17it/s]100%|##########| 26/26 [00:00<00:00, 49.75it/s]100%|##########| 26/26 [00:00<00:00, 39.39it/s]
Test: [   0/  26]	Loss 0.456 (0.456)	test_acc   0.82 (  0.82)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.456 (0.456)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.428 (0.424)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.428 (0.424)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.350 (0.415)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.350 (0.415)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.427 (0.419)	test_acc   0.83 (  0.85)	test_minacc   0.05 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.427 (0.419)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.05 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]
Test: [  0/  1]	Loss 1.610 (1.610)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.610 (1.610)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.610 (1.610)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.610 (1.610)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/42/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0787 (0.0787)	validation_time 0.0067 (0.0067)	train_time 0.0662 (0.0662)
record: (train_acc, test_acc) (0.8462000257372856, 0.1120000034570694)
last accs (train_acc, test_acc) (0.8462000257372856, 0.1120000034570694)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.13it/s] 19%|#9        | 5/26 [00:00<00:00, 22.40it/s] 35%|###4      | 9/26 [00:00<00:00, 27.83it/s] 50%|#####     | 13/26 [00:00<00:00, 30.81it/s] 65%|######5   | 17/26 [00:00<00:00, 32.16it/s] 81%|########  | 21/26 [00:00<00:00, 33.15it/s] 96%|#########6| 25/26 [00:00<00:00, 33.95it/s]100%|##########| 26/26 [00:00<00:00, 28.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.782 (6.654)	train_nll   0.43 (  0.42)	train_penalty   0.04 (  0.07)	weight_norm   4.36 (  6.23)	train_acc   0.83 (  0.85)	train_minacc   0.05 (  0.01)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.8698 (6.4394)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.76it/s] 35%|###4      | 9/26 [00:00<00:00, 41.59it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.59it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.09it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.09it/s] 81%|########  | 21/26 [00:00<00:00, 48.48it/s]100%|##########| 26/26 [00:00<00:00, 42.59it/s]
Test: [   0/  26]	Loss 0.447 (0.447)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.447 (0.447)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.422 (0.418)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.422 (0.418)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.348 (0.410)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.348 (0.410)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.413 (0.414)	test_acc   0.83 (  0.85)	test_minacc   0.05 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.413 (0.414)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.05 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.29it/s]
Test: [  0/  1]	Loss 1.587 (1.587)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.587 (1.587)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.587 (1.587)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.587 (1.587)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Overall Timing[  1/  1]	epoch_time 0.0353 (0.0570)	validation_time 0.0004 (0.0035)	train_time 0.0349 (0.0506)
record: (train_acc, test_acc) (0.8462000257372856, 0.1120000034570694)
last accs (train_acc, test_acc) (0.8477000221610069, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 19%|#9        | 5/26 [00:00<00:01, 20.87it/s] 35%|###4      | 9/26 [00:00<00:00, 26.22it/s] 50%|#####     | 13/26 [00:00<00:00, 28.86it/s] 65%|######5   | 17/26 [00:00<00:00, 29.60it/s] 81%|########  | 21/26 [00:00<00:00, 30.88it/s] 96%|#########6| 25/26 [00:00<00:00, 31.46it/s]100%|##########| 26/26 [00:00<00:00, 26.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.923 (3.697)	train_nll   0.41 (  0.41)	train_penalty   0.05 (  0.06)	weight_norm   2.51 (  3.29)	train_acc   0.83 (  0.85)	train_minacc   0.05 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 4.9675 (5.3852)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 23%|##3       | 6/26 [00:00<00:00, 27.33it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.33it/s] 42%|####2     | 11/26 [00:00<00:00, 36.55it/s] 65%|######5   | 17/26 [00:00<00:00, 42.08it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.08it/s] 88%|########8 | 23/26 [00:00<00:00, 47.65it/s]100%|##########| 26/26 [00:00<00:00, 37.01it/s]
Test: [   0/  26]	Loss 0.425 (0.425)	test_acc   0.82 (  0.82)	test_minacc   0.15 (  0.15)	test_majacc   0.96 (  0.96)	Loss_d 0.425 (0.425)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.424 (0.411)	test_acc   0.83 (  0.83)	test_minacc   0.09 (  0.16)	test_majacc   0.95 (  0.95)	Loss_d 0.424 (0.411)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.09 (  0.16)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.89 (  0.87)
Test: [  20/  26]	Loss 0.355 (0.407)	test_acc   0.85 (  0.83)	test_minacc   0.14 (  0.16)	test_majacc   0.93 (  0.95)	Loss_d 0.355 (0.407)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.14 (  0.16)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  26/  26]	Loss 0.388 (0.409)	test_acc   0.82 (  0.83)	test_minacc   0.20 (  0.16)	test_majacc   0.95 (  0.95)	Loss_d 0.388 (0.409)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.20 (  0.16)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.94it/s]
Test: [  0/  1]	Loss 1.510 (1.510)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.95 (  0.95)	Loss_d 1.510 (1.510)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.510 (1.510)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.95 (  0.95)	Loss_d 1.510 (1.510)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.79 (  0.79)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/42/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0391 (0.0510)	validation_time 0.0006 (0.0026)	train_time 0.0385 (0.0465)
record: (train_acc, test_acc) (0.8312000285387039, 0.1990000158548355)
last accs (train_acc, test_acc) (0.8312000285387039, 0.1990000158548355)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.57it/s] 19%|#9        | 5/26 [00:00<00:00, 23.72it/s] 31%|###       | 8/26 [00:00<00:00, 25.91it/s] 46%|####6     | 12/26 [00:00<00:00, 29.62it/s] 62%|######1   | 16/26 [00:00<00:00, 31.61it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.40it/s] 92%|#########2| 24/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:00<00:00, 28.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.970 (2.394)	train_nll   0.39 (  0.40)	train_penalty   0.04 (  0.05)	weight_norm   1.58 (  1.99)	train_acc   0.82 (  0.85)	train_minacc   0.05 (  0.03)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 4.3772 (4.6274)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.01it/s] 31%|###       | 8/26 [00:00<00:00, 38.84it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.84it/s] 50%|#####     | 13/26 [00:00<00:00, 43.14it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.76it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.76it/s]100%|##########| 26/26 [00:00<00:00, 50.77it/s]100%|##########| 26/26 [00:00<00:00, 41.11it/s]
Test: [   0/  26]	Loss 0.402 (0.402)	test_acc   0.83 (  0.83)	test_minacc   0.24 (  0.24)	test_majacc   0.95 (  0.95)	Loss_d 0.402 (0.402)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.407 (0.396)	test_acc   0.84 (  0.83)	test_minacc   0.19 (  0.21)	test_majacc   0.95 (  0.94)	Loss_d 0.407 (0.396)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.19 (  0.21)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.90 (  0.88)
Test: [  20/  26]	Loss 0.338 (0.389)	test_acc   0.85 (  0.84)	test_minacc   0.21 (  0.20)	test_majacc   0.93 (  0.94)	Loss_d 0.338 (0.389)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.21 (  0.20)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.371 (0.392)	test_acc   0.83 (  0.83)	test_minacc   0.27 (  0.21)	test_majacc   0.95 (  0.94)	Loss_d 0.371 (0.392)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.27 (  0.21)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.89 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.84it/s]
Test: [  0/  1]	Loss 1.494 (1.494)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.95 (  0.95)	Loss_d 1.494 (1.494)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.494 (1.494)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.95 (  0.95)	Loss_d 1.494 (1.494)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.81 (  0.81)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/42/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0367 (0.0475)	validation_time 0.0003 (0.0020)	train_time 0.0364 (0.0440)
record: (train_acc, test_acc) (0.8338000241518021, 0.22700001299381256)
last accs (train_acc, test_acc) (0.8338000241518021, 0.22700001299381256)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.86it/s] 19%|#9        | 5/26 [00:00<00:00, 21.41it/s] 35%|###4      | 9/26 [00:00<00:00, 26.88it/s] 50%|#####     | 13/26 [00:00<00:00, 29.60it/s] 65%|######5   | 17/26 [00:00<00:00, 31.60it/s] 81%|########  | 21/26 [00:00<00:00, 33.04it/s] 96%|#########6| 25/26 [00:00<00:00, 33.28it/s]100%|##########| 26/26 [00:00<00:00, 27.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.423 (1.677)	train_nll   0.37 (  0.39)	train_penalty   0.02 (  0.05)	weight_norm   1.05 (  1.29)	train_acc   0.82 (  0.85)	train_minacc   0.18 (  0.06)	train_majacc   0.96 (  0.99)	train_corr   0.00 (  0.00)	l1 4.7077 (4.5526)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.33it/s] 23%|##3       | 6/26 [00:00<00:00, 32.31it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.31it/s] 46%|####6     | 12/26 [00:00<00:00, 43.34it/s] 69%|######9   | 18/26 [00:00<00:00, 45.45it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.45it/s] 92%|#########2| 24/26 [00:00<00:00, 49.74it/s]100%|##########| 26/26 [00:00<00:00, 40.50it/s]
Test: [   0/  26]	Loss 0.412 (0.412)	test_acc   0.82 (  0.82)	test_minacc   0.24 (  0.24)	test_majacc   0.94 (  0.94)	Loss_d 0.412 (0.412)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.388 (0.398)	test_acc   0.84 (  0.83)	test_minacc   0.20 (  0.26)	test_majacc   0.94 (  0.94)	Loss_d 0.388 (0.398)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.20 (  0.26)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.88 (  0.87)
Test: [  20/  26]	Loss 0.322 (0.388)	test_acc   0.86 (  0.84)	test_minacc   0.30 (  0.26)	test_majacc   0.93 (  0.94)	Loss_d 0.322 (0.388)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.30 (  0.26)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.87 (  0.87)
Test: [  26/  26]	Loss 0.359 (0.389)	test_acc   0.83 (  0.83)	test_minacc   0.32 (  0.26)	test_majacc   0.94 (  0.94)	Loss_d 0.359 (0.389)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.32 (  0.26)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.55it/s]
Test: [  0/  1]	Loss 1.548 (1.548)	test_acc   0.25 (  0.25)	test_minacc   0.18 (  0.18)	test_majacc   0.93 (  0.93)	Loss_d 1.548 (1.548)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.548 (1.548)	test_acc   0.25 (  0.25)	test_minacc   0.18 (  0.18)	test_majacc   0.93 (  0.93)	Loss_d 1.548 (1.548)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.77 (  0.77)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/42/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0374 (0.0455)	validation_time 0.0004 (0.0017)	train_time 0.0370 (0.0426)
record: (train_acc, test_acc) (0.8343000228404999, 0.2510000169277191)
last accs (train_acc, test_acc) (0.8343000228404999, 0.2510000169277191)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.06it/s] 19%|#9        | 5/26 [00:00<00:00, 23.48it/s] 35%|###4      | 9/26 [00:00<00:00, 28.65it/s] 50%|#####     | 13/26 [00:00<00:00, 31.31it/s] 65%|######5   | 17/26 [00:00<00:00, 32.78it/s] 81%|########  | 21/26 [00:00<00:00, 33.44it/s] 96%|#########6| 25/26 [00:00<00:00, 33.64it/s]100%|##########| 26/26 [00:00<00:00, 29.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.037 (1.214)	train_nll   0.36 (  0.38)	train_penalty   0.02 (  0.04)	weight_norm   0.68 (  0.84)	train_acc   0.84 (  0.85)	train_minacc   0.11 (  0.07)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.5598 (5.2461)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.11it/s] 27%|##6       | 7/26 [00:00<00:00, 34.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.78it/s] 50%|#####     | 13/26 [00:00<00:00, 40.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.62it/s] 96%|#########6| 25/26 [00:00<00:00, 46.94it/s]100%|##########| 26/26 [00:00<00:00, 38.75it/s]
Test: [   0/  26]	Loss 0.396 (0.396)	test_acc   0.83 (  0.83)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.396 (0.396)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.379 (0.381)	test_acc   0.86 (  0.85)	test_minacc   0.11 (  0.15)	test_majacc   0.98 (  0.97)	Loss_d 0.379 (0.381)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.11 (  0.15)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.320 (0.376)	test_acc   0.87 (  0.85)	test_minacc   0.16 (  0.15)	test_majacc   0.96 (  0.97)	Loss_d 0.320 (0.376)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.16 (  0.15)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.87 (  0.88)
Test: [  26/  26]	Loss 0.333 (0.377)	test_acc   0.85 (  0.85)	test_minacc   0.18 (  0.15)	test_majacc   1.00 (  0.98)	Loss_d 0.333 (0.377)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.18 (  0.15)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.86 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.63it/s]
Test: [  0/  1]	Loss 1.430 (1.430)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.96 (  0.96)	Loss_d 1.430 (1.430)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.430 (1.430)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.96 (  0.96)	Loss_d 1.430 (1.430)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.73 (  0.73)
Overall Timing[  5/  1]	epoch_time 0.0391 (0.0444)	validation_time 0.0003 (0.0015)	train_time 0.0388 (0.0420)
record: (train_acc, test_acc) (0.8343000228404999, 0.2510000169277191)
last accs (train_acc, test_acc) (0.8508000205755234, 0.21400001645088196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.86it/s] 19%|#9        | 5/26 [00:00<00:00, 24.56it/s] 35%|###4      | 9/26 [00:00<00:00, 29.58it/s] 50%|#####     | 13/26 [00:00<00:00, 32.20it/s] 65%|######5   | 17/26 [00:00<00:00, 33.34it/s] 81%|########  | 21/26 [00:00<00:00, 34.21it/s] 96%|#########6| 25/26 [00:00<00:00, 34.86it/s]100%|##########| 26/26 [00:00<00:00, 29.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.824 (0.932)	train_nll   0.37 (  0.37)	train_penalty   0.01 (  0.04)	weight_norm   0.45 (  0.56)	train_acc   0.83 (  0.85)	train_minacc   0.36 (  0.07)	train_majacc   0.93 (  0.99)	train_corr   0.00 (  0.00)	l1 6.2721 (6.0085)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.90it/s] 27%|##6       | 7/26 [00:00<00:00, 37.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.27it/s] 50%|#####     | 13/26 [00:00<00:00, 42.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.95it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.95it/s] 96%|#########6| 25/26 [00:00<00:00, 48.12it/s]100%|##########| 26/26 [00:00<00:00, 40.20it/s]
Test: [   0/  26]	Loss 0.359 (0.359)	test_acc   0.84 (  0.84)	test_minacc   0.21 (  0.21)	test_majacc   0.96 (  0.96)	Loss_d 0.359 (0.359)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.356 (0.358)	test_acc   0.88 (  0.85)	test_minacc   0.22 (  0.21)	test_majacc   0.98 (  0.97)	Loss_d 0.356 (0.358)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.22 (  0.21)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.89)
Test: [  20/  26]	Loss 0.321 (0.351)	test_acc   0.88 (  0.86)	test_minacc   0.23 (  0.21)	test_majacc   0.96 (  0.97)	Loss_d 0.321 (0.351)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.23 (  0.21)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.332 (0.354)	test_acc   0.81 (  0.85)	test_minacc   0.09 (  0.21)	test_majacc   0.96 (  0.97)	Loss_d 0.332 (0.354)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.09 (  0.21)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.88 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.92it/s]
Test: [  0/  1]	Loss 1.472 (1.472)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.95 (  0.95)	Loss_d 1.472 (1.472)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.472 (1.472)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.95 (  0.95)	Loss_d 1.472 (1.472)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.75 (  0.75)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/42/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0366 (0.0433)	validation_time 0.0005 (0.0013)	train_time 0.0360 (0.0411)
record: (train_acc, test_acc) (0.8523000196814537, 0.2590000033378601)
last accs (train_acc, test_acc) (0.8523000196814537, 0.2590000033378601)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 19%|#9        | 5/26 [00:00<00:01, 19.71it/s] 35%|###4      | 9/26 [00:00<00:00, 25.66it/s] 50%|#####     | 13/26 [00:00<00:00, 29.01it/s] 65%|######5   | 17/26 [00:00<00:00, 30.87it/s] 81%|########  | 21/26 [00:00<00:00, 32.34it/s] 96%|#########6| 25/26 [00:00<00:00, 33.06it/s]100%|##########| 26/26 [00:00<00:00, 27.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.656 (0.725)	train_nll   0.36 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.30 (  0.37)	train_acc   0.81 (  0.85)	train_minacc   0.18 (  0.15)	train_majacc   0.95 (  0.97)	train_corr   0.00 (  0.00)	l1 7.9701 (7.3641)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 27%|##6       | 7/26 [00:00<00:00, 35.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.63it/s] 50%|#####     | 13/26 [00:00<00:00, 41.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.58it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.58it/s] 96%|#########6| 25/26 [00:00<00:00, 48.03it/s]100%|##########| 26/26 [00:00<00:00, 39.81it/s]
Test: [   0/  26]	Loss 0.348 (0.348)	test_acc   0.84 (  0.84)	test_minacc   0.29 (  0.29)	test_majacc   0.95 (  0.95)	Loss_d 0.348 (0.348)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.344 (0.355)	test_acc   0.86 (  0.84)	test_minacc   0.19 (  0.27)	test_majacc   0.96 (  0.95)	Loss_d 0.344 (0.355)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.19 (  0.27)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.90 (  0.88)
Test: [  20/  26]	Loss 0.291 (0.347)	test_acc   0.88 (  0.85)	test_minacc   0.35 (  0.28)	test_majacc   0.94 (  0.95)	Loss_d 0.291 (0.347)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.35 (  0.28)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.320 (0.347)	test_acc   0.84 (  0.85)	test_minacc   0.36 (  0.28)	test_majacc   0.94 (  0.95)	Loss_d 0.320 (0.347)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.36 (  0.28)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.87 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.05it/s]
Test: [  0/  1]	Loss 1.581 (1.581)	test_acc   0.28 (  0.28)	test_minacc   0.21 (  0.21)	test_majacc   0.93 (  0.93)	Loss_d 1.581 (1.581)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.581 (1.581)	test_acc   0.28 (  0.28)	test_minacc   0.21 (  0.21)	test_majacc   0.93 (  0.93)	Loss_d 1.581 (1.581)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.73 (  0.73)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/42/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0386 (0.0427)	validation_time 0.0004 (0.0012)	train_time 0.0382 (0.0408)
record: (train_acc, test_acc) (0.8460000190734863, 0.27900001406669617)
last accs (train_acc, test_acc) (0.8460000190734863, 0.27900001406669617)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.59it/s] 15%|#5        | 4/26 [00:00<00:01, 16.37it/s] 31%|###       | 8/26 [00:00<00:00, 23.03it/s] 46%|####6     | 12/26 [00:00<00:00, 26.98it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.27it/s] 88%|########8 | 23/26 [00:00<00:00, 30.98it/s]100%|##########| 26/26 [00:01<00:00, 24.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.588 (0.625)	train_nll   0.37 (  0.37)	train_penalty   0.02 (  0.03)	weight_norm   0.22 (  0.26)	train_acc   0.80 (  0.85)	train_minacc   0.05 (  0.09)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 9.0572 (8.6497)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 23%|##3       | 6/26 [00:00<00:00, 29.88it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.88it/s] 42%|####2     | 11/26 [00:00<00:00, 37.71it/s] 65%|######5   | 17/26 [00:00<00:00, 42.55it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.55it/s] 88%|########8 | 23/26 [00:00<00:00, 47.33it/s]100%|##########| 26/26 [00:00<00:00, 37.96it/s]
Test: [   0/  26]	Loss 0.371 (0.371)	test_acc   0.83 (  0.83)	test_minacc   0.09 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 0.371 (0.371)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.366 (0.360)	test_acc   0.85 (  0.85)	test_minacc   0.06 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.366 (0.360)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.06 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.91)
Test: [  20/  26]	Loss 0.291 (0.352)	test_acc   0.87 (  0.85)	test_minacc   0.19 (  0.13)	test_majacc   0.96 (  0.97)	Loss_d 0.291 (0.352)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.19 (  0.13)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.346 (0.355)	test_acc   0.82 (  0.85)	test_minacc   0.14 (  0.14)	test_majacc   0.97 (  0.98)	Loss_d 0.346 (0.355)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.44it/s]
Test: [  0/  1]	Loss 1.568 (1.568)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.96 (  0.96)	Loss_d 1.568 (1.568)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.568 (1.568)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.96 (  0.96)	Loss_d 1.568 (1.568)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.82 (  0.82)
Overall Timing[  8/  1]	epoch_time 0.0391 (0.0423)	validation_time 0.0003 (0.0011)	train_time 0.0387 (0.0405)
record: (train_acc, test_acc) (0.8460000190734863, 0.27900001406669617)
last accs (train_acc, test_acc) (0.8495000193119049, 0.1900000125169754)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.56it/s] 15%|#5        | 4/26 [00:00<00:01, 18.53it/s] 31%|###       | 8/26 [00:00<00:00, 25.46it/s] 46%|####6     | 12/26 [00:00<00:00, 29.55it/s] 62%|######1   | 16/26 [00:00<00:00, 31.61it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.67it/s] 92%|#########2| 24/26 [00:00<00:00, 33.13it/s]100%|##########| 26/26 [00:00<00:00, 27.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.522 (0.542)	train_nll   0.36 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.16 (  0.19)	train_acc   0.83 (  0.85)	train_minacc   0.14 (  0.12)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 10.7404 (10.0858)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.38it/s] 31%|###       | 8/26 [00:00<00:00, 40.00it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.00it/s] 54%|#####3    | 14/26 [00:00<00:00, 47.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.24it/s] 92%|#########2| 24/26 [00:00<00:00, 48.76it/s]100%|##########| 26/26 [00:00<00:00, 42.79it/s]
Test: [   0/  26]	Loss 0.356 (0.356)	test_acc   0.84 (  0.84)	test_minacc   0.18 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.356 (0.356)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.352 (0.357)	test_acc   0.86 (  0.85)	test_minacc   0.11 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.352 (0.357)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.11 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.90)
Test: [  20/  26]	Loss 0.291 (0.348)	test_acc   0.89 (  0.86)	test_minacc   0.23 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 0.291 (0.348)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.23 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.335 (0.351)	test_acc   0.84 (  0.85)	test_minacc   0.23 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 0.335 (0.351)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.23 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.27it/s]
Test: [  0/  1]	Loss 1.595 (1.595)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.95 (  0.95)	Loss_d 1.595 (1.595)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.595 (1.595)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.95 (  0.95)	Loss_d 1.595 (1.595)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.78 (  0.78)
Overall Timing[  9/  1]	epoch_time 0.0367 (0.0417)	validation_time 0.0006 (0.0011)	train_time 0.0361 (0.0401)
record: (train_acc, test_acc) (0.8460000190734863, 0.27900001406669617)
last accs (train_acc, test_acc) (0.854200026512146, 0.24000000953674316)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.54it/s] 19%|#9        | 5/26 [00:00<00:00, 23.59it/s] 35%|###4      | 9/26 [00:00<00:00, 28.19it/s] 50%|#####     | 13/26 [00:00<00:00, 30.58it/s] 65%|######5   | 17/26 [00:00<00:00, 32.18it/s] 81%|########  | 21/26 [00:00<00:00, 32.90it/s] 96%|#########6| 25/26 [00:00<00:00, 33.23it/s]100%|##########| 26/26 [00:00<00:00, 28.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.492 (0.492)	train_nll   0.35 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.14 (  0.14)	train_acc   0.82 (  0.85)	train_minacc   0.18 (  0.17)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 12.4693 (11.6954)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.12it/s] 27%|##6       | 7/26 [00:00<00:00, 37.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.19it/s] 50%|#####     | 13/26 [00:00<00:00, 42.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.48it/s] 96%|#########6| 25/26 [00:00<00:00, 48.26it/s]100%|##########| 26/26 [00:00<00:00, 40.57it/s]
Test: [   0/  26]	Loss 0.368 (0.368)	test_acc   0.82 (  0.82)	test_minacc   0.39 (  0.39)	test_majacc   0.90 (  0.90)	Loss_d 0.368 (0.368)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.377 (0.373)	test_acc   0.83 (  0.83)	test_minacc   0.26 (  0.38)	test_majacc   0.92 (  0.90)	Loss_d 0.377 (0.373)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.26 (  0.38)	test_majacc_d   0.92 (  0.90)	test_corr_d   0.84 (  0.82)
Test: [  20/  26]	Loss 0.313 (0.364)	test_acc   0.85 (  0.83)	test_minacc   0.49 (  0.40)	test_majacc   0.90 (  0.91)	Loss_d 0.313 (0.364)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.49 (  0.40)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.81 (  0.82)
Test: [  26/  26]	Loss 0.319 (0.365)	test_acc   0.83 (  0.83)	test_minacc   0.45 (  0.40)	test_majacc   0.91 (  0.91)	Loss_d 0.319 (0.365)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.45 (  0.40)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.80 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.55it/s]
Test: [  0/  1]	Loss 1.349 (1.349)	test_acc   0.43 (  0.43)	test_minacc   0.39 (  0.39)	test_majacc   0.86 (  0.86)	Loss_d 1.349 (1.349)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.44 (  0.44)
Test: [  1/  1]	Loss 1.349 (1.349)	test_acc   0.43 (  0.43)	test_minacc   0.39 (  0.39)	test_majacc   0.86 (  0.86)	Loss_d 1.349 (1.349)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.44 (  0.44)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/42/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0376 (0.0414)	validation_time 0.0004 (0.0010)	train_time 0.0371 (0.0398)
record: (train_acc, test_acc) (0.8317000300884246, 0.43300002813339233)
last accs (train_acc, test_acc) (0.8317000300884246, 0.43300002813339233)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s] 19%|#9        | 5/26 [00:00<00:00, 23.56it/s] 35%|###4      | 9/26 [00:00<00:00, 28.41it/s] 50%|#####     | 13/26 [00:00<00:00, 30.62it/s] 65%|######5   | 17/26 [00:00<00:00, 32.02it/s] 81%|########  | 21/26 [00:00<00:00, 33.00it/s] 96%|#########6| 25/26 [00:00<00:00, 33.20it/s]100%|##########| 26/26 [00:00<00:00, 28.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.461 (0.479)	train_nll   0.34 (  0.35)	train_penalty   0.03 (  0.03)	weight_norm   0.12 (  0.13)	train_acc   0.83 (  0.85)	train_minacc   0.05 (  0.14)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 13.8588 (13.2939)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.19it/s] 27%|##6       | 7/26 [00:00<00:00, 33.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.05it/s] 50%|#####     | 13/26 [00:00<00:00, 39.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.91it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.91it/s] 96%|#########6| 25/26 [00:00<00:00, 46.68it/s]100%|##########| 26/26 [00:00<00:00, 38.32it/s]
Test: [   0/  26]	Loss 0.343 (0.343)	test_acc   0.84 (  0.84)	test_minacc   0.17 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.343 (0.343)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.342 (0.345)	test_acc   0.87 (  0.85)	test_minacc   0.13 (  0.16)	test_majacc   0.99 (  0.98)	Loss_d 0.342 (0.345)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.13 (  0.16)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.91)
Test: [  20/  26]	Loss 0.271 (0.334)	test_acc   0.88 (  0.86)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.98)	Loss_d 0.271 (0.334)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.319 (0.337)	test_acc   0.85 (  0.85)	test_minacc   0.23 (  0.16)	test_majacc   0.99 (  0.98)	Loss_d 0.319 (0.337)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.23 (  0.16)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.90 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.06it/s]
Test: [  0/  1]	Loss 1.646 (1.646)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.95 (  0.95)	Loss_d 1.646 (1.646)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.646 (1.646)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.95 (  0.95)	Loss_d 1.646 (1.646)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.78 (  0.78)
Overall Timing[ 11/  1]	epoch_time 0.0363 (0.0409)	validation_time 0.0003 (0.0009)	train_time 0.0360 (0.0395)
record: (train_acc, test_acc) (0.8317000300884246, 0.43300002813339233)
last accs (train_acc, test_acc) (0.8545000238418579, 0.20400001108646393)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.58it/s] 15%|#5        | 4/26 [00:00<00:01, 18.88it/s] 31%|###       | 8/26 [00:00<00:00, 25.39it/s] 46%|####6     | 12/26 [00:00<00:00, 28.72it/s] 62%|######1   | 16/26 [00:00<00:00, 30.85it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.81it/s] 92%|#########2| 24/26 [00:00<00:00, 32.59it/s]100%|##########| 26/26 [00:00<00:00, 27.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.446 (0.454)	train_nll   0.33 (  0.34)	train_penalty   0.01 (  0.03)	weight_norm   0.11 (  0.11)	train_acc   0.82 (  0.85)	train_minacc   0.27 (  0.21)	train_majacc   0.94 (  0.97)	train_corr   0.00 (  0.00)	l1 15.4832 (14.6574)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.05it/s] 27%|##6       | 7/26 [00:00<00:00, 33.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.74it/s] 46%|####6     | 12/26 [00:00<00:00, 39.16it/s] 69%|######9   | 18/26 [00:00<00:00, 45.62it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.62it/s] 92%|#########2| 24/26 [00:00<00:00, 47.47it/s]100%|##########| 26/26 [00:00<00:00, 39.39it/s]
Test: [   0/  26]	Loss 0.339 (0.339)	test_acc   0.84 (  0.84)	test_minacc   0.30 (  0.30)	test_majacc   0.94 (  0.94)	Loss_d 0.339 (0.339)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.331 (0.346)	test_acc   0.85 (  0.85)	test_minacc   0.20 (  0.29)	test_majacc   0.96 (  0.95)	Loss_d 0.331 (0.346)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.20 (  0.29)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.88 (  0.86)
Test: [  20/  26]	Loss 0.280 (0.335)	test_acc   0.88 (  0.86)	test_minacc   0.35 (  0.31)	test_majacc   0.95 (  0.95)	Loss_d 0.280 (0.335)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.35 (  0.31)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  26/  26]	Loss 0.301 (0.337)	test_acc   0.82 (  0.85)	test_minacc   0.32 (  0.30)	test_majacc   0.93 (  0.95)	Loss_d 0.301 (0.337)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.32 (  0.30)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.85 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.90it/s]
Test: [  0/  1]	Loss 1.492 (1.492)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.92 (  0.92)	Loss_d 1.492 (1.492)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.57 (  0.57)
Test: [  1/  1]	Loss 1.492 (1.492)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.92 (  0.92)	Loss_d 1.492 (1.492)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.57 (  0.57)
Overall Timing[ 12/  1]	epoch_time 0.0393 (0.0408)	validation_time 0.0003 (0.0009)	train_time 0.0389 (0.0395)
record: (train_acc, test_acc) (0.8317000300884246, 0.43300002813339233)
last accs (train_acc, test_acc) (0.854800022482872, 0.33800002932548523)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.75it/s] 19%|#9        | 5/26 [00:00<00:01, 19.95it/s] 35%|###4      | 9/26 [00:00<00:00, 25.98it/s] 50%|#####     | 13/26 [00:00<00:00, 29.12it/s] 65%|######5   | 17/26 [00:00<00:00, 31.14it/s] 81%|########  | 21/26 [00:00<00:00, 32.34it/s] 96%|#########6| 25/26 [00:00<00:00, 33.16it/s]100%|##########| 26/26 [00:00<00:00, 27.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.441 (0.445)	train_nll   0.35 (  0.34)	train_penalty   0.01 (  0.03)	weight_norm   0.09 (  0.10)	train_acc   0.84 (  0.85)	train_minacc   0.41 (  0.21)	train_majacc   0.93 (  0.97)	train_corr   0.00 (  0.00)	l1 16.5760 (16.1521)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.62it/s] 27%|##6       | 7/26 [00:00<00:00, 32.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.17it/s] 50%|#####     | 13/26 [00:00<00:00, 40.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.26it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.26it/s] 92%|#########2| 24/26 [00:00<00:00, 47.82it/s]100%|##########| 26/26 [00:00<00:00, 38.65it/s]
Test: [   0/  26]	Loss 0.352 (0.352)	test_acc   0.85 (  0.85)	test_minacc   0.30 (  0.30)	test_majacc   0.96 (  0.96)	Loss_d 0.352 (0.352)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.344 (0.353)	test_acc   0.85 (  0.86)	test_minacc   0.15 (  0.30)	test_majacc   0.96 (  0.96)	Loss_d 0.344 (0.353)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.15 (  0.30)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.88)
Test: [  20/  26]	Loss 0.278 (0.343)	test_acc   0.88 (  0.86)	test_minacc   0.37 (  0.30)	test_majacc   0.94 (  0.96)	Loss_d 0.278 (0.343)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.37 (  0.30)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  26/  26]	Loss 0.314 (0.344)	test_acc   0.84 (  0.86)	test_minacc   0.32 (  0.30)	test_majacc   0.95 (  0.96)	Loss_d 0.314 (0.344)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.32 (  0.30)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.86 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.73it/s]
Test: [  0/  1]	Loss 1.491 (1.491)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.92 (  0.92)	Loss_d 1.491 (1.491)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.66 (  0.66)
Test: [  1/  1]	Loss 1.491 (1.491)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.92 (  0.92)	Loss_d 1.491 (1.491)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.66 (  0.66)
Overall Timing[ 13/  1]	epoch_time 0.0381 (0.0406)	validation_time 0.0004 (0.0009)	train_time 0.0376 (0.0393)
record: (train_acc, test_acc) (0.8317000300884246, 0.43300002813339233)
last accs (train_acc, test_acc) (0.8571000242233277, 0.3070000112056732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.23it/s] 19%|#9        | 5/26 [00:00<00:01, 17.60it/s] 35%|###4      | 9/26 [00:00<00:00, 23.69it/s] 50%|#####     | 13/26 [00:00<00:00, 27.55it/s] 65%|######5   | 17/26 [00:00<00:00, 29.83it/s] 81%|########  | 21/26 [00:00<00:00, 30.88it/s] 96%|#########6| 25/26 [00:00<00:00, 32.05it/s]100%|##########| 26/26 [00:01<00:00, 25.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.443 (0.432)	train_nll   0.36 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.08 (  0.08)	train_acc   0.83 (  0.85)	train_minacc   0.23 (  0.19)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 17.3089 (16.8948)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.86it/s] 31%|###       | 8/26 [00:00<00:00, 40.79it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.79it/s] 50%|#####     | 13/26 [00:00<00:00, 42.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.77it/s] 96%|#########6| 25/26 [00:00<00:00, 48.74it/s]100%|##########| 26/26 [00:00<00:00, 41.46it/s]
Test: [   0/  26]	Loss 0.345 (0.345)	test_acc   0.84 (  0.84)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.345 (0.345)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.331 (0.339)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.12)	test_majacc   0.99 (  0.98)	Loss_d 0.331 (0.339)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.12)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.95 (  0.93)
Test: [  20/  26]	Loss 0.271 (0.330)	test_acc   0.89 (  0.86)	test_minacc   0.14 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.271 (0.330)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.14 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.329 (0.333)	test_acc   0.82 (  0.85)	test_minacc   0.09 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.329 (0.333)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.09 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.53it/s]
Test: [  0/  1]	Loss 1.701 (1.701)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.96 (  0.96)	Loss_d 1.701 (1.701)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.701 (1.701)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.96 (  0.96)	Loss_d 1.701 (1.701)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.84)
Overall Timing[ 14/  1]	epoch_time 0.0363 (0.0403)	validation_time 0.0004 (0.0008)	train_time 0.0359 (0.0391)
record: (train_acc, test_acc) (0.8317000300884246, 0.43300002813339233)
last accs (train_acc, test_acc) (0.8544000262022018, 0.18900001049041748)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.12it/s] 19%|#9        | 5/26 [00:00<00:01, 18.03it/s] 35%|###4      | 9/26 [00:00<00:00, 24.56it/s] 50%|#####     | 13/26 [00:00<00:00, 28.27it/s] 65%|######5   | 17/26 [00:00<00:00, 30.72it/s] 81%|########  | 21/26 [00:00<00:00, 32.30it/s] 96%|#########6| 25/26 [00:00<00:00, 33.31it/s]100%|##########| 26/26 [00:00<00:00, 26.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.001 (0.170)	train_nll   0.59 (  0.44)	train_penalty   0.00 (  0.01)	weight_norm   0.10 (  0.08)	train_acc   0.69 (  0.78)	train_minacc   0.77 (  0.44)	train_majacc   0.67 (  0.84)	train_corr   0.00 (  0.00)	l1 17.3868 (17.4951)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 15%|#5        | 4/26 [00:00<00:01, 19.95it/s] 38%|###8      | 10/26 [00:00<00:00, 36.27it/s]                                                38%|###8      | 10/26 [00:00<00:00, 36.27it/s] 62%|######1   | 16/26 [00:00<00:00, 41.29it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.29it/s] 85%|########4 | 22/26 [00:00<00:00, 46.75it/s]100%|##########| 26/26 [00:00<00:00, 37.55it/s]
Test: [   0/  26]	Loss 0.604 (0.604)	test_acc   0.65 (  0.65)	test_minacc   0.73 (  0.73)	test_majacc   0.64 (  0.64)	Loss_d 0.604 (0.604)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.589 (0.601)	test_acc   0.72 (  0.67)	test_minacc   0.69 (  0.77)	test_majacc   0.72 (  0.66)	Loss_d 0.589 (0.601)	test_acc_d   0.72 (  0.67)	test_minacc_d   0.69 (  0.77)	test_majacc_d   0.72 (  0.66)	test_corr_d   0.35 (  0.24)
Test: [  20/  26]	Loss 0.607 (0.604)	test_acc   0.67 (  0.67)	test_minacc   0.84 (  0.76)	test_majacc   0.65 (  0.65)	Loss_d 0.607 (0.604)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.84 (  0.76)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.26 (  0.25)
Test: [  26/  26]	Loss 0.586 (0.602)	test_acc   0.70 (  0.67)	test_minacc   0.77 (  0.76)	test_majacc   0.69 (  0.66)	Loss_d 0.586 (0.602)	test_acc_d   0.70 (  0.67)	test_minacc_d   0.77 (  0.76)	test_majacc_d   0.69 (  0.66)	test_corr_d   0.23 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.44it/s]
Test: [  0/  1]	Loss 0.576 (0.576)	test_acc   0.72 (  0.72)	test_minacc   0.73 (  0.73)	test_majacc   0.64 (  0.64)	Loss_d 0.576 (0.576)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.41 ( -0.41)
Test: [  1/  1]	Loss 0.576 (0.576)	test_acc   0.72 (  0.72)	test_minacc   0.73 (  0.73)	test_majacc   0.64 (  0.64)	Loss_d 0.576 (0.576)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.41 ( -0.41)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/42/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0367 (0.0401)	validation_time 0.0003 (0.0008)	train_time 0.0364 (0.0389)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.93it/s] 19%|#9        | 5/26 [00:00<00:00, 23.68it/s] 35%|###4      | 9/26 [00:00<00:00, 28.72it/s] 50%|#####     | 13/26 [00:00<00:00, 31.21it/s] 65%|######5   | 17/26 [00:00<00:00, 32.53it/s] 81%|########  | 21/26 [00:00<00:00, 33.48it/s] 96%|#########6| 25/26 [00:00<00:00, 33.61it/s]100%|##########| 26/26 [00:00<00:00, 29.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.001 (0.001)	train_nll   0.62 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm   0.11 (  0.11)	train_acc   0.69 (  0.66)	train_minacc   0.77 (  0.72)	train_majacc   0.67 (  0.65)	train_corr   0.00 (  0.00)	l1 17.2584 (17.3059)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.09it/s] 27%|##6       | 7/26 [00:00<00:00, 32.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.26it/s] 50%|#####     | 13/26 [00:00<00:00, 38.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.99it/s] 96%|#########6| 25/26 [00:00<00:00, 46.73it/s]100%|##########| 26/26 [00:00<00:00, 38.11it/s]
Test: [   0/  26]	Loss 0.648 (0.648)	test_acc   0.63 (  0.63)	test_minacc   0.67 (  0.67)	test_majacc   0.62 (  0.62)	Loss_d 0.648 (0.648)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.620 (0.639)	test_acc   0.70 (  0.65)	test_minacc   0.59 (  0.70)	test_majacc   0.72 (  0.64)	Loss_d 0.620 (0.639)	test_acc_d   0.70 (  0.65)	test_minacc_d   0.59 (  0.70)	test_majacc_d   0.72 (  0.64)	test_corr_d   0.33 (  0.21)
Test: [  20/  26]	Loss 0.644 (0.640)	test_acc   0.66 (  0.65)	test_minacc   0.79 (  0.70)	test_majacc   0.65 (  0.64)	Loss_d 0.644 (0.640)	test_acc_d   0.66 (  0.65)	test_minacc_d   0.79 (  0.70)	test_majacc_d   0.65 (  0.64)	test_corr_d   0.20 (  0.21)
Test: [  26/  26]	Loss 0.625 (0.638)	test_acc   0.69 (  0.65)	test_minacc   0.77 (  0.70)	test_majacc   0.67 (  0.65)	Loss_d 0.625 (0.638)	test_acc_d   0.69 (  0.65)	test_minacc_d   0.77 (  0.70)	test_majacc_d   0.67 (  0.65)	test_corr_d   0.22 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.99it/s]
Test: [  0/  1]	Loss 0.619 (0.619)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.68 (  0.68)	Loss_d 0.619 (0.619)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.34 ( -0.34)
Test: [  1/  1]	Loss 0.619 (0.619)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.68 (  0.68)	Loss_d 0.619 (0.619)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.34 ( -0.34)
Overall Timing[ 16/  1]	epoch_time 0.0374 (0.0399)	validation_time 0.0003 (0.0008)	train_time 0.0371 (0.0388)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.653900018632412, 0.687000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 19%|#9        | 5/26 [00:00<00:01, 18.81it/s] 35%|###4      | 9/26 [00:00<00:00, 25.04it/s] 50%|#####     | 13/26 [00:00<00:00, 28.47it/s] 65%|######5   | 17/26 [00:00<00:00, 30.58it/s] 81%|########  | 21/26 [00:00<00:00, 31.35it/s] 96%|#########6| 25/26 [00:00<00:00, 32.61it/s]100%|##########| 26/26 [00:00<00:00, 26.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.11)	train_acc   0.55 (  0.61)	train_minacc   0.64 (  0.66)	train_majacc   0.53 (  0.60)	train_corr   0.00 (  0.00)	l1 17.2112 (17.2336)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.47it/s] 23%|##3       | 6/26 [00:00<00:00, 32.62it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.62it/s] 46%|####6     | 12/26 [00:00<00:00, 43.25it/s] 65%|######5   | 17/26 [00:00<00:00, 43.99it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.99it/s] 88%|########8 | 23/26 [00:00<00:00, 49.24it/s]100%|##########| 26/26 [00:00<00:00, 39.97it/s]
Test: [   0/  26]	Loss 0.668 (0.668)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.48 (  0.48)	Loss_d 0.668 (0.668)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.659 (0.666)	test_acc   0.53 (  0.52)	test_minacc   0.61 (  0.59)	test_majacc   0.51 (  0.51)	Loss_d 0.659 (0.666)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.61 (  0.59)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.29 (  0.18)
Test: [  20/  26]	Loss 0.668 (0.666)	test_acc   0.53 (  0.52)	test_minacc   0.67 (  0.61)	test_majacc   0.51 (  0.51)	Loss_d 0.668 (0.666)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.67 (  0.61)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.16 (  0.19)
Test: [  26/  26]	Loss 0.663 (0.666)	test_acc   0.54 (  0.52)	test_minacc   0.64 (  0.60)	test_majacc   0.52 (  0.51)	Loss_d 0.663 (0.666)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.64 (  0.60)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.17 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.10it/s]
Test: [  0/  1]	Loss 0.654 (0.654)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.53 (  0.53)	Loss_d 0.654 (0.654)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.654 (0.654)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.53 (  0.53)	Loss_d 0.654 (0.654)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 17/  1]	epoch_time 0.0378 (0.0398)	validation_time 0.0003 (0.0007)	train_time 0.0375 (0.0387)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5200000135600567, 0.5890000462532043)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.07it/s] 19%|#9        | 5/26 [00:00<00:01, 19.40it/s] 35%|###4      | 9/26 [00:00<00:00, 25.09it/s] 50%|#####     | 13/26 [00:00<00:00, 28.67it/s] 65%|######5   | 17/26 [00:00<00:00, 30.88it/s] 81%|########  | 21/26 [00:00<00:00, 32.34it/s] 96%|#########6| 25/26 [00:00<00:00, 33.08it/s]100%|##########| 26/26 [00:00<00:00, 27.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.45 (  0.48)	train_minacc   0.45 (  0.54)	train_majacc   0.45 (  0.47)	train_corr   0.00 (  0.00)	l1 17.1919 (17.2004)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.85it/s] 31%|###       | 8/26 [00:00<00:00, 39.84it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.84it/s] 54%|#####3    | 14/26 [00:00<00:00, 46.77it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.63it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.63it/s]100%|##########| 26/26 [00:00<00:00, 51.03it/s]100%|##########| 26/26 [00:00<00:00, 42.36it/s]
Test: [   0/  26]	Loss 0.681 (0.681)	test_acc   0.48 (  0.48)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.681 (0.681)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.679 (0.680)	test_acc   0.47 (  0.48)	test_minacc   0.57 (  0.52)	test_majacc   0.46 (  0.48)	Loss_d 0.679 (0.680)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.22 (  0.13)
Test: [  20/  26]	Loss 0.683 (0.681)	test_acc   0.48 (  0.48)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.683 (0.681)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.08 (  0.13)
Test: [  26/  26]	Loss 0.680 (0.681)	test_acc   0.45 (  0.48)	test_minacc   0.45 (  0.53)	test_majacc   0.45 (  0.47)	Loss_d 0.680 (0.681)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.11 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.41it/s]
Test: [  0/  1]	Loss 0.669 (0.669)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.669 (0.669)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.34 ( -0.34)
Test: [  1/  1]	Loss 0.669 (0.669)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.669 (0.669)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.34 ( -0.34)
Overall Timing[ 18/  1]	epoch_time 0.0377 (0.0397)	validation_time 0.0004 (0.0007)	train_time 0.0373 (0.0387)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.47910000637173655, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 19%|#9        | 5/26 [00:00<00:01, 20.93it/s] 35%|###4      | 9/26 [00:00<00:00, 26.55it/s] 50%|#####     | 13/26 [00:00<00:00, 29.01it/s] 65%|######5   | 17/26 [00:00<00:00, 30.64it/s] 81%|########  | 21/26 [00:00<00:00, 31.90it/s] 96%|#########6| 25/26 [00:00<00:00, 32.18it/s]100%|##########| 26/26 [00:00<00:00, 27.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.44 (  0.48)	train_minacc   0.45 (  0.52)	train_majacc   0.43 (  0.47)	train_corr   0.00 (  0.00)	l1 17.1859 (17.1887)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.73it/s] 31%|###       | 8/26 [00:00<00:00, 41.02it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.02it/s] 50%|#####     | 13/26 [00:00<00:00, 42.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.45it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.45it/s] 96%|#########6| 25/26 [00:00<00:00, 48.68it/s]100%|##########| 26/26 [00:00<00:00, 41.62it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.48 (  0.48)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.688 (0.688)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.686 (0.686)	test_acc   0.47 (  0.48)	test_minacc   0.57 (  0.52)	test_majacc   0.46 (  0.48)	Loss_d 0.686 (0.686)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.13 (  0.06)
Test: [  20/  26]	Loss 0.688 (0.686)	test_acc   0.48 (  0.49)	test_minacc   0.56 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.688 (0.686)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.56 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.00 (  0.07)
Test: [  26/  26]	Loss 0.686 (0.687)	test_acc   0.43 (  0.48)	test_minacc   0.45 (  0.53)	test_majacc   0.43 (  0.47)	Loss_d 0.686 (0.687)	test_acc_d   0.43 (  0.48)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.43 (  0.47)	test_corr_d   0.04 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.99it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.676 (0.676)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.33 ( -0.33)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.676 (0.676)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.33 ( -0.33)
Overall Timing[ 19/  1]	epoch_time 0.0381 (0.0396)	validation_time 0.0003 (0.0007)	train_time 0.0378 (0.0386)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.48130000245571136, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.17it/s] 19%|#9        | 5/26 [00:00<00:00, 21.16it/s] 35%|###4      | 9/26 [00:00<00:00, 26.74it/s] 50%|#####     | 13/26 [00:00<00:00, 29.04it/s] 65%|######5   | 17/26 [00:00<00:00, 31.20it/s] 81%|########  | 21/26 [00:00<00:00, 32.27it/s] 96%|#########6| 25/26 [00:00<00:00, 33.17it/s]100%|##########| 26/26 [00:00<00:00, 27.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.44 (  0.48)	train_minacc   0.52 (  0.53)	train_majacc   0.43 (  0.47)	train_corr   0.00 (  0.00)	l1 17.1842 (17.1851)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.78it/s] 31%|###       | 8/26 [00:00<00:00, 40.12it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.12it/s] 50%|#####     | 13/26 [00:00<00:00, 40.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.87it/s] 96%|#########6| 25/26 [00:00<00:00, 47.54it/s]100%|##########| 26/26 [00:00<00:00, 40.55it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.691 (0.691)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.57 (  0.54)	test_majacc   0.48 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.07 (  0.02)
Test: [  20/  26]	Loss 0.691 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.60 (  0.55)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.60 (  0.55)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 (  0.02)
Test: [  26/  26]	Loss 0.690 (0.690)	test_acc   0.44 (  0.49)	test_minacc   0.52 (  0.55)	test_majacc   0.42 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.42 (  0.48)	test_corr_d   0.00 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.37it/s]
Test: [  0/  1]	Loss 0.681 (0.681)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.681 (0.681)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.681 (0.681)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.681 (0.681)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 20/  1]	epoch_time 0.0383 (0.0396)	validation_time 0.0003 (0.0007)	train_time 0.0380 (0.0386)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.488600010573864, 0.534000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.38it/s] 19%|#9        | 5/26 [00:00<00:00, 24.44it/s] 35%|###4      | 9/26 [00:00<00:00, 29.15it/s] 50%|#####     | 13/26 [00:00<00:00, 31.31it/s] 65%|######5   | 17/26 [00:00<00:00, 32.47it/s] 81%|########  | 21/26 [00:00<00:00, 33.41it/s] 96%|#########6| 25/26 [00:00<00:00, 33.60it/s]100%|##########| 26/26 [00:00<00:00, 29.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.45 (  0.48)	train_minacc   0.50 (  0.53)	train_majacc   0.44 (  0.47)	train_corr   0.00 (  0.00)	l1 17.1837 (17.1841)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 27%|##6       | 7/26 [00:00<00:00, 36.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.08it/s] 50%|#####     | 13/26 [00:00<00:00, 41.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.00it/s] 96%|#########6| 25/26 [00:00<00:00, 47.41it/s]100%|##########| 26/26 [00:00<00:00, 39.73it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.59 (  0.59)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.56 (  0.55)	test_majacc   0.48 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.04 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.65 (  0.56)	test_majacc   0.50 (  0.49)	Loss_d 0.692 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.65 (  0.56)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.07 ( -0.00)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.44 (  0.49)	test_minacc   0.50 (  0.55)	test_majacc   0.43 (  0.49)	Loss_d 0.692 (0.691)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.50 (  0.55)	test_majacc_d   0.43 (  0.49)	test_corr_d  -0.01 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  3.93it/s]100%|##########| 1/1 [00:00<00:00,  3.93it/s]
Test: [  0/  1]	Loss 0.684 (0.684)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.47 (  0.47)	Loss_d 0.684 (0.684)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.684 (0.684)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.47 (  0.47)	Loss_d 0.684 (0.684)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 21/  1]	epoch_time 0.0560 (0.0403)	validation_time 0.0043 (0.0009)	train_time 0.0516 (0.0392)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.4946000127494335, 0.5740000009536743)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.16it/s] 19%|#9        | 5/26 [00:00<00:00, 22.64it/s] 35%|###4      | 9/26 [00:00<00:00, 27.99it/s] 50%|#####     | 13/26 [00:00<00:00, 30.70it/s] 65%|######5   | 17/26 [00:00<00:00, 32.34it/s] 81%|########  | 21/26 [00:00<00:00, 33.29it/s] 96%|#########6| 25/26 [00:00<00:00, 33.93it/s]100%|##########| 26/26 [00:00<00:00, 28.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.46 (  0.49)	train_minacc   0.52 (  0.55)	train_majacc   0.45 (  0.48)	train_corr   0.00 (  0.00)	l1 17.1834 (17.1836)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.56it/s] 27%|##6       | 7/26 [00:00<00:00, 28.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.23it/s] 50%|#####     | 13/26 [00:00<00:00, 36.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.34it/s] 96%|#########6| 25/26 [00:00<00:00, 45.40it/s]100%|##########| 26/26 [00:00<00:00, 36.03it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.56 (  0.55)	test_majacc   0.48 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.70 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.70 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.52 (  0.56)	test_majacc   0.44 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.44 (  0.49)	test_corr_d  -0.02 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.28it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.48 (  0.48)	Loss_d 0.686 (0.686)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.48 (  0.48)	Loss_d 0.686 (0.686)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 22/  1]	epoch_time 0.0375 (0.0402)	validation_time 0.0004 (0.0008)	train_time 0.0371 (0.0391)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5025000168085099, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.69it/s] 15%|#5        | 4/26 [00:00<00:01, 16.71it/s] 31%|###       | 8/26 [00:00<00:00, 22.05it/s] 42%|####2     | 11/26 [00:00<00:00, 19.62it/s] 50%|#####     | 13/26 [00:00<00:00, 18.84it/s] 58%|#####7    | 15/26 [00:00<00:00, 18.33it/s] 65%|######5   | 17/26 [00:00<00:00, 16.17it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.38it/s] 81%|########  | 21/26 [00:01<00:00, 16.38it/s] 88%|########8 | 23/26 [00:01<00:00, 16.49it/s] 96%|#########6| 25/26 [00:01<00:00, 16.77it/s]100%|##########| 26/26 [00:01<00:00, 16.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 337 tensor(-0.0149, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 458 tensor(-0.0009, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 484 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 490 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 491 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
rho, theta 498 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 500 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
rho, theta 502 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 504 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
rho, theta 505 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
rho, theta 507 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 507 tensor(-9.6079e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
rho, theta 509 tensor(-8.9129e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
rho, theta 500 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
rho, theta 505 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
rho, theta 508 tensor(-9.6821e-05, device='cuda:0')
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [23][  26/  26]	Loss 0.000 (0.004)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.13)	train_acc   0.53 (  0.50)	train_minacc   0.82 (  0.66)	train_majacc   0.47 (  0.47)	train_corr   0.00 (  0.00)	l1 13.0207 (13.5055)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.39it/s] 35%|###4      | 9/26 [00:00<00:00, 43.95it/s]                                               35%|###4      | 9/26 [00:00<00:00, 43.95it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.10it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.93it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.93it/s]100%|##########| 26/26 [00:00<00:00, 52.39it/s]100%|##########| 26/26 [00:00<00:00, 43.67it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.52 (  0.52)	test_minacc   0.67 (  0.67)	test_majacc   0.48 (  0.48)	Loss_d 0.686 (0.686)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.683 (0.684)	test_acc   0.56 (  0.55)	test_minacc   0.63 (  0.68)	test_majacc   0.55 (  0.52)	Loss_d 0.683 (0.684)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.63 (  0.68)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.688 (0.685)	test_acc   0.51 (  0.54)	test_minacc   0.72 (  0.66)	test_majacc   0.48 (  0.52)	Loss_d 0.688 (0.685)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.72 (  0.66)	test_majacc_d   0.48 (  0.52)	test_corr_d   0.02 (  0.03)
Test: [  26/  26]	Loss 0.690 (0.684)	test_acc   0.52 (  0.54)	test_minacc   0.82 (  0.67)	test_majacc   0.46 (  0.52)	Loss_d 0.690 (0.684)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.82 (  0.67)	test_majacc_d   0.46 (  0.52)	test_corr_d  -0.07 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.86it/s]
Test: [  0/  1]	Loss 0.667 (0.667)	test_acc   0.68 (  0.68)	test_minacc   0.70 (  0.70)	test_majacc   0.49 (  0.49)	Loss_d 0.667 (0.667)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.667 (0.667)	test_acc   0.68 (  0.68)	test_minacc   0.70 (  0.70)	test_majacc   0.49 (  0.49)	Loss_d 0.667 (0.667)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 23/  1]	epoch_time 0.0474 (0.0405)	validation_time 0.0004 (0.0008)	train_time 0.0470 (0.0394)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5446000102162362, 0.675000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.22it/s] 12%|#1        | 3/26 [00:00<00:01, 12.26it/s] 19%|#9        | 5/26 [00:00<00:01, 14.25it/s] 27%|##6       | 7/26 [00:00<00:01, 15.23it/s] 35%|###4      | 9/26 [00:00<00:01, 15.76it/s] 42%|####2     | 11/26 [00:00<00:00, 16.22it/s] 50%|#####     | 13/26 [00:00<00:00, 16.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.17it/s] 65%|######5   | 17/26 [00:01<00:00, 16.36it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.62it/s] 81%|########  | 21/26 [00:01<00:00, 16.72it/s] 88%|########8 | 23/26 [00:01<00:00, 16.72it/s] 96%|#########6| 25/26 [00:01<00:00, 16.80it/s]100%|##########| 26/26 [00:01<00:00, 15.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
rho, theta 507 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
rho, theta 508 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
rho, theta 510 tensor(-9.8389e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
rho, theta 510 tensor(-4.2005e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.14)	train_acc   0.54 (  0.51)	train_minacc   0.68 (  0.67)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 13.0110 (13.0189)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.26it/s] 27%|##6       | 7/26 [00:00<00:00, 35.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.57it/s] 50%|#####     | 13/26 [00:00<00:00, 41.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.00it/s] 96%|#########6| 25/26 [00:00<00:00, 47.19it/s]100%|##########| 26/26 [00:00<00:00, 39.94it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.61 (  0.61)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.687 (0.688)	test_acc   0.55 (  0.55)	test_minacc   0.59 (  0.64)	test_majacc   0.54 (  0.54)	Loss_d 0.687 (0.688)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.59 (  0.64)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  20/  26]	Loss 0.691 (0.689)	test_acc   0.53 (  0.54)	test_minacc   0.65 (  0.62)	test_majacc   0.51 (  0.53)	Loss_d 0.691 (0.689)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.65 (  0.62)	test_majacc_d   0.51 (  0.53)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.689)	test_acc   0.54 (  0.55)	test_minacc   0.68 (  0.62)	test_majacc   0.51 (  0.53)	Loss_d 0.692 (0.689)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.68 (  0.62)	test_majacc_d   0.51 (  0.53)	test_corr_d  -0.09 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.40it/s]
Test: [  0/  1]	Loss 0.675 (0.675)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.51 (  0.51)	Loss_d 0.675 (0.675)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.675 (0.675)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.51 (  0.51)	Loss_d 0.675 (0.675)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 24/  1]	epoch_time 0.0493 (0.0408)	validation_time 0.0004 (0.0008)	train_time 0.0488 (0.0398)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5479000060856343, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.13it/s] 12%|#1        | 3/26 [00:00<00:01, 13.41it/s] 19%|#9        | 5/26 [00:00<00:01, 15.23it/s] 27%|##6       | 7/26 [00:00<00:01, 16.11it/s] 35%|###4      | 9/26 [00:00<00:01, 16.60it/s] 42%|####2     | 11/26 [00:00<00:00, 17.03it/s] 50%|#####     | 13/26 [00:00<00:00, 17.18it/s] 58%|#####7    | 15/26 [00:00<00:00, 17.30it/s] 65%|######5   | 17/26 [00:01<00:00, 17.32it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.47it/s] 81%|########  | 21/26 [00:01<00:00, 17.45it/s] 88%|########8 | 23/26 [00:01<00:00, 17.55it/s] 96%|#########6| 25/26 [00:01<00:00, 17.29it/s]100%|##########| 26/26 [00:01<00:00, 16.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.53 (  0.54)	train_minacc   0.66 (  0.63)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 13.0063 (13.0065)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.24it/s] 35%|###4      | 9/26 [00:00<00:00, 43.59it/s]                                               35%|###4      | 9/26 [00:00<00:00, 43.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.85it/s] 77%|#######6  | 20/26 [00:00<00:00, 50.18it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 50.18it/s]100%|##########| 26/26 [00:00<00:00, 52.31it/s]100%|##########| 26/26 [00:00<00:00, 42.74it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.62 (  0.62)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.10)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.63)	test_majacc   0.53 (  0.52)	Loss_d 0.690 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.63)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.05 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.691)	test_acc   0.52 (  0.53)	test_minacc   0.65 (  0.61)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.691)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.65 (  0.61)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.06 ( -0.05)
Test: [  26/  26]	Loss 0.694 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.66 (  0.62)	test_majacc   0.50 (  0.52)	Loss_d 0.694 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.66 (  0.62)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.14 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.44it/s]
Test: [  0/  1]	Loss 0.678 (0.678)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.64)	test_majacc   0.50 (  0.50)	Loss_d 0.678 (0.678)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.33 ( -0.33)
Test: [  1/  1]	Loss 0.678 (0.678)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.64)	test_majacc   0.50 (  0.50)	Loss_d 0.678 (0.678)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.33 ( -0.33)
Overall Timing[ 25/  1]	epoch_time 0.0491 (0.0412)	validation_time 0.0007 (0.0008)	train_time 0.0484 (0.0401)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5345000130236148, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 12%|#1        | 3/26 [00:00<00:01, 12.51it/s] 19%|#9        | 5/26 [00:00<00:01, 14.57it/s] 27%|##6       | 7/26 [00:00<00:01, 15.55it/s] 35%|###4      | 9/26 [00:00<00:01, 16.10it/s] 42%|####2     | 11/26 [00:00<00:00, 16.48it/s] 50%|#####     | 13/26 [00:00<00:00, 16.63it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.75it/s] 65%|######5   | 17/26 [00:01<00:00, 16.89it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.99it/s] 81%|########  | 21/26 [00:01<00:00, 16.90it/s] 88%|########8 | 23/26 [00:01<00:00, 16.96it/s] 96%|#########6| 25/26 [00:01<00:00, 16.99it/s]100%|##########| 26/26 [00:01<00:00, 15.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
rho, theta 510 tensor(-3.3349e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.51 (  0.53)	train_minacc   0.61 (  0.61)	train_majacc   0.49 (  0.52)	train_corr   0.00 (  0.00)	l1 13.0188 (13.0132)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 31%|###       | 8/26 [00:00<00:00, 38.81it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.81it/s] 50%|#####     | 13/26 [00:00<00:00, 40.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.53it/s] 96%|#########6| 25/26 [00:00<00:00, 47.14it/s]100%|##########| 26/26 [00:00<00:00, 39.60it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.10 ( -0.10)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.54)	test_minacc   0.57 (  0.63)	test_majacc   0.53 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.57 (  0.63)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.65 (  0.60)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.06 ( -0.05)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.51 (  0.53)	test_minacc   0.61 (  0.61)	test_majacc   0.49 (  0.52)	Loss_d 0.694 (0.692)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.14 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.90it/s]
Test: [  0/  1]	Loss 0.680 (0.680)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.49 (  0.49)	Loss_d 0.680 (0.680)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.680 (0.680)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.49 (  0.49)	Loss_d 0.680 (0.680)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 26/  1]	epoch_time 0.0505 (0.0415)	validation_time 0.0003 (0.0008)	train_time 0.0501 (0.0405)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.533200013756752, 0.6170000433921814)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.46it/s] 12%|#1        | 3/26 [00:00<00:01, 12.52it/s] 19%|#9        | 5/26 [00:00<00:01, 14.52it/s] 27%|##6       | 7/26 [00:00<00:01, 15.42it/s] 35%|###4      | 9/26 [00:00<00:01, 16.01it/s] 42%|####2     | 11/26 [00:00<00:00, 16.33it/s] 50%|#####     | 13/26 [00:00<00:00, 16.55it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.59it/s] 65%|######5   | 17/26 [00:01<00:00, 16.76it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.81it/s] 81%|########  | 21/26 [00:01<00:00, 16.78it/s] 88%|########8 | 23/26 [00:01<00:00, 16.91it/s] 96%|#########6| 25/26 [00:01<00:00, 17.00it/s]100%|##########| 26/26 [00:01<00:00, 15.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.51 (  0.53)	train_minacc   0.61 (  0.60)	train_majacc   0.49 (  0.52)	train_corr   0.00 (  0.00)	l1 13.0314 (13.0256)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.52it/s] 31%|###       | 8/26 [00:00<00:00, 41.66it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.66it/s] 50%|#####     | 13/26 [00:00<00:00, 41.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.33it/s] 96%|#########6| 25/26 [00:00<00:00, 47.30it/s]100%|##########| 26/26 [00:00<00:00, 41.14it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.56 (  0.62)	test_majacc   0.54 (  0.52)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.56 (  0.62)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.63 (  0.59)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.63 (  0.59)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.06 ( -0.05)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.51 (  0.53)	test_minacc   0.61 (  0.59)	test_majacc   0.49 (  0.52)	Loss_d 0.694 (0.692)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.61 (  0.59)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.13 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.82it/s]
Test: [  0/  1]	Loss 0.682 (0.682)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.50 (  0.50)	Loss_d 0.682 (0.682)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.682 (0.682)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.50 (  0.50)	Loss_d 0.682 (0.682)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 27/  1]	epoch_time 0.0503 (0.0418)	validation_time 0.0009 (0.0008)	train_time 0.0494 (0.0408)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5315000126957894, 0.6020000576972961)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.82it/s] 12%|#1        | 3/26 [00:00<00:01, 13.04it/s] 19%|#9        | 5/26 [00:00<00:01, 14.78it/s] 27%|##6       | 7/26 [00:00<00:01, 15.63it/s] 35%|###4      | 9/26 [00:00<00:01, 16.29it/s] 42%|####2     | 11/26 [00:00<00:00, 16.65it/s] 50%|#####     | 13/26 [00:00<00:00, 16.76it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.99it/s] 65%|######5   | 17/26 [00:01<00:00, 16.95it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.89it/s] 81%|########  | 21/26 [00:01<00:00, 16.67it/s] 88%|########8 | 23/26 [00:01<00:00, 16.68it/s] 96%|#########6| 25/26 [00:01<00:00, 16.73it/s]100%|##########| 26/26 [00:01<00:00, 15.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
rho, theta 510 tensor(5.3047e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.53)	train_minacc   0.61 (  0.59)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 13.0094 (13.0331)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.36it/s] 31%|###       | 8/26 [00:00<00:00, 38.39it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.39it/s] 54%|#####3    | 14/26 [00:00<00:00, 46.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.76it/s] 96%|#########6| 25/26 [00:00<00:00, 47.90it/s]100%|##########| 26/26 [00:00<00:00, 40.34it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.56 (  0.61)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.56 (  0.61)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.06 ( -0.07)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.60 (  0.58)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.60 (  0.58)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.06 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.61 (  0.59)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.61 (  0.59)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.13 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.20it/s]
Test: [  0/  1]	Loss 0.683 (0.683)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.51 (  0.51)	Loss_d 0.683 (0.683)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.683 (0.683)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.51 (  0.51)	Loss_d 0.683 (0.683)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 28/  1]	epoch_time 0.0496 (0.0421)	validation_time 0.0005 (0.0008)	train_time 0.0491 (0.0411)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5294000132381916, 0.5940000414848328)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.89it/s] 12%|#1        | 3/26 [00:00<00:02, 10.68it/s] 19%|#9        | 5/26 [00:00<00:01, 13.25it/s] 27%|##6       | 7/26 [00:00<00:01, 14.65it/s] 35%|###4      | 9/26 [00:00<00:01, 15.51it/s] 42%|####2     | 11/26 [00:00<00:00, 16.08it/s] 50%|#####     | 13/26 [00:00<00:00, 16.41it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.71it/s] 65%|######5   | 17/26 [00:01<00:00, 16.85it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.06it/s] 81%|########  | 21/26 [00:01<00:00, 16.97it/s] 88%|########8 | 23/26 [00:01<00:00, 16.92it/s] 96%|#########6| 25/26 [00:01<00:00, 16.99it/s]100%|##########| 26/26 [00:01<00:00, 15.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.53)	train_minacc   0.61 (  0.58)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 13.0216 (13.0161)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 27%|##6       | 7/26 [00:00<00:00, 33.31it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.31it/s] 50%|#####     | 13/26 [00:00<00:00, 38.61it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.20it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.20it/s] 96%|#########6| 25/26 [00:00<00:00, 45.57it/s]100%|##########| 26/26 [00:00<00:00, 37.87it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.56 (  0.61)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.56 (  0.61)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.58 (  0.58)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.05 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.61 (  0.58)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.61 (  0.58)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.12 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.35it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.51 (  0.51)	Loss_d 0.685 (0.685)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.51 (  0.51)	Loss_d 0.685 (0.685)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 29/  1]	epoch_time 0.0505 (0.0424)	validation_time 0.0011 (0.0008)	train_time 0.0494 (0.0414)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5284000165760517, 0.5790000557899475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.93it/s] 12%|#1        | 3/26 [00:00<00:02, 10.77it/s] 19%|#9        | 5/26 [00:00<00:01, 13.20it/s] 27%|##6       | 7/26 [00:00<00:01, 14.52it/s] 35%|###4      | 9/26 [00:00<00:01, 15.38it/s] 42%|####2     | 11/26 [00:00<00:00, 15.92it/s] 50%|#####     | 13/26 [00:00<00:00, 16.25it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.58it/s] 65%|######5   | 17/26 [00:01<00:00, 16.60it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.52it/s] 81%|########  | 21/26 [00:01<00:00, 16.60it/s] 88%|########8 | 23/26 [00:01<00:00, 16.78it/s] 96%|#########6| 25/26 [00:01<00:00, 16.88it/s]100%|##########| 26/26 [00:01<00:00, 15.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.53)	train_minacc   0.59 (  0.58)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 13.0330 (13.0278)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.68it/s] 31%|###       | 8/26 [00:00<00:00, 39.48it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.48it/s] 50%|#####     | 13/26 [00:00<00:00, 42.51it/s] 69%|######9   | 18/26 [00:00<00:00, 45.15it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.15it/s] 92%|#########2| 24/26 [00:00<00:00, 49.64it/s]100%|##########| 26/26 [00:00<00:00, 41.41it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.56 (  0.60)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.56 (  0.60)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.58 (  0.57)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.58 (  0.57)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.59 (  0.58)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.59 (  0.58)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.12 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.79it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.52 (  0.52)	Loss_d 0.686 (0.686)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.52 (  0.52)	Loss_d 0.686 (0.686)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 30/  1]	epoch_time 0.0505 (0.0426)	validation_time 0.0004 (0.0008)	train_time 0.0501 (0.0417)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5249000158309937, 0.5730000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.47it/s] 12%|#1        | 3/26 [00:00<00:01, 11.75it/s] 19%|#9        | 5/26 [00:00<00:01, 13.95it/s] 27%|##6       | 7/26 [00:00<00:01, 15.16it/s] 35%|###4      | 9/26 [00:00<00:01, 15.82it/s] 42%|####2     | 11/26 [00:00<00:00, 16.18it/s] 50%|#####     | 13/26 [00:00<00:00, 16.38it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.56it/s] 65%|######5   | 17/26 [00:01<00:00, 16.71it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.77it/s] 81%|########  | 21/26 [00:01<00:00, 16.83it/s] 88%|########8 | 23/26 [00:01<00:00, 16.96it/s] 96%|#########6| 25/26 [00:01<00:00, 16.79it/s]100%|##########| 26/26 [00:01<00:00, 15.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.53)	train_minacc   0.57 (  0.57)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 13.0440 (13.0390)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.39it/s] 31%|###       | 8/26 [00:00<00:00, 39.66it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.66it/s] 50%|#####     | 13/26 [00:00<00:00, 41.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.65it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.65it/s] 96%|#########6| 25/26 [00:00<00:00, 47.89it/s]100%|##########| 26/26 [00:00<00:00, 40.50it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.56 (  0.59)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.56 (  0.59)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.05 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.58 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.58 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.11 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.02it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.52 (  0.52)	Loss_d 0.687 (0.687)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.52 (  0.52)	Loss_d 0.687 (0.687)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 31/  1]	epoch_time 0.0511 (0.0429)	validation_time 0.0006 (0.0008)	train_time 0.0505 (0.0419)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5232000103294849, 0.5700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.37it/s] 12%|#1        | 3/26 [00:00<00:02, 11.42it/s] 19%|#9        | 5/26 [00:00<00:01, 13.66it/s] 27%|##6       | 7/26 [00:00<00:01, 14.79it/s] 35%|###4      | 9/26 [00:00<00:01, 15.50it/s] 42%|####2     | 11/26 [00:00<00:00, 16.04it/s] 50%|#####     | 13/26 [00:00<00:00, 16.29it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.57it/s] 65%|######5   | 17/26 [00:01<00:00, 16.81it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.00it/s] 81%|########  | 21/26 [00:01<00:00, 16.95it/s] 88%|########8 | 23/26 [00:01<00:00, 16.90it/s] 96%|#########6| 25/26 [00:01<00:00, 16.97it/s]100%|##########| 26/26 [00:01<00:00, 15.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.52)	train_minacc   0.57 (  0.57)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 13.0546 (13.0497)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.74it/s] 35%|###4      | 9/26 [00:00<00:00, 39.73it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.73it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.63it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.63it/s] 81%|########  | 21/26 [00:00<00:00, 48.41it/s]100%|##########| 26/26 [00:00<00:00, 42.39it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.54 (  0.59)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.54 (  0.59)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.58 (  0.57)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.58 (  0.57)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.11 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.59it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.687 (0.687)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.687 (0.687)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 32/  1]	epoch_time 0.0491 (0.0431)	validation_time 0.0003 (0.0007)	train_time 0.0488 (0.0421)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5217000139057636, 0.5670000314712524)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.60it/s] 12%|#1        | 3/26 [00:00<00:01, 11.87it/s] 19%|#9        | 5/26 [00:00<00:01, 14.05it/s] 27%|##6       | 7/26 [00:00<00:01, 15.25it/s] 35%|###4      | 9/26 [00:00<00:01, 16.01it/s] 42%|####2     | 11/26 [00:00<00:00, 16.43it/s] 50%|#####     | 13/26 [00:00<00:00, 16.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.74it/s] 65%|######5   | 17/26 [00:01<00:00, 16.62it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.65it/s] 81%|########  | 21/26 [00:01<00:00, 16.77it/s] 88%|########8 | 23/26 [00:01<00:00, 16.87it/s] 96%|#########6| 25/26 [00:01<00:00, 16.96it/s]100%|##########| 26/26 [00:01<00:00, 15.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.52)	train_minacc   0.57 (  0.57)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 13.0648 (13.0602)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.57it/s] 27%|##6       | 7/26 [00:00<00:00, 35.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.65it/s] 50%|#####     | 13/26 [00:00<00:00, 41.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.48it/s] 96%|#########6| 25/26 [00:00<00:00, 48.02it/s]100%|##########| 26/26 [00:00<00:00, 40.34it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.59)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.58 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.58 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.11 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.59it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.688 (0.688)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.688 (0.688)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 33/  1]	epoch_time 0.0504 (0.0433)	validation_time 0.0004 (0.0007)	train_time 0.0500 (0.0424)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5193000150024891, 0.5610000491142273)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.10it/s] 12%|#1        | 3/26 [00:00<00:01, 12.96it/s] 19%|#9        | 5/26 [00:00<00:01, 14.89it/s] 27%|##6       | 7/26 [00:00<00:01, 15.89it/s] 35%|###4      | 9/26 [00:00<00:01, 16.22it/s] 42%|####2     | 11/26 [00:00<00:00, 16.46it/s] 50%|#####     | 13/26 [00:00<00:00, 16.56it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.69it/s] 65%|######5   | 17/26 [00:01<00:00, 16.82it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.85it/s] 81%|########  | 21/26 [00:01<00:00, 16.81it/s] 88%|########8 | 23/26 [00:01<00:00, 16.96it/s] 96%|#########6| 25/26 [00:01<00:00, 17.06it/s]100%|##########| 26/26 [00:01<00:00, 15.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.52)	train_minacc   0.57 (  0.56)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 13.0750 (13.0703)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.70it/s] 31%|###       | 8/26 [00:00<00:00, 38.13it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.13it/s] 50%|#####     | 13/26 [00:00<00:00, 42.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.19it/s] 96%|#########6| 25/26 [00:00<00:00, 48.52it/s]100%|##########| 26/26 [00:00<00:00, 41.13it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.58)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.04 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.53 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.10 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.20it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.688 (0.688)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.688 (0.688)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 34/  1]	epoch_time 0.0494 (0.0435)	validation_time 0.0004 (0.0007)	train_time 0.0490 (0.0426)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5176000141501427, 0.5630000233650208)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.67it/s] 12%|#1        | 3/26 [00:00<00:02,  9.65it/s] 19%|#9        | 5/26 [00:00<00:01, 12.29it/s] 27%|##6       | 7/26 [00:00<00:01, 13.92it/s] 35%|###4      | 9/26 [00:00<00:01, 14.88it/s] 42%|####2     | 11/26 [00:00<00:00, 15.57it/s] 50%|#####     | 13/26 [00:00<00:00, 15.96it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.15it/s] 65%|######5   | 17/26 [00:01<00:00, 16.42it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.57it/s] 81%|########  | 21/26 [00:01<00:00, 16.59it/s] 88%|########8 | 23/26 [00:01<00:00, 16.77it/s] 96%|#########6| 25/26 [00:01<00:00, 16.86it/s]100%|##########| 26/26 [00:01<00:00, 14.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
rho, theta 510 tensor(0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.52)	train_minacc   0.57 (  0.56)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 13.0101 (13.0551)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 27%|##6       | 7/26 [00:00<00:00, 37.71it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.71it/s] 50%|#####     | 13/26 [00:00<00:00, 42.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.26it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.26it/s] 96%|#########6| 25/26 [00:00<00:00, 48.67it/s]100%|##########| 26/26 [00:00<00:00, 40.99it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.58)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.53 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.11 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.12it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 35/  1]	epoch_time 0.0511 (0.0437)	validation_time 0.0004 (0.0007)	train_time 0.0506 (0.0428)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5167000118792057, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.64it/s] 12%|#1        | 3/26 [00:00<00:01, 12.31it/s] 19%|#9        | 5/26 [00:00<00:01, 14.16it/s] 27%|##6       | 7/26 [00:00<00:01, 15.15it/s] 35%|###4      | 9/26 [00:00<00:01, 15.76it/s] 42%|####2     | 11/26 [00:00<00:00, 16.14it/s] 50%|#####     | 13/26 [00:00<00:00, 16.47it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.68it/s] 65%|######5   | 17/26 [00:01<00:00, 16.71it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.82it/s] 81%|########  | 21/26 [00:01<00:00, 16.90it/s] 88%|########8 | 23/26 [00:01<00:00, 16.87it/s] 96%|#########6| 25/26 [00:01<00:00, 17.02it/s]100%|##########| 26/26 [00:01<00:00, 15.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.52)	train_minacc   0.57 (  0.56)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 13.0206 (13.0159)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.39it/s] 35%|###4      | 9/26 [00:00<00:00, 38.79it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.79it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.61it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.61it/s] 81%|########  | 21/26 [00:00<00:00, 46.11it/s]100%|##########| 26/26 [00:00<00:00, 41.12it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.58)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.53 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.10 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.21it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 36/  1]	epoch_time 0.0492 (0.0438)	validation_time 0.0003 (0.0007)	train_time 0.0488 (0.0430)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5157000140547753, 0.562000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.78it/s] 12%|#1        | 3/26 [00:00<00:01, 11.96it/s] 19%|#9        | 5/26 [00:00<00:01, 14.04it/s] 27%|##6       | 7/26 [00:00<00:01, 14.68it/s] 35%|###4      | 9/26 [00:00<00:01, 15.54it/s] 42%|####2     | 11/26 [00:00<00:00, 15.93it/s] 50%|#####     | 13/26 [00:00<00:00, 16.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.15it/s] 65%|######5   | 17/26 [00:01<00:00, 16.33it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.54it/s] 81%|########  | 21/26 [00:01<00:00, 16.66it/s] 88%|########8 | 23/26 [00:01<00:00, 16.82it/s] 96%|#########6| 25/26 [00:01<00:00, 17.00it/s]100%|##########| 26/26 [00:01<00:00, 15.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.52)	train_minacc   0.57 (  0.56)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 13.0307 (13.0261)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 27%|##6       | 7/26 [00:00<00:00, 33.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.07it/s] 50%|#####     | 13/26 [00:00<00:00, 40.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.75it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.75it/s] 96%|#########6| 25/26 [00:00<00:00, 46.76it/s]100%|##########| 26/26 [00:00<00:00, 38.54it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.50 (  0.58)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.03 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.53 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.57 (  0.56)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.10 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.90it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 37/  1]	epoch_time 0.0516 (0.0440)	validation_time 0.0004 (0.0007)	train_time 0.0512 (0.0432)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5135000141859054, 0.5630000233650208)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.56it/s] 12%|#1        | 3/26 [00:00<00:01, 12.24it/s] 19%|#9        | 5/26 [00:00<00:01, 14.02it/s] 27%|##6       | 7/26 [00:00<00:01, 15.17it/s] 35%|###4      | 9/26 [00:00<00:01, 15.78it/s] 42%|####2     | 11/26 [00:00<00:00, 16.27it/s] 50%|#####     | 13/26 [00:00<00:00, 16.55it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.69it/s] 65%|######5   | 17/26 [00:01<00:00, 16.77it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.96it/s] 81%|########  | 21/26 [00:01<00:00, 17.04it/s] 88%|########8 | 23/26 [00:01<00:00, 17.20it/s] 96%|#########6| 25/26 [00:01<00:00, 17.27it/s]100%|##########| 26/26 [00:01<00:00, 15.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.51)	train_minacc   0.57 (  0.56)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 13.0406 (13.0361)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.76it/s] 23%|##3       | 6/26 [00:00<00:00, 26.42it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.42it/s] 42%|####2     | 11/26 [00:00<00:00, 34.65it/s] 65%|######5   | 17/26 [00:00<00:00, 41.62it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.62it/s] 85%|########4 | 22/26 [00:00<00:00, 42.73it/s]100%|##########| 26/26 [00:00<00:00, 36.93it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.48 (  0.58)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.48 (  0.58)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.03 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.53 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.57 (  0.56)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.10 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.51it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 38/  1]	epoch_time 0.0508 (0.0442)	validation_time 0.0004 (0.0007)	train_time 0.0504 (0.0434)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5120000189244747, 0.5649999976158142)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.78it/s] 12%|#1        | 3/26 [00:00<00:02, 10.94it/s] 19%|#9        | 5/26 [00:00<00:01, 13.29it/s] 27%|##6       | 7/26 [00:00<00:01, 14.70it/s] 35%|###4      | 9/26 [00:00<00:01, 15.54it/s] 42%|####2     | 11/26 [00:00<00:00, 16.04it/s] 50%|#####     | 13/26 [00:00<00:00, 16.19it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.22it/s] 65%|######5   | 17/26 [00:01<00:00, 16.48it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.66it/s] 81%|########  | 21/26 [00:01<00:00, 16.73it/s] 88%|########8 | 23/26 [00:01<00:00, 16.94it/s] 96%|#########6| 25/26 [00:01<00:00, 17.07it/s]100%|##########| 26/26 [00:01<00:00, 15.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.51)	train_minacc   0.57 (  0.56)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 13.0502 (13.0458)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.25it/s] 31%|###       | 8/26 [00:00<00:00, 38.18it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.18it/s] 50%|#####     | 13/26 [00:00<00:00, 42.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.93it/s] 92%|#########2| 24/26 [00:00<00:00, 47.98it/s]100%|##########| 26/26 [00:00<00:00, 41.93it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.50 (  0.58)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.03 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.53 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.57 (  0.56)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.10 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.28it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 39/  1]	epoch_time 0.0508 (0.0444)	validation_time 0.0003 (0.0007)	train_time 0.0505 (0.0435)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5108000096976757, 0.5700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.37it/s] 12%|#1        | 3/26 [00:00<00:02, 10.66it/s] 19%|#9        | 5/26 [00:00<00:01, 13.00it/s] 27%|##6       | 7/26 [00:00<00:01, 14.32it/s] 35%|###4      | 9/26 [00:00<00:01, 15.14it/s] 42%|####2     | 11/26 [00:00<00:00, 15.73it/s] 50%|#####     | 13/26 [00:00<00:00, 15.98it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.28it/s] 65%|######5   | 17/26 [00:01<00:00, 16.45it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.65it/s] 81%|########  | 21/26 [00:01<00:00, 16.38it/s] 88%|########8 | 23/26 [00:01<00:00, 16.60it/s] 96%|#########6| 25/26 [00:01<00:00, 16.83it/s]100%|##########| 26/26 [00:01<00:00, 15.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.51)	train_minacc   0.57 (  0.57)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 13.0596 (13.0553)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.16it/s] 27%|##6       | 7/26 [00:00<00:00, 33.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.52it/s] 46%|####6     | 12/26 [00:00<00:00, 39.73it/s] 69%|######9   | 18/26 [00:00<00:00, 44.28it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.28it/s] 92%|#########2| 24/26 [00:00<00:00, 48.03it/s]100%|##########| 26/26 [00:00<00:00, 39.23it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.52 (  0.59)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.02 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.53 (  0.56)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.57 (  0.56)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.10 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.19it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 40/  1]	epoch_time 0.0505 (0.0445)	validation_time 0.0004 (0.0007)	train_time 0.0501 (0.0437)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5096000109314919, 0.5740000009536743)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.25it/s] 12%|#1        | 3/26 [00:00<00:02,  9.99it/s] 19%|#9        | 5/26 [00:00<00:01, 12.26it/s] 27%|##6       | 7/26 [00:00<00:01, 13.79it/s] 35%|###4      | 9/26 [00:00<00:01, 14.82it/s] 42%|####2     | 11/26 [00:00<00:00, 15.48it/s] 50%|#####     | 13/26 [00:00<00:00, 15.85it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.19it/s] 65%|######5   | 17/26 [00:01<00:00, 16.49it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.72it/s] 81%|########  | 21/26 [00:01<00:00, 16.86it/s] 88%|########8 | 23/26 [00:01<00:00, 17.11it/s] 96%|#########6| 25/26 [00:01<00:00, 17.20it/s]100%|##########| 26/26 [00:01<00:00, 14.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.51)	train_minacc   0.55 (  0.56)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 13.0687 (13.0645)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.04it/s] 35%|###4      | 9/26 [00:00<00:00, 42.77it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.77it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.07it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.07it/s] 81%|########  | 21/26 [00:00<00:00, 49.65it/s]100%|##########| 26/26 [00:00<00:00, 42.68it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.52 (  0.59)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.02 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.56)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.55 (  0.56)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.10 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.01it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 41/  1]	epoch_time 0.0503 (0.0447)	validation_time 0.0004 (0.0007)	train_time 0.0499 (0.0438)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5078000119924545, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.21it/s] 12%|#1        | 3/26 [00:00<00:02, 11.30it/s] 19%|#9        | 5/26 [00:00<00:01, 13.66it/s] 27%|##6       | 7/26 [00:00<00:01, 15.02it/s] 35%|###4      | 9/26 [00:00<00:01, 15.76it/s] 42%|####2     | 11/26 [00:00<00:00, 16.28it/s] 50%|#####     | 13/26 [00:00<00:00, 16.49it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.69it/s] 65%|######5   | 17/26 [00:01<00:00, 16.85it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.98it/s] 81%|########  | 21/26 [00:01<00:00, 17.03it/s] 88%|########8 | 23/26 [00:01<00:00, 17.16it/s] 96%|#########6| 25/26 [00:01<00:00, 17.26it/s]100%|##########| 26/26 [00:01<00:00, 15.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.51)	train_minacc   0.57 (  0.57)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 13.0774 (13.0735)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 27%|##6       | 7/26 [00:00<00:00, 36.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.13it/s] 50%|#####     | 13/26 [00:00<00:00, 41.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.72it/s] 96%|#########6| 25/26 [00:00<00:00, 48.02it/s]100%|##########| 26/26 [00:00<00:00, 40.34it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.52 (  0.59)	test_majacc   0.52 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.52 (  0.49)	test_corr_d  -0.02 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.49)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.00it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 42/  1]	epoch_time 0.0500 (0.0448)	validation_time 0.0003 (0.0007)	train_time 0.0497 (0.0440)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5065000120699406, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.36it/s] 12%|#1        | 3/26 [00:00<00:02, 11.31it/s] 19%|#9        | 5/26 [00:00<00:01, 13.53it/s] 27%|##6       | 7/26 [00:00<00:01, 14.66it/s] 35%|###4      | 9/26 [00:00<00:01, 15.31it/s] 42%|####2     | 11/26 [00:00<00:00, 15.84it/s] 50%|#####     | 13/26 [00:00<00:00, 16.27it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.49it/s] 65%|######5   | 17/26 [00:01<00:00, 16.73it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.89it/s] 81%|########  | 21/26 [00:01<00:00, 16.98it/s] 88%|########8 | 23/26 [00:01<00:00, 16.78it/s] 96%|#########6| 25/26 [00:01<00:00, 16.92it/s]100%|##########| 26/26 [00:01<00:00, 15.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.51)	train_minacc   0.57 (  0.56)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 13.0859 (13.0820)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.45it/s] 27%|##6       | 7/26 [00:00<00:00, 35.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.81it/s] 46%|####6     | 12/26 [00:00<00:00, 41.01it/s] 65%|######5   | 17/26 [00:00<00:00, 43.80it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.80it/s] 88%|########8 | 23/26 [00:00<00:00, 48.63it/s]100%|##########| 26/26 [00:00<00:00, 39.61it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.52 (  0.58)	test_majacc   0.53 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.53 (  0.49)	test_corr_d  -0.01 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.56)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.57 (  0.56)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.10 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.82it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 43/  1]	epoch_time 0.0503 (0.0449)	validation_time 0.0003 (0.0007)	train_time 0.0500 (0.0441)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.506000009983778, 0.5850000381469727)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.53it/s] 12%|#1        | 3/26 [00:00<00:02, 11.41it/s] 19%|#9        | 5/26 [00:00<00:01, 13.61it/s] 27%|##6       | 7/26 [00:00<00:01, 14.89it/s] 35%|###4      | 9/26 [00:00<00:01, 15.48it/s] 42%|####2     | 11/26 [00:00<00:00, 15.86it/s] 50%|#####     | 13/26 [00:00<00:00, 16.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.47it/s] 65%|######5   | 17/26 [00:01<00:00, 16.60it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.82it/s] 81%|########  | 21/26 [00:01<00:00, 16.73it/s] 88%|########8 | 23/26 [00:01<00:00, 16.87it/s] 96%|#########6| 25/26 [00:01<00:00, 16.87it/s]100%|##########| 26/26 [00:01<00:00, 15.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.54 (  0.51)	train_minacc   0.59 (  0.56)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 13.0940 (13.0903)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 19%|#9        | 5/26 [00:00<00:00, 36.65it/s]                                               19%|#9        | 5/26 [00:00<00:00, 36.65it/s] 42%|####2     | 11/26 [00:00<00:00, 46.88it/s] 65%|######5   | 17/26 [00:00<00:00, 47.69it/s]                                                65%|######5   | 17/26 [00:00<00:00, 47.69it/s] 88%|########8 | 23/26 [00:00<00:00, 51.23it/s]100%|##########| 26/26 [00:00<00:00, 44.05it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.52 (  0.57)	test_majacc   0.53 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.52 (  0.57)	test_majacc_d   0.53 (  0.49)	test_corr_d  -0.01 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.56 (  0.55)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.59 (  0.55)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.59 (  0.55)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.09 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.75it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.48 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.48 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 44/  1]	epoch_time 0.0511 (0.0451)	validation_time 0.0004 (0.0006)	train_time 0.0507 (0.0443)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5062000069916248, 0.5860000252723694)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.52it/s] 12%|#1        | 3/26 [00:00<00:01, 11.86it/s] 19%|#9        | 5/26 [00:00<00:01, 14.01it/s] 27%|##6       | 7/26 [00:00<00:01, 15.26it/s] 35%|###4      | 9/26 [00:00<00:01, 15.83it/s] 42%|####2     | 11/26 [00:00<00:00, 16.24it/s] 50%|#####     | 13/26 [00:00<00:00, 16.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.69it/s] 65%|######5   | 17/26 [00:01<00:00, 16.75it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.89it/s] 81%|########  | 21/26 [00:01<00:00, 16.82it/s] 88%|########8 | 23/26 [00:01<00:00, 16.98it/s] 96%|#########6| 25/26 [00:01<00:00, 17.02it/s]100%|##########| 26/26 [00:01<00:00, 15.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.54 (  0.51)	train_minacc   0.61 (  0.54)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 13.1017 (13.0981)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.57it/s] 23%|##3       | 6/26 [00:00<00:00, 31.37it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.37it/s] 46%|####6     | 12/26 [00:00<00:00, 42.78it/s] 65%|######5   | 17/26 [00:00<00:00, 43.56it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.56it/s] 88%|########8 | 23/26 [00:00<00:00, 48.68it/s]100%|##########| 26/26 [00:00<00:00, 39.00it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.52 (  0.56)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.53 (  0.50)	test_corr_d  -0.01 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.61 (  0.54)	test_majacc   0.53 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.53 (  0.50)	test_corr_d  -0.09 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.13it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 45/  1]	epoch_time 0.0497 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0493 (0.0444)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5087000095844268, 0.5900000333786011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 12%|#1        | 3/26 [00:00<00:01, 12.41it/s] 19%|#9        | 5/26 [00:00<00:01, 14.52it/s] 27%|##6       | 7/26 [00:00<00:01, 15.71it/s] 35%|###4      | 9/26 [00:00<00:01, 16.30it/s] 42%|####2     | 11/26 [00:00<00:00, 16.53it/s] 50%|#####     | 13/26 [00:00<00:00, 16.43it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.54it/s] 65%|######5   | 17/26 [00:01<00:00, 16.68it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.72it/s] 81%|########  | 21/26 [00:01<00:00, 16.72it/s] 88%|########8 | 23/26 [00:01<00:00, 16.81it/s] 96%|#########6| 25/26 [00:01<00:00, 16.83it/s]100%|##########| 26/26 [00:01<00:00, 15.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.54 (  0.51)	train_minacc   0.59 (  0.53)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 13.1090 (13.1057)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.07it/s] 27%|##6       | 7/26 [00:00<00:00, 33.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.39it/s] 50%|#####     | 13/26 [00:00<00:00, 40.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.57it/s] 96%|#########6| 25/26 [00:00<00:00, 47.54it/s]100%|##########| 26/26 [00:00<00:00, 38.83it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.52 (  0.55)	test_majacc   0.54 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.54 (  0.50)	test_corr_d  -0.01 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.52)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.59 (  0.53)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.09 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.13it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 46/  1]	epoch_time 0.0512 (0.0453)	validation_time 0.0004 (0.0006)	train_time 0.0508 (0.0445)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5122000101208687, 0.5850000381469727)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.93it/s] 12%|#1        | 3/26 [00:00<00:02, 10.90it/s] 19%|#9        | 5/26 [00:00<00:01, 13.37it/s] 27%|##6       | 7/26 [00:00<00:01, 14.68it/s] 35%|###4      | 9/26 [00:00<00:01, 15.54it/s] 42%|####2     | 11/26 [00:00<00:00, 15.39it/s] 50%|#####     | 13/26 [00:00<00:00, 15.88it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.26it/s] 65%|######5   | 17/26 [00:01<00:00, 16.57it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.76it/s] 81%|########  | 21/26 [00:01<00:00, 16.83it/s] 88%|########8 | 23/26 [00:01<00:00, 16.95it/s] 96%|#########6| 25/26 [00:01<00:00, 17.17it/s]100%|##########| 26/26 [00:01<00:00, 15.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.55 (  0.51)	train_minacc   0.57 (  0.52)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 13.1160 (13.1128)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.99it/s] 31%|###       | 8/26 [00:00<00:00, 40.86it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.86it/s] 50%|#####     | 13/26 [00:00<00:00, 42.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.11it/s] 96%|#########6| 25/26 [00:00<00:00, 48.27it/s]100%|##########| 26/26 [00:00<00:00, 38.71it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.45 (  0.45)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.48 (  0.54)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.00 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.51 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.57 (  0.51)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.09 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.06it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 47/  1]	epoch_time 0.0522 (0.0454)	validation_time 0.0006 (0.0006)	train_time 0.0516 (0.0447)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.517500012755394, 0.5760000348091125)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.22it/s] 12%|#1        | 3/26 [00:00<00:02, 11.11it/s] 19%|#9        | 5/26 [00:00<00:01, 13.51it/s] 27%|##6       | 7/26 [00:00<00:01, 14.71it/s] 35%|###4      | 9/26 [00:00<00:01, 15.20it/s] 42%|####2     | 11/26 [00:00<00:00, 15.64it/s] 50%|#####     | 13/26 [00:00<00:00, 15.99it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.25it/s] 65%|######5   | 17/26 [00:01<00:00, 16.52it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.78it/s] 81%|########  | 21/26 [00:01<00:00, 16.80it/s] 88%|########8 | 23/26 [00:01<00:00, 16.89it/s] 96%|#########6| 25/26 [00:01<00:00, 16.99it/s]100%|##########| 26/26 [00:01<00:00, 15.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.54 (  0.52)	train_minacc   0.52 (  0.50)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 13.1226 (13.1196)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.60it/s] 31%|###       | 8/26 [00:00<00:00, 35.03it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.03it/s] 50%|#####     | 13/26 [00:00<00:00, 39.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.36it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.36it/s] 96%|#########6| 25/26 [00:00<00:00, 46.62it/s]100%|##########| 26/26 [00:00<00:00, 38.14it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.44 (  0.44)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.46 (  0.52)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.00 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.53 (  0.49)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.04 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.52 (  0.49)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.54 (  0.53)	test_corr_d  -0.09 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.78it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.46 (  0.46)	Loss_d 0.691 (0.691)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.46 (  0.46)	Loss_d 0.691 (0.691)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 48/  1]	epoch_time 0.0509 (0.0455)	validation_time 0.0004 (0.0006)	train_time 0.0505 (0.0448)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5222000120580197, 0.5690000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.62it/s] 12%|#1        | 3/26 [00:00<00:02,  9.96it/s] 19%|#9        | 5/26 [00:00<00:01, 12.65it/s] 27%|##6       | 7/26 [00:00<00:01, 14.30it/s] 35%|###4      | 9/26 [00:00<00:01, 15.25it/s] 42%|####2     | 11/26 [00:00<00:00, 15.89it/s] 50%|#####     | 13/26 [00:00<00:00, 16.30it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.63it/s] 65%|######5   | 17/26 [00:01<00:00, 16.81it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.97it/s] 81%|########  | 21/26 [00:01<00:00, 16.96it/s] 88%|########8 | 23/26 [00:01<00:00, 17.11it/s] 96%|#########6| 25/26 [00:01<00:00, 17.28it/s]100%|##########| 26/26 [00:01<00:00, 15.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.56 (  0.53)	train_minacc   0.55 (  0.49)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 13.1288 (13.1259)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.19it/s] 31%|###       | 8/26 [00:00<00:00, 41.91it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.91it/s] 50%|#####     | 13/26 [00:00<00:00, 43.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.94it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.94it/s] 96%|#########6| 25/26 [00:00<00:00, 48.29it/s]100%|##########| 26/26 [00:00<00:00, 41.75it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.42 (  0.42)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.44 (  0.51)	test_majacc   0.57 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.00 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.53 (  0.48)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.53 (  0.48)	test_majacc_d   0.54 (  0.53)	test_corr_d  -0.04 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.55 (  0.48)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.56 (  0.54)	test_corr_d  -0.09 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.17it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 49/  1]	epoch_time 0.0509 (0.0456)	validation_time 0.0004 (0.0006)	train_time 0.0506 (0.0449)
record: (train_acc, test_acc) (0.671500026345253, 0.7230000495910645)
last accs (train_acc, test_acc) (0.5291000148057937, 0.5610000491142273)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.153 MB of 0.153 MB uploadedwandb: \ 0.153 MB of 0.153 MB uploadedwandb: | 0.153 MB of 0.153 MB uploadedwandb: / 0.175 MB of 0.181 MB uploaded (0.003 MB deduped)wandb: - 0.515 MB of 0.515 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/diagnostics/epoch_time_val █▁▂▁▂▁▂▂▁▁▂▁▁▁▁▁▁▄▁▃▃▃▃▃▃▄▃▃▄▃▄▃▃▃▃▃▃▄▄▄
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/diagnostics/train_time_val █▁▂▁▂▁▂▂▁▁▂▂▁▁▂▂▂▅▁▄▄▄▄▄▄▄▄▄▅▄▅▄▄▄▄▄▄▅▅▅
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▅▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/Loss_avg ██▇▇▇▇█▇▆█▇▇▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/Loss_d_avg ██▇▇▇▇█▇▆█▇▇▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/Loss_d_val ██▇▇▇▇█▇▆█▇▇▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/Loss_val ██▇▇▇▇█▇▆█▇▇▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_acc_avg ▁▁▂▂▂▃▃▂▅▂▄▃██▆▆▆▆▆▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_acc_d_avg ▁▁▂▂▂▃▃▂▅▂▄▃██▆▆▆▆▆▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_acc_d_val ▁▁▂▂▂▃▃▂▅▂▄▃██▆▆▆▆▆▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_acc_val ▁▁▂▂▂▃▃▂▅▂▄▃██▆▆▆▆▆▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_corr_d_avg ██▇▇▇▇▇▇▅▇▆▆▁▁▁▁▂▂▂▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_corr_d_val ██▇▇▇▇▇▇▅▇▆▆▁▁▁▁▂▂▂▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_majacc_avg ██▇▇▇▇▇▇▆▇▇▇▃▄▂▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_majacc_d_avg ██▇▇▇▇▇▇▆▇▇▇▃▄▂▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_majacc_d_val ██▇▇▇▇▇▇▆▇▇▇▃▄▂▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_majacc_val ██▇▇▇▇▇▇▆▇▇▇▃▄▂▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_minacc_avg ▁▁▂▂▂▃▃▂▅▂▄▃██▇▆▆▇▇█▇▇▇▇▇▆▆▆▆▆▆▆▇▇▇▇▇▇▇▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_minacc_d_avg ▁▁▂▂▂▃▃▂▅▂▄▃██▇▆▆▇▇█▇▇▇▇▇▆▆▆▆▆▆▆▇▇▇▇▇▇▇▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_minacc_d_val ▁▁▂▂▂▃▃▂▅▂▄▃██▇▆▆▇▇█▇▇▇▇▇▆▆▆▆▆▆▆▇▇▇▇▇▇▇▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_minacc_val ▁▁▂▂▂▃▃▂▅▂▄▃██▇▆▆▇▇█▇▇▇▇▇▆▆▆▆▆▆▆▇▇▇▇▇▇▇▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/Loss_val █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/l1_avg ▃▂▁▁▁▂▂▃▅▆▆▇███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/l1_val ▂▂▁▁▂▂▃▄▅▆▇████████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_acc_avg ▇███████████▇▄▃▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_acc_val ███████▇████▅▅▃▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_majacc_avg ▇███████████▆▃▃▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_majacc_val █████▇▇█▇█▇▇▄▄▂▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_minacc_avg ▂▁▁▁▂▂▂▂▃▂▃▃▅█▇▆▆▆▆▇▇▇▇▇▇▇▇▇▆▆▆▆▇▇▇▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_minacc_val ▁▁▁▁▂▄▂▁▂▁▃▄██▆▅▅▅▅█▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_nll_avg ▅▃▂▂▂▂▁▁▁▁▁▁▃▇▇█████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_nll_val ▃▃▃▂▁▂▁▂▁▁▁▁▆▇▇█████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_penalty_avg █▃▃▃▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_penalty_val █▅▆▅▃▂▃▃▃▄▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/diagnostics/epoch_time_val 0.05094
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/diagnostics/train_time_val 0.05057
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/diagnostics/validation_time_val 0.00035
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/Loss_avg 0.69101
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/Loss_d_avg 0.69101
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/Loss_d_val 0.69101
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/Loss_val 0.69101
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_acc_avg 0.561
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_acc_d_avg 0.561
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_acc_d_val 0.561
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_acc_val 0.561
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_corr_d_avg -0.21928
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_corr_d_val -0.21928
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_majacc_avg 0.47
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_majacc_d_avg 0.47
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_majacc_d_val 0.47
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_majacc_val 0.47
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_minacc_avg 0.57111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_minacc_d_avg 0.57111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_minacc_d_val 0.57111
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/test/test_minacc_val 0.57111
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/Loss_avg 8e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/Loss_val 8e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/l1_avg 13.12595
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/l1_val 13.12881
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_acc_avg 0.5263
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_acc_val 0.556
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_majacc_avg 0.53275
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_majacc_val 0.55825
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_minacc_avg 0.48639
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_minacc_val 0.54545
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_nll_avg 0.69294
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_nll_val 0.69318
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/weight_norm_avg 0.14237
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/42/logs/train/weight_norm_val 0.14228
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/u4s1ot1a
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_153531-u4s1ot1a/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: - Waiting for wandb.init()...wandb: \ Waiting for wandb.init()...wandb: | Waiting for wandb.init()...wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_153831-4nnjoz2i
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/4nnjoz2i
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=13.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1167
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5995, 3, 32, 32) (6005, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:38,  1.56s/it] 19%|#9        | 5/26 [00:01<00:05,  3.88it/s] 35%|###4      | 9/26 [00:01<00:02,  7.58it/s] 50%|#####     | 13/26 [00:01<00:01, 11.62it/s] 65%|######5   | 17/26 [00:02<00:00, 15.66it/s] 81%|########  | 21/26 [00:02<00:00, 19.54it/s] 96%|#########6| 25/26 [00:02<00:00, 22.96it/s]100%|##########| 26/26 [00:02<00:00,  9.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.226 (12.185)	train_nll   0.44 (  0.58)	train_penalty   0.04 (  0.25)	weight_norm   8.79 ( 11.61)	train_acc   0.86 (  0.78)	train_minacc   0.00 (  0.09)	train_majacc   1.00 (  0.90)	train_corr   0.00 (  0.00)	l1 6.7468 (7.5150)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.37it/s] 31%|###       | 8/26 [00:00<00:00, 40.80it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.80it/s] 50%|#####     | 13/26 [00:00<00:00, 42.40it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.51it/s] 96%|#########6| 25/26 [00:00<00:00, 48.13it/s]100%|##########| 26/26 [00:00<00:00, 41.37it/s]
Test: [   0/  26]	Loss 0.428 (0.428)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.428 (0.428)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.450 (0.430)	test_acc   0.83 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  1.00)	Loss_d 0.450 (0.430)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.464 (0.421)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.464 (0.421)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.415 (0.422)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.415 (0.422)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]
Test: [  0/  1]	Loss 1.460 (1.460)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.460 (1.460)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.460 (1.460)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.460 (1.460)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/43/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0740 (0.0740)	validation_time 0.0068 (0.0068)	train_time 0.0650 (0.0650)
record: (train_acc, test_acc) (0.8469000233411789, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8469000233411789, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.36it/s] 19%|#9        | 5/26 [00:00<00:00, 21.61it/s] 35%|###4      | 9/26 [00:00<00:00, 27.07it/s] 50%|#####     | 13/26 [00:00<00:00, 30.26it/s] 65%|######5   | 17/26 [00:00<00:00, 31.44it/s] 81%|########  | 21/26 [00:00<00:00, 32.87it/s] 96%|#########6| 25/26 [00:00<00:00, 33.42it/s]100%|##########| 26/26 [00:00<00:00, 28.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.539 (6.459)	train_nll   0.40 (  0.42)	train_penalty   0.06 (  0.06)	weight_norm   4.14 (  6.04)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.6723 (6.8611)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.09it/s] 27%|##6       | 7/26 [00:00<00:00, 31.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.45it/s] 50%|#####     | 13/26 [00:00<00:00, 38.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.30it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.30it/s] 96%|#########6| 25/26 [00:00<00:00, 46.40it/s]100%|##########| 26/26 [00:00<00:00, 37.84it/s]
Test: [   0/  26]	Loss 0.435 (0.435)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.435 (0.435)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.435 (0.418)	test_acc   0.83 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.435 (0.418)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.453 (0.407)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.453 (0.407)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.391 (0.407)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.391 (0.407)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.50it/s]
Test: [  0/  1]	Loss 1.769 (1.769)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.769 (1.769)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.769 (1.769)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.769 (1.769)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  1/  1]	epoch_time 0.0375 (0.0557)	validation_time 0.0004 (0.0036)	train_time 0.0370 (0.0510)
record: (train_acc, test_acc) (0.8469000233411789, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8476000244617462, 0.10700000822544098)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.80it/s] 19%|#9        | 5/26 [00:00<00:01, 19.35it/s] 35%|###4      | 9/26 [00:00<00:00, 25.36it/s] 50%|#####     | 13/26 [00:00<00:00, 28.76it/s] 65%|######5   | 17/26 [00:00<00:00, 30.71it/s] 81%|########  | 21/26 [00:00<00:00, 32.02it/s] 96%|#########6| 25/26 [00:00<00:00, 32.54it/s]100%|##########| 26/26 [00:00<00:00, 26.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.760 (3.501)	train_nll   0.39 (  0.40)	train_penalty   0.07 (  0.05)	weight_norm   2.37 (  3.10)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.0554 (6.4000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.47it/s] 27%|##6       | 7/26 [00:00<00:00, 28.95it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.95it/s] 42%|####2     | 11/26 [00:00<00:00, 17.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 31.16it/s]100%|##########| 26/26 [00:00<00:00, 29.68it/s]
Test: [   0/  26]	Loss 0.422 (0.422)	test_acc   0.83 (  0.83)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.422 (0.422)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.447 (0.410)	test_acc   0.82 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.447 (0.410)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.437 (0.398)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.437 (0.398)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.383 (0.398)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.383 (0.398)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.22it/s]
Test: [  0/  1]	Loss 1.820 (1.820)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.820 (1.820)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.820 (1.820)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.820 (1.820)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  2/  1]	epoch_time 0.0397 (0.0504)	validation_time 0.0004 (0.0025)	train_time 0.0392 (0.0471)
record: (train_acc, test_acc) (0.8469000233411789, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8477000256180763, 0.10700000822544098)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.68it/s] 19%|#9        | 5/26 [00:00<00:01, 17.71it/s] 35%|###4      | 9/26 [00:00<00:00, 24.31it/s] 50%|#####     | 13/26 [00:00<00:00, 28.18it/s] 65%|######5   | 17/26 [00:00<00:00, 30.62it/s] 81%|########  | 21/26 [00:00<00:00, 31.89it/s] 96%|#########6| 25/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 26.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.897 (2.267)	train_nll   0.40 (  0.39)	train_penalty   0.09 (  0.05)	weight_norm   1.50 (  1.88)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.05)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.6221 (5.7621)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.43it/s] 27%|##6       | 7/26 [00:00<00:00, 27.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.63it/s] 50%|#####     | 13/26 [00:00<00:00, 34.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.54it/s] 96%|#########6| 25/26 [00:00<00:00, 44.45it/s]100%|##########| 26/26 [00:00<00:00, 35.26it/s]
Test: [   0/  26]	Loss 0.397 (0.397)	test_acc   0.84 (  0.84)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.397 (0.397)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.391 (0.376)	test_acc   0.84 (  0.84)	test_minacc   0.08 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.391 (0.376)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.08 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.402 (0.370)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.402 (0.370)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.367 (0.369)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.367 (0.369)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.58it/s]
Test: [  0/  1]	Loss 1.728 (1.728)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.728 (1.728)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.728 (1.728)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.728 (1.728)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/43/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0377 (0.0472)	validation_time 0.0006 (0.0021)	train_time 0.0371 (0.0446)
record: (train_acc, test_acc) (0.8506000229120254, 0.12200000882148743)
last accs (train_acc, test_acc) (0.8506000229120254, 0.12200000882148743)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.38it/s] 19%|#9        | 5/26 [00:00<00:00, 21.89it/s] 35%|###4      | 9/26 [00:00<00:00, 26.91it/s] 50%|#####     | 13/26 [00:00<00:00, 29.62it/s] 65%|######5   | 17/26 [00:00<00:00, 31.16it/s] 81%|########  | 21/26 [00:00<00:00, 32.44it/s] 96%|#########6| 25/26 [00:00<00:00, 32.76it/s]100%|##########| 26/26 [00:00<00:00, 27.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.352 (1.586)	train_nll   0.38 (  0.38)	train_penalty   0.04 (  0.04)	weight_norm   0.98 (  1.21)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.10)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.4694 (5.5012)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.00it/s] 27%|##6       | 7/26 [00:00<00:00, 30.00it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.00it/s] 50%|#####     | 13/26 [00:00<00:00, 37.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.89it/s] 96%|#########6| 25/26 [00:00<00:00, 45.72it/s]100%|##########| 26/26 [00:00<00:00, 36.91it/s]
Test: [   0/  26]	Loss 0.383 (0.383)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.383 (0.383)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.381 (0.371)	test_acc   0.83 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.381 (0.371)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.394 (0.366)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.394 (0.366)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.365 (0.367)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.365 (0.367)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.16it/s]
Test: [  0/  1]	Loss 1.670 (1.670)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.670 (1.670)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.670 (1.670)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.670 (1.670)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/43/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0365 (0.0451)	validation_time 0.0003 (0.0017)	train_time 0.0362 (0.0429)
record: (train_acc, test_acc) (0.8491000208854675, 0.12800000607967377)
last accs (train_acc, test_acc) (0.8491000208854675, 0.12800000607967377)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.07it/s] 19%|#9        | 5/26 [00:00<00:01, 18.25it/s] 35%|###4      | 9/26 [00:00<00:00, 24.66it/s] 50%|#####     | 13/26 [00:00<00:00, 28.20it/s] 65%|######5   | 17/26 [00:00<00:00, 30.50it/s] 81%|########  | 21/26 [00:00<00:00, 32.19it/s] 96%|#########6| 25/26 [00:00<00:00, 33.27it/s]100%|##########| 26/26 [00:00<00:00, 26.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.042 (1.159)	train_nll   0.40 (  0.36)	train_penalty   0.06 (  0.03)	weight_norm   0.64 (  0.80)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.11)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.6713 (5.4833)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.47it/s] 27%|##6       | 7/26 [00:00<00:00, 32.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.12it/s] 50%|#####     | 13/26 [00:00<00:00, 39.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.47it/s] 96%|#########6| 25/26 [00:00<00:00, 46.25it/s]100%|##########| 26/26 [00:00<00:00, 38.00it/s]
Test: [   0/  26]	Loss 0.402 (0.402)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.402 (0.402)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.403 (0.389)	test_acc   0.83 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.403 (0.389)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.412 (0.382)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.412 (0.382)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.377 (0.380)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.377 (0.380)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.69it/s]
Test: [  0/  1]	Loss 1.762 (1.762)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.762 (1.762)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.762 (1.762)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.762 (1.762)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Overall Timing[  5/  1]	epoch_time 0.0376 (0.0438)	validation_time 0.0005 (0.0015)	train_time 0.0371 (0.0419)
record: (train_acc, test_acc) (0.8491000208854675, 0.12800000607967377)
last accs (train_acc, test_acc) (0.8494000336527825, 0.10700000822544098)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 19%|#9        | 5/26 [00:00<00:00, 22.79it/s] 35%|###4      | 9/26 [00:00<00:00, 27.76it/s] 50%|#####     | 13/26 [00:00<00:00, 29.91it/s] 65%|######5   | 17/26 [00:00<00:00, 31.56it/s] 81%|########  | 21/26 [00:00<00:00, 32.59it/s] 96%|#########6| 25/26 [00:00<00:00, 33.25it/s]100%|##########| 26/26 [00:00<00:00, 28.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.807 (0.891)	train_nll   0.37 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm   0.43 (  0.53)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.12)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.9923 (6.2554)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.22it/s] 31%|###       | 8/26 [00:00<00:00, 40.26it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.26it/s] 50%|#####     | 13/26 [00:00<00:00, 39.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.19it/s] 96%|#########6| 25/26 [00:00<00:00, 46.27it/s]100%|##########| 26/26 [00:00<00:00, 39.75it/s]
Test: [   0/  26]	Loss 0.406 (0.406)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.406 (0.406)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.365 (0.373)	test_acc   0.83 (  0.84)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  1.00)	Loss_d 0.365 (0.373)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.403 (0.365)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.403 (0.365)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.345 (0.361)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.345 (0.361)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.87it/s]
Test: [  0/  1]	Loss 1.865 (1.865)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.865 (1.865)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.865 (1.865)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.865 (1.865)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Overall Timing[  6/  1]	epoch_time 0.0373 (0.0429)	validation_time 0.0005 (0.0014)	train_time 0.0369 (0.0412)
record: (train_acc, test_acc) (0.8491000208854675, 0.12800000607967377)
last accs (train_acc, test_acc) (0.8503000277876854, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.86it/s] 19%|#9        | 5/26 [00:00<00:01, 19.82it/s] 35%|###4      | 9/26 [00:00<00:00, 25.15it/s] 50%|#####     | 13/26 [00:00<00:00, 27.59it/s] 65%|######5   | 17/26 [00:00<00:00, 29.74it/s] 81%|########  | 21/26 [00:00<00:00, 31.08it/s] 96%|#########6| 25/26 [00:00<00:00, 31.94it/s]100%|##########| 26/26 [00:00<00:00, 26.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.676 (0.714)	train_nll   0.38 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm   0.30 (  0.36)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.13)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 8.0880 (7.4455)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.80it/s] 31%|###       | 8/26 [00:00<00:00, 40.61it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.61it/s] 50%|#####     | 13/26 [00:00<00:00, 42.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.69it/s] 96%|#########6| 25/26 [00:00<00:00, 48.57it/s]100%|##########| 26/26 [00:00<00:00, 41.40it/s]
Test: [   0/  26]	Loss 0.380 (0.380)	test_acc   0.84 (  0.84)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.380 (0.380)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.371 (0.366)	test_acc   0.82 (  0.84)	test_minacc   0.02 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.371 (0.366)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.02 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.387 (0.357)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.387 (0.357)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.343 (0.355)	test_acc   0.85 (  0.85)	test_minacc   0.06 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.343 (0.355)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.06 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 1.686 (1.686)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.686 (1.686)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.686 (1.686)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.686 (1.686)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.87 (  0.87)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/43/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0373 (0.0422)	validation_time 0.0003 (0.0012)	train_time 0.0369 (0.0407)
record: (train_acc, test_acc) (0.8509000263810158, 0.13900001347064972)
last accs (train_acc, test_acc) (0.8509000263810158, 0.13900001347064972)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.78it/s] 19%|#9        | 5/26 [00:00<00:00, 24.42it/s] 35%|###4      | 9/26 [00:00<00:00, 28.45it/s] 50%|#####     | 13/26 [00:00<00:00, 30.56it/s] 65%|######5   | 17/26 [00:00<00:00, 32.00it/s] 81%|########  | 21/26 [00:00<00:00, 32.74it/s] 96%|#########6| 25/26 [00:00<00:00, 33.00it/s]100%|##########| 26/26 [00:00<00:00, 28.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.603 (0.604)	train_nll   0.39 (  0.35)	train_penalty   0.05 (  0.03)	weight_norm   0.21 (  0.26)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.15)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 9.7856 (8.9136)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.20it/s] 27%|##6       | 7/26 [00:00<00:00, 37.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.99it/s] 46%|####6     | 12/26 [00:00<00:00, 42.29it/s] 69%|######9   | 18/26 [00:00<00:00, 48.37it/s]                                                69%|######9   | 18/26 [00:00<00:00, 48.37it/s] 92%|#########2| 24/26 [00:00<00:00, 48.48it/s]100%|##########| 26/26 [00:00<00:00, 41.28it/s]
Test: [   0/  26]	Loss 0.381 (0.381)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.381 (0.381)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.345 (0.360)	test_acc   0.83 (  0.84)	test_minacc   0.06 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.345 (0.360)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.06 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  20/  26]	Loss 0.382 (0.348)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.382 (0.348)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.332 (0.345)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.332 (0.345)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.13it/s]
Test: [  0/  1]	Loss 1.766 (1.766)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.766 (1.766)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.766 (1.766)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.766 (1.766)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/43/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0362 (0.0415)	validation_time 0.0003 (0.0011)	train_time 0.0359 (0.0401)
record: (train_acc, test_acc) (0.8516000242233276, 0.1420000046491623)
last accs (train_acc, test_acc) (0.8516000242233276, 0.1420000046491623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.12it/s] 19%|#9        | 5/26 [00:00<00:01, 19.94it/s] 35%|###4      | 9/26 [00:00<00:00, 25.64it/s] 50%|#####     | 13/26 [00:00<00:00, 28.64it/s] 65%|######5   | 17/26 [00:00<00:00, 30.29it/s] 81%|########  | 21/26 [00:00<00:00, 31.64it/s] 96%|#########6| 25/26 [00:00<00:00, 32.53it/s]100%|##########| 26/26 [00:00<00:00, 26.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.520 (0.545)	train_nll   0.35 (  0.35)	train_penalty   0.04 (  0.03)	weight_norm   0.17 (  0.19)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.16)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 11.2890 (10.6116)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.25it/s] 31%|###       | 8/26 [00:00<00:00, 41.51it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.51it/s] 50%|#####     | 13/26 [00:00<00:00, 42.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.50it/s] 96%|#########6| 25/26 [00:00<00:00, 48.36it/s]100%|##########| 26/26 [00:00<00:00, 41.04it/s]
Test: [   0/  26]	Loss 0.373 (0.373)	test_acc   0.83 (  0.83)	test_minacc   0.12 (  0.12)	test_majacc   0.97 (  0.97)	Loss_d 0.373 (0.373)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.363 (0.356)	test_acc   0.82 (  0.84)	test_minacc   0.15 (  0.17)	test_majacc   0.95 (  0.97)	Loss_d 0.363 (0.356)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.15 (  0.17)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.379 (0.347)	test_acc   0.83 (  0.85)	test_minacc   0.21 (  0.18)	test_majacc   0.96 (  0.97)	Loss_d 0.379 (0.347)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.21 (  0.18)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.326 (0.344)	test_acc   0.87 (  0.86)	test_minacc   0.22 (  0.20)	test_majacc   0.98 (  0.97)	Loss_d 0.326 (0.344)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.22 (  0.20)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.19it/s]
Test: [  0/  1]	Loss 1.663 (1.663)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 1.663 (1.663)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.663 (1.663)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 1.663 (1.663)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.73 (  0.73)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/43/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0367 (0.0410)	validation_time 0.0005 (0.0011)	train_time 0.0362 (0.0397)
record: (train_acc, test_acc) (0.8552000256776809, 0.27800002694129944)
last accs (train_acc, test_acc) (0.8552000256776809, 0.27800002694129944)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.99it/s] 19%|#9        | 5/26 [00:00<00:01, 20.78it/s] 35%|###4      | 9/26 [00:00<00:00, 26.79it/s] 50%|#####     | 13/26 [00:00<00:00, 30.07it/s] 65%|######5   | 17/26 [00:00<00:00, 31.81it/s] 81%|########  | 21/26 [00:00<00:00, 33.12it/s] 96%|#########6| 25/26 [00:00<00:00, 33.91it/s]100%|##########| 26/26 [00:00<00:00, 28.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.474 (0.498)	train_nll   0.33 (  0.35)	train_penalty   0.03 (  0.03)	weight_norm   0.14 (  0.15)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.17)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 12.7797 (12.0579)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.59it/s] 31%|###       | 8/26 [00:00<00:00, 38.58it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.58it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.58it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.44it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.44it/s]100%|##########| 26/26 [00:00<00:00, 50.54it/s]100%|##########| 26/26 [00:00<00:00, 40.74it/s]
Test: [   0/  26]	Loss 0.374 (0.374)	test_acc   0.83 (  0.83)	test_minacc   0.12 (  0.12)	test_majacc   0.97 (  0.97)	Loss_d 0.374 (0.374)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.345 (0.348)	test_acc   0.83 (  0.85)	test_minacc   0.17 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.345 (0.348)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.17 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.367 (0.340)	test_acc   0.84 (  0.86)	test_minacc   0.18 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.367 (0.340)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.305 (0.338)	test_acc   0.87 (  0.86)	test_minacc   0.19 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 0.305 (0.338)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.19 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.71it/s]
Test: [  0/  1]	Loss 1.669 (1.669)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.669 (1.669)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.74 (  0.74)
Test: [  1/  1]	Loss 1.669 (1.669)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.669 (1.669)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.74 (  0.74)
Overall Timing[ 10/  1]	epoch_time 0.0385 (0.0408)	validation_time 0.0003 (0.0010)	train_time 0.0382 (0.0396)
record: (train_acc, test_acc) (0.8552000256776809, 0.27800002694129944)
last accs (train_acc, test_acc) (0.8562000219225884, 0.24900001287460327)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.14it/s] 12%|#1        | 3/26 [00:00<00:01, 14.51it/s] 27%|##6       | 7/26 [00:00<00:00, 23.26it/s] 42%|####2     | 11/26 [00:00<00:00, 27.38it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.44it/s] 88%|########8 | 23/26 [00:00<00:00, 32.52it/s]100%|##########| 26/26 [00:00<00:00, 26.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.452 (0.471)	train_nll   0.34 (  0.34)	train_penalty   0.03 (  0.03)	weight_norm   0.11 (  0.13)	train_acc   0.85 (  0.85)	train_minacc   0.19 (  0.20)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 14.6484 (13.8024)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.72it/s] 35%|###4      | 9/26 [00:00<00:00, 39.51it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.76it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.76it/s] 81%|########  | 21/26 [00:00<00:00, 46.44it/s]100%|##########| 26/26 [00:00<00:00, 41.54it/s]
Test: [   0/  26]	Loss 0.377 (0.377)	test_acc   0.81 (  0.81)	test_minacc   0.31 (  0.31)	test_majacc   0.91 (  0.91)	Loss_d 0.377 (0.377)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.337 (0.345)	test_acc   0.85 (  0.85)	test_minacc   0.44 (  0.39)	test_majacc   0.94 (  0.94)	Loss_d 0.337 (0.345)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.44 (  0.39)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.82 (  0.85)
Test: [  20/  26]	Loss 0.362 (0.338)	test_acc   0.86 (  0.86)	test_minacc   0.49 (  0.41)	test_majacc   0.93 (  0.93)	Loss_d 0.362 (0.338)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.49 (  0.41)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.81 (  0.84)
Test: [  26/  26]	Loss 0.308 (0.333)	test_acc   0.87 (  0.86)	test_minacc   0.44 (  0.42)	test_majacc   0.94 (  0.94)	Loss_d 0.308 (0.333)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.44 (  0.42)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.54it/s]
Test: [  0/  1]	Loss 1.398 (1.398)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.95 (  0.95)	Loss_d 1.398 (1.398)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.52 (  0.52)
Test: [  1/  1]	Loss 1.398 (1.398)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.95 (  0.95)	Loss_d 1.398 (1.398)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.52 (  0.52)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/43/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0364 (0.0404)	validation_time 0.0005 (0.0009)	train_time 0.0359 (0.0393)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.03it/s] 19%|#9        | 5/26 [00:00<00:00, 21.94it/s] 35%|###4      | 9/26 [00:00<00:00, 26.76it/s] 50%|#####     | 13/26 [00:00<00:00, 29.26it/s] 65%|######5   | 17/26 [00:00<00:00, 30.90it/s] 81%|########  | 21/26 [00:00<00:00, 32.02it/s] 96%|#########6| 25/26 [00:00<00:00, 32.92it/s]100%|##########| 26/26 [00:00<00:00, 27.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.456 (0.448)	train_nll   0.35 (  0.34)	train_penalty   0.04 (  0.02)	weight_norm   0.10 (  0.11)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.22)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 16.3874 (15.5301)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.14it/s] 35%|###4      | 9/26 [00:00<00:00, 39.73it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.73it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.44it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.44it/s] 81%|########  | 21/26 [00:00<00:00, 47.11it/s]100%|##########| 26/26 [00:00<00:00, 41.89it/s]
Test: [   0/  26]	Loss 0.386 (0.386)	test_acc   0.83 (  0.83)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 0.386 (0.386)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.349 (0.354)	test_acc   0.85 (  0.85)	test_minacc   0.17 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.349 (0.354)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.17 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  20/  26]	Loss 0.368 (0.344)	test_acc   0.84 (  0.85)	test_minacc   0.16 (  0.10)	test_majacc   0.98 (  0.99)	Loss_d 0.368 (0.344)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.16 (  0.10)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.318 (0.342)	test_acc   0.87 (  0.85)	test_minacc   0.17 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.318 (0.342)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.17 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 34.88it/s]
Test: [  0/  1]	Loss 1.645 (1.645)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.645 (1.645)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.645 (1.645)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.645 (1.645)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
Overall Timing[ 12/  1]	epoch_time 0.0376 (0.0402)	validation_time 0.0006 (0.0009)	train_time 0.0370 (0.0391)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.8545000208616257, 0.16900001466274261)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.80it/s] 19%|#9        | 5/26 [00:00<00:00, 24.09it/s] 35%|###4      | 9/26 [00:00<00:00, 28.50it/s] 50%|#####     | 13/26 [00:00<00:00, 30.48it/s] 65%|######5   | 17/26 [00:00<00:00, 32.27it/s] 81%|########  | 21/26 [00:00<00:00, 32.80it/s] 96%|#########6| 25/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:00<00:00, 28.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.422 (0.429)	train_nll   0.33 (  0.33)	train_penalty   0.04 (  0.02)	weight_norm   0.09 (  0.10)	train_acc   0.85 (  0.85)	train_minacc   0.11 (  0.24)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 17.7668 (17.0867)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.51it/s] 23%|##3       | 6/26 [00:00<00:00, 29.74it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.74it/s] 46%|####6     | 12/26 [00:00<00:00, 39.12it/s] 69%|######9   | 18/26 [00:00<00:00, 45.72it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.72it/s] 92%|#########2| 24/26 [00:00<00:00, 46.00it/s]100%|##########| 26/26 [00:00<00:00, 38.57it/s]
Test: [   0/  26]	Loss 0.347 (0.347)	test_acc   0.85 (  0.85)	test_minacc   0.22 (  0.22)	test_majacc   0.97 (  0.97)	Loss_d 0.347 (0.347)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.303 (0.324)	test_acc   0.86 (  0.86)	test_minacc   0.32 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.303 (0.324)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.32 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.90)
Test: [  20/  26]	Loss 0.332 (0.316)	test_acc   0.85 (  0.86)	test_minacc   0.33 (  0.23)	test_majacc   0.96 (  0.97)	Loss_d 0.332 (0.316)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.33 (  0.23)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.88 (  0.90)
Test: [  26/  26]	Loss 0.293 (0.313)	test_acc   0.86 (  0.86)	test_minacc   0.19 (  0.24)	test_majacc   0.97 (  0.97)	Loss_d 0.293 (0.313)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.19 (  0.24)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.14it/s]
Test: [  0/  1]	Loss 1.592 (1.592)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.99 (  0.99)	Loss_d 1.592 (1.592)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.592 (1.592)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.99 (  0.99)	Loss_d 1.592 (1.592)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.69 (  0.69)
Overall Timing[ 13/  1]	epoch_time 0.0369 (0.0400)	validation_time 0.0005 (0.0009)	train_time 0.0365 (0.0389)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.8643000221848488, 0.30300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.72it/s] 19%|#9        | 5/26 [00:00<00:00, 21.17it/s] 35%|###4      | 9/26 [00:00<00:00, 27.05it/s] 50%|#####     | 13/26 [00:00<00:00, 29.75it/s] 65%|######5   | 17/26 [00:00<00:00, 31.48it/s] 81%|########  | 21/26 [00:00<00:00, 32.62it/s] 96%|#########6| 25/26 [00:00<00:00, 33.50it/s]100%|##########| 26/26 [00:00<00:00, 27.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.409 (0.419)	train_nll   0.32 (  0.33)	train_penalty   0.03 (  0.02)	weight_norm   0.08 (  0.09)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.24)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 18.9394 (18.3601)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.75it/s] 27%|##6       | 7/26 [00:00<00:00, 36.77it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.77it/s] 50%|#####     | 13/26 [00:00<00:00, 42.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.04it/s] 96%|#########6| 25/26 [00:00<00:00, 48.45it/s]100%|##########| 26/26 [00:00<00:00, 40.49it/s]
Test: [   0/  26]	Loss 0.375 (0.375)	test_acc   0.84 (  0.84)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.375 (0.375)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.331 (0.341)	test_acc   0.84 (  0.85)	test_minacc   0.09 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.331 (0.341)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.09 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  20/  26]	Loss 0.357 (0.331)	test_acc   0.84 (  0.85)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.357 (0.331)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.303 (0.329)	test_acc   0.87 (  0.85)	test_minacc   0.11 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.303 (0.329)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.11 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.50it/s]
Test: [  0/  1]	Loss 1.738 (1.738)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.738 (1.738)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.738 (1.738)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.738 (1.738)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.86 (  0.86)
Overall Timing[ 14/  1]	epoch_time 0.0364 (0.0398)	validation_time 0.0004 (0.0009)	train_time 0.0360 (0.0387)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.8528000221252442, 0.164000004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.29it/s] 19%|#9        | 5/26 [00:00<00:00, 21.87it/s] 35%|###4      | 9/26 [00:00<00:00, 26.71it/s] 50%|#####     | 13/26 [00:00<00:00, 29.91it/s] 65%|######5   | 17/26 [00:00<00:00, 31.79it/s] 81%|########  | 21/26 [00:00<00:00, 33.11it/s] 96%|#########6| 25/26 [00:00<00:00, 33.88it/s]100%|##########| 26/26 [00:00<00:00, 28.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.170)	train_nll   0.69 (  0.49)	train_penalty   0.00 (  0.01)	weight_norm   0.13 (  0.10)	train_acc   0.50 (  0.71)	train_minacc   0.53 (  0.35)	train_majacc   0.50 (  0.77)	train_corr   0.00 (  0.00)	l1 18.9454 (19.1652)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.77it/s] 27%|##6       | 7/26 [00:00<00:00, 37.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.37it/s] 50%|#####     | 13/26 [00:00<00:00, 42.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.53it/s] 96%|#########6| 25/26 [00:00<00:00, 48.42it/s]100%|##########| 26/26 [00:00<00:00, 40.82it/s]
Test: [   0/  26]	Loss 0.683 (0.683)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.683 (0.683)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.36 (  0.36)
Test: [  10/  26]	Loss 0.697 (0.690)	test_acc   0.49 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.697 (0.690)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.28 (  0.29)
Test: [  20/  26]	Loss 0.681 (0.689)	test_acc   0.53 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.54 (  0.50)	Loss_d 0.681 (0.689)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.32 (  0.28)
Test: [  26/  26]	Loss 0.691 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.30 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 0.708 (0.708)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.708 (0.708)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 0.708 (0.708)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.708 (0.708)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Overall Timing[ 15/  1]	epoch_time 0.0376 (0.0396)	validation_time 0.0004 (0.0008)	train_time 0.0372 (0.0386)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5000000104606152, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.52it/s] 23%|##3       | 6/26 [00:00<00:00, 25.48it/s] 38%|###8      | 10/26 [00:00<00:00, 28.88it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.36it/s] 69%|######9   | 18/26 [00:00<00:00, 32.69it/s] 85%|########4 | 22/26 [00:00<00:00, 33.53it/s]100%|##########| 26/26 [00:00<00:00, 34.34it/s]100%|##########| 26/26 [00:00<00:00, 29.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.16)	train_acc   0.46 (  0.49)	train_minacc   0.67 (  0.51)	train_majacc   0.42 (  0.49)	train_corr   0.00 (  0.00)	l1 18.7100 (18.7840)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.04it/s] 27%|##6       | 7/26 [00:00<00:00, 32.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.93it/s] 46%|####6     | 12/26 [00:00<00:00, 39.40it/s] 65%|######5   | 17/26 [00:00<00:00, 43.13it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.13it/s] 85%|########4 | 22/26 [00:00<00:00, 45.50it/s]100%|##########| 26/26 [00:00<00:00, 39.31it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.47 (  0.47)	test_minacc   0.64 (  0.64)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.46 (  0.45)	test_minacc   0.58 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.692)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.58 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.07 (  0.00)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.47 (  0.45)	test_minacc   0.54 (  0.58)	test_majacc   0.46 (  0.43)	Loss_d 0.690 (0.692)	test_acc_d   0.47 (  0.45)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.46 (  0.43)	test_corr_d   0.00 ( -0.01)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.46 (  0.45)	test_minacc   0.67 (  0.58)	test_majacc   0.42 (  0.43)	Loss_d 0.690 (0.692)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.67 (  0.58)	test_majacc_d   0.42 (  0.43)	test_corr_d  -0.00 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.67it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.687 (0.687)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.687 (0.687)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 16/  1]	epoch_time 0.0373 (0.0395)	validation_time 0.0005 (0.0008)	train_time 0.0368 (0.0385)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.45260000583529475, 0.5460000038146973)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.97it/s] 19%|#9        | 5/26 [00:00<00:00, 23.63it/s] 35%|###4      | 9/26 [00:00<00:00, 28.02it/s] 50%|#####     | 13/26 [00:00<00:00, 30.20it/s] 65%|######5   | 17/26 [00:00<00:00, 31.26it/s] 81%|########  | 21/26 [00:00<00:00, 32.37it/s] 96%|#########6| 25/26 [00:00<00:00, 33.34it/s]100%|##########| 26/26 [00:00<00:00, 28.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.46 (  0.46)	train_minacc   0.67 (  0.58)	train_majacc   0.42 (  0.44)	train_corr   0.00 (  0.00)	l1 18.6846 (18.6925)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.38it/s] 27%|##6       | 7/26 [00:00<00:00, 35.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.22it/s] 50%|#####     | 13/26 [00:00<00:00, 39.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.90it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.90it/s] 96%|#########6| 25/26 [00:00<00:00, 47.06it/s]100%|##########| 26/26 [00:00<00:00, 39.33it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.47 (  0.47)	test_minacc   0.59 (  0.59)	test_majacc   0.45 (  0.45)	Loss_d 0.691 (0.691)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.47 (  0.47)	test_minacc   0.62 (  0.59)	test_majacc   0.44 (  0.45)	Loss_d 0.692 (0.691)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.62 (  0.59)	test_majacc_d   0.44 (  0.45)	test_corr_d  -0.08 ( -0.00)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.46 (  0.47)	test_minacc   0.54 (  0.59)	test_majacc   0.45 (  0.45)	Loss_d 0.691 (0.691)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.54 (  0.59)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.00 ( -0.02)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.46 (  0.47)	test_minacc   0.67 (  0.59)	test_majacc   0.42 (  0.45)	Loss_d 0.690 (0.691)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.67 (  0.59)	test_majacc_d   0.42 (  0.45)	test_corr_d  -0.00 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.06it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.688 (0.688)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.688 (0.688)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 17/  1]	epoch_time 0.0375 (0.0394)	validation_time 0.0004 (0.0008)	train_time 0.0371 (0.0384)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.4698000048100948, 0.550000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.95it/s] 19%|#9        | 5/26 [00:00<00:00, 21.39it/s] 35%|###4      | 9/26 [00:00<00:00, 26.72it/s] 50%|#####     | 13/26 [00:00<00:00, 29.61it/s] 65%|######5   | 17/26 [00:00<00:00, 31.44it/s] 81%|########  | 21/26 [00:00<00:00, 32.75it/s] 96%|#########6| 25/26 [00:00<00:00, 33.11it/s]100%|##########| 26/26 [00:00<00:00, 27.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.48 (  0.48)	train_minacc   0.56 (  0.59)	train_majacc   0.46 (  0.46)	train_corr   0.00 (  0.00)	l1 18.6816 (18.6827)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.92it/s] 31%|###       | 8/26 [00:00<00:00, 40.84it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.84it/s] 50%|#####     | 13/26 [00:00<00:00, 42.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.43it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.43it/s] 96%|#########6| 25/26 [00:00<00:00, 48.40it/s]100%|##########| 26/26 [00:00<00:00, 41.31it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.58 (  0.58)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.48 (  0.50)	test_minacc   0.61 (  0.56)	test_majacc   0.45 (  0.48)	Loss_d 0.692 (0.691)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.61 (  0.56)	test_majacc_d   0.45 (  0.48)	test_corr_d  -0.07 (  0.02)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.03 (  0.00)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.56 (  0.57)	test_majacc   0.46 (  0.48)	Loss_d 0.691 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.56 (  0.57)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.01 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.95it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.44 (  0.44)	Loss_d 0.690 (0.690)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.44 (  0.44)	Loss_d 0.690 (0.690)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 18/  1]	epoch_time 0.0373 (0.0393)	validation_time 0.0006 (0.0008)	train_time 0.0367 (0.0384)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.49780001199245455, 0.5870000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.38it/s] 19%|#9        | 5/26 [00:00<00:00, 23.37it/s] 35%|###4      | 9/26 [00:00<00:00, 28.07it/s] 50%|#####     | 13/26 [00:00<00:00, 30.28it/s] 65%|######5   | 17/26 [00:00<00:00, 31.78it/s] 81%|########  | 21/26 [00:00<00:00, 32.38it/s] 96%|#########6| 25/26 [00:00<00:00, 32.98it/s]100%|##########| 26/26 [00:00<00:00, 28.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.50 (  0.49)	train_minacc   0.67 (  0.58)	train_majacc   0.47 (  0.47)	train_corr   0.00 (  0.00)	l1 18.6808 (18.6812)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.94it/s] 27%|##6       | 7/26 [00:00<00:00, 30.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.97it/s] 50%|#####     | 13/26 [00:00<00:00, 37.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.20it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.20it/s] 96%|#########6| 25/26 [00:00<00:00, 45.77it/s]100%|##########| 26/26 [00:00<00:00, 37.42it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.62 (  0.54)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.62 (  0.54)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.06 (  0.04)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.49)	test_minacc   0.60 (  0.55)	test_majacc   0.51 (  0.48)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.60 (  0.55)	test_majacc_d   0.51 (  0.48)	test_corr_d   0.07 (  0.03)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.64 (  0.55)	test_majacc   0.46 (  0.49)	Loss_d 0.691 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.64 (  0.55)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.03 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.29it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 19/  1]	epoch_time 0.0368 (0.0391)	validation_time 0.0003 (0.0008)	train_time 0.0365 (0.0383)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.4963000103831291, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.35it/s] 19%|#9        | 5/26 [00:00<00:00, 21.40it/s] 35%|###4      | 9/26 [00:00<00:00, 27.85it/s] 50%|#####     | 13/26 [00:00<00:00, 31.25it/s] 65%|######5   | 17/26 [00:00<00:00, 33.37it/s] 81%|########  | 21/26 [00:00<00:00, 33.49it/s] 96%|#########6| 25/26 [00:00<00:00, 33.67it/s]100%|##########| 26/26 [00:00<00:00, 28.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.50 (  0.48)	train_minacc   0.64 (  0.58)	train_majacc   0.48 (  0.47)	train_corr   0.00 (  0.00)	l1 18.6804 (18.6806)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.88it/s] 31%|###       | 8/26 [00:00<00:00, 40.11it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.11it/s] 50%|#####     | 13/26 [00:00<00:00, 43.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.24it/s] 96%|#########6| 25/26 [00:00<00:00, 48.95it/s]100%|##########| 26/26 [00:00<00:00, 41.48it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.61 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.61 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.04 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.48 (  0.52)	test_majacc   0.54 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.10 (  0.05)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.67 (  0.52)	test_majacc   0.48 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.67 (  0.52)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.04 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.57it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 20/  1]	epoch_time 0.0375 (0.0391)	validation_time 0.0004 (0.0007)	train_time 0.0370 (0.0382)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5017000117301941, 0.5590000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 19%|#9        | 5/26 [00:00<00:00, 22.77it/s] 35%|###4      | 9/26 [00:00<00:00, 26.98it/s] 50%|#####     | 13/26 [00:00<00:00, 29.68it/s] 65%|######5   | 17/26 [00:00<00:00, 31.33it/s] 81%|########  | 21/26 [00:00<00:00, 32.12it/s] 96%|#########6| 25/26 [00:00<00:00, 32.26it/s]100%|##########| 26/26 [00:00<00:00, 27.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.53 (  0.48)	train_minacc   0.64 (  0.56)	train_majacc   0.51 (  0.47)	train_corr   0.00 (  0.00)	l1 18.6800 (18.6802)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.52it/s] 27%|##6       | 7/26 [00:00<00:00, 33.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.52it/s] 50%|#####     | 13/26 [00:00<00:00, 39.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.53it/s] 96%|#########6| 25/26 [00:00<00:00, 46.25it/s]100%|##########| 26/26 [00:00<00:00, 38.39it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.49)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.03 (  0.07)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.48 (  0.50)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.11 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.67 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.04 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.78it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 21/  1]	epoch_time 0.0371 (0.0390)	validation_time 0.0003 (0.0007)	train_time 0.0368 (0.0381)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5075000112652779, 0.5450000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.36it/s] 23%|##3       | 6/26 [00:00<00:00, 26.19it/s] 38%|###8      | 10/26 [00:00<00:00, 29.71it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.70it/s] 69%|######9   | 18/26 [00:00<00:00, 32.78it/s] 85%|########4 | 22/26 [00:00<00:00, 33.22it/s]100%|##########| 26/26 [00:00<00:00, 33.60it/s]100%|##########| 26/26 [00:00<00:00, 29.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.52 (  0.49)	train_minacc   0.58 (  0.53)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 18.6797 (18.6799)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.58it/s] 27%|##6       | 7/26 [00:00<00:00, 33.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.94it/s] 46%|####6     | 12/26 [00:00<00:00, 38.62it/s] 69%|######9   | 18/26 [00:00<00:00, 45.35it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.35it/s] 92%|#########2| 24/26 [00:00<00:00, 46.52it/s]100%|##########| 26/26 [00:00<00:00, 39.16it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.47)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.47)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.02 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.45 (  0.48)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.11 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.61 (  0.49)	test_majacc   0.50 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.61 (  0.49)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.03 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.35it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 22/  1]	epoch_time 0.0373 (0.0389)	validation_time 0.0006 (0.0007)	train_time 0.0367 (0.0381)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5063000085949898, 0.5370000004768372)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.92it/s] 19%|#9        | 5/26 [00:00<00:01, 20.67it/s] 35%|###4      | 9/26 [00:00<00:00, 25.40it/s] 50%|#####     | 13/26 [00:00<00:00, 28.98it/s] 65%|######5   | 17/26 [00:00<00:00, 30.57it/s] 81%|########  | 21/26 [00:00<00:00, 31.72it/s] 96%|#########6| 25/26 [00:00<00:00, 32.73it/s]100%|##########| 26/26 [00:00<00:00, 27.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 307 tensor(-0.0115, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.004)	train_nll   0.70 (  0.70)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.19)	train_acc   0.50 (  0.53)	train_minacc   0.47 (  0.45)	train_majacc   0.50 (  0.55)	train_corr   0.00 (  0.00)	l1 12.7010 (13.5167)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.69it/s] 27%|##6       | 7/26 [00:00<00:00, 28.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.41it/s] 50%|#####     | 13/26 [00:00<00:00, 36.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.08it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.08it/s] 96%|#########6| 25/26 [00:00<00:00, 45.80it/s]100%|##########| 26/26 [00:00<00:00, 36.50it/s]
Test: [   0/  26]	Loss 0.709 (0.709)	test_acc   0.48 (  0.48)	test_minacc   0.44 (  0.44)	test_majacc   0.49 (  0.49)	Loss_d 0.709 (0.709)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.53 ( -0.53)
Test: [  10/  26]	Loss 0.700 (0.704)	test_acc   0.51 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.700 (0.704)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.50 ( -0.51)
Test: [  20/  26]	Loss 0.708 (0.704)	test_acc   0.47 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.46 (  0.50)	Loss_d 0.708 (0.704)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.46 (  0.50)	test_corr_d  -0.42 ( -0.50)
Test: [  26/  26]	Loss 0.703 (0.704)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.703 (0.704)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.54 ( -0.50)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.22it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.51 ( -0.51)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.51 ( -0.51)
Overall Timing[ 23/  1]	epoch_time 0.0381 (0.0389)	validation_time 0.0004 (0.0007)	train_time 0.0377 (0.0381)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5000000127851963, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 19%|#9        | 5/26 [00:00<00:01, 20.50it/s] 35%|###4      | 9/26 [00:00<00:00, 26.38it/s] 50%|#####     | 13/26 [00:00<00:00, 29.54it/s] 65%|######5   | 17/26 [00:00<00:00, 31.43it/s] 81%|########  | 21/26 [00:00<00:00, 32.33it/s] 96%|#########6| 25/26 [00:00<00:00, 32.77it/s]100%|##########| 26/26 [00:00<00:00, 27.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.70)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.56 (  0.53)	train_minacc   0.33 (  0.47)	train_majacc   0.59 (  0.53)	train_corr   0.00 (  0.00)	l1 12.3631 (12.4853)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.75it/s] 31%|###       | 8/26 [00:00<00:00, 32.89it/s]                                               31%|###       | 8/26 [00:00<00:00, 32.89it/s] 50%|#####     | 13/26 [00:00<00:00, 37.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.24it/s] 96%|#########6| 25/26 [00:00<00:00, 46.00it/s]100%|##########| 26/26 [00:00<00:00, 37.18it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.38 (  0.38)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.689 (0.689)	test_acc   0.55 (  0.55)	test_minacc   0.42 (  0.43)	test_majacc   0.57 (  0.57)	Loss_d 0.689 (0.689)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.42 (  0.43)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.26 (  0.23)
Test: [  20/  26]	Loss 0.692 (0.689)	test_acc   0.52 (  0.55)	test_minacc   0.46 (  0.43)	test_majacc   0.53 (  0.57)	Loss_d 0.692 (0.689)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.46 (  0.43)	test_majacc_d   0.53 (  0.57)	test_corr_d   0.24 (  0.24)
Test: [  26/  26]	Loss 0.691 (0.689)	test_acc   0.56 (  0.55)	test_minacc   0.33 (  0.43)	test_majacc   0.59 (  0.57)	Loss_d 0.691 (0.689)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.33 (  0.43)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.27 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.60 (  0.60)	Loss_d 0.701 (0.701)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.60 (  0.60)	Loss_d 0.701 (0.701)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.23 (  0.23)
Overall Timing[ 24/  1]	epoch_time 0.0369 (0.0388)	validation_time 0.0004 (0.0007)	train_time 0.0366 (0.0380)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5521000111103058, 0.4410000145435333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.92it/s] 19%|#9        | 5/26 [00:00<00:00, 21.76it/s] 35%|###4      | 9/26 [00:00<00:00, 26.69it/s] 50%|#####     | 13/26 [00:00<00:00, 29.71it/s] 65%|######5   | 17/26 [00:00<00:00, 31.29it/s] 81%|########  | 21/26 [00:00<00:00, 32.31it/s] 96%|#########6| 25/26 [00:00<00:00, 32.52it/s]100%|##########| 26/26 [00:00<00:00, 27.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.55)	train_minacc   0.36 (  0.43)	train_majacc   0.57 (  0.57)	train_corr   0.00 (  0.00)	l1 12.3485 (12.3486)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.96it/s] 31%|###       | 8/26 [00:00<00:00, 35.74it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.74it/s] 54%|#####3    | 14/26 [00:00<00:00, 40.80it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.06it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.06it/s]100%|##########| 26/26 [00:00<00:00, 50.08it/s]100%|##########| 26/26 [00:00<00:00, 39.96it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.55 (  0.54)	test_minacc   0.42 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.690 (0.691)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.42 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.22 (  0.19)
Test: [  20/  26]	Loss 0.694 (0.691)	test_acc   0.51 (  0.54)	test_minacc   0.48 (  0.44)	test_majacc   0.52 (  0.56)	Loss_d 0.694 (0.691)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.48 (  0.44)	test_majacc_d   0.52 (  0.56)	test_corr_d   0.21 (  0.20)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.36 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.24 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.08it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.699 (0.699)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.699 (0.699)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.19 (  0.19)
Overall Timing[ 25/  1]	epoch_time 0.0368 (0.0387)	validation_time 0.0004 (0.0007)	train_time 0.0364 (0.0379)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5441000107526779, 0.45600003004074097)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.19it/s] 19%|#9        | 5/26 [00:00<00:00, 23.57it/s] 35%|###4      | 9/26 [00:00<00:00, 28.58it/s] 50%|#####     | 13/26 [00:00<00:00, 30.95it/s] 65%|######5   | 17/26 [00:00<00:00, 31.23it/s] 81%|########  | 21/26 [00:00<00:00, 32.17it/s] 96%|#########6| 25/26 [00:00<00:00, 30.90it/s]100%|##########| 26/26 [00:00<00:00, 27.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.54)	train_minacc   0.36 (  0.44)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 12.3440 (12.3484)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 27%|##6       | 7/26 [00:00<00:00, 32.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.05it/s] 50%|#####     | 13/26 [00:00<00:00, 40.09it/s] 69%|######9   | 18/26 [00:00<00:00, 43.42it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.42it/s] 96%|#########6| 25/26 [00:00<00:00, 47.61it/s]100%|##########| 26/26 [00:00<00:00, 38.47it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.44 (  0.44)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.20 (  0.16)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.51 (  0.54)	test_minacc   0.49 (  0.44)	test_majacc   0.51 (  0.55)	Loss_d 0.694 (0.692)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.49 (  0.44)	test_majacc_d   0.51 (  0.55)	test_corr_d   0.18 (  0.17)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.36 (  0.45)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.36 (  0.45)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.22 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.27it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.58 (  0.58)	Loss_d 0.698 (0.698)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.58 (  0.58)	Loss_d 0.698 (0.698)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.16 (  0.16)
Overall Timing[ 26/  1]	epoch_time 0.0366 (0.0386)	validation_time 0.0003 (0.0007)	train_time 0.0363 (0.0379)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5403000119328499, 0.46000000834465027)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.29it/s] 19%|#9        | 5/26 [00:00<00:01, 20.31it/s] 35%|###4      | 9/26 [00:00<00:00, 25.38it/s] 50%|#####     | 13/26 [00:00<00:00, 28.56it/s] 65%|######5   | 17/26 [00:00<00:00, 30.43it/s] 81%|########  | 21/26 [00:00<00:00, 32.16it/s] 96%|#########6| 25/26 [00:00<00:00, 32.29it/s]100%|##########| 26/26 [00:00<00:00, 26.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.54)	train_minacc   0.36 (  0.45)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 12.3301 (12.3366)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.23it/s] 27%|##6       | 7/26 [00:00<00:00, 27.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.11it/s] 50%|#####     | 13/26 [00:00<00:00, 33.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.23it/s] 92%|#########2| 24/26 [00:00<00:00, 42.99it/s]100%|##########| 26/26 [00:00<00:00, 33.47it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.54)	test_minacc   0.44 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.20 (  0.16)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.51 (  0.54)	test_minacc   0.49 (  0.44)	test_majacc   0.51 (  0.56)	Loss_d 0.694 (0.692)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.49 (  0.44)	test_majacc_d   0.51 (  0.56)	test_corr_d   0.18 (  0.16)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.36 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.22 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.29it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.59 (  0.59)	Loss_d 0.698 (0.698)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.59 (  0.59)	Loss_d 0.698 (0.698)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.16 (  0.16)
Overall Timing[ 27/  1]	epoch_time 0.0385 (0.0386)	validation_time 0.0004 (0.0007)	train_time 0.0381 (0.0379)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5411000142097473, 0.45900002121925354)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.68it/s] 19%|#9        | 5/26 [00:00<00:00, 21.18it/s] 35%|###4      | 9/26 [00:00<00:00, 26.63it/s] 50%|#####     | 13/26 [00:00<00:00, 29.37it/s] 65%|######5   | 17/26 [00:00<00:00, 30.60it/s] 81%|########  | 21/26 [00:00<00:00, 31.64it/s] 96%|#########6| 25/26 [00:00<00:00, 32.33it/s]100%|##########| 26/26 [00:00<00:00, 27.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.54)	train_minacc   0.36 (  0.44)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 12.3205 (12.3250)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.18it/s] 27%|##6       | 7/26 [00:00<00:00, 35.10it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.10it/s] 50%|#####     | 13/26 [00:00<00:00, 44.11it/s] 69%|######9   | 18/26 [00:00<00:00, 44.76it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.76it/s] 92%|#########2| 24/26 [00:00<00:00, 49.21it/s]100%|##########| 26/26 [00:00<00:00, 41.14it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.54)	test_minacc   0.44 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.19 (  0.15)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.51 (  0.54)	test_minacc   0.49 (  0.44)	test_majacc   0.51 (  0.56)	Loss_d 0.694 (0.692)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.49 (  0.44)	test_majacc_d   0.51 (  0.56)	test_corr_d   0.17 (  0.15)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.36 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.21 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.79it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.59 (  0.59)	Loss_d 0.697 (0.697)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.59 (  0.59)	Loss_d 0.697 (0.697)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.15 (  0.15)
Overall Timing[ 28/  1]	epoch_time 0.0367 (0.0386)	validation_time 0.0003 (0.0006)	train_time 0.0364 (0.0378)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5411000142097473, 0.45900002121925354)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.86it/s] 19%|#9        | 5/26 [00:00<00:00, 21.32it/s] 35%|###4      | 9/26 [00:00<00:00, 27.14it/s] 50%|#####     | 13/26 [00:00<00:00, 30.44it/s] 65%|######5   | 17/26 [00:00<00:00, 31.90it/s] 81%|########  | 21/26 [00:00<00:00, 32.96it/s] 96%|#########6| 25/26 [00:00<00:00, 33.73it/s]100%|##########| 26/26 [00:00<00:00, 28.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.54)	train_minacc   0.36 (  0.44)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 12.3116 (12.3159)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.42it/s] 23%|##3       | 6/26 [00:00<00:00, 28.97it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.97it/s] 46%|####6     | 12/26 [00:00<00:00, 35.38it/s] 69%|######9   | 18/26 [00:00<00:00, 42.21it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.21it/s] 88%|########8 | 23/26 [00:00<00:00, 44.63it/s]100%|##########| 26/26 [00:00<00:00, 36.11it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.44 (  0.44)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.18 (  0.14)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.51 (  0.54)	test_minacc   0.49 (  0.44)	test_majacc   0.51 (  0.56)	Loss_d 0.694 (0.692)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.49 (  0.44)	test_majacc_d   0.51 (  0.56)	test_corr_d   0.16 (  0.14)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.36 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.20 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.33it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.59 (  0.59)	Loss_d 0.697 (0.697)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.59 (  0.59)	Loss_d 0.697 (0.697)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.14 (  0.14)
Overall Timing[ 29/  1]	epoch_time 0.0381 (0.0386)	validation_time 0.0004 (0.0006)	train_time 0.0376 (0.0378)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5408000153899193, 0.46000000834465027)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.73it/s] 15%|#5        | 4/26 [00:00<00:01, 16.18it/s] 31%|###       | 8/26 [00:00<00:00, 23.35it/s] 46%|####6     | 12/26 [00:00<00:00, 27.23it/s] 62%|######1   | 16/26 [00:00<00:00, 29.77it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.42it/s] 92%|#########2| 24/26 [00:00<00:00, 32.49it/s]100%|##########| 26/26 [00:00<00:00, 26.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.54)	train_minacc   0.36 (  0.44)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 12.3034 (12.3072)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.90it/s] 27%|##6       | 7/26 [00:00<00:00, 37.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.50it/s] 50%|#####     | 13/26 [00:00<00:00, 41.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.59it/s] 96%|#########6| 25/26 [00:00<00:00, 46.70it/s]100%|##########| 26/26 [00:00<00:00, 40.07it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.44 (  0.44)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.17 (  0.13)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.51 (  0.54)	test_minacc   0.49 (  0.44)	test_majacc   0.51 (  0.56)	Loss_d 0.694 (0.692)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.49 (  0.44)	test_majacc_d   0.51 (  0.56)	test_corr_d   0.15 (  0.14)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.36 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.19 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.60it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.59 (  0.59)	Loss_d 0.696 (0.696)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.59 (  0.59)	Loss_d 0.696 (0.696)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.13 (  0.13)
Overall Timing[ 30/  1]	epoch_time 0.0373 (0.0385)	validation_time 0.0004 (0.0006)	train_time 0.0369 (0.0378)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5410000153779984, 0.46000000834465027)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 19%|#9        | 5/26 [00:00<00:00, 23.17it/s] 35%|###4      | 9/26 [00:00<00:00, 27.72it/s] 50%|#####     | 13/26 [00:00<00:00, 30.04it/s] 65%|######5   | 17/26 [00:00<00:00, 31.60it/s] 81%|########  | 21/26 [00:00<00:00, 32.73it/s] 96%|#########6| 25/26 [00:00<00:00, 33.72it/s]100%|##########| 26/26 [00:00<00:00, 28.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.54)	train_minacc   0.36 (  0.44)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 12.2964 (12.2996)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.62it/s] 27%|##6       | 7/26 [00:00<00:00, 33.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.36it/s] 46%|####6     | 12/26 [00:00<00:00, 40.17it/s] 65%|######5   | 17/26 [00:00<00:00, 41.60it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.60it/s] 88%|########8 | 23/26 [00:00<00:00, 47.08it/s]100%|##########| 26/26 [00:00<00:00, 38.76it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.44 (  0.44)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.16 (  0.12)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.51 (  0.54)	test_minacc   0.49 (  0.44)	test_majacc   0.51 (  0.56)	Loss_d 0.694 (0.692)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.49 (  0.44)	test_majacc_d   0.51 (  0.56)	test_corr_d   0.14 (  0.13)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.36 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.18 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.82it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.59 (  0.59)	Loss_d 0.696 (0.696)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.59 (  0.59)	Loss_d 0.696 (0.696)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.12 (  0.12)
Overall Timing[ 31/  1]	epoch_time 0.0371 (0.0385)	validation_time 0.0003 (0.0006)	train_time 0.0368 (0.0378)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5412000153660774, 0.4580000340938568)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 19%|#9        | 5/26 [00:00<00:00, 22.14it/s] 35%|###4      | 9/26 [00:00<00:00, 27.09it/s] 50%|#####     | 13/26 [00:00<00:00, 29.21it/s] 65%|######5   | 17/26 [00:00<00:00, 30.74it/s] 81%|########  | 21/26 [00:00<00:00, 32.09it/s] 96%|#########6| 25/26 [00:00<00:00, 32.73it/s]100%|##########| 26/26 [00:00<00:00, 27.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.54)	train_minacc   0.36 (  0.44)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 12.2901 (12.2930)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.10it/s] 27%|##6       | 7/26 [00:00<00:00, 33.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.35it/s] 50%|#####     | 13/26 [00:00<00:00, 39.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.74it/s] 96%|#########6| 25/26 [00:00<00:00, 46.40it/s]100%|##########| 26/26 [00:00<00:00, 38.32it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.44 (  0.44)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.16 (  0.11)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.51 (  0.54)	test_minacc   0.49 (  0.44)	test_majacc   0.51 (  0.56)	Loss_d 0.694 (0.692)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.49 (  0.44)	test_majacc_d   0.51 (  0.56)	test_corr_d   0.14 (  0.12)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.36 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.17 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.12it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.696 (0.696)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.696 (0.696)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.12 (  0.12)
Overall Timing[ 32/  1]	epoch_time 0.0379 (0.0384)	validation_time 0.0004 (0.0006)	train_time 0.0375 (0.0378)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5414000130295753, 0.45900002121925354)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.21it/s] 19%|#9        | 5/26 [00:00<00:01, 18.22it/s] 35%|###4      | 9/26 [00:00<00:00, 23.96it/s] 50%|#####     | 13/26 [00:00<00:00, 27.02it/s] 65%|######5   | 17/26 [00:00<00:00, 29.15it/s] 81%|########  | 21/26 [00:00<00:00, 28.86it/s] 96%|#########6| 25/26 [00:00<00:00, 30.42it/s]100%|##########| 26/26 [00:01<00:00, 25.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.54)	train_minacc   0.36 (  0.44)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 12.2845 (12.2870)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.03it/s] 35%|###4      | 9/26 [00:00<00:00, 37.99it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.99it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.68it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.68it/s] 81%|########  | 21/26 [00:00<00:00, 47.17it/s]100%|##########| 26/26 [00:00<00:00, 41.53it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.54)	test_minacc   0.44 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.15 (  0.10)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.51 (  0.54)	test_minacc   0.49 (  0.44)	test_majacc   0.52 (  0.56)	Loss_d 0.694 (0.692)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.49 (  0.44)	test_majacc_d   0.52 (  0.56)	test_corr_d   0.13 (  0.11)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.36 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.17 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.10it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.11 (  0.11)
Overall Timing[ 33/  1]	epoch_time 0.0384 (0.0384)	validation_time 0.0003 (0.0006)	train_time 0.0380 (0.0378)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5423000094890594, 0.45900002121925354)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.71it/s] 19%|#9        | 5/26 [00:00<00:01, 19.04it/s] 35%|###4      | 9/26 [00:00<00:00, 25.51it/s] 50%|#####     | 13/26 [00:00<00:00, 29.00it/s] 65%|######5   | 17/26 [00:00<00:00, 31.43it/s] 81%|########  | 21/26 [00:00<00:00, 32.89it/s] 96%|#########6| 25/26 [00:00<00:00, 33.82it/s]100%|##########| 26/26 [00:00<00:00, 27.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.54)	train_minacc   0.36 (  0.44)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 12.2796 (12.2817)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.73it/s] 27%|##6       | 7/26 [00:00<00:00, 33.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.16it/s] 50%|#####     | 13/26 [00:00<00:00, 41.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.31it/s] 96%|#########6| 25/26 [00:00<00:00, 48.05it/s]100%|##########| 26/26 [00:00<00:00, 39.66it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.54)	test_minacc   0.44 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.14 (  0.10)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.51 (  0.54)	test_minacc   0.49 (  0.44)	test_majacc   0.52 (  0.56)	Loss_d 0.694 (0.692)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.49 (  0.44)	test_majacc_d   0.52 (  0.56)	test_corr_d   0.12 (  0.10)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.36 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.16 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.38it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.10 (  0.10)
Overall Timing[ 34/  1]	epoch_time 0.0385 (0.0384)	validation_time 0.0004 (0.0006)	train_time 0.0381 (0.0378)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5429000098705292, 0.45900002121925354)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.68it/s] 19%|#9        | 5/26 [00:00<00:01, 19.19it/s] 35%|###4      | 9/26 [00:00<00:00, 25.63it/s] 50%|#####     | 13/26 [00:00<00:00, 29.32it/s] 65%|######5   | 17/26 [00:00<00:00, 31.75it/s] 81%|########  | 21/26 [00:00<00:00, 32.90it/s] 96%|#########6| 25/26 [00:00<00:00, 33.53it/s]100%|##########| 26/26 [00:00<00:00, 27.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.54)	train_minacc   0.36 (  0.44)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 12.2752 (12.2770)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 23%|##3       | 6/26 [00:00<00:00, 30.41it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.41it/s] 46%|####6     | 12/26 [00:00<00:00, 39.19it/s] 69%|######9   | 18/26 [00:00<00:00, 45.69it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.69it/s] 92%|#########2| 24/26 [00:00<00:00, 46.79it/s]100%|##########| 26/26 [00:00<00:00, 38.86it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.54)	test_minacc   0.44 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.14 (  0.09)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.51 (  0.54)	test_minacc   0.49 (  0.44)	test_majacc   0.52 (  0.56)	Loss_d 0.694 (0.692)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.49 (  0.44)	test_majacc_d   0.52 (  0.56)	test_corr_d   0.12 (  0.10)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.36 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.15 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.70it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.09 (  0.09)
Overall Timing[ 35/  1]	epoch_time 0.0376 (0.0384)	validation_time 0.0003 (0.0006)	train_time 0.0373 (0.0378)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5434000063538551, 0.4570000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.74it/s] 23%|##3       | 6/26 [00:00<00:00, 27.07it/s] 38%|###8      | 10/26 [00:00<00:00, 31.27it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.36it/s] 69%|######9   | 18/26 [00:00<00:00, 34.52it/s] 85%|########4 | 22/26 [00:00<00:00, 34.68it/s]100%|##########| 26/26 [00:00<00:00, 34.50it/s]100%|##########| 26/26 [00:00<00:00, 30.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.54)	train_minacc   0.36 (  0.44)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 12.2713 (12.2728)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.62it/s] 23%|##3       | 6/26 [00:00<00:00, 25.08it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.08it/s] 46%|####6     | 12/26 [00:00<00:00, 37.04it/s] 65%|######5   | 17/26 [00:00<00:00, 39.73it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.73it/s] 88%|########8 | 23/26 [00:00<00:00, 45.95it/s]100%|##########| 26/26 [00:00<00:00, 35.61it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.44 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.13 (  0.08)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.51 (  0.54)	test_minacc   0.48 (  0.44)	test_majacc   0.52 (  0.56)	Loss_d 0.694 (0.693)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.48 (  0.44)	test_majacc_d   0.52 (  0.56)	test_corr_d   0.11 (  0.09)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.36 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.14 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.89it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.08 (  0.08)
Overall Timing[ 36/  1]	epoch_time 0.0377 (0.0384)	validation_time 0.0004 (0.0006)	train_time 0.0373 (0.0377)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5438000109791755, 0.45500001311302185)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 19%|#9        | 5/26 [00:00<00:01, 20.68it/s] 35%|###4      | 9/26 [00:00<00:00, 25.34it/s] 50%|#####     | 13/26 [00:00<00:00, 27.95it/s] 65%|######5   | 17/26 [00:00<00:00, 29.76it/s] 81%|########  | 21/26 [00:00<00:00, 30.48it/s] 96%|#########6| 25/26 [00:00<00:00, 31.01it/s]100%|##########| 26/26 [00:00<00:00, 26.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.55 (  0.54)	train_minacc   0.36 (  0.44)	train_majacc   0.58 (  0.56)	train_corr   0.00 (  0.00)	l1 12.2678 (12.2691)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.69it/s] 27%|##6       | 7/26 [00:00<00:00, 36.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.39it/s] 50%|#####     | 13/26 [00:00<00:00, 42.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.92it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.92it/s] 96%|#########6| 25/26 [00:00<00:00, 47.59it/s]100%|##########| 26/26 [00:00<00:00, 40.00it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.44 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.12 (  0.08)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.51 (  0.54)	test_minacc   0.48 (  0.44)	test_majacc   0.52 (  0.56)	Loss_d 0.694 (0.693)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.48 (  0.44)	test_majacc_d   0.52 (  0.56)	test_corr_d   0.10 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.55 (  0.54)	test_minacc   0.36 (  0.44)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.14 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.30it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.695 (0.695)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.695 (0.695)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.08 (  0.08)
Overall Timing[ 37/  1]	epoch_time 0.0372 (0.0384)	validation_time 0.0003 (0.0006)	train_time 0.0368 (0.0377)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5446000123023986, 0.4540000259876251)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.12it/s] 19%|#9        | 5/26 [00:00<00:00, 23.45it/s] 35%|###4      | 9/26 [00:00<00:00, 28.71it/s] 50%|#####     | 13/26 [00:00<00:00, 31.10it/s] 65%|######5   | 17/26 [00:00<00:00, 32.47it/s] 81%|########  | 21/26 [00:00<00:00, 33.45it/s] 96%|#########6| 25/26 [00:00<00:00, 33.55it/s]100%|##########| 26/26 [00:00<00:00, 28.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.55 (  0.54)	train_minacc   0.36 (  0.44)	train_majacc   0.58 (  0.56)	train_corr   0.00 (  0.00)	l1 12.2648 (12.2658)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.56it/s] 23%|##3       | 6/26 [00:00<00:00, 25.22it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.22it/s] 42%|####2     | 11/26 [00:00<00:00, 34.79it/s] 65%|######5   | 17/26 [00:00<00:00, 40.20it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.20it/s] 88%|########8 | 23/26 [00:00<00:00, 46.20it/s]100%|##########| 26/26 [00:00<00:00, 35.81it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.42 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.42 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.12 (  0.07)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.51 (  0.54)	test_minacc   0.48 (  0.44)	test_majacc   0.52 (  0.56)	Loss_d 0.694 (0.693)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.48 (  0.44)	test_majacc_d   0.52 (  0.56)	test_corr_d   0.10 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.36 (  0.44)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.13 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.15it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.07 (  0.07)
Overall Timing[ 38/  1]	epoch_time 0.0372 (0.0383)	validation_time 0.0004 (0.0006)	train_time 0.0368 (0.0377)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.545200012266636, 0.453000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.11it/s] 19%|#9        | 5/26 [00:00<00:00, 23.01it/s] 35%|###4      | 9/26 [00:00<00:00, 28.04it/s] 50%|#####     | 13/26 [00:00<00:00, 30.23it/s] 65%|######5   | 17/26 [00:00<00:00, 31.41it/s] 81%|########  | 21/26 [00:00<00:00, 31.92it/s] 96%|#########6| 25/26 [00:00<00:00, 32.74it/s]100%|##########| 26/26 [00:00<00:00, 27.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.55 (  0.55)	train_minacc   0.36 (  0.44)	train_majacc   0.58 (  0.56)	train_corr   0.00 (  0.00)	l1 12.2621 (12.2629)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 27%|##6       | 7/26 [00:00<00:00, 35.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.75it/s] 50%|#####     | 13/26 [00:00<00:00, 41.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.31it/s] 96%|#########6| 25/26 [00:00<00:00, 46.93it/s]100%|##########| 26/26 [00:00<00:00, 39.47it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.42 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.42 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.11 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.48 (  0.44)	test_majacc   0.53 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.48 (  0.44)	test_majacc_d   0.53 (  0.56)	test_corr_d   0.09 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.36 (  0.44)	test_majacc   0.58 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.12 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.98it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.06 (  0.06)
Overall Timing[ 39/  1]	epoch_time 0.0389 (0.0384)	validation_time 0.0016 (0.0006)	train_time 0.0373 (0.0377)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.546400007545948, 0.4520000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.22it/s] 19%|#9        | 5/26 [00:00<00:01, 19.89it/s] 35%|###4      | 9/26 [00:00<00:00, 25.62it/s] 50%|#####     | 13/26 [00:00<00:00, 28.64it/s] 65%|######5   | 17/26 [00:00<00:00, 30.77it/s] 81%|########  | 21/26 [00:00<00:00, 32.30it/s] 96%|#########6| 25/26 [00:00<00:00, 33.67it/s]100%|##########| 26/26 [00:00<00:00, 27.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.55 (  0.55)	train_minacc   0.33 (  0.44)	train_majacc   0.58 (  0.57)	train_corr   0.00 (  0.00)	l1 12.2600 (12.2605)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.49it/s] 27%|##6       | 7/26 [00:00<00:00, 33.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.37it/s] 50%|#####     | 13/26 [00:00<00:00, 38.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.12it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.12it/s] 96%|#########6| 25/26 [00:00<00:00, 45.51it/s]100%|##########| 26/26 [00:00<00:00, 37.83it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.42 (  0.43)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.42 (  0.43)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.11 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.48 (  0.43)	test_majacc   0.53 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.48 (  0.43)	test_majacc_d   0.53 (  0.56)	test_corr_d   0.09 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.33 (  0.44)	test_majacc   0.58 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.33 (  0.44)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.12 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.66it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.06 (  0.06)
Overall Timing[ 40/  1]	epoch_time 0.0374 (0.0383)	validation_time 0.0003 (0.0006)	train_time 0.0371 (0.0377)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5472000121474266, 0.4490000307559967)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.93it/s] 19%|#9        | 5/26 [00:00<00:00, 25.21it/s] 35%|###4      | 9/26 [00:00<00:00, 29.13it/s] 50%|#####     | 13/26 [00:00<00:00, 31.66it/s] 65%|######5   | 17/26 [00:00<00:00, 33.44it/s] 81%|########  | 21/26 [00:00<00:00, 34.58it/s] 96%|#########6| 25/26 [00:00<00:00, 34.65it/s]100%|##########| 26/26 [00:00<00:00, 30.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.55 (  0.55)	train_minacc   0.33 (  0.44)	train_majacc   0.58 (  0.57)	train_corr   0.00 (  0.00)	l1 12.2584 (12.2587)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.24it/s] 35%|###4      | 9/26 [00:00<00:00, 38.20it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.20it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.42it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.42it/s] 81%|########  | 21/26 [00:00<00:00, 47.00it/s]100%|##########| 26/26 [00:00<00:00, 42.01it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.38 (  0.38)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.42 (  0.43)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.42 (  0.43)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.10 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.48 (  0.43)	test_majacc   0.53 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.48 (  0.43)	test_majacc_d   0.53 (  0.56)	test_corr_d   0.08 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.33 (  0.44)	test_majacc   0.58 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.33 (  0.44)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.11 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.45it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.05 (  0.05)
Overall Timing[ 41/  1]	epoch_time 0.0363 (0.0383)	validation_time 0.0004 (0.0006)	train_time 0.0359 (0.0376)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5475000132918357, 0.4480000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.88it/s] 19%|#9        | 5/26 [00:00<00:00, 21.52it/s] 35%|###4      | 9/26 [00:00<00:00, 27.30it/s] 50%|#####     | 13/26 [00:00<00:00, 29.15it/s] 65%|######5   | 17/26 [00:00<00:00, 30.59it/s] 81%|########  | 21/26 [00:00<00:00, 31.48it/s] 96%|#########6| 25/26 [00:00<00:00, 32.87it/s]100%|##########| 26/26 [00:00<00:00, 27.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.55 (  0.55)	train_minacc   0.33 (  0.44)	train_majacc   0.59 (  0.57)	train_corr   0.00 (  0.00)	l1 12.2564 (12.2568)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.34it/s] 27%|##6       | 7/26 [00:00<00:00, 30.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.65it/s] 50%|#####     | 13/26 [00:00<00:00, 38.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.33it/s] 96%|#########6| 25/26 [00:00<00:00, 45.94it/s]100%|##########| 26/26 [00:00<00:00, 37.32it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.38 (  0.38)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.42 (  0.43)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.42 (  0.43)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.09 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.55)	test_minacc   0.46 (  0.43)	test_majacc   0.53 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.46 (  0.43)	test_majacc_d   0.53 (  0.57)	test_corr_d   0.08 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.33 (  0.43)	test_majacc   0.59 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.33 (  0.43)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.11 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.24it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.05 (  0.05)
Overall Timing[ 42/  1]	epoch_time 0.0375 (0.0383)	validation_time 0.0003 (0.0006)	train_time 0.0372 (0.0376)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.549200011074543, 0.4480000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.25it/s] 19%|#9        | 5/26 [00:00<00:01, 20.30it/s] 35%|###4      | 9/26 [00:00<00:00, 25.74it/s] 50%|#####     | 13/26 [00:00<00:00, 28.59it/s] 65%|######5   | 17/26 [00:00<00:00, 30.99it/s] 81%|########  | 21/26 [00:00<00:00, 31.08it/s] 96%|#########6| 25/26 [00:00<00:00, 32.49it/s]100%|##########| 26/26 [00:00<00:00, 27.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.55 (  0.55)	train_minacc   0.33 (  0.43)	train_majacc   0.59 (  0.57)	train_corr   0.00 (  0.00)	l1 12.2549 (12.2549)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.45it/s] 27%|##6       | 7/26 [00:00<00:00, 32.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.02it/s] 50%|#####     | 13/26 [00:00<00:00, 38.88it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.56it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.56it/s] 96%|#########6| 25/26 [00:00<00:00, 46.62it/s]100%|##########| 26/26 [00:00<00:00, 38.15it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.38 (  0.38)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.42 (  0.43)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.42 (  0.43)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.09 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.55)	test_minacc   0.46 (  0.43)	test_majacc   0.53 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.46 (  0.43)	test_majacc_d   0.53 (  0.57)	test_corr_d   0.07 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.33 (  0.43)	test_majacc   0.59 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.33 (  0.43)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.10 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.20it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.04 (  0.04)
Overall Timing[ 43/  1]	epoch_time 0.0373 (0.0382)	validation_time 0.0003 (0.0006)	train_time 0.0370 (0.0376)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5508000133037567, 0.445000022649765)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.75it/s] 19%|#9        | 5/26 [00:00<00:00, 21.20it/s] 35%|###4      | 9/26 [00:00<00:00, 27.39it/s] 50%|#####     | 13/26 [00:00<00:00, 30.33it/s] 65%|######5   | 17/26 [00:00<00:00, 31.77it/s] 81%|########  | 21/26 [00:00<00:00, 32.81it/s] 96%|#########6| 25/26 [00:00<00:00, 33.06it/s]100%|##########| 26/26 [00:00<00:00, 27.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.55 (  0.55)	train_minacc   0.33 (  0.43)	train_majacc   0.59 (  0.57)	train_corr   0.00 (  0.00)	l1 12.2532 (12.2534)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.50it/s] 27%|##6       | 7/26 [00:00<00:00, 31.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.98it/s] 50%|#####     | 13/26 [00:00<00:00, 39.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.87it/s] 96%|#########6| 25/26 [00:00<00:00, 46.36it/s]100%|##########| 26/26 [00:00<00:00, 37.96it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.38 (  0.38)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.42 (  0.43)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.42 (  0.43)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.55)	test_minacc   0.46 (  0.43)	test_majacc   0.54 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.46 (  0.43)	test_majacc_d   0.54 (  0.57)	test_corr_d   0.07 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.33 (  0.43)	test_majacc   0.59 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.33 (  0.43)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.09 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.55it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.03 (  0.03)
Overall Timing[ 44/  1]	epoch_time 0.0376 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0372 (0.0376)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5511000144481659, 0.4440000355243683)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.28it/s] 19%|#9        | 5/26 [00:00<00:01, 18.31it/s] 35%|###4      | 9/26 [00:00<00:00, 24.35it/s] 50%|#####     | 13/26 [00:00<00:00, 28.12it/s] 65%|######5   | 17/26 [00:00<00:00, 29.98it/s] 81%|########  | 21/26 [00:00<00:00, 31.67it/s] 96%|#########6| 25/26 [00:00<00:00, 32.99it/s]100%|##########| 26/26 [00:00<00:00, 26.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.56 (  0.55)	train_minacc   0.33 (  0.43)	train_majacc   0.59 (  0.57)	train_corr   0.00 (  0.00)	l1 12.2520 (12.2518)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 27%|##6       | 7/26 [00:00<00:00, 33.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.63it/s] 50%|#####     | 13/26 [00:00<00:00, 40.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.23it/s] 96%|#########6| 25/26 [00:00<00:00, 46.37it/s]100%|##########| 26/26 [00:00<00:00, 38.62it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.36 (  0.36)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.42 (  0.43)	test_majacc   0.58 (  0.57)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.42 (  0.43)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.55)	test_minacc   0.46 (  0.42)	test_majacc   0.54 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.46 (  0.42)	test_majacc_d   0.54 (  0.57)	test_corr_d   0.07 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.33 (  0.43)	test_majacc   0.60 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.33 (  0.43)	test_majacc_d   0.60 (  0.57)	test_corr_d   0.09 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.79it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.03 (  0.03)
Overall Timing[ 45/  1]	epoch_time 0.0365 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0376)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5528000074625016, 0.445000022649765)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.90it/s] 19%|#9        | 5/26 [00:00<00:01, 17.84it/s] 35%|###4      | 9/26 [00:00<00:00, 23.53it/s] 50%|#####     | 13/26 [00:00<00:00, 27.01it/s] 65%|######5   | 17/26 [00:00<00:00, 28.88it/s] 81%|########  | 21/26 [00:00<00:00, 30.29it/s] 96%|#########6| 25/26 [00:00<00:00, 31.47it/s]100%|##########| 26/26 [00:01<00:00, 25.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.56 (  0.55)	train_minacc   0.33 (  0.43)	train_majacc   0.60 (  0.58)	train_corr   0.00 (  0.00)	l1 12.2508 (12.2506)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.70it/s] 27%|##6       | 7/26 [00:00<00:00, 36.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.56it/s] 50%|#####     | 13/26 [00:00<00:00, 41.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.86it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.86it/s] 96%|#########6| 25/26 [00:00<00:00, 47.70it/s]100%|##########| 26/26 [00:00<00:00, 39.60it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.36 (  0.36)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.41 (  0.43)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.41 (  0.43)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.07 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.55)	test_minacc   0.46 (  0.42)	test_majacc   0.54 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.46 (  0.42)	test_majacc_d   0.54 (  0.57)	test_corr_d   0.06 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.33 (  0.43)	test_majacc   0.60 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.33 (  0.43)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  9.40it/s]100%|##########| 1/1 [00:00<00:00,  9.37it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.02 (  0.02)
Overall Timing[ 46/  1]	epoch_time 0.0378 (0.0382)	validation_time 0.0018 (0.0006)	train_time 0.0360 (0.0375)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5541000131964684, 0.445000022649765)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.70it/s] 19%|#9        | 5/26 [00:00<00:01, 20.85it/s] 35%|###4      | 9/26 [00:00<00:00, 26.11it/s] 50%|#####     | 13/26 [00:00<00:00, 29.31it/s] 65%|######5   | 17/26 [00:00<00:00, 31.60it/s] 81%|########  | 21/26 [00:00<00:00, 32.56it/s] 96%|#########6| 25/26 [00:00<00:00, 32.80it/s]100%|##########| 26/26 [00:00<00:00, 27.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.56 (  0.56)	train_minacc   0.33 (  0.42)	train_majacc   0.60 (  0.58)	train_corr   0.00 (  0.00)	l1 12.2497 (12.2494)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.26it/s] 27%|##6       | 7/26 [00:00<00:00, 30.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.22it/s] 50%|#####     | 13/26 [00:00<00:00, 37.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.79it/s] 96%|#########6| 25/26 [00:00<00:00, 45.21it/s]100%|##########| 26/26 [00:00<00:00, 36.95it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.36 (  0.36)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.41 (  0.43)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.41 (  0.43)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.07 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.46 (  0.42)	test_majacc   0.54 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.46 (  0.42)	test_majacc_d   0.54 (  0.58)	test_corr_d   0.06 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.33 (  0.42)	test_majacc   0.60 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.33 (  0.42)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.29it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.02 (  0.02)
Overall Timing[ 47/  1]	epoch_time 0.0382 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0378 (0.0375)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5559000107645988, 0.4440000355243683)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.65it/s] 19%|#9        | 5/26 [00:00<00:00, 22.51it/s] 35%|###4      | 9/26 [00:00<00:00, 27.93it/s] 50%|#####     | 13/26 [00:00<00:00, 30.80it/s] 65%|######5   | 17/26 [00:00<00:00, 31.46it/s] 81%|########  | 21/26 [00:00<00:00, 32.77it/s] 96%|#########6| 25/26 [00:00<00:00, 33.31it/s]100%|##########| 26/26 [00:00<00:00, 28.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.22)	train_acc   0.56 (  0.56)	train_minacc   0.33 (  0.42)	train_majacc   0.60 (  0.58)	train_corr   0.00 (  0.00)	l1 12.2487 (12.2484)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.57it/s] 31%|###       | 8/26 [00:00<00:00, 36.13it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.13it/s] 54%|#####3    | 14/26 [00:00<00:00, 40.84it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.12it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.12it/s]100%|##########| 26/26 [00:00<00:00, 40.40it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.36 (  0.36)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.41 (  0.42)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.41 (  0.42)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.46 (  0.42)	test_majacc   0.55 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.46 (  0.42)	test_majacc_d   0.55 (  0.58)	test_corr_d   0.06 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.33 (  0.42)	test_majacc   0.60 (  0.58)	Loss_d 0.694 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.33 (  0.42)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.81it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.02 (  0.02)
Overall Timing[ 48/  1]	epoch_time 0.0371 (0.0382)	validation_time 0.0005 (0.0006)	train_time 0.0365 (0.0375)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5568000165224075, 0.44200003147125244)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.48it/s] 19%|#9        | 5/26 [00:00<00:01, 20.04it/s] 35%|###4      | 9/26 [00:00<00:00, 26.02it/s] 50%|#####     | 13/26 [00:00<00:00, 29.82it/s] 65%|######5   | 17/26 [00:00<00:00, 31.90it/s] 81%|########  | 21/26 [00:00<00:00, 32.87it/s] 96%|#########6| 25/26 [00:00<00:00, 33.47it/s]100%|##########| 26/26 [00:00<00:00, 28.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.56 (  0.56)	train_minacc   0.33 (  0.42)	train_majacc   0.60 (  0.58)	train_corr   0.00 (  0.00)	l1 12.2478 (12.2474)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.98it/s] 27%|##6       | 7/26 [00:00<00:00, 38.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.23it/s] 46%|####6     | 12/26 [00:00<00:00, 40.02it/s] 69%|######9   | 18/26 [00:00<00:00, 46.97it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.97it/s] 92%|#########2| 24/26 [00:00<00:00, 45.90it/s]100%|##########| 26/26 [00:00<00:00, 39.96it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.54 (  0.54)	test_minacc   0.36 (  0.36)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.56)	test_minacc   0.41 (  0.42)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.41 (  0.42)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.56)	test_minacc   0.46 (  0.42)	test_majacc   0.55 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.46 (  0.42)	test_majacc_d   0.55 (  0.58)	test_corr_d   0.05 (  0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.33 (  0.42)	test_majacc   0.60 (  0.58)	Loss_d 0.694 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.33 (  0.42)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.07 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.58it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.01 (  0.01)
Overall Timing[ 49/  1]	epoch_time 0.0370 (0.0381)	validation_time 0.0003 (0.0006)	train_time 0.0367 (0.0375)
record: (train_acc, test_acc) (0.8598000277280807, 0.39400002360343933)
last accs (train_acc, test_acc) (0.5590000140666962, 0.4390000104904175)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.096 MB of 0.096 MB uploadedwandb: \ 0.096 MB of 0.096 MB uploadedwandb: | 0.096 MB of 0.096 MB uploadedwandb: / 0.118 MB of 0.130 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/diagnostics/epoch_time_val █▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/diagnostics/train_time_val █▁▂▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/Loss_avg ▆▇█▇▇█▇▇▇▅▇▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/Loss_d_avg ▆▇█▇▇█▇▇▇▅▇▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/Loss_d_val ▆▇█▇▇█▇▇▇▅▇▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/Loss_val ▆▇█▇▇█▇▇▇▅▇▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_acc_avg ▁▁▁▁▁▁▁▂▃▅▂▄▇▇▇██▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_acc_d_avg ▁▁▁▁▁▁▁▂▃▅▂▄▇▇▇██▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_acc_d_val ▁▁▁▁▁▁▁▂▃▅▂▄▇▇▇██▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_acc_val ▁▁▁▁▁▁▁▂▃▅▂▄▇▇▇██▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_corr_d_avg ████████▇▆▇▇▄▃▃▃▃▃▃▁▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_corr_d_val ████████▇▆▇▇▄▃▃▃▃▃▃▁▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_majacc_avg █████████▇██▂▁▁▁▁▂▂▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_majacc_d_avg █████████▇██▂▁▁▁▁▂▂▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_majacc_d_val █████████▇██▂▁▁▁▁▂▂▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_majacc_val █████████▇██▂▁▁▁▁▂▂▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_minacc_avg ▁▁▁▁▁▁▁▁▃▅▂▄▇▇███▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_minacc_d_avg ▁▁▁▁▁▁▁▁▃▅▂▄▇▇███▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_minacc_d_val ▁▁▁▁▁▁▁▁▃▅▂▄▇▇███▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_minacc_val ▁▁▁▁▁▁▁▁▃▅▂▄▇▇███▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/Loss_val █▄▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/l1_avg ▂▂▁▁▁▁▂▃▄▅▆▇███████▅▅▅▅▅▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/l1_val ▂▂▁▁▁▂▂▃▅▆▇▇███████▅▅▅▅▅▅▅▅▅▄▄▄▄▄▄▄▄▄▄▄▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_acc_avg ▇███████████▅▂▁▁▁▁▁▂▃▂▂▂▂▂▂▂▃▃▃▃▃▃▃▃▃▃▃▃
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_acc_val ████████████▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_majacc_avg ▇███████████▅▂▁▁▁▁▂▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_majacc_val █████████▇██▂▁▁▂▂▂▂▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_minacc_avg ▂▁▁▁▂▂▂▃▃▃▄▄▅▇████▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_minacc_val ▁▁▁▁▁▁▁▁▁▃▁▂▇██▇██▇▆▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_nll_avg ▆▃▂▂▂▂▁▁▁▁▁▁▄███████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_nll_val ▃▂▂▂▂▂▂▂▁▁▁▁████████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_penalty_avg █▃▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_penalty_val ▄▆▇█▆▄▄▅▄▃▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/diagnostics/epoch_time_val 0.03696
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/diagnostics/train_time_val 0.03666
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/diagnostics/validation_time_val 0.00029
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/Loss_avg 0.69314
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/Loss_d_avg 0.69314
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/Loss_d_val 0.69314
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/Loss_val 0.69314
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_acc_avg 0.439
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_acc_d_avg 0.439
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_acc_d_val 0.439
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_acc_val 0.439
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_corr_d_avg 0.0134
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_corr_d_val 0.0134
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_majacc_avg 0.61
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_majacc_d_avg 0.61
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_majacc_d_val 0.61
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_majacc_val 0.61
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_minacc_avg 0.42
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_minacc_d_avg 0.42
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_minacc_d_val 0.42
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/test/test_minacc_val 0.42
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/l1_avg 12.24737
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/l1_val 12.24781
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_acc_avg 0.5582
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_acc_val 0.56
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_majacc_avg 0.58211
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_majacc_val 0.59813
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_minacc_avg 0.4202
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_minacc_val 0.33333
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_nll_avg 0.6929
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_nll_val 0.69353
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/weight_norm_avg 0.21459
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/43/logs/train/weight_norm_val 0.21437
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/4nnjoz2i
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_153831-4nnjoz2i/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_154109-phwcld8f
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/phwcld8f
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=13.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1198
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5958, 3, 32, 32) (6042, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:40,  1.61s/it] 19%|#9        | 5/26 [00:01<00:05,  3.78it/s] 35%|###4      | 9/26 [00:01<00:02,  7.27it/s] 50%|#####     | 13/26 [00:01<00:01, 11.11it/s] 65%|######5   | 17/26 [00:02<00:00, 15.12it/s] 81%|########  | 21/26 [00:02<00:00, 18.94it/s] 96%|#########6| 25/26 [00:02<00:00, 22.29it/s]100%|##########| 26/26 [00:02<00:00,  9.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.380 (12.192)	train_nll   0.44 (  0.57)	train_penalty   0.04 (  0.28)	weight_norm   8.94 ( 11.63)	train_acc   0.83 (  0.79)	train_minacc   0.02 (  0.10)	train_majacc   0.99 (  0.92)	train_corr   0.00 (  0.00)	l1 7.4673 (8.0113)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.82it/s] 27%|##6       | 7/26 [00:00<00:00, 35.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.30it/s] 46%|####6     | 12/26 [00:00<00:00, 41.57it/s] 65%|######5   | 17/26 [00:00<00:00, 42.52it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.52it/s] 88%|########8 | 23/26 [00:00<00:00, 47.32it/s]100%|##########| 26/26 [00:00<00:00, 40.46it/s]
Test: [   0/  26]	Loss 0.416 (0.416)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.416 (0.416)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.469 (0.429)	test_acc   0.81 (  0.84)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.469 (0.429)	test_acc_d   0.81 (  0.84)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.410 (0.417)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.410 (0.417)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.436 (0.416)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.436 (0.416)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]
Test: [  0/  1]	Loss 1.518 (1.518)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.518 (1.518)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.518 (1.518)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.518 (1.518)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/44/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0771 (0.0771)	validation_time 0.0066 (0.0066)	train_time 0.0667 (0.0667)
record: (train_acc, test_acc) (0.8458000209927559, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8458000209927559, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.83it/s] 19%|#9        | 5/26 [00:00<00:00, 23.25it/s] 35%|###4      | 9/26 [00:00<00:00, 27.12it/s] 50%|#####     | 13/26 [00:00<00:00, 28.84it/s] 65%|######5   | 17/26 [00:00<00:00, 30.39it/s] 81%|########  | 21/26 [00:00<00:00, 31.16it/s] 96%|#########6| 25/26 [00:00<00:00, 32.18it/s]100%|##########| 26/26 [00:00<00:00, 27.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.879 (6.705)	train_nll   0.45 (  0.41)	train_penalty   0.06 (  0.06)	weight_norm   4.43 (  6.30)	train_acc   0.83 (  0.84)	train_minacc   0.00 (  0.03)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 7.0907 (7.3913)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.34it/s] 31%|###       | 8/26 [00:00<00:00, 40.52it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.52it/s] 50%|#####     | 13/26 [00:00<00:00, 42.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.38it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.38it/s] 96%|#########6| 25/26 [00:00<00:00, 48.77it/s]100%|##########| 26/26 [00:00<00:00, 42.47it/s]
Test: [   0/  26]	Loss 0.395 (0.395)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.395 (0.395)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.449 (0.414)	test_acc   0.81 (  0.84)	test_minacc   0.03 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.449 (0.414)	test_acc_d   0.81 (  0.84)	test_minacc_d   0.03 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.96 (  0.97)
Test: [  20/  26]	Loss 0.399 (0.403)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.399 (0.403)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.423 (0.402)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.423 (0.402)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.18it/s]
Test: [  0/  1]	Loss 1.532 (1.532)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.532 (1.532)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.532 (1.532)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.532 (1.532)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Overall Timing[  1/  1]	epoch_time 0.0371 (0.0571)	validation_time 0.0004 (0.0035)	train_time 0.0366 (0.0517)
record: (train_acc, test_acc) (0.8458000209927559, 0.10500000417232513)
last accs (train_acc, test_acc) (0.848000025510788, 0.10300000756978989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.02it/s] 27%|##6       | 7/26 [00:00<00:00, 28.54it/s] 42%|####2     | 11/26 [00:00<00:00, 30.84it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.00it/s] 88%|########8 | 23/26 [00:00<00:00, 32.59it/s]100%|##########| 26/26 [00:00<00:00, 29.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.976 (3.765)	train_nll   0.38 (  0.40)	train_penalty   0.04 (  0.05)	weight_norm   2.59 (  3.37)	train_acc   0.84 (  0.84)	train_minacc   0.02 (  0.06)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.0462 (6.6515)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 27%|##6       | 7/26 [00:00<00:00, 31.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.62it/s] 50%|#####     | 13/26 [00:00<00:00, 38.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.19it/s] 96%|#########6| 25/26 [00:00<00:00, 46.43it/s]100%|##########| 26/26 [00:00<00:00, 38.44it/s]
Test: [   0/  26]	Loss 0.368 (0.368)	test_acc   0.87 (  0.87)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.368 (0.368)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.469 (0.402)	test_acc   0.81 (  0.84)	test_minacc   0.04 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.469 (0.402)	test_acc_d   0.81 (  0.84)	test_minacc_d   0.04 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.386 (0.386)	test_acc   0.86 (  0.85)	test_minacc   0.05 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.386 (0.386)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.05 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.348 (0.379)	test_acc   0.85 (  0.85)	test_minacc   0.10 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.348 (0.379)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.10 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.66it/s]
Test: [  0/  1]	Loss 1.740 (1.740)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.740 (1.740)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.740 (1.740)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.740 (1.740)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/44/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0371 (0.0504)	validation_time 0.0003 (0.0025)	train_time 0.0367 (0.0467)
record: (train_acc, test_acc) (0.8506000229120254, 0.16300000250339508)
last accs (train_acc, test_acc) (0.8506000229120254, 0.16300000250339508)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.08it/s] 19%|#9        | 5/26 [00:00<00:00, 23.22it/s] 35%|###4      | 9/26 [00:00<00:00, 28.33it/s] 50%|#####     | 13/26 [00:00<00:00, 30.64it/s] 65%|######5   | 17/26 [00:00<00:00, 31.70it/s] 81%|########  | 21/26 [00:00<00:00, 32.68it/s] 96%|#########6| 25/26 [00:00<00:00, 33.17it/s]100%|##########| 26/26 [00:00<00:00, 28.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.992 (2.442)	train_nll   0.35 (  0.38)	train_penalty   0.02 (  0.04)	weight_norm   1.64 (  2.07)	train_acc   0.84 (  0.85)	train_minacc   0.10 (  0.09)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 5.2637 (5.5175)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.55it/s] 31%|###       | 8/26 [00:00<00:00, 42.08it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.08it/s] 50%|#####     | 13/26 [00:00<00:00, 44.00it/s] 69%|######9   | 18/26 [00:00<00:00, 45.30it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.30it/s] 92%|#########2| 24/26 [00:00<00:00, 49.61it/s]100%|##########| 26/26 [00:00<00:00, 42.16it/s]
Test: [   0/  26]	Loss 0.331 (0.331)	test_acc   0.85 (  0.85)	test_minacc   0.26 (  0.26)	test_majacc   0.95 (  0.95)	Loss_d 0.331 (0.331)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.399 (0.364)	test_acc   0.82 (  0.84)	test_minacc   0.22 (  0.22)	test_majacc   0.96 (  0.96)	Loss_d 0.399 (0.364)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  20/  26]	Loss 0.356 (0.352)	test_acc   0.85 (  0.85)	test_minacc   0.21 (  0.23)	test_majacc   0.96 (  0.96)	Loss_d 0.356 (0.352)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.21 (  0.23)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.88)
Test: [  26/  26]	Loss 0.293 (0.345)	test_acc   0.86 (  0.85)	test_minacc   0.29 (  0.23)	test_majacc   0.97 (  0.96)	Loss_d 0.293 (0.345)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.29 (  0.23)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.88 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.57it/s]
Test: [  0/  1]	Loss 1.539 (1.539)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 1.539 (1.539)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 1.539 (1.539)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 1.539 (1.539)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.72 (  0.72)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/44/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0367 (0.0470)	validation_time 0.0004 (0.0019)	train_time 0.0362 (0.0441)
record: (train_acc, test_acc) (0.8501000230312348, 0.27300000190734863)
last accs (train_acc, test_acc) (0.8501000230312348, 0.27300000190734863)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.29it/s] 19%|#9        | 5/26 [00:00<00:01, 20.01it/s] 35%|###4      | 9/26 [00:00<00:00, 25.79it/s] 50%|#####     | 13/26 [00:00<00:00, 28.89it/s] 65%|######5   | 17/26 [00:00<00:00, 30.90it/s] 81%|########  | 21/26 [00:00<00:00, 32.47it/s] 96%|#########6| 25/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 27.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.443 (1.704)	train_nll   0.36 (  0.37)	train_penalty   0.02 (  0.04)	weight_norm   1.09 (  1.34)	train_acc   0.83 (  0.85)	train_minacc   0.27 (  0.12)	train_majacc   0.94 (  0.98)	train_corr   0.00 (  0.00)	l1 5.6235 (5.3420)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.40it/s] 27%|##6       | 7/26 [00:00<00:00, 35.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.20it/s] 50%|#####     | 13/26 [00:00<00:00, 40.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.34it/s] 96%|#########6| 25/26 [00:00<00:00, 47.69it/s]100%|##########| 26/26 [00:00<00:00, 39.82it/s]
Test: [   0/  26]	Loss 0.331 (0.331)	test_acc   0.85 (  0.85)	test_minacc   0.37 (  0.37)	test_majacc   0.93 (  0.93)	Loss_d 0.331 (0.331)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.414 (0.363)	test_acc   0.83 (  0.84)	test_minacc   0.36 (  0.34)	test_majacc   0.94 (  0.94)	Loss_d 0.414 (0.363)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.36 (  0.34)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.84 (  0.86)
Test: [  20/  26]	Loss 0.358 (0.349)	test_acc   0.85 (  0.85)	test_minacc   0.38 (  0.35)	test_majacc   0.94 (  0.94)	Loss_d 0.358 (0.349)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.38 (  0.35)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.87 (  0.86)
Test: [  26/  26]	Loss 0.310 (0.342)	test_acc   0.85 (  0.85)	test_minacc   0.44 (  0.36)	test_majacc   0.93 (  0.94)	Loss_d 0.310 (0.342)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.44 (  0.36)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.85 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.21it/s]
Test: [  0/  1]	Loss 1.429 (1.429)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.97 (  0.97)	Loss_d 1.429 (1.429)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.64 (  0.64)
Test: [  1/  1]	Loss 1.429 (1.429)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.97 (  0.97)	Loss_d 1.429 (1.429)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.64 (  0.64)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/44/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0348 (0.0445)	validation_time 0.0004 (0.0016)	train_time 0.0344 (0.0421)
record: (train_acc, test_acc) (0.8541000238656997, 0.3330000042915344)
last accs (train_acc, test_acc) (0.8541000238656997, 0.3330000042915344)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.53it/s] 19%|#9        | 5/26 [00:00<00:00, 23.97it/s] 35%|###4      | 9/26 [00:00<00:00, 29.23it/s] 50%|#####     | 13/26 [00:00<00:00, 31.31it/s] 65%|######5   | 17/26 [00:00<00:00, 32.88it/s] 81%|########  | 21/26 [00:00<00:00, 34.02it/s] 96%|#########6| 25/26 [00:00<00:00, 34.66it/s]100%|##########| 26/26 [00:00<00:00, 29.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.032 (1.232)	train_nll   0.32 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.71 (  0.88)	train_acc   0.86 (  0.85)	train_minacc   0.32 (  0.21)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 6.4070 (6.1058)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 27%|##6       | 7/26 [00:00<00:00, 35.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.52it/s] 46%|####6     | 12/26 [00:00<00:00, 41.73it/s] 65%|######5   | 17/26 [00:00<00:00, 42.92it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.92it/s] 88%|########8 | 23/26 [00:00<00:00, 48.17it/s]100%|##########| 26/26 [00:00<00:00, 39.85it/s]
Test: [   0/  26]	Loss 0.377 (0.377)	test_acc   0.81 (  0.81)	test_minacc   0.56 (  0.56)	test_majacc   0.85 (  0.85)	Loss_d 0.377 (0.377)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.426 (0.403)	test_acc   0.81 (  0.81)	test_minacc   0.53 (  0.55)	test_majacc   0.88 (  0.86)	Loss_d 0.426 (0.403)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.72 (  0.71)
Test: [  20/  26]	Loss 0.386 (0.389)	test_acc   0.82 (  0.81)	test_minacc   0.52 (  0.54)	test_majacc   0.87 (  0.86)	Loss_d 0.386 (0.389)	test_acc_d   0.82 (  0.81)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.75 (  0.72)
Test: [  26/  26]	Loss 0.303 (0.380)	test_acc   0.88 (  0.82)	test_minacc   0.76 (  0.55)	test_majacc   0.90 (  0.86)	Loss_d 0.303 (0.380)	test_acc_d   0.88 (  0.82)	test_minacc_d   0.76 (  0.55)	test_majacc_d   0.90 (  0.86)	test_corr_d   0.72 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.80it/s]
Test: [  0/  1]	Loss 1.231 (1.231)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.89 (  0.89)	Loss_d 1.231 (1.231)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 1.231 (1.231)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.89 (  0.89)	Loss_d 1.231 (1.231)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.27 (  0.27)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/44/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0360 (0.0431)	validation_time 0.0004 (0.0014)	train_time 0.0356 (0.0410)
record: (train_acc, test_acc) (0.8179000257849693, 0.5110000371932983)
last accs (train_acc, test_acc) (0.8179000257849693, 0.5110000371932983)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 19%|#9        | 5/26 [00:00<00:00, 21.06it/s] 35%|###4      | 9/26 [00:00<00:00, 26.97it/s] 50%|#####     | 13/26 [00:00<00:00, 29.41it/s] 65%|######5   | 17/26 [00:00<00:00, 31.55it/s] 81%|########  | 21/26 [00:00<00:00, 32.39it/s] 96%|#########6| 25/26 [00:00<00:00, 32.97it/s]100%|##########| 26/26 [00:00<00:00, 28.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.803 (0.939)	train_nll   0.32 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.48 (  0.59)	train_acc   0.85 (  0.85)	train_minacc   0.22 (  0.18)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 7.7964 (6.9831)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.86it/s] 27%|##6       | 7/26 [00:00<00:00, 30.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.21it/s] 50%|#####     | 13/26 [00:00<00:00, 40.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.95it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.95it/s] 96%|#########6| 25/26 [00:00<00:00, 48.76it/s]100%|##########| 26/26 [00:00<00:00, 39.34it/s]
Test: [   0/  26]	Loss 0.300 (0.300)	test_acc   0.86 (  0.86)	test_minacc   0.24 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 0.300 (0.300)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.397 (0.352)	test_acc   0.82 (  0.84)	test_minacc   0.27 (  0.25)	test_majacc   0.95 (  0.96)	Loss_d 0.397 (0.352)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.27 (  0.25)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.86 (  0.87)
Test: [  20/  26]	Loss 0.358 (0.335)	test_acc   0.83 (  0.85)	test_minacc   0.19 (  0.25)	test_majacc   0.95 (  0.96)	Loss_d 0.358 (0.335)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.19 (  0.25)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.88 (  0.87)
Test: [  26/  26]	Loss 0.291 (0.328)	test_acc   0.86 (  0.86)	test_minacc   0.34 (  0.26)	test_majacc   0.97 (  0.96)	Loss_d 0.291 (0.328)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.34 (  0.26)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.86 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.01it/s]
Test: [  0/  1]	Loss 1.717 (1.717)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.97 (  0.97)	Loss_d 1.717 (1.717)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 1.717 (1.717)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.97 (  0.97)	Loss_d 1.717 (1.717)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.67 (  0.67)
Overall Timing[  6/  1]	epoch_time 0.0351 (0.0420)	validation_time 0.0003 (0.0013)	train_time 0.0347 (0.0401)
record: (train_acc, test_acc) (0.8179000257849693, 0.5110000371932983)
last accs (train_acc, test_acc) (0.8559000263810158, 0.2930000126361847)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.21it/s] 19%|#9        | 5/26 [00:00<00:00, 22.49it/s] 35%|###4      | 9/26 [00:00<00:00, 27.55it/s] 50%|#####     | 13/26 [00:00<00:00, 30.67it/s] 65%|######5   | 17/26 [00:00<00:00, 32.10it/s] 81%|########  | 21/26 [00:00<00:00, 33.05it/s] 96%|#########6| 25/26 [00:00<00:00, 33.66it/s]100%|##########| 26/26 [00:00<00:00, 28.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.694 (0.741)	train_nll   0.36 (  0.34)	train_penalty   0.04 (  0.03)	weight_norm   0.34 (  0.40)	train_acc   0.84 (  0.85)	train_minacc   0.24 (  0.18)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 9.7165 (8.7453)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.11it/s] 31%|###       | 8/26 [00:00<00:00, 33.47it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.47it/s] 50%|#####     | 13/26 [00:00<00:00, 38.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.95it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.95it/s] 96%|#########6| 25/26 [00:00<00:00, 45.77it/s]100%|##########| 26/26 [00:00<00:00, 37.42it/s]
Test: [   0/  26]	Loss 0.340 (0.340)	test_acc   0.83 (  0.83)	test_minacc   0.54 (  0.54)	test_majacc   0.87 (  0.87)	Loss_d 0.340 (0.340)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.426 (0.378)	test_acc   0.79 (  0.83)	test_minacc   0.47 (  0.53)	test_majacc   0.87 (  0.88)	Loss_d 0.426 (0.378)	test_acc_d   0.79 (  0.83)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.71 (  0.74)
Test: [  20/  26]	Loss 0.364 (0.352)	test_acc   0.85 (  0.84)	test_minacc   0.52 (  0.56)	test_majacc   0.90 (  0.89)	Loss_d 0.364 (0.352)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.90 (  0.89)	test_corr_d   0.77 (  0.75)
Test: [  26/  26]	Loss 0.309 (0.343)	test_acc   0.88 (  0.85)	test_minacc   0.73 (  0.58)	test_majacc   0.91 (  0.89)	Loss_d 0.309 (0.343)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.73 (  0.58)	test_majacc_d   0.91 (  0.89)	test_corr_d   0.74 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.66it/s]
Test: [  0/  1]	Loss 1.210 (1.210)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.94 (  0.94)	Loss_d 1.210 (1.210)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 1.210 (1.210)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.94 (  0.94)	Loss_d 1.210 (1.210)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.19 (  0.19)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/44/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0369 (0.0413)	validation_time 0.0005 (0.0012)	train_time 0.0363 (0.0397)
record: (train_acc, test_acc) (0.8467000244855881, 0.5420000553131104)
last accs (train_acc, test_acc) (0.8467000244855881, 0.5420000553131104)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.05it/s] 19%|#9        | 5/26 [00:00<00:00, 23.08it/s] 35%|###4      | 9/26 [00:00<00:00, 27.65it/s] 50%|#####     | 13/26 [00:00<00:00, 30.49it/s] 65%|######5   | 17/26 [00:00<00:00, 32.14it/s] 81%|########  | 21/26 [00:00<00:00, 33.25it/s] 96%|#########6| 25/26 [00:00<00:00, 33.89it/s]100%|##########| 26/26 [00:00<00:00, 29.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.593 (0.622)	train_nll   0.34 (  0.33)	train_penalty   0.03 (  0.02)	weight_norm   0.25 (  0.29)	train_acc   0.84 (  0.85)	train_minacc   0.05 (  0.21)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 11.1812 (10.4099)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.89it/s] 23%|##3       | 6/26 [00:00<00:00, 30.31it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.31it/s] 46%|####6     | 12/26 [00:00<00:00, 41.63it/s] 65%|######5   | 17/26 [00:00<00:00, 44.20it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.20it/s] 85%|########4 | 22/26 [00:00<00:00, 46.09it/s]100%|##########| 26/26 [00:00<00:00, 39.98it/s]
Test: [   0/  26]	Loss 0.309 (0.309)	test_acc   0.87 (  0.87)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 0.309 (0.309)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.426 (0.360)	test_acc   0.82 (  0.85)	test_minacc   0.14 (  0.09)	test_majacc   0.98 (  0.99)	Loss_d 0.426 (0.360)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.14 (  0.09)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.359 (0.342)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.359 (0.342)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.311 (0.335)	test_acc   0.86 (  0.86)	test_minacc   0.17 (  0.10)	test_majacc   1.00 (  0.99)	Loss_d 0.311 (0.335)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.17 (  0.10)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.89 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.20it/s]
Test: [  0/  1]	Loss 1.781 (1.781)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.781 (1.781)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.781 (1.781)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.781 (1.781)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.81 (  0.81)
Overall Timing[  8/  1]	epoch_time 0.0365 (0.0408)	validation_time 0.0004 (0.0011)	train_time 0.0360 (0.0393)
record: (train_acc, test_acc) (0.8467000244855881, 0.5420000553131104)
last accs (train_acc, test_acc) (0.855900025010109, 0.18300001323223114)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.28it/s] 19%|#9        | 5/26 [00:00<00:00, 23.77it/s] 35%|###4      | 9/26 [00:00<00:00, 28.11it/s] 50%|#####     | 13/26 [00:00<00:00, 30.56it/s] 65%|######5   | 17/26 [00:00<00:00, 32.04it/s] 81%|########  | 21/26 [00:00<00:00, 32.52it/s] 96%|#########6| 25/26 [00:00<00:00, 33.47it/s]100%|##########| 26/26 [00:00<00:00, 28.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.522 (0.556)	train_nll   0.33 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.20 (  0.22)	train_acc   0.84 (  0.85)	train_minacc   0.17 (  0.25)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 13.0400 (11.9626)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.61it/s] 31%|###       | 8/26 [00:00<00:00, 37.01it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.01it/s] 50%|#####     | 13/26 [00:00<00:00, 41.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.68it/s] 96%|#########6| 25/26 [00:00<00:00, 46.29it/s]100%|##########| 26/26 [00:00<00:00, 40.70it/s]
Test: [   0/  26]	Loss 0.302 (0.302)	test_acc   0.87 (  0.87)	test_minacc   0.35 (  0.35)	test_majacc   0.96 (  0.96)	Loss_d 0.302 (0.302)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.393 (0.350)	test_acc   0.82 (  0.85)	test_minacc   0.27 (  0.31)	test_majacc   0.95 (  0.95)	Loss_d 0.393 (0.350)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.27 (  0.31)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.87 (  0.88)
Test: [  20/  26]	Loss 0.347 (0.330)	test_acc   0.85 (  0.86)	test_minacc   0.31 (  0.33)	test_majacc   0.94 (  0.95)	Loss_d 0.347 (0.330)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.31 (  0.33)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.285 (0.322)	test_acc   0.86 (  0.86)	test_minacc   0.39 (  0.34)	test_majacc   0.95 (  0.96)	Loss_d 0.285 (0.322)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.39 (  0.34)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.87 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.04it/s]
Test: [  0/  1]	Loss 1.691 (1.691)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 1.691 (1.691)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.70 (  0.70)
Test: [  1/  1]	Loss 1.691 (1.691)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 1.691 (1.691)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.70 (  0.70)
Overall Timing[  9/  1]	epoch_time 0.0372 (0.0404)	validation_time 0.0011 (0.0011)	train_time 0.0361 (0.0389)
record: (train_acc, test_acc) (0.8467000244855881, 0.5420000553131104)
last accs (train_acc, test_acc) (0.8626000257730484, 0.2980000078678131)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.89it/s] 15%|#5        | 4/26 [00:00<00:01, 19.18it/s] 31%|###       | 8/26 [00:00<00:00, 25.53it/s] 46%|####6     | 12/26 [00:00<00:00, 28.86it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.50it/s] 88%|########8 | 23/26 [00:00<00:00, 32.31it/s]100%|##########| 26/26 [00:00<00:00, 27.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.467 (0.505)	train_nll   0.30 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.16 (  0.18)	train_acc   0.84 (  0.85)	train_minacc   0.10 (  0.25)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 15.1083 (14.1610)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 27%|##6       | 7/26 [00:00<00:00, 35.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.27it/s] 50%|#####     | 13/26 [00:00<00:00, 40.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.72it/s] 96%|#########6| 25/26 [00:00<00:00, 46.84it/s]100%|##########| 26/26 [00:00<00:00, 39.56it/s]
Test: [   0/  26]	Loss 0.291 (0.291)	test_acc   0.86 (  0.86)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 0.291 (0.291)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.377 (0.335)	test_acc   0.82 (  0.85)	test_minacc   0.15 (  0.17)	test_majacc   0.97 (  0.98)	Loss_d 0.377 (0.335)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.15 (  0.17)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.334 (0.316)	test_acc   0.86 (  0.86)	test_minacc   0.21 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 0.334 (0.316)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.21 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.280 (0.310)	test_acc   0.86 (  0.86)	test_minacc   0.20 (  0.17)	test_majacc   0.99 (  0.98)	Loss_d 0.280 (0.310)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.20 (  0.17)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.89 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.92it/s]
Test: [  0/  1]	Loss 1.790 (1.790)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 1.790 (1.790)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.790 (1.790)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 1.790 (1.790)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.82 (  0.82)
Overall Timing[ 10/  1]	epoch_time 0.0376 (0.0402)	validation_time 0.0003 (0.0010)	train_time 0.0373 (0.0388)
record: (train_acc, test_acc) (0.8467000244855881, 0.5420000553131104)
last accs (train_acc, test_acc) (0.8609000201821327, 0.18200001120567322)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.31it/s] 19%|#9        | 5/26 [00:00<00:00, 21.42it/s] 35%|###4      | 9/26 [00:00<00:00, 26.63it/s] 50%|#####     | 13/26 [00:00<00:00, 29.16it/s] 65%|######5   | 17/26 [00:00<00:00, 29.92it/s] 81%|########  | 21/26 [00:00<00:00, 31.48it/s] 96%|#########6| 25/26 [00:00<00:00, 32.59it/s]100%|##########| 26/26 [00:00<00:00, 27.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.468 (0.473)	train_nll   0.33 (  0.33)	train_penalty   0.03 (  0.02)	weight_norm   0.13 (  0.14)	train_acc   0.86 (  0.86)	train_minacc   0.15 (  0.27)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 16.5497 (15.7425)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.43it/s] 31%|###       | 8/26 [00:00<00:00, 39.48it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.48it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.45it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.82it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.82it/s]100%|##########| 26/26 [00:00<00:00, 51.48it/s]100%|##########| 26/26 [00:00<00:00, 42.46it/s]
Test: [   0/  26]	Loss 0.308 (0.308)	test_acc   0.86 (  0.86)	test_minacc   0.20 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 0.308 (0.308)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.395 (0.340)	test_acc   0.81 (  0.85)	test_minacc   0.16 (  0.20)	test_majacc   0.96 (  0.98)	Loss_d 0.395 (0.340)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.16 (  0.20)	test_majacc_d   0.96 (  0.98)	test_corr_d   0.89 (  0.91)
Test: [  20/  26]	Loss 0.332 (0.319)	test_acc   0.84 (  0.86)	test_minacc   0.16 (  0.22)	test_majacc   0.96 (  0.98)	Loss_d 0.332 (0.319)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.16 (  0.22)	test_majacc_d   0.96 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.307 (0.313)	test_acc   0.85 (  0.86)	test_minacc   0.24 (  0.21)	test_majacc   0.97 (  0.98)	Loss_d 0.307 (0.313)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.24 (  0.21)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.90 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.02it/s]
Test: [  0/  1]	Loss 1.631 (1.631)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   1.00 (  1.00)	Loss_d 1.631 (1.631)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.631 (1.631)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   1.00 (  1.00)	Loss_d 1.631 (1.631)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.78 (  0.78)
Overall Timing[ 11/  1]	epoch_time 0.0361 (0.0398)	validation_time 0.0004 (0.0010)	train_time 0.0357 (0.0385)
record: (train_acc, test_acc) (0.8467000244855881, 0.5420000553131104)
last accs (train_acc, test_acc) (0.8626000254750251, 0.22600001096725464)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.92it/s] 19%|#9        | 5/26 [00:00<00:00, 22.59it/s] 35%|###4      | 9/26 [00:00<00:00, 26.61it/s] 50%|#####     | 13/26 [00:00<00:00, 29.08it/s] 65%|######5   | 17/26 [00:00<00:00, 31.18it/s] 81%|########  | 21/26 [00:00<00:00, 32.71it/s] 96%|#########6| 25/26 [00:00<00:00, 33.66it/s]100%|##########| 26/26 [00:00<00:00, 28.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.427 (0.455)	train_nll   0.30 (  0.32)	train_penalty   0.01 (  0.02)	weight_norm   0.12 (  0.13)	train_acc   0.85 (  0.86)	train_minacc   0.29 (  0.32)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 18.0514 (17.2160)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.53it/s] 27%|##6       | 7/26 [00:00<00:00, 34.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.93it/s] 50%|#####     | 13/26 [00:00<00:00, 39.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.37it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.37it/s] 96%|#########6| 25/26 [00:00<00:00, 47.17it/s]100%|##########| 26/26 [00:00<00:00, 40.09it/s]
Test: [   0/  26]	Loss 0.293 (0.293)	test_acc   0.86 (  0.86)	test_minacc   0.39 (  0.39)	test_majacc   0.93 (  0.93)	Loss_d 0.293 (0.293)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.368 (0.320)	test_acc   0.82 (  0.85)	test_minacc   0.36 (  0.38)	test_majacc   0.93 (  0.94)	Loss_d 0.368 (0.320)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.36 (  0.38)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.82 (  0.85)
Test: [  20/  26]	Loss 0.344 (0.304)	test_acc   0.84 (  0.86)	test_minacc   0.29 (  0.40)	test_majacc   0.93 (  0.95)	Loss_d 0.344 (0.304)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.29 (  0.40)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  26/  26]	Loss 0.274 (0.297)	test_acc   0.86 (  0.87)	test_minacc   0.41 (  0.40)	test_majacc   0.95 (  0.95)	Loss_d 0.274 (0.297)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.41 (  0.40)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.84 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.99it/s]
Test: [  0/  1]	Loss 1.453 (1.453)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.97 (  0.97)	Loss_d 1.453 (1.453)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 1.453 (1.453)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.97 (  0.97)	Loss_d 1.453 (1.453)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.58 (  0.58)
Overall Timing[ 12/  1]	epoch_time 0.0397 (0.0398)	validation_time 0.0003 (0.0009)	train_time 0.0393 (0.0386)
record: (train_acc, test_acc) (0.8467000244855881, 0.5420000553131104)
last accs (train_acc, test_acc) (0.867600026845932, 0.3700000047683716)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 19%|#9        | 5/26 [00:00<00:00, 22.78it/s] 35%|###4      | 9/26 [00:00<00:00, 28.39it/s] 50%|#####     | 13/26 [00:00<00:00, 31.08it/s] 65%|######5   | 17/26 [00:00<00:00, 32.81it/s] 81%|########  | 21/26 [00:00<00:00, 33.95it/s] 96%|#########6| 25/26 [00:00<00:00, 34.22it/s]100%|##########| 26/26 [00:00<00:00, 29.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.362 (0.424)	train_nll   0.26 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm   0.11 (  0.11)	train_acc   0.89 (  0.86)	train_minacc   0.49 (  0.36)	train_majacc   0.97 (  0.95)	train_corr   0.00 (  0.00)	l1 19.2543 (18.6958)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.01it/s] 27%|##6       | 7/26 [00:00<00:00, 36.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.24it/s] 50%|#####     | 13/26 [00:00<00:00, 41.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.80it/s] 96%|#########6| 25/26 [00:00<00:00, 48.15it/s]100%|##########| 26/26 [00:00<00:00, 40.46it/s]
Test: [   0/  26]	Loss 0.286 (0.286)	test_acc   0.85 (  0.85)	test_minacc   0.57 (  0.57)	test_majacc   0.90 (  0.90)	Loss_d 0.286 (0.286)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.360 (0.321)	test_acc   0.83 (  0.85)	test_minacc   0.47 (  0.56)	test_majacc   0.91 (  0.91)	Loss_d 0.360 (0.321)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.47 (  0.56)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.81 (  0.82)
Test: [  20/  26]	Loss 0.312 (0.303)	test_acc   0.86 (  0.86)	test_minacc   0.53 (  0.58)	test_majacc   0.92 (  0.91)	Loss_d 0.312 (0.303)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.83 (  0.82)
Test: [  26/  26]	Loss 0.248 (0.295)	test_acc   0.90 (  0.87)	test_minacc   0.66 (  0.58)	test_majacc   0.95 (  0.92)	Loss_d 0.248 (0.295)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.66 (  0.58)	test_majacc_d   0.95 (  0.92)	test_corr_d   0.82 (  0.83)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.17it/s]
Test: [  0/  1]	Loss 1.411 (1.411)	test_acc   0.50 (  0.50)	test_minacc   0.45 (  0.45)	test_majacc   0.94 (  0.94)	Loss_d 1.411 (1.411)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.46 (  0.46)
Test: [  1/  1]	Loss 1.411 (1.411)	test_acc   0.50 (  0.50)	test_minacc   0.45 (  0.45)	test_majacc   0.94 (  0.94)	Loss_d 1.411 (1.411)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.46 (  0.46)
Overall Timing[ 13/  1]	epoch_time 0.0372 (0.0396)	validation_time 0.0004 (0.0009)	train_time 0.0368 (0.0385)
record: (train_acc, test_acc) (0.8467000244855881, 0.5420000553131104)
last accs (train_acc, test_acc) (0.8666000214815139, 0.49500003457069397)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 19%|#9        | 5/26 [00:00<00:01, 20.02it/s] 35%|###4      | 9/26 [00:00<00:00, 25.85it/s] 50%|#####     | 13/26 [00:00<00:00, 28.66it/s] 65%|######5   | 17/26 [00:00<00:00, 30.46it/s] 81%|########  | 21/26 [00:00<00:00, 31.71it/s] 96%|#########6| 25/26 [00:00<00:00, 32.70it/s]100%|##########| 26/26 [00:00<00:00, 27.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.375 (0.412)	train_nll   0.28 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.86 (  0.86)	train_minacc   0.17 (  0.37)	train_majacc   0.99 (  0.95)	train_corr   0.00 (  0.00)	l1 20.2380 (19.8468)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.51it/s] 35%|###4      | 9/26 [00:00<00:00, 39.24it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.28it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.28it/s] 81%|########  | 21/26 [00:00<00:00, 46.95it/s]100%|##########| 26/26 [00:00<00:00, 42.00it/s]
Test: [   0/  26]	Loss 0.277 (0.277)	test_acc   0.90 (  0.90)	test_minacc   0.41 (  0.41)	test_majacc   0.98 (  0.98)	Loss_d 0.277 (0.277)	test_acc_d   0.90 (  0.90)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.371 (0.330)	test_acc   0.85 (  0.86)	test_minacc   0.30 (  0.32)	test_majacc   0.97 (  0.96)	Loss_d 0.371 (0.330)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.30 (  0.32)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.315 (0.313)	test_acc   0.86 (  0.86)	test_minacc   0.29 (  0.30)	test_majacc   0.96 (  0.96)	Loss_d 0.315 (0.313)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.29 (  0.30)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.89)
Test: [  26/  26]	Loss 0.240 (0.304)	test_acc   0.89 (  0.87)	test_minacc   0.49 (  0.32)	test_majacc   0.97 (  0.96)	Loss_d 0.240 (0.304)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.49 (  0.32)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.87 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.85it/s]
Test: [  0/  1]	Loss 1.555 (1.555)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.98 (  0.98)	Loss_d 1.555 (1.555)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.555 (1.555)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.98 (  0.98)	Loss_d 1.555 (1.555)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.69 (  0.69)
Overall Timing[ 14/  1]	epoch_time 0.0360 (0.0394)	validation_time 0.0003 (0.0009)	train_time 0.0356 (0.0383)
record: (train_acc, test_acc) (0.8467000244855881, 0.5420000553131104)
last accs (train_acc, test_acc) (0.8664000235199928, 0.33800002932548523)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.92it/s] 19%|#9        | 5/26 [00:00<00:00, 21.73it/s] 35%|###4      | 9/26 [00:00<00:00, 27.13it/s] 50%|#####     | 13/26 [00:00<00:00, 30.36it/s] 65%|######5   | 17/26 [00:00<00:00, 32.01it/s] 81%|########  | 21/26 [00:00<00:00, 33.00it/s] 96%|#########6| 25/26 [00:00<00:00, 33.38it/s]100%|##########| 26/26 [00:00<00:00, 28.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.001 (0.167)	train_nll   0.60 (  0.45)	train_penalty   0.00 (  0.01)	weight_norm   0.12 (  0.10)	train_acc   0.70 (  0.78)	train_minacc   0.76 (  0.53)	train_majacc   0.68 (  0.82)	train_corr   0.00 (  0.00)	l1 20.1540 (20.4022)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.94it/s] 27%|##6       | 7/26 [00:00<00:00, 33.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.64it/s] 50%|#####     | 13/26 [00:00<00:00, 40.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.12it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.12it/s] 96%|#########6| 25/26 [00:00<00:00, 46.67it/s]100%|##########| 26/26 [00:00<00:00, 39.34it/s]
Test: [   0/  26]	Loss 0.644 (0.644)	test_acc   0.62 (  0.62)	test_minacc   0.70 (  0.70)	test_majacc   0.61 (  0.61)	Loss_d 0.644 (0.644)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.631 (0.640)	test_acc   0.64 (  0.63)	test_minacc   0.66 (  0.69)	test_majacc   0.63 (  0.62)	Loss_d 0.631 (0.640)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.66 (  0.69)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.14 (  0.17)
Test: [  20/  26]	Loss 0.623 (0.635)	test_acc   0.63 (  0.64)	test_minacc   0.64 (  0.69)	test_majacc   0.62 (  0.63)	Loss_d 0.623 (0.635)	test_acc_d   0.63 (  0.64)	test_minacc_d   0.64 (  0.69)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.24 (  0.20)
Test: [  26/  26]	Loss 0.604 (0.635)	test_acc   0.70 (  0.64)	test_minacc   0.76 (  0.68)	test_majacc   0.68 (  0.63)	Loss_d 0.604 (0.635)	test_acc_d   0.70 (  0.64)	test_minacc_d   0.76 (  0.68)	test_majacc_d   0.68 (  0.63)	test_corr_d   0.25 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.44it/s]
Test: [  0/  1]	Loss 0.627 (0.627)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.61 (  0.61)	Loss_d 0.627 (0.627)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.627 (0.627)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.61 (  0.61)	Loss_d 0.627 (0.627)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.30 ( -0.30)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/44/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0372 (0.0393)	validation_time 0.0004 (0.0008)	train_time 0.0368 (0.0382)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.22it/s] 19%|#9        | 5/26 [00:00<00:00, 21.72it/s] 35%|###4      | 9/26 [00:00<00:00, 26.53it/s] 50%|#####     | 13/26 [00:00<00:00, 29.59it/s] 65%|######5   | 17/26 [00:00<00:00, 31.49it/s] 81%|########  | 21/26 [00:00<00:00, 32.60it/s] 96%|#########6| 25/26 [00:00<00:00, 33.03it/s]100%|##########| 26/26 [00:00<00:00, 28.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.001 (0.001)	train_nll   0.64 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.64 (  0.62)	train_minacc   0.63 (  0.66)	train_majacc   0.64 (  0.61)	train_corr   0.00 (  0.00)	l1 19.9447 (20.0156)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.23it/s] 31%|###       | 8/26 [00:00<00:00, 37.84it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.84it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.33it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.66it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.66it/s]100%|##########| 26/26 [00:00<00:00, 50.65it/s]100%|##########| 26/26 [00:00<00:00, 41.77it/s]
Test: [   0/  26]	Loss 0.662 (0.662)	test_acc   0.57 (  0.57)	test_minacc   0.67 (  0.67)	test_majacc   0.56 (  0.56)	Loss_d 0.662 (0.662)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.654 (0.663)	test_acc   0.62 (  0.59)	test_minacc   0.66 (  0.64)	test_majacc   0.61 (  0.58)	Loss_d 0.654 (0.663)	test_acc_d   0.62 (  0.59)	test_minacc_d   0.66 (  0.64)	test_majacc_d   0.61 (  0.58)	test_corr_d   0.12 (  0.14)
Test: [  20/  26]	Loss 0.651 (0.661)	test_acc   0.62 (  0.60)	test_minacc   0.62 (  0.64)	test_majacc   0.62 (  0.59)	Loss_d 0.651 (0.661)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.62 (  0.64)	test_majacc_d   0.62 (  0.59)	test_corr_d   0.21 (  0.16)
Test: [  26/  26]	Loss 0.644 (0.662)	test_acc   0.64 (  0.60)	test_minacc   0.63 (  0.63)	test_majacc   0.65 (  0.59)	Loss_d 0.644 (0.662)	test_acc_d   0.64 (  0.60)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.65 (  0.59)	test_corr_d   0.21 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.21it/s]
Test: [  0/  1]	Loss 0.657 (0.657)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.66 (  0.66)	Loss_d 0.657 (0.657)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.657 (0.657)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.66 (  0.66)	Loss_d 0.657 (0.657)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 16/  1]	epoch_time 0.0363 (0.0391)	validation_time 0.0004 (0.0008)	train_time 0.0359 (0.0380)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5957000063061714, 0.6080000400543213)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.03it/s] 19%|#9        | 5/26 [00:00<00:00, 22.44it/s] 35%|###4      | 9/26 [00:00<00:00, 26.05it/s] 50%|#####     | 13/26 [00:00<00:00, 29.14it/s] 65%|######5   | 17/26 [00:00<00:00, 30.32it/s] 81%|########  | 21/26 [00:00<00:00, 31.93it/s] 96%|#########6| 25/26 [00:00<00:00, 32.68it/s]100%|##########| 26/26 [00:00<00:00, 28.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.56 (  0.57)	train_minacc   0.51 (  0.61)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 19.8856 (19.9061)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.70it/s] 31%|###       | 8/26 [00:00<00:00, 39.97it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.97it/s] 50%|#####     | 13/26 [00:00<00:00, 42.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.87it/s] 96%|#########6| 25/26 [00:00<00:00, 48.61it/s]100%|##########| 26/26 [00:00<00:00, 41.88it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.55 (  0.55)	test_minacc   0.61 (  0.61)	test_majacc   0.54 (  0.54)	Loss_d 0.685 (0.685)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.679 (0.685)	test_acc   0.57 (  0.55)	test_minacc   0.64 (  0.60)	test_majacc   0.56 (  0.55)	Loss_d 0.679 (0.685)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.64 (  0.60)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.678 (0.684)	test_acc   0.57 (  0.56)	test_minacc   0.55 (  0.60)	test_majacc   0.58 (  0.55)	Loss_d 0.678 (0.684)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.55 (  0.60)	test_majacc_d   0.58 (  0.55)	test_corr_d   0.11 (  0.05)
Test: [  26/  26]	Loss 0.675 (0.685)	test_acc   0.56 (  0.56)	test_minacc   0.54 (  0.60)	test_majacc   0.56 (  0.55)	Loss_d 0.675 (0.685)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.54 (  0.60)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.11 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.45it/s]
Test: [  0/  1]	Loss 0.673 (0.673)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.59 (  0.59)	Loss_d 0.673 (0.673)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.673 (0.673)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.59 (  0.59)	Loss_d 0.673 (0.673)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 17/  1]	epoch_time 0.0370 (0.0390)	validation_time 0.0004 (0.0008)	train_time 0.0366 (0.0380)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5556000120639801, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.70it/s] 23%|##3       | 6/26 [00:00<00:00, 25.46it/s] 38%|###8      | 10/26 [00:00<00:00, 29.75it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.09it/s] 69%|######9   | 18/26 [00:00<00:00, 32.77it/s] 85%|########4 | 22/26 [00:00<00:00, 33.44it/s]100%|##########| 26/26 [00:00<00:00, 33.71it/s]100%|##########| 26/26 [00:00<00:00, 29.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.57 (  0.54)	train_minacc   0.51 (  0.57)	train_majacc   0.58 (  0.54)	train_corr   0.00 (  0.00)	l1 19.8698 (19.8755)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.67it/s] 27%|##6       | 7/26 [00:00<00:00, 28.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.52it/s] 50%|#####     | 13/26 [00:00<00:00, 36.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.81it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.81it/s] 96%|#########6| 25/26 [00:00<00:00, 45.42it/s]100%|##########| 26/26 [00:00<00:00, 36.42it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.689 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.51 (  0.53)	test_majacc   0.55 (  0.53)	Loss_d 0.689 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.56 (  0.54)	test_minacc   0.48 (  0.54)	test_majacc   0.58 (  0.54)	Loss_d 0.690 (0.691)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.08 (  0.03)
Test: [  26/  26]	Loss 0.689 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.51 (  0.54)	test_majacc   0.58 (  0.54)	Loss_d 0.689 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.09 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.06it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.59 (  0.59)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.59 (  0.59)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 18/  1]	epoch_time 0.0368 (0.0389)	validation_time 0.0003 (0.0008)	train_time 0.0365 (0.0379)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5356000100672245, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.47it/s] 19%|#9        | 5/26 [00:00<00:00, 21.74it/s] 35%|###4      | 9/26 [00:00<00:00, 26.79it/s] 50%|#####     | 13/26 [00:00<00:00, 29.59it/s] 65%|######5   | 17/26 [00:00<00:00, 31.26it/s] 81%|########  | 21/26 [00:00<00:00, 32.60it/s] 96%|#########6| 25/26 [00:00<00:00, 33.49it/s]100%|##########| 26/26 [00:00<00:00, 28.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.56 (  0.53)	train_minacc   0.46 (  0.50)	train_majacc   0.57 (  0.53)	train_corr   0.00 (  0.00)	l1 19.8671 (19.8681)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.90it/s] 27%|##6       | 7/26 [00:00<00:00, 32.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.05it/s] 50%|#####     | 13/26 [00:00<00:00, 38.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.25it/s] 96%|#########6| 25/26 [00:00<00:00, 46.74it/s]100%|##########| 26/26 [00:00<00:00, 38.30it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.53)	test_minacc   0.52 (  0.47)	test_majacc   0.55 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.08 (  0.07)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.56 (  0.53)	test_minacc   0.47 (  0.49)	test_majacc   0.57 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.11 (  0.06)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.56 (  0.53)	test_minacc   0.46 (  0.48)	test_majacc   0.57 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.42it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.04 (  0.04)
Overall Timing[ 19/  1]	epoch_time 0.0366 (0.0387)	validation_time 0.0004 (0.0007)	train_time 0.0361 (0.0378)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5317000100016593, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.17it/s] 19%|#9        | 5/26 [00:00<00:00, 23.04it/s] 35%|###4      | 9/26 [00:00<00:00, 27.81it/s] 50%|#####     | 13/26 [00:00<00:00, 30.62it/s] 65%|######5   | 17/26 [00:00<00:00, 31.93it/s] 81%|########  | 21/26 [00:00<00:00, 32.85it/s] 96%|#########6| 25/26 [00:00<00:00, 33.42it/s]100%|##########| 26/26 [00:00<00:00, 28.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.54 (  0.52)	train_minacc   0.41 (  0.47)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 19.8662 (19.8666)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 27%|##6       | 7/26 [00:00<00:00, 34.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.99it/s] 46%|####6     | 12/26 [00:00<00:00, 38.80it/s] 69%|######9   | 18/26 [00:00<00:00, 45.72it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.72it/s] 92%|#########2| 24/26 [00:00<00:00, 46.18it/s]100%|##########| 26/26 [00:00<00:00, 39.67it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.44)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.44)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.47 (  0.46)	test_majacc   0.56 (  0.53)	Loss_d 0.691 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.47 (  0.46)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.10 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.41 (  0.46)	test_majacc   0.57 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.41 (  0.46)	test_majacc_d   0.57 (  0.53)	test_corr_d   0.08 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 43.99it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.59 (  0.59)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.59 (  0.59)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.06 (  0.06)
Overall Timing[ 20/  1]	epoch_time 0.0357 (0.0386)	validation_time 0.0005 (0.0007)	train_time 0.0352 (0.0377)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5188000147938728, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.92it/s] 19%|#9        | 5/26 [00:00<00:00, 22.82it/s] 35%|###4      | 9/26 [00:00<00:00, 27.95it/s] 50%|#####     | 13/26 [00:00<00:00, 29.92it/s] 65%|######5   | 17/26 [00:00<00:00, 31.47it/s] 81%|########  | 21/26 [00:00<00:00, 32.47it/s] 96%|#########6| 25/26 [00:00<00:00, 33.11it/s]100%|##########| 26/26 [00:00<00:00, 28.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.55 (  0.52)	train_minacc   0.46 (  0.46)	train_majacc   0.57 (  0.53)	train_corr   0.00 (  0.00)	l1 19.8656 (19.8658)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.92it/s] 27%|##6       | 7/26 [00:00<00:00, 32.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.09it/s] 50%|#####     | 13/26 [00:00<00:00, 38.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.09it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.09it/s] 96%|#########6| 25/26 [00:00<00:00, 46.39it/s]100%|##########| 26/26 [00:00<00:00, 38.07it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.48 (  0.44)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.48 (  0.44)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.50 (  0.46)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.50 (  0.46)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.08 (  0.05)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.58 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.58 (  0.52)	test_corr_d   0.06 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.69it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.59 (  0.59)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.59 (  0.59)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.06 (  0.06)
Overall Timing[ 21/  1]	epoch_time 0.0374 (0.0385)	validation_time 0.0007 (0.0007)	train_time 0.0367 (0.0376)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5130000144839287, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 19%|#9        | 5/26 [00:00<00:00, 22.01it/s] 35%|###4      | 9/26 [00:00<00:00, 27.15it/s] 50%|#####     | 13/26 [00:00<00:00, 29.44it/s] 65%|######5   | 17/26 [00:00<00:00, 30.31it/s] 81%|########  | 21/26 [00:00<00:00, 31.86it/s] 96%|#########6| 25/26 [00:00<00:00, 32.76it/s]100%|##########| 26/26 [00:00<00:00, 27.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.56 (  0.52)	train_minacc   0.51 (  0.47)	train_majacc   0.57 (  0.53)	train_corr   0.00 (  0.00)	l1 19.8651 (19.8653)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.99it/s] 35%|###4      | 9/26 [00:00<00:00, 39.66it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.79it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.79it/s] 81%|########  | 21/26 [00:00<00:00, 47.41it/s]100%|##########| 26/26 [00:00<00:00, 42.58it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.48 (  0.43)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.48 (  0.43)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.05 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.48 (  0.45)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.48 (  0.45)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.07 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.51)	test_minacc   0.51 (  0.46)	test_majacc   0.57 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.51 (  0.46)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.04 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.59it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.05 (  0.05)
Overall Timing[ 22/  1]	epoch_time 0.0407 (0.0386)	validation_time 0.0005 (0.0007)	train_time 0.0402 (0.0377)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5099000160396099, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.50it/s] 15%|#5        | 4/26 [00:00<00:01, 15.56it/s] 27%|##6       | 7/26 [00:00<00:00, 19.80it/s] 38%|###8      | 10/26 [00:00<00:00, 22.38it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.25it/s] 65%|######5   | 17/26 [00:00<00:00, 27.05it/s] 81%|########  | 21/26 [00:00<00:00, 29.55it/s] 96%|#########6| 25/26 [00:00<00:00, 31.27it/s]100%|##########| 26/26 [00:01<00:00, 24.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 282 tensor(-0.0177, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
rho, theta 432 tensor(-0.0017, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 410 tensor(-0.0022, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.007)	train_nll   0.68 (  0.70)	train_penalty   0.00 (  0.01)	weight_norm   0.19 (  0.16)	train_acc   0.54 (  0.53)	train_minacc   0.51 (  0.48)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 12.9512 (13.7814)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 27%|##6       | 7/26 [00:00<00:00, 33.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.75it/s] 50%|#####     | 13/26 [00:00<00:00, 39.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.91it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.91it/s] 96%|#########6| 25/26 [00:00<00:00, 46.99it/s]100%|##########| 26/26 [00:00<00:00, 39.11it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.685 (0.685)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.689 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.46 (  0.43)
Test: [  20/  26]	Loss 0.684 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.684 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.49 (  0.45)
Test: [  26/  26]	Loss 0.681 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.681 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.48 (  0.45)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.00it/s]
Test: [  0/  1]	Loss 0.704 (0.704)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.704 (0.704)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.704 (0.704)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.704 (0.704)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.15 (  0.15)
Overall Timing[ 23/  1]	epoch_time 0.0387 (0.0386)	validation_time 0.0003 (0.0007)	train_time 0.0384 (0.0378)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5000000110566616, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 15%|#5        | 4/26 [00:00<00:01, 18.34it/s] 31%|###       | 8/26 [00:00<00:00, 25.19it/s] 46%|####6     | 12/26 [00:00<00:00, 28.76it/s] 62%|######1   | 16/26 [00:00<00:00, 30.70it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.35it/s] 92%|#########2| 24/26 [00:00<00:00, 33.03it/s]100%|##########| 26/26 [00:00<00:00, 27.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.20)	train_acc   0.54 (  0.50)	train_minacc   0.51 (  0.50)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.7869 (12.8694)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 27%|##6       | 7/26 [00:00<00:00, 33.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.18it/s] 46%|####6     | 12/26 [00:00<00:00, 39.89it/s] 65%|######5   | 17/26 [00:00<00:00, 41.16it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.16it/s] 88%|########8 | 23/26 [00:00<00:00, 45.73it/s]100%|##########| 26/26 [00:00<00:00, 37.39it/s]
Test: [   0/  26]	Loss 0.676 (0.676)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.676 (0.676)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.57 (  0.57)
Test: [  10/  26]	Loss 0.680 (0.681)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.680 (0.681)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.61 (  0.59)
Test: [  20/  26]	Loss 0.675 (0.683)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.675 (0.683)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.62 (  0.60)
Test: [  26/  26]	Loss 0.672 (0.683)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.672 (0.683)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.62 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.82it/s]
Test: [  0/  1]	Loss 0.710 (0.710)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.710 (0.710)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.41 (  0.41)
Test: [  1/  1]	Loss 0.710 (0.710)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.710 (0.710)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.41 (  0.41)
Overall Timing[ 24/  1]	epoch_time 0.0372 (0.0386)	validation_time 0.0006 (0.0007)	train_time 0.0366 (0.0377)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5000000110566616, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.99it/s] 19%|#9        | 5/26 [00:00<00:00, 23.13it/s] 35%|###4      | 9/26 [00:00<00:00, 27.66it/s] 50%|#####     | 13/26 [00:00<00:00, 30.75it/s] 65%|######5   | 17/26 [00:00<00:00, 32.57it/s] 81%|########  | 21/26 [00:00<00:00, 33.83it/s] 96%|#########6| 25/26 [00:00<00:00, 34.73it/s]100%|##########| 26/26 [00:00<00:00, 29.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.54 (  0.50)	train_minacc   0.51 (  0.50)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.6593 (12.7221)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.99it/s] 27%|##6       | 7/26 [00:00<00:00, 32.04it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.04it/s] 50%|#####     | 13/26 [00:00<00:00, 38.52it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.48it/s] 96%|#########6| 25/26 [00:00<00:00, 46.07it/s]100%|##########| 26/26 [00:00<00:00, 38.21it/s]
Test: [   0/  26]	Loss 0.679 (0.679)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.679 (0.679)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.47 (  0.47)
Test: [  10/  26]	Loss 0.682 (0.684)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.682 (0.684)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.51 (  0.49)
Test: [  20/  26]	Loss 0.677 (0.685)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.677 (0.685)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.53 (  0.51)
Test: [  26/  26]	Loss 0.675 (0.685)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.675 (0.685)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.54 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.93it/s]
Test: [  0/  1]	Loss 0.703 (0.703)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.703 (0.703)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.703 (0.703)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.703 (0.703)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.26 (  0.26)
Overall Timing[ 25/  1]	epoch_time 0.0372 (0.0385)	validation_time 0.0003 (0.0007)	train_time 0.0369 (0.0377)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5000000110566616, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.44it/s] 19%|#9        | 5/26 [00:00<00:00, 21.52it/s] 35%|###4      | 9/26 [00:00<00:00, 26.48it/s] 50%|#####     | 13/26 [00:00<00:00, 29.84it/s] 65%|######5   | 17/26 [00:00<00:00, 32.14it/s] 81%|########  | 21/26 [00:00<00:00, 33.69it/s] 96%|#########6| 25/26 [00:00<00:00, 34.50it/s]100%|##########| 26/26 [00:00<00:00, 28.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.54 (  0.50)	train_minacc   0.51 (  0.50)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.5708 (12.6128)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.48it/s] 27%|##6       | 7/26 [00:00<00:00, 36.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.64it/s] 50%|#####     | 13/26 [00:00<00:00, 41.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.40it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.40it/s] 96%|#########6| 25/26 [00:00<00:00, 47.35it/s]100%|##########| 26/26 [00:00<00:00, 40.44it/s]
Test: [   0/  26]	Loss 0.682 (0.682)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.682 (0.682)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.684 (0.686)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.684 (0.686)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.42 (  0.40)
Test: [  20/  26]	Loss 0.680 (0.687)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.680 (0.687)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.45 (  0.41)
Test: [  26/  26]	Loss 0.678 (0.687)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.678 (0.687)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.45 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.19it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.699 (0.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.699 (0.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.13 (  0.13)
Overall Timing[ 26/  1]	epoch_time 0.0373 (0.0385)	validation_time 0.0004 (0.0007)	train_time 0.0369 (0.0377)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5000000110566616, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.92it/s] 19%|#9        | 5/26 [00:00<00:00, 23.30it/s] 35%|###4      | 9/26 [00:00<00:00, 27.79it/s] 50%|#####     | 13/26 [00:00<00:00, 30.43it/s] 65%|######5   | 17/26 [00:00<00:00, 32.13it/s] 81%|########  | 21/26 [00:00<00:00, 33.16it/s] 96%|#########6| 25/26 [00:00<00:00, 33.36it/s]100%|##########| 26/26 [00:00<00:00, 28.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.54 (  0.50)	train_minacc   0.51 (  0.50)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.5045 (12.5369)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.19it/s] 31%|###       | 8/26 [00:00<00:00, 42.03it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.03it/s] 50%|#####     | 13/26 [00:00<00:00, 44.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.57it/s] 96%|#########6| 25/26 [00:00<00:00, 49.06it/s]100%|##########| 26/26 [00:00<00:00, 42.08it/s]
Test: [   0/  26]	Loss 0.683 (0.683)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.683 (0.683)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.685 (0.687)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.685 (0.687)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.36 (  0.34)
Test: [  20/  26]	Loss 0.681 (0.688)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.681 (0.688)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.40 (  0.36)
Test: [  26/  26]	Loss 0.679 (0.688)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.679 (0.688)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.40 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.08it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Overall Timing[ 27/  1]	epoch_time 0.0360 (0.0384)	validation_time 0.0004 (0.0007)	train_time 0.0356 (0.0376)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5000000110566616, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.07it/s] 19%|#9        | 5/26 [00:00<00:01, 20.52it/s] 31%|###       | 8/26 [00:00<00:00, 23.26it/s] 46%|####6     | 12/26 [00:00<00:00, 26.71it/s] 62%|######1   | 16/26 [00:00<00:00, 29.03it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.21it/s] 92%|#########2| 24/26 [00:00<00:00, 31.75it/s]100%|##########| 26/26 [00:00<00:00, 26.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.54 (  0.50)	train_minacc   0.51 (  0.50)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.4501 (12.4766)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.86it/s] 31%|###       | 8/26 [00:00<00:00, 41.16it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.16it/s] 50%|#####     | 13/26 [00:00<00:00, 41.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.56it/s] 96%|#########6| 25/26 [00:00<00:00, 48.09it/s]100%|##########| 26/26 [00:00<00:00, 41.48it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.684 (0.684)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.686 (0.688)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.686 (0.688)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.32 (  0.29)
Test: [  20/  26]	Loss 0.683 (0.688)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.683 (0.688)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.36 (  0.31)
Test: [  26/  26]	Loss 0.681 (0.689)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.681 (0.689)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.36 (  0.31)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.70it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Overall Timing[ 28/  1]	epoch_time 0.0377 (0.0384)	validation_time 0.0004 (0.0006)	train_time 0.0373 (0.0376)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5000000110566616, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.09it/s] 23%|##3       | 6/26 [00:00<00:00, 26.27it/s] 38%|###8      | 10/26 [00:00<00:00, 29.93it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.42it/s] 69%|######9   | 18/26 [00:00<00:00, 32.01it/s] 85%|########4 | 22/26 [00:00<00:00, 32.98it/s]100%|##########| 26/26 [00:00<00:00, 33.62it/s]100%|##########| 26/26 [00:00<00:00, 29.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.54 (  0.50)	train_minacc   0.51 (  0.50)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.4040 (12.4265)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.81it/s] 27%|##6       | 7/26 [00:00<00:00, 38.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.22it/s] 50%|#####     | 13/26 [00:00<00:00, 42.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.35it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.35it/s] 96%|#########6| 25/26 [00:00<00:00, 47.73it/s]100%|##########| 26/26 [00:00<00:00, 41.57it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.685 (0.685)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.686 (0.688)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.686 (0.688)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.28 (  0.25)
Test: [  20/  26]	Loss 0.684 (0.689)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.684 (0.689)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.33 (  0.27)
Test: [  26/  26]	Loss 0.682 (0.689)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.682 (0.689)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.33 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.75it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 29/  1]	epoch_time 0.0360 (0.0383)	validation_time 0.0003 (0.0006)	train_time 0.0356 (0.0375)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5000000110566616, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.62it/s] 19%|#9        | 5/26 [00:00<00:01, 20.77it/s] 35%|###4      | 9/26 [00:00<00:00, 26.29it/s] 50%|#####     | 13/26 [00:00<00:00, 28.99it/s] 65%|######5   | 17/26 [00:00<00:00, 30.53it/s] 81%|########  | 21/26 [00:00<00:00, 31.93it/s] 96%|#########6| 25/26 [00:00<00:00, 32.31it/s]100%|##########| 26/26 [00:00<00:00, 27.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.21)	train_acc   0.54 (  0.50)	train_minacc   0.51 (  0.50)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.3641 (12.3835)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.85it/s] 31%|###       | 8/26 [00:00<00:00, 40.73it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.73it/s] 50%|#####     | 13/26 [00:00<00:00, 42.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.61it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.61it/s] 96%|#########6| 25/26 [00:00<00:00, 48.74it/s]100%|##########| 26/26 [00:00<00:00, 41.66it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.687 (0.689)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.687 (0.689)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.24 (  0.22)
Test: [  20/  26]	Loss 0.685 (0.690)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.685 (0.690)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.30 (  0.24)
Test: [  26/  26]	Loss 0.683 (0.690)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.683 (0.690)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.30 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.79it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 30/  1]	epoch_time 0.0368 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0363 (0.0375)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5000000110566616, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 19%|#9        | 5/26 [00:00<00:00, 21.98it/s] 35%|###4      | 9/26 [00:00<00:00, 27.25it/s] 50%|#####     | 13/26 [00:00<00:00, 30.12it/s] 65%|######5   | 17/26 [00:00<00:00, 30.73it/s] 81%|########  | 21/26 [00:00<00:00, 32.16it/s] 96%|#########6| 25/26 [00:00<00:00, 32.63it/s]100%|##########| 26/26 [00:00<00:00, 27.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.50)	train_minacc   0.51 (  0.50)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.3291 (12.3461)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.29it/s] 23%|##3       | 6/26 [00:00<00:00, 26.20it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.20it/s] 42%|####2     | 11/26 [00:00<00:00, 35.27it/s] 62%|######1   | 16/26 [00:00<00:00, 40.45it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.45it/s] 81%|########  | 21/26 [00:00<00:00, 42.32it/s]100%|##########| 26/26 [00:00<00:00, 36.10it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.687 (0.687)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.688 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.688 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.21 (  0.19)
Test: [  20/  26]	Loss 0.686 (0.690)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.686 (0.690)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.27 (  0.21)
Test: [  26/  26]	Loss 0.684 (0.690)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.684 (0.690)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.28 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.17it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 31/  1]	epoch_time 0.0376 (0.0382)	validation_time 0.0003 (0.0006)	train_time 0.0372 (0.0375)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5000000110566616, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.67it/s] 19%|#9        | 5/26 [00:00<00:01, 18.39it/s] 35%|###4      | 9/26 [00:00<00:00, 23.76it/s] 50%|#####     | 13/26 [00:00<00:00, 26.68it/s] 65%|######5   | 17/26 [00:00<00:00, 28.80it/s] 81%|########  | 21/26 [00:00<00:00, 30.27it/s] 96%|#########6| 25/26 [00:00<00:00, 31.46it/s]100%|##########| 26/26 [00:01<00:00, 25.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.50)	train_minacc   0.51 (  0.50)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.2984 (12.3133)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 27%|##6       | 7/26 [00:00<00:00, 36.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.07it/s] 50%|#####     | 13/26 [00:00<00:00, 40.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.54it/s] 96%|#########6| 25/26 [00:00<00:00, 45.92it/s]100%|##########| 26/26 [00:00<00:00, 39.54it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.688 (0.688)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.689 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.689 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.19 (  0.17)
Test: [  20/  26]	Loss 0.686 (0.691)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.686 (0.691)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.25 (  0.19)
Test: [  26/  26]	Loss 0.685 (0.691)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.685 (0.691)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.26 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.83it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 32/  1]	epoch_time 0.0376 (0.0382)	validation_time 0.0005 (0.0006)	train_time 0.0371 (0.0375)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5000000110566616, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.01it/s] 23%|##3       | 6/26 [00:00<00:00, 26.24it/s] 38%|###8      | 10/26 [00:00<00:00, 30.64it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.88it/s] 69%|######9   | 18/26 [00:00<00:00, 34.21it/s] 85%|########4 | 22/26 [00:00<00:00, 35.09it/s]100%|##########| 26/26 [00:00<00:00, 35.44it/s]100%|##########| 26/26 [00:00<00:00, 30.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.50)	train_minacc   0.51 (  0.50)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.2713 (12.2844)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.57it/s] 23%|##3       | 6/26 [00:00<00:00, 30.46it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.46it/s] 46%|####6     | 12/26 [00:00<00:00, 37.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.99it/s] 92%|#########2| 24/26 [00:00<00:00, 46.32it/s]100%|##########| 26/26 [00:00<00:00, 39.57it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.689 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.17 (  0.14)
Test: [  20/  26]	Loss 0.687 (0.691)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.687 (0.691)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.23 (  0.17)
Test: [  26/  26]	Loss 0.686 (0.691)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.686 (0.691)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.24 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.52it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 33/  1]	epoch_time 0.0345 (0.0381)	validation_time 0.0003 (0.0006)	train_time 0.0342 (0.0374)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5000000110566616, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.80it/s] 19%|#9        | 5/26 [00:00<00:00, 24.03it/s] 35%|###4      | 9/26 [00:00<00:00, 28.81it/s] 50%|#####     | 13/26 [00:00<00:00, 31.21it/s] 65%|######5   | 17/26 [00:00<00:00, 32.71it/s] 81%|########  | 21/26 [00:00<00:00, 33.34it/s] 96%|#########6| 25/26 [00:00<00:00, 33.97it/s]100%|##########| 26/26 [00:00<00:00, 29.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.50)	train_minacc   0.51 (  0.50)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.2475 (12.2589)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.38it/s] 35%|###4      | 9/26 [00:00<00:00, 41.01it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.01it/s] 58%|#####7    | 15/26 [00:00<00:00, 48.37it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 48.37it/s] 81%|########  | 21/26 [00:00<00:00, 47.85it/s]100%|##########| 26/26 [00:00<00:00, 42.89it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.690 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.15 (  0.13)
Test: [  20/  26]	Loss 0.688 (0.691)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.688 (0.691)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.21 (  0.15)
Test: [  26/  26]	Loss 0.687 (0.691)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.687 (0.691)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.22 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 45.61it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 34/  1]	epoch_time 0.0356 (0.0380)	validation_time 0.0005 (0.0006)	train_time 0.0351 (0.0373)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.5000000110566616, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.51it/s] 19%|#9        | 5/26 [00:00<00:00, 23.06it/s] 35%|###4      | 9/26 [00:00<00:00, 27.80it/s] 50%|#####     | 13/26 [00:00<00:00, 30.50it/s] 65%|######5   | 17/26 [00:00<00:00, 31.73it/s] 81%|########  | 21/26 [00:00<00:00, 32.88it/s] 96%|#########6| 25/26 [00:00<00:00, 33.53it/s]100%|##########| 26/26 [00:00<00:00, 28.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.50)	train_minacc   0.51 (  0.50)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.2265 (12.2365)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 27%|##6       | 7/26 [00:00<00:00, 32.85it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.85it/s] 46%|####6     | 12/26 [00:00<00:00, 39.85it/s] 65%|######5   | 17/26 [00:00<00:00, 40.39it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.39it/s] 88%|########8 | 23/26 [00:00<00:00, 45.13it/s]100%|##########| 26/26 [00:00<00:00, 37.21it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.690 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.13 (  0.11)
Test: [  20/  26]	Loss 0.688 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.688 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.19 (  0.13)
Test: [  26/  26]	Loss 0.688 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.688 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.21 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.61it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 35/  1]	epoch_time 0.0375 (0.0380)	validation_time 0.0003 (0.0006)	train_time 0.0372 (0.0373)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.49990001106262205, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.70it/s] 19%|#9        | 5/26 [00:00<00:00, 21.32it/s] 35%|###4      | 9/26 [00:00<00:00, 27.50it/s] 50%|#####     | 13/26 [00:00<00:00, 30.67it/s] 65%|######5   | 17/26 [00:00<00:00, 32.15it/s] 81%|########  | 21/26 [00:00<00:00, 33.06it/s] 96%|#########6| 25/26 [00:00<00:00, 33.88it/s]100%|##########| 26/26 [00:00<00:00, 28.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.50)	train_minacc   0.51 (  0.50)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.2081 (12.2169)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s] 27%|##6       | 7/26 [00:00<00:00, 36.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.11it/s] 50%|#####     | 13/26 [00:00<00:00, 41.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.02it/s] 96%|#########6| 25/26 [00:00<00:00, 48.28it/s]100%|##########| 26/26 [00:00<00:00, 40.80it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.690 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.11 (  0.09)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.689 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.18 (  0.11)
Test: [  26/  26]	Loss 0.688 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.688 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.19 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.49it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 36/  1]	epoch_time 0.0370 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0365 (0.0373)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.49970000991225244, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.03it/s] 19%|#9        | 5/26 [00:00<00:01, 19.72it/s] 35%|###4      | 9/26 [00:00<00:00, 25.44it/s] 50%|#####     | 13/26 [00:00<00:00, 28.13it/s] 65%|######5   | 17/26 [00:00<00:00, 30.83it/s] 81%|########  | 21/26 [00:00<00:00, 32.72it/s] 96%|#########6| 25/26 [00:00<00:00, 33.65it/s]100%|##########| 26/26 [00:00<00:00, 27.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.50)	train_minacc   0.51 (  0.50)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.1919 (12.1996)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.48it/s] 27%|##6       | 7/26 [00:00<00:00, 33.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.30it/s] 50%|#####     | 13/26 [00:00<00:00, 40.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.57it/s] 96%|#########6| 25/26 [00:00<00:00, 46.98it/s]100%|##########| 26/26 [00:00<00:00, 39.12it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.10 (  0.07)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.689 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.16 (  0.09)
Test: [  26/  26]	Loss 0.689 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.689 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.18 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.02it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 37/  1]	epoch_time 0.0360 (0.0379)	validation_time 0.0003 (0.0006)	train_time 0.0357 (0.0372)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.49920000994205477, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.09it/s] 15%|#5        | 4/26 [00:00<00:01, 20.54it/s] 31%|###       | 8/26 [00:00<00:00, 26.67it/s] 46%|####6     | 12/26 [00:00<00:00, 30.65it/s] 62%|######1   | 16/26 [00:00<00:00, 32.55it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.79it/s] 92%|#########2| 24/26 [00:00<00:00, 34.49it/s]100%|##########| 26/26 [00:00<00:00, 29.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.1778 (12.1845)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 31.87it/s] 38%|###8      | 10/26 [00:00<00:00, 46.77it/s]                                                38%|###8      | 10/26 [00:00<00:00, 46.77it/s] 62%|######1   | 16/26 [00:00<00:00, 47.21it/s]                                                62%|######1   | 16/26 [00:00<00:00, 47.21it/s] 85%|########4 | 22/26 [00:00<00:00, 50.95it/s]100%|##########| 26/26 [00:00<00:00, 44.29it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.08 (  0.06)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.15 (  0.08)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.16 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.32it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 38/  1]	epoch_time 0.0349 (0.0378)	validation_time 0.0003 (0.0006)	train_time 0.0345 (0.0372)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.4985000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.57it/s] 19%|#9        | 5/26 [00:00<00:00, 23.55it/s] 35%|###4      | 9/26 [00:00<00:00, 28.28it/s] 50%|#####     | 13/26 [00:00<00:00, 31.20it/s] 65%|######5   | 17/26 [00:00<00:00, 32.78it/s] 81%|########  | 21/26 [00:00<00:00, 33.82it/s] 96%|#########6| 25/26 [00:00<00:00, 34.38it/s]100%|##########| 26/26 [00:00<00:00, 29.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.50)	train_minacc   0.49 (  0.49)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.1654 (12.1713)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 23%|##3       | 6/26 [00:00<00:00, 53.44it/s]                                               23%|##3       | 6/26 [00:00<00:00, 53.44it/s] 46%|####6     | 12/26 [00:00<00:00, 55.64it/s] 69%|######9   | 18/26 [00:00<00:00, 51.94it/s]                                                69%|######9   | 18/26 [00:00<00:00, 51.94it/s] 92%|#########2| 24/26 [00:00<00:00, 54.11it/s]100%|##########| 26/26 [00:00<00:00, 47.57it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.07 (  0.05)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.13 (  0.07)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.15 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.26it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 39/  1]	epoch_time 0.0361 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0356 (0.0371)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.4983000132739544, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.70it/s] 15%|#5        | 4/26 [00:00<00:01, 19.06it/s] 31%|###       | 8/26 [00:00<00:00, 25.30it/s] 46%|####6     | 12/26 [00:00<00:00, 28.75it/s] 62%|######1   | 16/26 [00:00<00:00, 30.65it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.30it/s] 92%|#########2| 24/26 [00:00<00:00, 32.95it/s]100%|##########| 26/26 [00:00<00:00, 28.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.53 (  0.50)	train_minacc   0.46 (  0.49)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.1547 (12.1598)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.59it/s] 27%|##6       | 7/26 [00:00<00:00, 34.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.81it/s] 46%|####6     | 12/26 [00:00<00:00, 41.35it/s] 65%|######5   | 17/26 [00:00<00:00, 42.58it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.58it/s] 88%|########8 | 23/26 [00:00<00:00, 47.11it/s]100%|##########| 26/26 [00:00<00:00, 39.86it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.48 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.06 (  0.04)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.53 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.12 (  0.05)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.690 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.14 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.37it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 40/  1]	epoch_time 0.0359 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0355 (0.0371)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.49780001309514044, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.20it/s] 19%|#9        | 5/26 [00:00<00:01, 20.59it/s] 35%|###4      | 9/26 [00:00<00:00, 26.30it/s] 50%|#####     | 13/26 [00:00<00:00, 29.35it/s] 65%|######5   | 17/26 [00:00<00:00, 30.94it/s] 81%|########  | 21/26 [00:00<00:00, 32.66it/s] 96%|#########6| 25/26 [00:00<00:00, 33.34it/s]100%|##########| 26/26 [00:00<00:00, 27.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.53 (  0.50)	train_minacc   0.46 (  0.49)	train_majacc   0.55 (  0.50)	train_corr   0.00 (  0.00)	l1 12.1454 (12.1498)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.91it/s] 27%|##6       | 7/26 [00:00<00:00, 37.04it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.04it/s] 50%|#####     | 13/26 [00:00<00:00, 40.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.53it/s] 96%|#########6| 25/26 [00:00<00:00, 47.14it/s]100%|##########| 26/26 [00:00<00:00, 40.81it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.53 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.11 (  0.05)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.53 (  0.49)	test_minacc   0.46 (  0.49)	test_majacc   0.55 (  0.49)	Loss_d 0.691 (0.693)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.46 (  0.49)	test_majacc_d   0.55 (  0.49)	test_corr_d   0.13 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.59it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 41/  1]	epoch_time 0.0360 (0.0377)	validation_time 0.0004 (0.0006)	train_time 0.0356 (0.0370)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.4944000074863434, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.84it/s] 19%|#9        | 5/26 [00:00<00:01, 20.16it/s] 35%|###4      | 9/26 [00:00<00:00, 25.61it/s] 50%|#####     | 13/26 [00:00<00:00, 28.32it/s] 65%|######5   | 17/26 [00:00<00:00, 30.68it/s] 81%|########  | 21/26 [00:00<00:00, 31.55it/s] 96%|#########6| 25/26 [00:00<00:00, 32.32it/s]100%|##########| 26/26 [00:00<00:00, 27.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.52 (  0.49)	train_minacc   0.44 (  0.50)	train_majacc   0.54 (  0.49)	train_corr   0.00 (  0.00)	l1 12.1373 (12.1411)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.15it/s] 23%|##3       | 6/26 [00:00<00:00, 26.52it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.52it/s] 42%|####2     | 11/26 [00:00<00:00, 35.80it/s] 65%|######5   | 17/26 [00:00<00:00, 39.74it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.74it/s] 92%|#########2| 24/26 [00:00<00:00, 47.61it/s]100%|##########| 26/26 [00:00<00:00, 36.58it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.53 (  0.49)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.49)	Loss_d 0.691 (0.693)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.49)	test_corr_d   0.09 (  0.04)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.44 (  0.49)	test_majacc   0.54 (  0.49)	Loss_d 0.691 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.54 (  0.49)	test_corr_d   0.12 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.79it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 42/  1]	epoch_time 0.0372 (0.0377)	validation_time 0.0003 (0.0006)	train_time 0.0368 (0.0370)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.49050001090765, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.13it/s] 19%|#9        | 5/26 [00:00<00:01, 19.41it/s] 35%|###4      | 9/26 [00:00<00:00, 24.56it/s] 50%|#####     | 13/26 [00:00<00:00, 27.19it/s] 65%|######5   | 17/26 [00:00<00:00, 29.94it/s] 81%|########  | 21/26 [00:00<00:00, 32.03it/s] 96%|#########6| 25/26 [00:00<00:00, 32.88it/s]100%|##########| 26/26 [00:00<00:00, 26.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.51 (  0.49)	train_minacc   0.44 (  0.49)	train_majacc   0.52 (  0.48)	train_corr   0.00 (  0.00)	l1 12.1303 (12.1336)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 29.87it/s] 38%|###8      | 10/26 [00:00<00:00, 43.49it/s]                                                38%|###8      | 10/26 [00:00<00:00, 43.49it/s] 62%|######1   | 16/26 [00:00<00:00, 46.29it/s]                                                62%|######1   | 16/26 [00:00<00:00, 46.29it/s] 85%|########4 | 22/26 [00:00<00:00, 49.59it/s]100%|##########| 26/26 [00:00<00:00, 42.66it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.52 (  0.50)	test_majacc   0.52 (  0.48)	Loss_d 0.691 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.52 (  0.48)	test_corr_d   0.08 (  0.04)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.44 (  0.50)	test_majacc   0.52 (  0.48)	Loss_d 0.691 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.52 (  0.48)	test_corr_d   0.11 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.25it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 43/  1]	epoch_time 0.0356 (0.0377)	validation_time 0.0004 (0.0006)	train_time 0.0352 (0.0370)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.48460001042485235, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.16it/s] 19%|#9        | 5/26 [00:00<00:01, 17.87it/s] 35%|###4      | 9/26 [00:00<00:00, 24.37it/s] 50%|#####     | 13/26 [00:00<00:00, 28.04it/s] 65%|######5   | 17/26 [00:00<00:00, 30.43it/s] 81%|########  | 21/26 [00:00<00:00, 32.38it/s] 96%|#########6| 25/26 [00:00<00:00, 33.71it/s]100%|##########| 26/26 [00:00<00:00, 27.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.48)	train_minacc   0.49 (  0.51)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 12.1241 (12.1270)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.33it/s] 27%|##6       | 7/26 [00:00<00:00, 36.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.75it/s] 50%|#####     | 13/26 [00:00<00:00, 41.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.04it/s] 96%|#########6| 25/26 [00:00<00:00, 48.03it/s]100%|##########| 26/26 [00:00<00:00, 40.80it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.51)	test_majacc   0.47 (  0.48)	Loss_d 0.692 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.52 (  0.48)	test_minacc   0.52 (  0.51)	test_majacc   0.52 (  0.48)	Loss_d 0.691 (0.693)	test_acc_d   0.52 (  0.48)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.52 (  0.48)	test_corr_d   0.08 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.49 (  0.51)	test_majacc   0.51 (  0.47)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.51 (  0.47)	test_corr_d   0.10 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.71it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 44/  1]	epoch_time 0.0358 (0.0376)	validation_time 0.0003 (0.0006)	train_time 0.0354 (0.0370)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.47880000379681587, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.32it/s] 23%|##3       | 6/26 [00:00<00:00, 25.73it/s] 38%|###8      | 10/26 [00:00<00:00, 30.35it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.82it/s] 69%|######9   | 18/26 [00:00<00:00, 34.07it/s] 85%|########4 | 22/26 [00:00<00:00, 34.90it/s]100%|##########| 26/26 [00:00<00:00, 34.97it/s]100%|##########| 26/26 [00:00<00:00, 30.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.48)	train_minacc   0.51 (  0.51)	train_majacc   0.50 (  0.47)	train_corr   0.00 (  0.00)	l1 12.1189 (12.1213)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.74it/s] 27%|##6       | 7/26 [00:00<00:00, 32.80it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.80it/s] 50%|#####     | 13/26 [00:00<00:00, 39.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.62it/s] 96%|#########6| 25/26 [00:00<00:00, 47.33it/s]100%|##########| 26/26 [00:00<00:00, 38.87it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.59 (  0.59)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.52 (  0.51)	test_majacc   0.51 (  0.47)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.51 (  0.47)	test_corr_d   0.07 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.47)	test_minacc   0.51 (  0.52)	test_majacc   0.50 (  0.47)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.47)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.10 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.24it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 45/  1]	epoch_time 0.0359 (0.0376)	validation_time 0.0003 (0.0005)	train_time 0.0356 (0.0369)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.474200003862381, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.03it/s] 15%|#5        | 4/26 [00:00<00:01, 19.78it/s] 31%|###       | 8/26 [00:00<00:00, 25.67it/s] 46%|####6     | 12/26 [00:00<00:00, 29.28it/s] 62%|######1   | 16/26 [00:00<00:00, 30.82it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.02it/s] 92%|#########2| 24/26 [00:00<00:00, 33.02it/s]100%|##########| 26/26 [00:00<00:00, 28.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.48 (  0.47)	train_minacc   0.51 (  0.52)	train_majacc   0.47 (  0.46)	train_corr   0.00 (  0.00)	l1 12.1143 (12.1164)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.51it/s] 23%|##3       | 6/26 [00:00<00:00, 29.17it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.17it/s] 42%|####2     | 11/26 [00:00<00:00, 36.18it/s] 65%|######5   | 17/26 [00:00<00:00, 41.82it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.82it/s] 88%|########8 | 23/26 [00:00<00:00, 47.14it/s]100%|##########| 26/26 [00:00<00:00, 38.08it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.59 (  0.59)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.55 (  0.53)	test_majacc   0.46 (  0.47)	Loss_d 0.692 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.46 (  0.47)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.47)	test_minacc   0.53 (  0.52)	test_majacc   0.49 (  0.46)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.47)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.49 (  0.46)	test_corr_d   0.07 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.51 (  0.52)	test_majacc   0.47 (  0.46)	Loss_d 0.692 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.47 (  0.46)	test_corr_d   0.09 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.45it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Overall Timing[ 46/  1]	epoch_time 0.0367 (0.0376)	validation_time 0.0005 (0.0005)	train_time 0.0363 (0.0369)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.46980000922083853, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 15%|#5        | 4/26 [00:00<00:01, 19.07it/s] 31%|###       | 8/26 [00:00<00:00, 25.57it/s] 46%|####6     | 12/26 [00:00<00:00, 29.06it/s] 62%|######1   | 16/26 [00:00<00:00, 30.83it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.35it/s] 92%|#########2| 24/26 [00:00<00:00, 32.94it/s]100%|##########| 26/26 [00:00<00:00, 28.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.48 (  0.47)	train_minacc   0.56 (  0.53)	train_majacc   0.47 (  0.46)	train_corr   0.00 (  0.00)	l1 12.1103 (12.1122)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.90it/s] 27%|##6       | 7/26 [00:00<00:00, 31.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.74it/s] 50%|#####     | 13/26 [00:00<00:00, 38.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.47it/s] 96%|#########6| 25/26 [00:00<00:00, 46.14it/s]100%|##########| 26/26 [00:00<00:00, 37.72it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.61 (  0.61)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.56 (  0.53)	test_majacc   0.44 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.44 (  0.46)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.47)	test_minacc   0.55 (  0.53)	test_majacc   0.48 (  0.45)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.47)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.48 (  0.45)	test_corr_d   0.06 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.48 (  0.46)	test_minacc   0.56 (  0.53)	test_majacc   0.47 (  0.45)	Loss_d 0.692 (0.693)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.09 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.96it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 (  0.02)
Overall Timing[ 47/  1]	epoch_time 0.0360 (0.0375)	validation_time 0.0004 (0.0005)	train_time 0.0356 (0.0369)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.4637000063061714, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 19%|#9        | 5/26 [00:00<00:00, 23.56it/s] 35%|###4      | 9/26 [00:00<00:00, 27.96it/s] 50%|#####     | 13/26 [00:00<00:00, 30.28it/s] 65%|######5   | 17/26 [00:00<00:00, 32.11it/s] 81%|########  | 21/26 [00:00<00:00, 33.48it/s] 96%|#########6| 25/26 [00:00<00:00, 33.55it/s]100%|##########| 26/26 [00:00<00:00, 29.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.47 (  0.46)	train_minacc   0.56 (  0.53)	train_majacc   0.45 (  0.45)	train_corr   0.00 (  0.00)	l1 12.1069 (12.1085)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.54it/s] 31%|###       | 8/26 [00:00<00:00, 39.44it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.44it/s] 50%|#####     | 13/26 [00:00<00:00, 41.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.95it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.95it/s] 92%|#########2| 24/26 [00:00<00:00, 45.94it/s]100%|##########| 26/26 [00:00<00:00, 41.47it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.56 (  0.54)	test_majacc   0.44 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.56 (  0.54)	test_majacc_d   0.44 (  0.45)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.46)	test_minacc   0.57 (  0.54)	test_majacc   0.47 (  0.44)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.47 (  0.44)	test_corr_d   0.06 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.47 (  0.46)	test_minacc   0.56 (  0.54)	test_majacc   0.45 (  0.44)	Loss_d 0.692 (0.693)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.56 (  0.54)	test_majacc_d   0.45 (  0.44)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.77it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Overall Timing[ 48/  1]	epoch_time 0.0363 (0.0375)	validation_time 0.0004 (0.0005)	train_time 0.0359 (0.0369)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.456600003361702, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.24it/s] 19%|#9        | 5/26 [00:00<00:00, 22.77it/s] 35%|###4      | 9/26 [00:00<00:00, 28.02it/s] 50%|#####     | 13/26 [00:00<00:00, 31.16it/s] 65%|######5   | 17/26 [00:00<00:00, 32.15it/s] 81%|########  | 21/26 [00:00<00:00, 33.36it/s] 96%|#########6| 25/26 [00:00<00:00, 34.25it/s]100%|##########| 26/26 [00:00<00:00, 29.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.47 (  0.45)	train_minacc   0.56 (  0.54)	train_majacc   0.45 (  0.44)	train_corr   0.00 (  0.00)	l1 12.1040 (12.1054)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.82it/s] 35%|###4      | 9/26 [00:00<00:00, 42.65it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.65it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.27it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.27it/s] 81%|########  | 21/26 [00:00<00:00, 48.70it/s]100%|##########| 26/26 [00:00<00:00, 43.34it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.57 (  0.57)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.55)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.48 (  0.45)	test_minacc   0.57 (  0.54)	test_majacc   0.46 (  0.43)	Loss_d 0.692 (0.693)	test_acc_d   0.48 (  0.45)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.46 (  0.43)	test_corr_d   0.06 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.47 (  0.45)	test_minacc   0.56 (  0.55)	test_majacc   0.45 (  0.43)	Loss_d 0.692 (0.693)	test_acc_d   0.47 (  0.45)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.45 (  0.43)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.30it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Overall Timing[ 49/  1]	epoch_time 0.0373 (0.0375)	validation_time 0.0004 (0.0005)	train_time 0.0368 (0.0369)
record: (train_acc, test_acc) (0.639200012743473, 0.6320000290870667)
last accs (train_acc, test_acc) (0.45000000470876694, 0.531000018119812)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.096 MB of 0.096 MB uploadedwandb: \ 0.096 MB of 0.096 MB uploadedwandb: | 0.096 MB of 0.096 MB uploadedwandb: / 0.096 MB of 0.096 MB uploadedwandb: - 0.118 MB of 0.126 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▂▁▂▁▁▁▁▁▁▁▂▂▁▁▁▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/diagnostics/train_time_val █▂▂▁▁▁▁▁▂▁▂▂▂▁▂▁▁▂▂▂▂▂▁▂▁▂▂▁▂▁▁▁▁▁▂▁▁▁▁▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/Loss_avg ▆▆█▆▅█▅██▇▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/Loss_d_avg ▆▆█▆▅█▅██▇▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/Loss_d_val ▆▆█▆▅█▅██▇▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/Loss_val ▆▆█▆▅█▅██▇▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_acc_avg ▁▁▂▃▆▄▇▂▂▃▅▆███▇▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_acc_d_avg ▁▁▂▃▆▄▇▂▂▃▅▆███▇▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_acc_d_val ▁▁▂▃▆▄▇▂▂▃▅▆███▇▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_acc_val ▁▁▂▃▆▄▇▂▂▃▅▆███▇▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_corr_d_avg ██▇▇▄▆▄▇▇▇▆▅▁▁▁▂▃▃▃▃▄▃▃▃▂▂▂▂▂▂▂▂▂▂▂▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_corr_d_val ██▇▇▄▆▄▇▇▇▆▅▁▁▁▂▃▃▃▃▄▃▃▃▂▂▂▂▂▂▂▂▂▂▂▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_majacc_avg ████▇█▇████▇▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_majacc_d_avg ████▇█▇████▇▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_majacc_d_val ████▇█▇████▇▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_majacc_val ████▇█▇████▇▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_minacc_avg ▁▁▂▃▆▃▆▂▂▃▄▆███▇▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_minacc_d_avg ▁▁▂▃▆▃▆▂▂▃▄▆███▇▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_minacc_d_val ▁▁▂▃▆▃▆▂▂▃▄▆███▇▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_minacc_val ▁▁▂▃▆▃▆▂▂▃▄▆███▇▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▇▇▇▇▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/Loss_val █▅▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/l1_avg ▂▂▂▁▁▂▃▃▅▆▇▇███████▅▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/l1_val ▂▂▁▁▂▂▃▄▆▆▇████████▅▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_acc_avg ▇███████████▇▄▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_acc_val ▇▇▇▇▇▇▇▇▇▇▇█▅▄▃▃▂▂▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_majacc_avg ▇███████████▆▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_majacc_val ████████████▄▃▃▃▂▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_minacc_avg ▂▁▁▂▃▃▃▃▃▄▄▅▇██▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_minacc_val ▁▁▁▂▄▃▃▁▂▂▄▆█▇▆▆▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅▅▅▅▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_nll_avg ▆▃▃▂▂▂▂▁▁▁▁▁▃▇██████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_nll_val ▄▄▃▃▂▂▃▂▂▂▂▁▆▇██████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_penalty_avg █▂▂▂▂▂▂▂▁▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_penalty_val ▆█▅▄▃▃▅▅▃▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/diagnostics/epoch_time_val 0.0373
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/diagnostics/train_time_val 0.03685
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/diagnostics/validation_time_val 0.00044
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/Loss_avg 0.69296
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/Loss_d_avg 0.69296
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/Loss_d_val 0.69296
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/Loss_val 0.69296
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_acc_avg 0.531
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_acc_d_avg 0.531
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_acc_d_val 0.531
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_acc_val 0.531
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_corr_d_avg 0.04024
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_corr_d_val 0.04024
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_majacc_avg 0.53
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_majacc_d_avg 0.53
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_majacc_d_val 0.53
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_majacc_val 0.53
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_minacc_avg 0.53111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_minacc_d_avg 0.53111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_minacc_d_val 0.53111
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/test/test_minacc_val 0.53111
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/l1_avg 12.10538
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/l1_val 12.104
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_acc_avg 0.4537
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_acc_val 0.468
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_majacc_avg 0.43765
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_majacc_val 0.44976
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_minacc_avg 0.54252
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_minacc_val 0.56098
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_nll_avg 0.69297
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_nll_val 0.69247
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/weight_norm_avg 0.1991
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/44/logs/train/weight_norm_val 0.19892
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/phwcld8f
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_154109-phwcld8f/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_154344-12p69t22
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/12p69t22
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=13.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1197
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6025, 3, 32, 32) (5975, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:40,  1.63s/it] 19%|#9        | 5/26 [00:01<00:05,  3.73it/s] 35%|###4      | 9/26 [00:01<00:02,  7.30it/s] 50%|#####     | 13/26 [00:01<00:01, 11.06it/s] 65%|######5   | 17/26 [00:02<00:00, 15.00it/s] 81%|########  | 21/26 [00:02<00:00, 18.88it/s] 96%|#########6| 25/26 [00:02<00:00, 21.98it/s]100%|##########| 26/26 [00:02<00:00,  9.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.202 (12.647)	train_nll   0.42 (  0.56)	train_penalty   0.05 (  0.23)	weight_norm   9.78 ( 12.09)	train_acc   0.84 (  0.79)	train_minacc   0.00 (  0.08)	train_majacc   0.99 (  0.92)	train_corr   0.00 (  0.00)	l1 8.9353 (8.2568)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.39it/s] 31%|###       | 8/26 [00:00<00:00, 40.27it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.27it/s] 50%|#####     | 13/26 [00:00<00:00, 40.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.00it/s] 96%|#########6| 25/26 [00:00<00:00, 47.09it/s]100%|##########| 26/26 [00:00<00:00, 41.17it/s]
Test: [   0/  26]	Loss 0.469 (0.469)	test_acc   0.81 (  0.81)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.469 (0.469)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.426 (0.425)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.426 (0.425)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.408 (0.420)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.408 (0.420)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.425 (0.419)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.425 (0.419)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.57it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]
Test: [  0/  1]	Loss 1.859 (1.859)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.859 (1.859)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.859 (1.859)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.859 (1.859)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/45/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0771 (0.0771)	validation_time 0.0066 (0.0066)	train_time 0.0676 (0.0676)
record: (train_acc, test_acc) (0.8470000283122062, 0.11100000888109207)
last accs (train_acc, test_acc) (0.8470000283122062, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.98it/s] 19%|#9        | 5/26 [00:00<00:00, 21.30it/s] 35%|###4      | 9/26 [00:00<00:00, 27.06it/s] 50%|#####     | 13/26 [00:00<00:00, 30.36it/s] 65%|######5   | 17/26 [00:00<00:00, 31.92it/s] 81%|########  | 21/26 [00:00<00:00, 32.05it/s] 96%|#########6| 25/26 [00:00<00:00, 32.43it/s]100%|##########| 26/26 [00:00<00:00, 28.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.340 (7.415)	train_nll   0.41 (  0.42)	train_penalty   0.05 (  0.06)	weight_norm   4.93 (  7.00)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.02)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 8.9131 (9.1444)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.39it/s] 27%|##6       | 7/26 [00:00<00:00, 30.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.26it/s] 46%|####6     | 12/26 [00:00<00:00, 36.98it/s] 69%|######9   | 18/26 [00:00<00:00, 44.37it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.37it/s] 92%|#########2| 24/26 [00:00<00:00, 45.45it/s]100%|##########| 26/26 [00:00<00:00, 37.90it/s]
Test: [   0/  26]	Loss 0.465 (0.465)	test_acc   0.81 (  0.81)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.465 (0.465)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.403 (0.408)	test_acc   0.85 (  0.84)	test_minacc   0.07 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.403 (0.408)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.07 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.97)
Test: [  20/  26]	Loss 0.387 (0.404)	test_acc   0.86 (  0.85)	test_minacc   0.05 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.387 (0.404)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.05 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.398 (0.403)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.398 (0.403)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.15it/s]
Test: [  0/  1]	Loss 1.686 (1.686)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.686 (1.686)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.686 (1.686)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.686 (1.686)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/45/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0372 (0.0572)	validation_time 0.0004 (0.0035)	train_time 0.0368 (0.0522)
record: (train_acc, test_acc) (0.8482000235915184, 0.12000000476837158)
last accs (train_acc, test_acc) (0.8482000235915184, 0.12000000476837158)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.04it/s] 19%|#9        | 5/26 [00:00<00:00, 23.62it/s] 35%|###4      | 9/26 [00:00<00:00, 28.24it/s] 50%|#####     | 13/26 [00:00<00:00, 30.57it/s] 65%|######5   | 17/26 [00:00<00:00, 31.99it/s] 81%|########  | 21/26 [00:00<00:00, 33.08it/s] 96%|#########6| 25/26 [00:00<00:00, 33.45it/s]100%|##########| 26/26 [00:00<00:00, 28.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.215 (4.108)	train_nll   0.41 (  0.41)	train_penalty   0.05 (  0.05)	weight_norm   2.81 (  3.70)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.05)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 7.8333 (8.4265)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.10it/s] 27%|##6       | 7/26 [00:00<00:00, 30.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.73it/s] 50%|#####     | 13/26 [00:00<00:00, 38.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.90it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.90it/s] 96%|#########6| 25/26 [00:00<00:00, 46.02it/s]100%|##########| 26/26 [00:00<00:00, 37.07it/s]
Test: [   0/  26]	Loss 0.448 (0.448)	test_acc   0.81 (  0.81)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.448 (0.448)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.383 (0.400)	test_acc   0.85 (  0.84)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.383 (0.400)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.391 (0.397)	test_acc   0.86 (  0.85)	test_minacc   0.04 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.391 (0.397)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.04 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.399 (0.396)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.399 (0.396)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.63it/s]
Test: [  0/  1]	Loss 1.695 (1.695)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.695 (1.695)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.695 (1.695)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.695 (1.695)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Overall Timing[  2/  1]	epoch_time 0.0371 (0.0505)	validation_time 0.0003 (0.0025)	train_time 0.0368 (0.0471)
record: (train_acc, test_acc) (0.8482000235915184, 0.12000000476837158)
last accs (train_acc, test_acc) (0.8479000238180161, 0.11600000411272049)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.71it/s] 19%|#9        | 5/26 [00:00<00:00, 21.68it/s] 35%|###4      | 9/26 [00:00<00:00, 26.86it/s] 50%|#####     | 13/26 [00:00<00:00, 30.00it/s] 65%|######5   | 17/26 [00:00<00:00, 31.36it/s] 81%|########  | 21/26 [00:00<00:00, 31.02it/s] 96%|#########6| 25/26 [00:00<00:00, 32.12it/s]100%|##########| 26/26 [00:00<00:00, 27.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.129 (2.597)	train_nll   0.39 (  0.39)	train_penalty   0.04 (  0.04)	weight_norm   1.74 (  2.20)	train_acc   0.83 (  0.84)	train_minacc   0.03 (  0.06)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 6.9625 (7.3677)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.73it/s] 27%|##6       | 7/26 [00:00<00:00, 34.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.17it/s] 42%|####2     | 11/26 [00:00<00:00, 30.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.48it/s]100%|##########| 26/26 [00:00<00:00, 52.89it/s]100%|##########| 26/26 [00:00<00:00, 40.58it/s]
Test: [   0/  26]	Loss 0.439 (0.439)	test_acc   0.81 (  0.81)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 0.439 (0.439)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.360 (0.385)	test_acc   0.85 (  0.84)	test_minacc   0.07 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.360 (0.385)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.07 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  20/  26]	Loss 0.355 (0.381)	test_acc   0.86 (  0.85)	test_minacc   0.05 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.355 (0.381)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.05 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.364 (0.377)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.364 (0.377)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.43it/s]
Test: [  0/  1]	Loss 1.764 (1.764)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.98 (  0.98)	Loss_d 1.764 (1.764)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.764 (1.764)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.98 (  0.98)	Loss_d 1.764 (1.764)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/45/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0379 (0.0473)	validation_time 0.0004 (0.0019)	train_time 0.0375 (0.0447)
record: (train_acc, test_acc) (0.846900019645691, 0.1340000033378601)
last accs (train_acc, test_acc) (0.846900019645691, 0.1340000033378601)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.55it/s] 19%|#9        | 5/26 [00:00<00:01, 20.29it/s] 35%|###4      | 9/26 [00:00<00:00, 25.84it/s] 50%|#####     | 13/26 [00:00<00:00, 29.10it/s] 65%|######5   | 17/26 [00:00<00:00, 30.77it/s] 81%|########  | 21/26 [00:00<00:00, 31.88it/s] 96%|#########6| 25/26 [00:00<00:00, 32.36it/s]100%|##########| 26/26 [00:00<00:00, 27.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.498 (1.792)	train_nll   0.37 (  0.39)	train_penalty   0.03 (  0.04)	weight_norm   1.12 (  1.40)	train_acc   0.85 (  0.84)	train_minacc   0.13 (  0.07)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 6.5165 (6.7044)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.05it/s] 27%|##6       | 7/26 [00:00<00:00, 37.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.73it/s] 50%|#####     | 13/26 [00:00<00:00, 43.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.97it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.97it/s] 96%|#########6| 25/26 [00:00<00:00, 48.92it/s]100%|##########| 26/26 [00:00<00:00, 41.78it/s]
Test: [   0/  26]	Loss 0.434 (0.434)	test_acc   0.81 (  0.81)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 0.434 (0.434)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.358 (0.368)	test_acc   0.85 (  0.85)	test_minacc   0.12 (  0.07)	test_majacc   0.98 (  0.99)	Loss_d 0.358 (0.368)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.12 (  0.07)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.93 (  0.95)
Test: [  20/  26]	Loss 0.338 (0.364)	test_acc   0.86 (  0.85)	test_minacc   0.12 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.338 (0.364)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.12 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.351 (0.361)	test_acc   0.86 (  0.85)	test_minacc   0.11 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.351 (0.361)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.11 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.37it/s]
Test: [  0/  1]	Loss 1.813 (1.813)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.813 (1.813)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.813 (1.813)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.813 (1.813)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/45/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0378 (0.0454)	validation_time 0.0003 (0.0016)	train_time 0.0375 (0.0432)
record: (train_acc, test_acc) (0.849800024330616, 0.14600001275539398)
last accs (train_acc, test_acc) (0.849800024330616, 0.14600001275539398)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.38it/s] 19%|#9        | 5/26 [00:00<00:00, 23.30it/s] 35%|###4      | 9/26 [00:00<00:00, 27.94it/s] 50%|#####     | 13/26 [00:00<00:00, 30.10it/s] 65%|######5   | 17/26 [00:00<00:00, 31.70it/s] 81%|########  | 21/26 [00:00<00:00, 32.68it/s] 96%|#########6| 25/26 [00:00<00:00, 33.17it/s]100%|##########| 26/26 [00:00<00:00, 27.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.114 (1.281)	train_nll   0.39 (  0.37)	train_penalty   0.06 (  0.04)	weight_norm   0.73 (  0.91)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.10)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.7697 (6.5803)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.87it/s] 31%|###       | 8/26 [00:00<00:00, 42.13it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.13it/s] 50%|#####     | 13/26 [00:00<00:00, 44.39it/s] 69%|######9   | 18/26 [00:00<00:00, 46.52it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.52it/s] 92%|#########2| 24/26 [00:00<00:00, 50.01it/s]100%|##########| 26/26 [00:00<00:00, 42.97it/s]
Test: [   0/  26]	Loss 0.421 (0.421)	test_acc   0.82 (  0.82)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.421 (0.421)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.363 (0.367)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.363 (0.367)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.95 (  0.97)
Test: [  20/  26]	Loss 0.349 (0.364)	test_acc   0.86 (  0.85)	test_minacc   0.04 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.349 (0.364)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.04 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.370 (0.362)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.370 (0.362)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.42it/s]
Test: [  0/  1]	Loss 1.836 (1.836)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.836 (1.836)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.836 (1.836)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.836 (1.836)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Overall Timing[  5/  1]	epoch_time 0.0394 (0.0444)	validation_time 0.0015 (0.0016)	train_time 0.0378 (0.0423)
record: (train_acc, test_acc) (0.849800024330616, 0.14600001275539398)
last accs (train_acc, test_acc) (0.8497000287771225, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 19%|#9        | 5/26 [00:00<00:01, 20.19it/s] 35%|###4      | 9/26 [00:00<00:00, 25.89it/s] 50%|#####     | 13/26 [00:00<00:00, 29.45it/s] 65%|######5   | 17/26 [00:00<00:00, 31.42it/s] 81%|########  | 21/26 [00:00<00:00, 32.82it/s] 96%|#########6| 25/26 [00:00<00:00, 33.40it/s]100%|##########| 26/26 [00:00<00:00, 28.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.840 (0.959)	train_nll   0.36 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.48 (  0.60)	train_acc   0.84 (  0.85)	train_minacc   0.08 (  0.14)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 7.6583 (7.0585)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.41it/s] 35%|###4      | 9/26 [00:00<00:00, 41.25it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.25it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.06it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.06it/s] 81%|########  | 21/26 [00:00<00:00, 48.96it/s]100%|##########| 26/26 [00:00<00:00, 43.16it/s]
Test: [   0/  26]	Loss 0.402 (0.402)	test_acc   0.82 (  0.82)	test_minacc   0.12 (  0.12)	test_majacc   0.97 (  0.97)	Loss_d 0.402 (0.402)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.345 (0.347)	test_acc   0.86 (  0.85)	test_minacc   0.27 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 0.345 (0.347)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.27 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.91)
Test: [  20/  26]	Loss 0.330 (0.343)	test_acc   0.86 (  0.85)	test_minacc   0.18 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.330 (0.343)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.341 (0.339)	test_acc   0.86 (  0.85)	test_minacc   0.18 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.341 (0.339)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.27it/s]
Test: [  0/  1]	Loss 1.563 (1.563)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.96 (  0.96)	Loss_d 1.563 (1.563)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.71 (  0.71)
Test: [  1/  1]	Loss 1.563 (1.563)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.96 (  0.96)	Loss_d 1.563 (1.563)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.71 (  0.71)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/45/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0357 (0.0432)	validation_time 0.0004 (0.0014)	train_time 0.0353 (0.0413)
record: (train_acc, test_acc) (0.854900027513504, 0.2710000276565552)
last accs (train_acc, test_acc) (0.854900027513504, 0.2710000276565552)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s] 19%|#9        | 5/26 [00:00<00:01, 19.27it/s] 35%|###4      | 9/26 [00:00<00:00, 25.16it/s] 50%|#####     | 13/26 [00:00<00:00, 28.25it/s] 65%|######5   | 17/26 [00:00<00:00, 30.63it/s] 81%|########  | 21/26 [00:00<00:00, 32.45it/s] 96%|#########6| 25/26 [00:00<00:00, 33.58it/s]100%|##########| 26/26 [00:00<00:00, 27.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.688 (0.756)	train_nll   0.36 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.33 (  0.40)	train_acc   0.85 (  0.85)	train_minacc   0.21 (  0.14)	train_majacc   0.96 (  0.98)	train_corr   0.00 (  0.00)	l1 9.3712 (8.2742)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.39it/s] 35%|###4      | 9/26 [00:00<00:00, 38.62it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.62it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.90it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.90it/s] 81%|########  | 21/26 [00:00<00:00, 47.32it/s]100%|##########| 26/26 [00:00<00:00, 42.14it/s]
Test: [   0/  26]	Loss 0.422 (0.422)	test_acc   0.81 (  0.81)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.422 (0.422)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.342 (0.353)	test_acc   0.84 (  0.85)	test_minacc   0.08 (  0.06)	test_majacc   0.98 (  0.99)	Loss_d 0.342 (0.353)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.08 (  0.06)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.93 (  0.95)
Test: [  20/  26]	Loss 0.328 (0.347)	test_acc   0.86 (  0.85)	test_minacc   0.09 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.328 (0.347)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.09 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.333 (0.343)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.333 (0.343)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.95it/s]
Test: [  0/  1]	Loss 1.789 (1.789)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 1.789 (1.789)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.789 (1.789)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 1.789 (1.789)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
Overall Timing[  7/  1]	epoch_time 0.0357 (0.0422)	validation_time 0.0004 (0.0013)	train_time 0.0353 (0.0406)
record: (train_acc, test_acc) (0.854900027513504, 0.2710000276565552)
last accs (train_acc, test_acc) (0.8527000235319138, 0.18300001323223114)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 19%|#9        | 5/26 [00:00<00:00, 22.15it/s] 35%|###4      | 9/26 [00:00<00:00, 27.27it/s] 50%|#####     | 13/26 [00:00<00:00, 29.06it/s] 65%|######5   | 17/26 [00:00<00:00, 31.29it/s] 81%|########  | 21/26 [00:00<00:00, 32.92it/s] 96%|#########6| 25/26 [00:00<00:00, 34.12it/s]100%|##########| 26/26 [00:00<00:00, 28.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.580 (0.633)	train_nll   0.34 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.23 (  0.28)	train_acc   0.84 (  0.85)	train_minacc   0.16 (  0.14)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 11.1354 (10.1785)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.75it/s] 31%|###       | 8/26 [00:00<00:00, 39.10it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.10it/s] 50%|#####     | 13/26 [00:00<00:00, 41.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.76it/s] 96%|#########6| 25/26 [00:00<00:00, 47.91it/s]100%|##########| 26/26 [00:00<00:00, 41.34it/s]
Test: [   0/  26]	Loss 0.392 (0.392)	test_acc   0.83 (  0.83)	test_minacc   0.24 (  0.24)	test_majacc   0.97 (  0.97)	Loss_d 0.392 (0.392)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.337 (0.335)	test_acc   0.84 (  0.86)	test_minacc   0.30 (  0.27)	test_majacc   0.94 (  0.96)	Loss_d 0.337 (0.335)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.30 (  0.27)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.87 (  0.90)
Test: [  20/  26]	Loss 0.307 (0.328)	test_acc   0.86 (  0.86)	test_minacc   0.23 (  0.26)	test_majacc   0.97 (  0.97)	Loss_d 0.307 (0.328)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.23 (  0.26)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.320 (0.325)	test_acc   0.87 (  0.86)	test_minacc   0.32 (  0.27)	test_majacc   0.97 (  0.97)	Loss_d 0.320 (0.325)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.32 (  0.27)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.63it/s]
Test: [  0/  1]	Loss 1.661 (1.661)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 1.661 (1.661)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.70 (  0.70)
Test: [  1/  1]	Loss 1.661 (1.661)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 1.661 (1.661)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.70 (  0.70)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/45/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0354 (0.0415)	validation_time 0.0004 (0.0012)	train_time 0.0350 (0.0400)
record: (train_acc, test_acc) (0.8614000206589699, 0.30300000309944153)
last accs (train_acc, test_acc) (0.8614000206589699, 0.30300000309944153)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.89it/s] 19%|#9        | 5/26 [00:00<00:01, 19.28it/s] 35%|###4      | 9/26 [00:00<00:00, 25.49it/s] 50%|#####     | 13/26 [00:00<00:00, 29.46it/s] 65%|######5   | 17/26 [00:00<00:00, 31.63it/s] 81%|########  | 21/26 [00:00<00:00, 32.68it/s] 96%|#########6| 25/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 27.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.527 (0.546)	train_nll   0.35 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.17 (  0.20)	train_acc   0.85 (  0.85)	train_minacc   0.18 (  0.18)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 12.9395 (11.9890)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.62it/s] 27%|##6       | 7/26 [00:00<00:00, 33.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.94it/s] 50%|#####     | 13/26 [00:00<00:00, 41.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.33it/s] 96%|#########6| 25/26 [00:00<00:00, 47.47it/s]100%|##########| 26/26 [00:00<00:00, 39.73it/s]
Test: [   0/  26]	Loss 0.410 (0.410)	test_acc   0.81 (  0.81)	test_minacc   0.03 (  0.03)	test_majacc   0.98 (  0.98)	Loss_d 0.410 (0.410)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.334 (0.340)	test_acc   0.85 (  0.85)	test_minacc   0.12 (  0.07)	test_majacc   0.98 (  0.99)	Loss_d 0.334 (0.340)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.12 (  0.07)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.92 (  0.94)
Test: [  20/  26]	Loss 0.310 (0.334)	test_acc   0.86 (  0.85)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.310 (0.334)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.331 (0.330)	test_acc   0.85 (  0.85)	test_minacc   0.08 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.331 (0.330)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.08 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.14it/s]
Test: [  0/  1]	Loss 1.769 (1.769)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.97 (  0.97)	Loss_d 1.769 (1.769)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.769 (1.769)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.97 (  0.97)	Loss_d 1.769 (1.769)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.82 (  0.82)
Overall Timing[  9/  1]	epoch_time 0.0364 (0.0410)	validation_time 0.0008 (0.0012)	train_time 0.0356 (0.0395)
record: (train_acc, test_acc) (0.8614000206589699, 0.30300000309944153)
last accs (train_acc, test_acc) (0.8537000215649605, 0.1980000138282776)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s] 19%|#9        | 5/26 [00:00<00:00, 21.10it/s] 35%|###4      | 9/26 [00:00<00:00, 27.40it/s] 50%|#####     | 13/26 [00:00<00:00, 30.43it/s] 65%|######5   | 17/26 [00:00<00:00, 32.57it/s] 81%|########  | 21/26 [00:00<00:00, 33.91it/s] 96%|#########6| 25/26 [00:00<00:00, 34.27it/s]100%|##########| 26/26 [00:00<00:00, 28.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.469 (0.495)	train_nll   0.33 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.14 (  0.16)	train_acc   0.86 (  0.85)	train_minacc   0.29 (  0.19)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 15.1083 (13.9844)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.82it/s] 27%|##6       | 7/26 [00:00<00:00, 34.34it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.34it/s] 50%|#####     | 13/26 [00:00<00:00, 40.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.53it/s] 96%|#########6| 25/26 [00:00<00:00, 47.10it/s]100%|##########| 26/26 [00:00<00:00, 39.50it/s]
Test: [   0/  26]	Loss 0.391 (0.391)	test_acc   0.84 (  0.84)	test_minacc   0.35 (  0.35)	test_majacc   0.95 (  0.95)	Loss_d 0.391 (0.391)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.346 (0.333)	test_acc   0.85 (  0.85)	test_minacc   0.52 (  0.39)	test_majacc   0.92 (  0.94)	Loss_d 0.346 (0.333)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.52 (  0.39)	test_majacc_d   0.92 (  0.94)	test_corr_d   0.80 (  0.85)
Test: [  20/  26]	Loss 0.284 (0.326)	test_acc   0.88 (  0.86)	test_minacc   0.44 (  0.38)	test_majacc   0.95 (  0.94)	Loss_d 0.284 (0.326)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.44 (  0.38)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.87 (  0.85)
Test: [  26/  26]	Loss 0.287 (0.322)	test_acc   0.86 (  0.86)	test_minacc   0.37 (  0.40)	test_majacc   0.94 (  0.94)	Loss_d 0.287 (0.322)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.37 (  0.40)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.43it/s]
Test: [  0/  1]	Loss 1.477 (1.477)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 1.477 (1.477)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.48 (  0.48)
Test: [  1/  1]	Loss 1.477 (1.477)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 1.477 (1.477)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.48 (  0.48)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/45/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0352 (0.0404)	validation_time 0.0003 (0.0011)	train_time 0.0348 (0.0391)
record: (train_acc, test_acc) (0.8617000271081925, 0.42000001668930054)
last accs (train_acc, test_acc) (0.8617000271081925, 0.42000001668930054)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.05it/s] 19%|#9        | 5/26 [00:00<00:00, 23.98it/s] 35%|###4      | 9/26 [00:00<00:00, 29.69it/s] 50%|#####     | 13/26 [00:00<00:00, 32.55it/s] 65%|######5   | 17/26 [00:00<00:00, 34.27it/s] 81%|########  | 21/26 [00:00<00:00, 35.38it/s] 96%|#########6| 25/26 [00:00<00:00, 36.20it/s]100%|##########| 26/26 [00:00<00:00, 30.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.457 (0.466)	train_nll   0.33 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.13 (  0.13)	train_acc   0.84 (  0.86)	train_minacc   0.24 (  0.24)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 17.1697 (16.2023)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.14it/s] 27%|##6       | 7/26 [00:00<00:00, 35.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.25it/s] 50%|#####     | 13/26 [00:00<00:00, 41.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.94it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.94it/s] 96%|#########6| 25/26 [00:00<00:00, 47.27it/s]100%|##########| 26/26 [00:00<00:00, 39.42it/s]
Test: [   0/  26]	Loss 0.395 (0.395)	test_acc   0.82 (  0.82)	test_minacc   0.18 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.395 (0.395)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.324 (0.328)	test_acc   0.85 (  0.85)	test_minacc   0.30 (  0.21)	test_majacc   0.95 (  0.97)	Loss_d 0.324 (0.328)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.30 (  0.21)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.88 (  0.91)
Test: [  20/  26]	Loss 0.305 (0.320)	test_acc   0.86 (  0.86)	test_minacc   0.25 (  0.22)	test_majacc   0.96 (  0.97)	Loss_d 0.305 (0.320)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.25 (  0.22)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.305 (0.315)	test_acc   0.87 (  0.86)	test_minacc   0.21 (  0.22)	test_majacc   0.99 (  0.97)	Loss_d 0.305 (0.315)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.21 (  0.22)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.93 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.34it/s]
Test: [  0/  1]	Loss 1.663 (1.663)	test_acc   0.31 (  0.31)	test_minacc   0.23 (  0.23)	test_majacc   0.96 (  0.96)	Loss_d 1.663 (1.663)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 1.663 (1.663)	test_acc   0.31 (  0.31)	test_minacc   0.23 (  0.23)	test_majacc   0.96 (  0.96)	Loss_d 1.663 (1.663)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.67 (  0.67)
Overall Timing[ 11/  1]	epoch_time 0.0359 (0.0401)	validation_time 0.0003 (0.0010)	train_time 0.0356 (0.0388)
record: (train_acc, test_acc) (0.8617000271081925, 0.42000001668930054)
last accs (train_acc, test_acc) (0.8612000216245651, 0.3050000071525574)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 19%|#9        | 5/26 [00:00<00:00, 21.77it/s] 35%|###4      | 9/26 [00:00<00:00, 28.00it/s] 50%|#####     | 13/26 [00:00<00:00, 30.83it/s] 65%|######5   | 17/26 [00:00<00:00, 32.76it/s] 81%|########  | 21/26 [00:00<00:00, 34.05it/s] 96%|#########6| 25/26 [00:00<00:00, 34.74it/s]100%|##########| 26/26 [00:00<00:00, 29.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.471 (0.459)	train_nll   0.35 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.12 (  0.12)	train_acc   0.83 (  0.86)	train_minacc   0.16 (  0.25)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 18.5923 (17.8303)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.10it/s] 31%|###       | 8/26 [00:00<00:00, 40.13it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.13it/s] 50%|#####     | 13/26 [00:00<00:00, 41.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.62it/s] 96%|#########6| 25/26 [00:00<00:00, 48.44it/s]100%|##########| 26/26 [00:00<00:00, 41.16it/s]
Test: [   0/  26]	Loss 0.387 (0.387)	test_acc   0.82 (  0.82)	test_minacc   0.17 (  0.17)	test_majacc   0.96 (  0.96)	Loss_d 0.387 (0.387)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.332 (0.329)	test_acc   0.85 (  0.85)	test_minacc   0.27 (  0.19)	test_majacc   0.96 (  0.97)	Loss_d 0.332 (0.329)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.27 (  0.19)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.89 (  0.91)
Test: [  20/  26]	Loss 0.292 (0.319)	test_acc   0.86 (  0.86)	test_minacc   0.21 (  0.21)	test_majacc   0.97 (  0.98)	Loss_d 0.292 (0.319)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.304 (0.314)	test_acc   0.86 (  0.86)	test_minacc   0.24 (  0.22)	test_majacc   0.97 (  0.98)	Loss_d 0.304 (0.314)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.24 (  0.22)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.13it/s]
Test: [  0/  1]	Loss 1.573 (1.573)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 1.573 (1.573)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.70 (  0.70)
Test: [  1/  1]	Loss 1.573 (1.573)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 1.573 (1.573)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.70 (  0.70)
Overall Timing[ 12/  1]	epoch_time 0.0362 (0.0398)	validation_time 0.0004 (0.0010)	train_time 0.0358 (0.0386)
record: (train_acc, test_acc) (0.8617000271081925, 0.42000001668930054)
last accs (train_acc, test_acc) (0.8632000210881233, 0.27900001406669617)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.55it/s] 19%|#9        | 5/26 [00:00<00:00, 21.36it/s] 35%|###4      | 9/26 [00:00<00:00, 27.66it/s] 50%|#####     | 13/26 [00:00<00:00, 31.12it/s] 65%|######5   | 17/26 [00:00<00:00, 32.98it/s] 81%|########  | 21/26 [00:00<00:00, 34.35it/s] 96%|#########6| 25/26 [00:00<00:00, 35.23it/s]100%|##########| 26/26 [00:00<00:00, 29.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.431 (0.437)	train_nll   0.33 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.10 (  0.11)	train_acc   0.85 (  0.86)	train_minacc   0.29 (  0.27)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 19.8099 (19.1870)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.90it/s] 27%|##6       | 7/26 [00:00<00:00, 32.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.21it/s] 50%|#####     | 13/26 [00:00<00:00, 38.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.07it/s] 96%|#########6| 25/26 [00:00<00:00, 44.88it/s]100%|##########| 26/26 [00:00<00:00, 37.77it/s]
Test: [   0/  26]	Loss 0.359 (0.359)	test_acc   0.83 (  0.83)	test_minacc   0.28 (  0.28)	test_majacc   0.96 (  0.96)	Loss_d 0.359 (0.359)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.335 (0.323)	test_acc   0.84 (  0.85)	test_minacc   0.40 (  0.33)	test_majacc   0.92 (  0.94)	Loss_d 0.335 (0.323)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.40 (  0.33)	test_majacc_d   0.92 (  0.94)	test_corr_d   0.84 (  0.87)
Test: [  20/  26]	Loss 0.300 (0.315)	test_acc   0.87 (  0.86)	test_minacc   0.37 (  0.34)	test_majacc   0.96 (  0.95)	Loss_d 0.300 (0.315)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.37 (  0.34)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.89 (  0.88)
Test: [  26/  26]	Loss 0.283 (0.311)	test_acc   0.88 (  0.86)	test_minacc   0.39 (  0.35)	test_majacc   0.97 (  0.95)	Loss_d 0.283 (0.311)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.39 (  0.35)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.89 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.34it/s]
Test: [  0/  1]	Loss 1.524 (1.524)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.94 (  0.94)	Loss_d 1.524 (1.524)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 1.524 (1.524)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.94 (  0.94)	Loss_d 1.524 (1.524)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.58 (  0.58)
Overall Timing[ 13/  1]	epoch_time 0.0353 (0.0395)	validation_time 0.0005 (0.0009)	train_time 0.0348 (0.0383)
record: (train_acc, test_acc) (0.8617000271081925, 0.42000001668930054)
last accs (train_acc, test_acc) (0.8594000248908996, 0.3710000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 19%|#9        | 5/26 [00:00<00:00, 21.32it/s] 35%|###4      | 9/26 [00:00<00:00, 26.86it/s] 50%|#####     | 13/26 [00:00<00:00, 29.42it/s] 65%|######5   | 17/26 [00:00<00:00, 31.80it/s] 81%|########  | 21/26 [00:00<00:00, 32.82it/s] 96%|#########6| 25/26 [00:00<00:00, 33.90it/s]100%|##########| 26/26 [00:00<00:00, 28.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.432 (0.427)	train_nll   0.33 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.86 (  0.86)	train_minacc   0.26 (  0.28)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 20.9946 (20.4291)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 19%|#9        | 5/26 [00:00<00:00, 24.34it/s] 38%|###8      | 10/26 [00:00<00:00, 33.39it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.39it/s] 62%|######1   | 16/26 [00:00<00:00, 42.44it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.44it/s] 85%|########4 | 22/26 [00:00<00:00, 44.94it/s]100%|##########| 26/26 [00:00<00:00, 38.02it/s]
Test: [   0/  26]	Loss 0.383 (0.383)	test_acc   0.83 (  0.83)	test_minacc   0.25 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 0.383 (0.383)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.322 (0.324)	test_acc   0.86 (  0.86)	test_minacc   0.40 (  0.29)	test_majacc   0.94 (  0.96)	Loss_d 0.322 (0.324)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.40 (  0.29)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.86 (  0.89)
Test: [  20/  26]	Loss 0.298 (0.317)	test_acc   0.87 (  0.86)	test_minacc   0.32 (  0.31)	test_majacc   0.96 (  0.96)	Loss_d 0.298 (0.317)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.32 (  0.31)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.89)
Test: [  26/  26]	Loss 0.305 (0.313)	test_acc   0.86 (  0.87)	test_minacc   0.29 (  0.32)	test_majacc   0.97 (  0.96)	Loss_d 0.305 (0.313)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.29 (  0.32)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.89 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.16it/s]
Test: [  0/  1]	Loss 1.595 (1.595)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.95 (  0.95)	Loss_d 1.595 (1.595)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.64 (  0.64)
Test: [  1/  1]	Loss 1.595 (1.595)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.95 (  0.95)	Loss_d 1.595 (1.595)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.64 (  0.64)
Overall Timing[ 14/  1]	epoch_time 0.0371 (0.0393)	validation_time 0.0004 (0.0009)	train_time 0.0367 (0.0382)
record: (train_acc, test_acc) (0.8617000271081925, 0.42000001668930054)
last accs (train_acc, test_acc) (0.866000019967556, 0.34200000762939453)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.61it/s] 19%|#9        | 5/26 [00:00<00:00, 22.76it/s] 35%|###4      | 9/26 [00:00<00:00, 27.62it/s] 50%|#####     | 13/26 [00:00<00:00, 30.13it/s] 65%|######5   | 17/26 [00:00<00:00, 32.03it/s] 81%|########  | 21/26 [00:00<00:00, 32.71it/s] 96%|#########6| 25/26 [00:00<00:00, 33.26it/s]100%|##########| 26/26 [00:00<00:00, 28.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.168)	train_nll   0.58 (  0.40)	train_penalty   0.00 (  0.01)	weight_norm   0.12 (  0.10)	train_acc   0.70 (  0.81)	train_minacc   0.68 (  0.48)	train_majacc   0.71 (  0.86)	train_corr   0.00 (  0.00)	l1 21.6805 (21.4337)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 27%|##6       | 7/26 [00:00<00:00, 31.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.29it/s] 50%|#####     | 13/26 [00:00<00:00, 38.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.72it/s] 96%|#########6| 25/26 [00:00<00:00, 45.70it/s]100%|##########| 26/26 [00:00<00:00, 37.41it/s]
Test: [   0/  26]	Loss 0.623 (0.623)	test_acc   0.63 (  0.63)	test_minacc   0.49 (  0.49)	test_majacc   0.66 (  0.66)	Loss_d 0.623 (0.623)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.634 (0.615)	test_acc   0.65 (  0.66)	test_minacc   0.70 (  0.59)	test_majacc   0.64 (  0.67)	Loss_d 0.634 (0.615)	test_acc_d   0.65 (  0.66)	test_minacc_d   0.70 (  0.59)	test_majacc_d   0.64 (  0.67)	test_corr_d   0.19 (  0.30)
Test: [  20/  26]	Loss 0.661 (0.614)	test_acc   0.62 (  0.66)	test_minacc   0.53 (  0.61)	test_majacc   0.64 (  0.67)	Loss_d 0.661 (0.614)	test_acc_d   0.62 (  0.66)	test_minacc_d   0.53 (  0.61)	test_majacc_d   0.64 (  0.67)	test_corr_d   0.26 (  0.30)
Test: [  26/  26]	Loss 0.583 (0.612)	test_acc   0.70 (  0.67)	test_minacc   0.66 (  0.61)	test_majacc   0.71 (  0.68)	Loss_d 0.583 (0.612)	test_acc_d   0.70 (  0.67)	test_minacc_d   0.66 (  0.61)	test_majacc_d   0.71 (  0.68)	test_corr_d   0.36 (  0.31)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.59it/s]
Test: [  0/  1]	Loss 0.667 (0.667)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.58 (  0.58)	Loss_d 0.667 (0.667)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.667 (0.667)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.58 (  0.58)	Loss_d 0.667 (0.667)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.21 ( -0.21)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/45/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0356 (0.0391)	validation_time 0.0003 (0.0009)	train_time 0.0353 (0.0380)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.63it/s] 19%|#9        | 5/26 [00:00<00:01, 18.58it/s] 35%|###4      | 9/26 [00:00<00:00, 24.61it/s] 50%|#####     | 13/26 [00:00<00:00, 27.94it/s] 65%|######5   | 17/26 [00:00<00:00, 30.04it/s] 81%|########  | 21/26 [00:00<00:00, 31.51it/s] 96%|#########6| 25/26 [00:00<00:00, 31.74it/s]100%|##########| 26/26 [00:00<00:00, 26.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.69 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.45 (  0.58)	train_minacc   0.66 (  0.61)	train_majacc   0.41 (  0.58)	train_corr   0.00 (  0.00)	l1 21.5562 (21.6066)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.14it/s] 27%|##6       | 7/26 [00:00<00:00, 31.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.03it/s] 50%|#####     | 13/26 [00:00<00:00, 38.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.56it/s] 96%|#########6| 25/26 [00:00<00:00, 46.18it/s]100%|##########| 26/26 [00:00<00:00, 37.46it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.43 (  0.43)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.696 (0.696)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.685 (0.691)	test_acc   0.45 (  0.45)	test_minacc   0.53 (  0.60)	test_majacc   0.43 (  0.42)	Loss_d 0.685 (0.691)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.53 (  0.60)	test_majacc_d   0.43 (  0.42)	test_corr_d   0.07 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.690)	test_acc   0.44 (  0.45)	test_minacc   0.56 (  0.60)	test_majacc   0.41 (  0.42)	Loss_d 0.692 (0.690)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.56 (  0.60)	test_majacc_d   0.41 (  0.42)	test_corr_d   0.10 (  0.07)
Test: [  26/  26]	Loss 0.687 (0.690)	test_acc   0.45 (  0.45)	test_minacc   0.66 (  0.60)	test_majacc   0.41 (  0.42)	Loss_d 0.687 (0.690)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.66 (  0.60)	test_majacc_d   0.41 (  0.42)	test_corr_d   0.08 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.47it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.43 (  0.43)	Loss_d 0.686 (0.686)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.43 (  0.43)	Loss_d 0.686 (0.686)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 16/  1]	epoch_time 0.0377 (0.0390)	validation_time 0.0004 (0.0008)	train_time 0.0372 (0.0380)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.44710000458359717, 0.6030000448226929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.14it/s] 19%|#9        | 5/26 [00:00<00:01, 18.11it/s] 35%|###4      | 9/26 [00:00<00:00, 24.11it/s] 50%|#####     | 13/26 [00:00<00:00, 27.76it/s] 65%|######5   | 17/26 [00:00<00:00, 29.86it/s] 81%|########  | 21/26 [00:00<00:00, 31.58it/s] 96%|#########6| 25/26 [00:00<00:00, 32.42it/s]100%|##########| 26/26 [00:00<00:00, 26.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.46 (  0.46)	train_minacc   0.50 (  0.59)	train_majacc   0.46 (  0.43)	train_corr   0.00 (  0.00)	l1 21.4984 (21.5205)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.33it/s] 27%|##6       | 7/26 [00:00<00:00, 37.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.22it/s] 50%|#####     | 13/26 [00:00<00:00, 43.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.78it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.78it/s] 96%|#########6| 25/26 [00:00<00:00, 49.00it/s]100%|##########| 26/26 [00:00<00:00, 40.69it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.38 (  0.38)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.56 (  0.52)	test_minacc   0.50 (  0.52)	test_majacc   0.57 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.06 (  0.03)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.55 (  0.52)	test_minacc   0.39 (  0.51)	test_majacc   0.57 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.11 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.691)	test_acc   0.47 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.46 (  0.52)	Loss_d 0.694 (0.691)	test_acc_d   0.47 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.46 (  0.52)	test_corr_d  -0.02 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.96it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.62 (  0.62)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.62 (  0.62)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 17/  1]	epoch_time 0.0360 (0.0388)	validation_time 0.0003 (0.0008)	train_time 0.0357 (0.0378)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5201000133156777, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.40it/s] 19%|#9        | 5/26 [00:00<00:00, 23.43it/s] 35%|###4      | 9/26 [00:00<00:00, 28.29it/s] 50%|#####     | 13/26 [00:00<00:00, 31.02it/s] 65%|######5   | 17/26 [00:00<00:00, 32.53it/s] 81%|########  | 21/26 [00:00<00:00, 33.38it/s] 96%|#########6| 25/26 [00:00<00:00, 33.69it/s]100%|##########| 26/26 [00:00<00:00, 29.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.40 (  0.53)	train_minacc   0.71 (  0.49)	train_majacc   0.34 (  0.54)	train_corr   0.00 (  0.00)	l1 21.4875 (21.4914)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.07it/s] 27%|##6       | 7/26 [00:00<00:00, 35.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.13it/s] 50%|#####     | 13/26 [00:00<00:00, 40.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.23it/s] 96%|#########6| 25/26 [00:00<00:00, 47.44it/s]100%|##########| 26/26 [00:00<00:00, 39.82it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.42 (  0.42)	test_minacc   0.47 (  0.47)	test_majacc   0.41 (  0.41)	Loss_d 0.695 (0.695)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.44)	test_minacc   0.60 (  0.62)	test_majacc   0.42 (  0.41)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.60 (  0.62)	test_majacc_d   0.42 (  0.41)	test_corr_d  -0.05 ( -0.07)
Test: [  20/  26]	Loss 0.692 (0.694)	test_acc   0.49 (  0.45)	test_minacc   0.44 (  0.61)	test_majacc   0.50 (  0.42)	Loss_d 0.692 (0.694)	test_acc_d   0.49 (  0.45)	test_minacc_d   0.44 (  0.61)	test_majacc_d   0.50 (  0.42)	test_corr_d   0.07 ( -0.07)
Test: [  26/  26]	Loss 0.697 (0.694)	test_acc   0.40 (  0.45)	test_minacc   0.71 (  0.61)	test_majacc   0.34 (  0.42)	Loss_d 0.697 (0.694)	test_acc_d   0.40 (  0.45)	test_minacc_d   0.71 (  0.61)	test_majacc_d   0.34 (  0.42)	test_corr_d  -0.20 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.82it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 18/  1]	epoch_time 0.0355 (0.0386)	validation_time 0.0004 (0.0008)	train_time 0.0351 (0.0377)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.4451000044345856, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.01it/s] 23%|##3       | 6/26 [00:00<00:00, 25.61it/s] 38%|###8      | 10/26 [00:00<00:00, 29.60it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.70it/s] 69%|######9   | 18/26 [00:00<00:00, 32.81it/s] 85%|########4 | 22/26 [00:00<00:00, 33.89it/s]100%|##########| 26/26 [00:00<00:00, 34.58it/s]100%|##########| 26/26 [00:00<00:00, 29.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.36 (  0.50)	train_minacc   0.71 (  0.53)	train_majacc   0.30 (  0.50)	train_corr   0.00 (  0.00)	l1 21.4844 (21.4866)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.56it/s] 35%|###4      | 9/26 [00:00<00:00, 40.79it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.79it/s] 58%|#####7    | 15/26 [00:00<00:00, 48.06it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 48.06it/s] 81%|########  | 21/26 [00:00<00:00, 48.48it/s]100%|##########| 26/26 [00:00<00:00, 43.26it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.41 (  0.41)	test_minacc   0.54 (  0.54)	test_majacc   0.38 (  0.38)	Loss_d 0.695 (0.695)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.695 (0.695)	test_acc   0.42 (  0.41)	test_minacc   0.67 (  0.65)	test_majacc   0.38 (  0.37)	Loss_d 0.695 (0.695)	test_acc_d   0.42 (  0.41)	test_minacc_d   0.67 (  0.65)	test_majacc_d   0.38 (  0.37)	test_corr_d  -0.11 ( -0.11)
Test: [  20/  26]	Loss 0.692 (0.695)	test_acc   0.46 (  0.42)	test_minacc   0.46 (  0.64)	test_majacc   0.46 (  0.38)	Loss_d 0.692 (0.695)	test_acc_d   0.46 (  0.42)	test_minacc_d   0.46 (  0.64)	test_majacc_d   0.46 (  0.38)	test_corr_d   0.08 ( -0.10)
Test: [  26/  26]	Loss 0.697 (0.695)	test_acc   0.37 (  0.42)	test_minacc   0.74 (  0.64)	test_majacc   0.30 (  0.38)	Loss_d 0.697 (0.695)	test_acc_d   0.37 (  0.42)	test_minacc_d   0.74 (  0.64)	test_majacc_d   0.30 (  0.38)	test_corr_d  -0.30 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 49.31it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 19/  1]	epoch_time 0.0350 (0.0385)	validation_time 0.0004 (0.0008)	train_time 0.0345 (0.0375)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.4154000056087971, 0.5840000510215759)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.80it/s] 19%|#9        | 5/26 [00:00<00:01, 19.77it/s] 35%|###4      | 9/26 [00:00<00:00, 26.07it/s] 50%|#####     | 13/26 [00:00<00:00, 29.69it/s] 65%|######5   | 17/26 [00:00<00:00, 31.58it/s] 81%|########  | 21/26 [00:00<00:00, 32.73it/s] 96%|#########6| 25/26 [00:00<00:00, 33.78it/s]100%|##########| 26/26 [00:00<00:00, 27.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.33 (  0.50)	train_minacc   0.71 (  0.52)	train_majacc   0.26 (  0.50)	train_corr   0.00 (  0.00)	l1 21.4821 (21.4840)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.45it/s] 31%|###       | 8/26 [00:00<00:00, 40.21it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.21it/s] 50%|#####     | 13/26 [00:00<00:00, 42.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.36it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.36it/s] 96%|#########6| 25/26 [00:00<00:00, 48.21it/s]100%|##########| 26/26 [00:00<00:00, 41.30it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.43)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.695 (0.695)	test_acc   0.42 (  0.41)	test_minacc   0.67 (  0.65)	test_majacc   0.37 (  0.37)	Loss_d 0.695 (0.695)	test_acc_d   0.42 (  0.41)	test_minacc_d   0.67 (  0.65)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.14 ( -0.13)
Test: [  20/  26]	Loss 0.692 (0.695)	test_acc   0.46 (  0.42)	test_minacc   0.46 (  0.63)	test_majacc   0.46 (  0.38)	Loss_d 0.692 (0.695)	test_acc_d   0.46 (  0.42)	test_minacc_d   0.46 (  0.63)	test_majacc_d   0.46 (  0.38)	test_corr_d   0.09 ( -0.12)
Test: [  26/  26]	Loss 0.698 (0.695)	test_acc   0.35 (  0.42)	test_minacc   0.71 (  0.64)	test_majacc   0.28 (  0.38)	Loss_d 0.698 (0.695)	test_acc_d   0.35 (  0.42)	test_minacc_d   0.71 (  0.64)	test_majacc_d   0.28 (  0.38)	test_corr_d  -0.33 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.41it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 20/  1]	epoch_time 0.0367 (0.0384)	validation_time 0.0004 (0.0008)	train_time 0.0363 (0.0375)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.42020000502467153, 0.5910000205039978)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 19%|#9        | 5/26 [00:00<00:01, 20.93it/s] 35%|###4      | 9/26 [00:00<00:00, 26.56it/s] 50%|#####     | 13/26 [00:00<00:00, 29.90it/s] 65%|######5   | 17/26 [00:00<00:00, 32.00it/s] 81%|########  | 21/26 [00:00<00:00, 33.43it/s] 96%|#########6| 25/26 [00:00<00:00, 33.90it/s]100%|##########| 26/26 [00:00<00:00, 28.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.32 (  0.50)	train_minacc   0.71 (  0.53)	train_majacc   0.25 (  0.50)	train_corr   0.00 (  0.00)	l1 21.4802 (21.4818)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 19%|#9        | 5/26 [00:00<00:00, 25.13it/s]                                               19%|#9        | 5/26 [00:00<00:00, 25.13it/s] 42%|####2     | 11/26 [00:00<00:00, 38.50it/s] 62%|######1   | 16/26 [00:00<00:00, 41.49it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.49it/s] 85%|########4 | 22/26 [00:00<00:00, 47.28it/s]100%|##########| 26/26 [00:00<00:00, 38.35it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.39 (  0.39)	test_minacc   0.51 (  0.51)	test_majacc   0.37 (  0.37)	Loss_d 0.695 (0.695)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.40 (  0.40)	test_minacc   0.72 (  0.66)	test_majacc   0.34 (  0.35)	Loss_d 0.695 (0.694)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.72 (  0.66)	test_majacc_d   0.34 (  0.35)	test_corr_d  -0.17 ( -0.13)
Test: [  20/  26]	Loss 0.692 (0.694)	test_acc   0.46 (  0.41)	test_minacc   0.46 (  0.64)	test_majacc   0.46 (  0.36)	Loss_d 0.692 (0.694)	test_acc_d   0.46 (  0.41)	test_minacc_d   0.46 (  0.64)	test_majacc_d   0.46 (  0.36)	test_corr_d   0.10 ( -0.12)
Test: [  26/  26]	Loss 0.696 (0.694)	test_acc   0.35 (  0.41)	test_minacc   0.76 (  0.64)	test_majacc   0.28 (  0.36)	Loss_d 0.696 (0.694)	test_acc_d   0.35 (  0.41)	test_minacc_d   0.76 (  0.64)	test_majacc_d   0.28 (  0.36)	test_corr_d  -0.35 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.25it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 21/  1]	epoch_time 0.0368 (0.0383)	validation_time 0.0004 (0.0007)	train_time 0.0364 (0.0374)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.40550000610947606, 0.612000048160553)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 19%|#9        | 5/26 [00:00<00:00, 22.87it/s] 35%|###4      | 9/26 [00:00<00:00, 28.09it/s] 50%|#####     | 13/26 [00:00<00:00, 30.26it/s] 65%|######5   | 17/26 [00:00<00:00, 31.67it/s] 81%|########  | 21/26 [00:00<00:00, 33.02it/s] 96%|#########6| 25/26 [00:00<00:00, 33.96it/s]100%|##########| 26/26 [00:00<00:00, 28.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.36 (  0.48)	train_minacc   0.68 (  0.55)	train_majacc   0.31 (  0.47)	train_corr   0.00 (  0.00)	l1 21.4791 (21.4804)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.26it/s] 27%|##6       | 7/26 [00:00<00:00, 36.43it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.43it/s] 50%|#####     | 13/26 [00:00<00:00, 41.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.32it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.32it/s] 96%|#########6| 25/26 [00:00<00:00, 47.79it/s]100%|##########| 26/26 [00:00<00:00, 40.45it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.40 (  0.40)	test_minacc   0.54 (  0.54)	test_majacc   0.36 (  0.36)	Loss_d 0.695 (0.695)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.36 (  0.36)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.695 (0.695)	test_acc   0.38 (  0.40)	test_minacc   0.70 (  0.66)	test_majacc   0.33 (  0.36)	Loss_d 0.695 (0.695)	test_acc_d   0.38 (  0.40)	test_minacc_d   0.70 (  0.66)	test_majacc_d   0.33 (  0.36)	test_corr_d  -0.18 ( -0.14)
Test: [  20/  26]	Loss 0.692 (0.695)	test_acc   0.41 (  0.40)	test_minacc   0.54 (  0.65)	test_majacc   0.39 (  0.36)	Loss_d 0.692 (0.695)	test_acc_d   0.41 (  0.40)	test_minacc_d   0.54 (  0.65)	test_majacc_d   0.39 (  0.36)	test_corr_d   0.09 ( -0.13)
Test: [  26/  26]	Loss 0.696 (0.695)	test_acc   0.36 (  0.40)	test_minacc   0.66 (  0.65)	test_majacc   0.31 (  0.36)	Loss_d 0.696 (0.695)	test_acc_d   0.36 (  0.40)	test_minacc_d   0.66 (  0.65)	test_majacc_d   0.31 (  0.36)	test_corr_d  -0.34 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.90it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.46 (  0.46)	Loss_d 0.691 (0.691)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.46 (  0.46)	Loss_d 0.691 (0.691)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 22/  1]	epoch_time 0.0358 (0.0382)	validation_time 0.0003 (0.0007)	train_time 0.0354 (0.0373)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.40290000614523885, 0.6350000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s] 15%|#5        | 4/26 [00:00<00:01, 19.03it/s] 31%|###       | 8/26 [00:00<00:00, 26.60it/s] 46%|####6     | 12/26 [00:00<00:00, 30.21it/s] 62%|######1   | 16/26 [00:00<00:00, 32.09it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.28it/s] 92%|#########2| 24/26 [00:00<00:00, 33.48it/s]100%|##########| 26/26 [00:00<00:00, 28.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 311 tensor(-0.0034, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.004)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.16)	train_acc   0.50 (  0.51)	train_minacc   0.50 (  0.49)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 12.7574 (13.8884)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.14it/s] 27%|##6       | 7/26 [00:00<00:00, 23.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.98it/s] 50%|#####     | 13/26 [00:00<00:00, 33.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.22it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.22it/s] 96%|#########6| 25/26 [00:00<00:00, 43.75it/s]100%|##########| 26/26 [00:00<00:00, 33.86it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.701 (0.696)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.50)	Loss_d 0.701 (0.696)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.34 (  0.35)
Test: [  20/  26]	Loss 0.694 (0.695)	test_acc   0.51 (  0.50)	test_minacc   0.46 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.694 (0.695)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.31 (  0.34)
Test: [  26/  26]	Loss 0.697 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.697 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.45 (  0.35)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.95it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.702 (0.702)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.702 (0.702)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.14 (  0.14)
Overall Timing[ 23/  1]	epoch_time 0.0390 (0.0382)	validation_time 0.0004 (0.0007)	train_time 0.0385 (0.0374)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5030000114440918, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.23it/s] 19%|#9        | 5/26 [00:00<00:01, 20.22it/s] 35%|###4      | 9/26 [00:00<00:00, 25.86it/s] 50%|#####     | 13/26 [00:00<00:00, 28.47it/s] 65%|######5   | 17/26 [00:00<00:00, 30.62it/s] 81%|########  | 21/26 [00:00<00:00, 28.69it/s] 96%|#########6| 25/26 [00:00<00:00, 30.50it/s]100%|##########| 26/26 [00:00<00:00, 26.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.51 (  0.51)	train_minacc   0.50 (  0.50)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 12.4741 (12.5765)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.06it/s] 27%|##6       | 7/26 [00:00<00:00, 30.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.82it/s] 50%|#####     | 13/26 [00:00<00:00, 38.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.58it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.58it/s] 96%|#########6| 25/26 [00:00<00:00, 46.28it/s]100%|##########| 26/26 [00:00<00:00, 38.05it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.60 (  0.60)
Test: [  10/  26]	Loss 0.691 (0.688)	test_acc   0.49 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.50)	Loss_d 0.691 (0.688)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.45 (  0.47)
Test: [  20/  26]	Loss 0.687 (0.688)	test_acc   0.52 (  0.51)	test_minacc   0.46 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.687 (0.688)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.48 (  0.46)
Test: [  26/  26]	Loss 0.689 (0.688)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.689 (0.688)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.56 (  0.47)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.77it/s]
Test: [  0/  1]	Loss 0.705 (0.705)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.705 (0.705)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.38 (  0.38)
Test: [  1/  1]	Loss 0.705 (0.705)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.705 (0.705)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.38 (  0.38)
Overall Timing[ 24/  1]	epoch_time 0.0403 (0.0383)	validation_time 0.0004 (0.0007)	train_time 0.0399 (0.0375)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.508200009226799, 0.49500003457069397)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 15%|#5        | 4/26 [00:00<00:01, 17.76it/s] 31%|###       | 8/26 [00:00<00:00, 25.38it/s] 46%|####6     | 12/26 [00:00<00:00, 29.19it/s] 62%|######1   | 16/26 [00:00<00:00, 31.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.12it/s] 92%|#########2| 24/26 [00:00<00:00, 34.49it/s]100%|##########| 26/26 [00:00<00:00, 28.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.50 (  0.51)	train_minacc   0.47 (  0.49)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 12.3844 (12.4280)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.33it/s] 27%|##6       | 7/26 [00:00<00:00, 37.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.75it/s] 50%|#####     | 13/26 [00:00<00:00, 42.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.95it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.95it/s] 96%|#########6| 25/26 [00:00<00:00, 48.14it/s]100%|##########| 26/26 [00:00<00:00, 41.03it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.44 (  0.44)
Test: [  10/  26]	Loss 0.692 (0.689)	test_acc   0.49 (  0.51)	test_minacc   0.52 (  0.51)	test_majacc   0.49 (  0.51)	Loss_d 0.692 (0.689)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.32 (  0.34)
Test: [  20/  26]	Loss 0.689 (0.689)	test_acc   0.52 (  0.51)	test_minacc   0.44 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.35 (  0.33)
Test: [  26/  26]	Loss 0.690 (0.689)	test_acc   0.50 (  0.51)	test_minacc   0.47 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.689)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.41 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.82it/s]
Test: [  0/  1]	Loss 0.700 (0.700)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.700 (0.700)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 0.700 (0.700)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.700 (0.700)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.21 (  0.21)
Overall Timing[ 25/  1]	epoch_time 0.0365 (0.0382)	validation_time 0.0004 (0.0007)	train_time 0.0360 (0.0374)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5106000170111656, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.45it/s] 19%|#9        | 5/26 [00:00<00:01, 18.55it/s] 35%|###4      | 9/26 [00:00<00:00, 24.65it/s] 50%|#####     | 13/26 [00:00<00:00, 28.48it/s] 65%|######5   | 17/26 [00:00<00:00, 30.47it/s] 81%|########  | 21/26 [00:00<00:00, 31.92it/s] 96%|#########6| 25/26 [00:00<00:00, 32.51it/s]100%|##########| 26/26 [00:00<00:00, 26.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.51 (  0.51)	train_minacc   0.47 (  0.49)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 12.3324 (12.3578)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.94it/s] 27%|##6       | 7/26 [00:00<00:00, 35.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.62it/s] 50%|#####     | 13/26 [00:00<00:00, 40.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.74it/s] 96%|#########6| 25/26 [00:00<00:00, 47.15it/s]100%|##########| 26/26 [00:00<00:00, 39.81it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.692 (0.690)	test_acc   0.49 (  0.51)	test_minacc   0.52 (  0.51)	test_majacc   0.49 (  0.51)	Loss_d 0.692 (0.690)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.24 (  0.25)
Test: [  20/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.51)	test_minacc   0.44 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.26 (  0.25)
Test: [  26/  26]	Loss 0.691 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.31 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.95it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.697 (0.697)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.697 (0.697)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.10 (  0.10)
Overall Timing[ 26/  1]	epoch_time 0.0371 (0.0382)	validation_time 0.0003 (0.0007)	train_time 0.0368 (0.0374)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5121000138521195, 0.49400001764297485)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s] 19%|#9        | 5/26 [00:00<00:01, 20.34it/s] 35%|###4      | 9/26 [00:00<00:00, 25.67it/s] 50%|#####     | 13/26 [00:00<00:00, 29.17it/s] 65%|######5   | 17/26 [00:00<00:00, 29.39it/s] 81%|########  | 21/26 [00:00<00:00, 31.13it/s] 96%|#########6| 25/26 [00:00<00:00, 32.30it/s]100%|##########| 26/26 [00:00<00:00, 26.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.52 (  0.51)	train_minacc   0.47 (  0.49)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 12.2943 (12.3136)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.27it/s] 31%|###       | 8/26 [00:00<00:00, 39.57it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.57it/s] 50%|#####     | 13/26 [00:00<00:00, 41.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.58it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.58it/s] 96%|#########6| 25/26 [00:00<00:00, 47.73it/s]100%|##########| 26/26 [00:00<00:00, 40.87it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.692 (0.690)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.51)	test_majacc   0.49 (  0.51)	Loss_d 0.692 (0.690)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.19 (  0.20)
Test: [  20/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.51)	test_minacc   0.44 (  0.50)	test_majacc   0.53 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.21 (  0.20)
Test: [  26/  26]	Loss 0.691 (0.690)	test_acc   0.52 (  0.51)	test_minacc   0.47 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.690)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.25 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.24it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Overall Timing[ 27/  1]	epoch_time 0.0379 (0.0382)	validation_time 0.0004 (0.0007)	train_time 0.0375 (0.0374)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.513500017464161, 0.49500003457069397)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.01it/s] 19%|#9        | 5/26 [00:00<00:00, 21.02it/s] 35%|###4      | 9/26 [00:00<00:00, 26.52it/s] 50%|#####     | 13/26 [00:00<00:00, 29.50it/s] 65%|######5   | 17/26 [00:00<00:00, 31.32it/s] 81%|########  | 21/26 [00:00<00:00, 32.61it/s] 96%|#########6| 25/26 [00:00<00:00, 32.86it/s]100%|##########| 26/26 [00:00<00:00, 27.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.52 (  0.51)	train_minacc   0.47 (  0.49)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 12.2651 (12.2801)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 27%|##6       | 7/26 [00:00<00:00, 31.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.19it/s] 50%|#####     | 13/26 [00:00<00:00, 37.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.80it/s] 96%|#########6| 25/26 [00:00<00:00, 46.11it/s]100%|##########| 26/26 [00:00<00:00, 37.95it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.51)	test_majacc   0.49 (  0.51)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.15 (  0.15)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.44 (  0.49)	test_majacc   0.53 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.16 (  0.15)
Test: [  26/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.20 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.85it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 28/  1]	epoch_time 0.0362 (0.0381)	validation_time 0.0009 (0.0007)	train_time 0.0352 (0.0373)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5158000138401985, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 19%|#9        | 5/26 [00:00<00:00, 21.03it/s] 35%|###4      | 9/26 [00:00<00:00, 26.54it/s] 50%|#####     | 13/26 [00:00<00:00, 29.44it/s] 65%|######5   | 17/26 [00:00<00:00, 31.49it/s] 81%|########  | 21/26 [00:00<00:00, 33.09it/s] 96%|#########6| 25/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 28.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.52 (  0.52)	train_minacc   0.47 (  0.49)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 12.2415 (12.2536)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.10it/s] 27%|##6       | 7/26 [00:00<00:00, 30.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.32it/s] 50%|#####     | 13/26 [00:00<00:00, 36.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.27it/s] 96%|#########6| 25/26 [00:00<00:00, 45.96it/s]100%|##########| 26/26 [00:00<00:00, 37.21it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.50)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.12 (  0.12)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.44 (  0.49)	test_majacc   0.54 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.13 (  0.12)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.16 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.41it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 29/  1]	epoch_time 0.0374 (0.0381)	validation_time 0.0004 (0.0007)	train_time 0.0370 (0.0373)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5179000137150288, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.86it/s] 19%|#9        | 5/26 [00:00<00:00, 22.87it/s] 35%|###4      | 9/26 [00:00<00:00, 28.21it/s] 50%|#####     | 13/26 [00:00<00:00, 30.95it/s] 65%|######5   | 17/26 [00:00<00:00, 32.61it/s] 81%|########  | 21/26 [00:00<00:00, 33.74it/s] 96%|#########6| 25/26 [00:00<00:00, 34.65it/s]100%|##########| 26/26 [00:00<00:00, 29.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.52 (  0.52)	train_minacc   0.47 (  0.48)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 12.2221 (12.2321)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.06it/s] 35%|###4      | 9/26 [00:00<00:00, 40.16it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.16it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.10it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.10it/s] 81%|########  | 21/26 [00:00<00:00, 47.78it/s]100%|##########| 26/26 [00:00<00:00, 42.42it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.51 (  0.52)	test_minacc   0.52 (  0.50)	test_majacc   0.51 (  0.52)	Loss_d 0.692 (0.691)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.10 (  0.09)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.42 (  0.49)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.11 (  0.10)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.48)	test_majacc   0.52 (  0.53)	Loss_d 0.692 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.13 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.66it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 30/  1]	epoch_time 0.0363 (0.0380)	validation_time 0.0003 (0.0006)	train_time 0.0359 (0.0373)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5198000147640706, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.62it/s] 15%|#5        | 4/26 [00:00<00:01, 18.92it/s] 31%|###       | 8/26 [00:00<00:00, 25.88it/s] 46%|####6     | 12/26 [00:00<00:00, 29.88it/s] 62%|######1   | 16/26 [00:00<00:00, 32.04it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.38it/s] 92%|#########2| 24/26 [00:00<00:00, 33.89it/s]100%|##########| 26/26 [00:00<00:00, 28.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.52 (  0.52)	train_minacc   0.47 (  0.48)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 12.2062 (12.2144)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.99it/s] 27%|##6       | 7/26 [00:00<00:00, 36.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.76it/s] 50%|#####     | 13/26 [00:00<00:00, 42.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.70it/s] 96%|#########6| 25/26 [00:00<00:00, 48.77it/s]100%|##########| 26/26 [00:00<00:00, 41.40it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.51 (  0.52)	test_minacc   0.52 (  0.50)	test_majacc   0.51 (  0.53)	Loss_d 0.692 (0.691)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.09 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.53 (  0.52)	test_minacc   0.44 (  0.49)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.691)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.09 (  0.08)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.11 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.41it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 31/  1]	epoch_time 0.0367 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0363 (0.0373)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.522300012499094, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 19%|#9        | 5/26 [00:00<00:01, 20.33it/s] 35%|###4      | 9/26 [00:00<00:00, 26.28it/s] 50%|#####     | 13/26 [00:00<00:00, 29.37it/s] 65%|######5   | 17/26 [00:00<00:00, 31.43it/s] 81%|########  | 21/26 [00:00<00:00, 32.37it/s] 96%|#########6| 25/26 [00:00<00:00, 32.75it/s]100%|##########| 26/26 [00:00<00:00, 27.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.52 (  0.52)	train_minacc   0.47 (  0.48)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 12.1929 (12.1997)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.49it/s] 27%|##6       | 7/26 [00:00<00:00, 34.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.08it/s] 50%|#####     | 13/26 [00:00<00:00, 39.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.11it/s] 96%|#########6| 25/26 [00:00<00:00, 47.05it/s]100%|##########| 26/26 [00:00<00:00, 39.73it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.52)	test_minacc   0.52 (  0.50)	test_majacc   0.51 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.08 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.42 (  0.48)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.08 (  0.07)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.86it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 32/  1]	epoch_time 0.0373 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0369 (0.0372)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5246000183820725, 0.48600003123283386)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.73it/s] 19%|#9        | 5/26 [00:00<00:01, 20.91it/s] 35%|###4      | 9/26 [00:00<00:00, 26.86it/s] 50%|#####     | 13/26 [00:00<00:00, 29.75it/s] 65%|######5   | 17/26 [00:00<00:00, 31.51it/s] 81%|########  | 21/26 [00:00<00:00, 32.95it/s] 96%|#########6| 25/26 [00:00<00:00, 33.30it/s]100%|##########| 26/26 [00:00<00:00, 28.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.53 (  0.52)	train_minacc   0.47 (  0.48)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 12.1819 (12.1876)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.49it/s] 27%|##6       | 7/26 [00:00<00:00, 32.87it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.87it/s] 50%|#####     | 13/26 [00:00<00:00, 39.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.93it/s] 96%|#########6| 25/26 [00:00<00:00, 46.94it/s]100%|##########| 26/26 [00:00<00:00, 38.77it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.52 (  0.50)	test_majacc   0.52 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.07 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.42 (  0.49)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.07 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.48)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.08 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.04it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 33/  1]	epoch_time 0.0363 (0.0379)	validation_time 0.0004 (0.0006)	train_time 0.0358 (0.0372)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.526600012332201, 0.4870000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.10it/s] 19%|#9        | 5/26 [00:00<00:00, 23.44it/s] 35%|###4      | 9/26 [00:00<00:00, 27.82it/s] 50%|#####     | 13/26 [00:00<00:00, 29.69it/s] 65%|######5   | 17/26 [00:00<00:00, 31.68it/s] 81%|########  | 21/26 [00:00<00:00, 32.95it/s] 96%|#########6| 25/26 [00:00<00:00, 33.12it/s]100%|##########| 26/26 [00:00<00:00, 28.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.53 (  0.53)	train_minacc   0.47 (  0.48)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 12.1726 (12.1774)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.56it/s] 27%|##6       | 7/26 [00:00<00:00, 36.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.53it/s] 50%|#####     | 13/26 [00:00<00:00, 42.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.00it/s] 96%|#########6| 25/26 [00:00<00:00, 47.87it/s]100%|##########| 26/26 [00:00<00:00, 40.65it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.52 (  0.50)	test_majacc   0.52 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.06 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.42 (  0.48)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.07 (  0.05)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.07 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.36it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 34/  1]	epoch_time 0.0365 (0.0379)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0372)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5278000076115131, 0.4880000352859497)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 19%|#9        | 5/26 [00:00<00:01, 20.65it/s] 35%|###4      | 9/26 [00:00<00:00, 26.28it/s] 50%|#####     | 13/26 [00:00<00:00, 29.55it/s] 65%|######5   | 17/26 [00:00<00:00, 31.65it/s] 81%|########  | 21/26 [00:00<00:00, 32.89it/s] 96%|#########6| 25/26 [00:00<00:00, 33.47it/s]100%|##########| 26/26 [00:00<00:00, 27.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.54 (  0.53)	train_minacc   0.50 (  0.48)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 12.1647 (12.1688)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.81it/s] 27%|##6       | 7/26 [00:00<00:00, 34.54it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.54it/s] 50%|#####     | 13/26 [00:00<00:00, 40.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.60it/s] 96%|#########6| 25/26 [00:00<00:00, 47.06it/s]100%|##########| 26/26 [00:00<00:00, 40.00it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.50)	test_majacc   0.53 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.06 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.40 (  0.48)	test_majacc   0.56 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.06 (  0.04)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.50 (  0.47)	test_majacc   0.55 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.50 (  0.47)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.06 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.31it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 35/  1]	epoch_time 0.0379 (0.0379)	validation_time 0.0004 (0.0006)	train_time 0.0375 (0.0372)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.529700013935566, 0.4880000352859497)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.79it/s] 19%|#9        | 5/26 [00:00<00:01, 17.59it/s] 35%|###4      | 9/26 [00:00<00:00, 23.87it/s] 50%|#####     | 13/26 [00:00<00:00, 27.98it/s] 65%|######5   | 17/26 [00:00<00:00, 30.62it/s] 81%|########  | 21/26 [00:00<00:00, 32.32it/s] 96%|#########6| 25/26 [00:00<00:00, 33.39it/s]100%|##########| 26/26 [00:00<00:00, 26.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.54 (  0.53)	train_minacc   0.50 (  0.47)	train_majacc   0.55 (  0.54)	train_corr   0.00 (  0.00)	l1 12.1580 (12.1615)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 27%|##6       | 7/26 [00:00<00:00, 34.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.02it/s] 50%|#####     | 13/26 [00:00<00:00, 39.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.53it/s] 96%|#########6| 25/26 [00:00<00:00, 47.32it/s]100%|##########| 26/26 [00:00<00:00, 39.08it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.50)	test_majacc   0.53 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.42 (  0.48)	test_majacc   0.56 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.06 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.55 (  0.53)	test_minacc   0.50 (  0.48)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.50 (  0.48)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.05 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.21it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 36/  1]	epoch_time 0.0450 (0.0381)	validation_time 0.0004 (0.0006)	train_time 0.0446 (0.0374)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5319000142216682, 0.484000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 19%|#9        | 5/26 [00:00<00:01, 20.12it/s] 35%|###4      | 9/26 [00:00<00:00, 25.80it/s] 50%|#####     | 13/26 [00:00<00:00, 28.71it/s] 65%|######5   | 17/26 [00:00<00:00, 30.41it/s] 81%|########  | 21/26 [00:00<00:00, 31.73it/s] 96%|#########6| 25/26 [00:00<00:00, 32.42it/s]100%|##########| 26/26 [00:00<00:00, 27.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.53)	train_minacc   0.47 (  0.48)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 12.1523 (12.1552)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 27%|##6       | 7/26 [00:00<00:00, 33.04it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.04it/s] 50%|#####     | 13/26 [00:00<00:00, 39.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.10it/s] 96%|#########6| 25/26 [00:00<00:00, 46.61it/s]100%|##########| 26/26 [00:00<00:00, 38.64it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.12 ( -0.12)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.42 (  0.48)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.05 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.55 (  0.53)	test_minacc   0.47 (  0.47)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.46it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 37/  1]	epoch_time 0.0368 (0.0380)	validation_time 0.0003 (0.0006)	train_time 0.0364 (0.0373)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5327000188231468, 0.48500001430511475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 19%|#9        | 5/26 [00:00<00:00, 21.58it/s] 35%|###4      | 9/26 [00:00<00:00, 27.09it/s] 50%|#####     | 13/26 [00:00<00:00, 29.62it/s] 65%|######5   | 17/26 [00:00<00:00, 31.49it/s] 81%|########  | 21/26 [00:00<00:00, 32.69it/s] 96%|#########6| 25/26 [00:00<00:00, 33.71it/s]100%|##########| 26/26 [00:00<00:00, 28.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.53)	train_minacc   0.47 (  0.47)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 12.1474 (12.1499)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 31%|###       | 8/26 [00:00<00:00, 39.25it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.25it/s] 50%|#####     | 13/26 [00:00<00:00, 42.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.35it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.35it/s] 96%|#########6| 25/26 [00:00<00:00, 47.91it/s]100%|##########| 26/26 [00:00<00:00, 40.77it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.14 ( -0.14)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.54)	test_minacc   0.50 (  0.49)	test_majacc   0.53 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.40 (  0.48)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.05 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.55 (  0.53)	test_minacc   0.47 (  0.47)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.04 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.13it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 38/  1]	epoch_time 0.0355 (0.0380)	validation_time 0.0006 (0.0006)	train_time 0.0349 (0.0373)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5339000187516213, 0.48900002241134644)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 19%|#9        | 5/26 [00:00<00:01, 19.69it/s] 35%|###4      | 9/26 [00:00<00:00, 25.64it/s] 50%|#####     | 13/26 [00:00<00:00, 29.18it/s] 65%|######5   | 17/26 [00:00<00:00, 31.20it/s] 81%|########  | 21/26 [00:00<00:00, 32.56it/s] 96%|#########6| 25/26 [00:00<00:00, 33.41it/s]100%|##########| 26/26 [00:00<00:00, 27.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.53)	train_minacc   0.47 (  0.47)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 12.1431 (12.1453)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.55it/s] 31%|###       | 8/26 [00:00<00:00, 40.62it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.62it/s] 50%|#####     | 13/26 [00:00<00:00, 42.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.40it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.40it/s] 96%|#########6| 25/26 [00:00<00:00, 47.87it/s]100%|##########| 26/26 [00:00<00:00, 41.39it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.16 ( -0.16)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.54)	test_minacc   0.50 (  0.49)	test_majacc   0.54 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.40 (  0.48)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.55 (  0.54)	test_minacc   0.47 (  0.47)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.63it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 39/  1]	epoch_time 0.0414 (0.0381)	validation_time 0.0003 (0.0006)	train_time 0.0411 (0.0374)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5356000151634216, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.81it/s] 19%|#9        | 5/26 [00:00<00:00, 25.09it/s] 35%|###4      | 9/26 [00:00<00:00, 30.07it/s] 50%|#####     | 13/26 [00:00<00:00, 32.06it/s] 65%|######5   | 17/26 [00:00<00:00, 33.52it/s] 81%|########  | 21/26 [00:00<00:00, 34.81it/s] 96%|#########6| 25/26 [00:00<00:00, 35.23it/s]100%|##########| 26/26 [00:00<00:00, 30.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.53)	train_minacc   0.47 (  0.47)	train_majacc   0.57 (  0.55)	train_corr   0.00 (  0.00)	l1 12.1394 (12.1412)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.72it/s] 31%|###       | 8/26 [00:00<00:00, 38.71it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.71it/s] 50%|#####     | 13/26 [00:00<00:00, 41.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.67it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.67it/s] 96%|#########6| 25/26 [00:00<00:00, 48.19it/s]100%|##########| 26/26 [00:00<00:00, 41.02it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.18 ( -0.18)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.49)	test_majacc   0.54 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.40 (  0.48)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.55 (  0.54)	test_minacc   0.47 (  0.47)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.02it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 40/  1]	epoch_time 0.0350 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0346 (0.0373)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5368000094890595, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 19%|#9        | 5/26 [00:00<00:00, 21.05it/s] 35%|###4      | 9/26 [00:00<00:00, 26.18it/s] 50%|#####     | 13/26 [00:00<00:00, 28.60it/s] 65%|######5   | 17/26 [00:00<00:00, 29.15it/s] 81%|########  | 21/26 [00:00<00:00, 31.13it/s] 96%|#########6| 25/26 [00:00<00:00, 32.66it/s]100%|##########| 26/26 [00:00<00:00, 27.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.54)	train_minacc   0.47 (  0.47)	train_majacc   0.57 (  0.55)	train_corr   0.00 (  0.00)	l1 12.1361 (12.1377)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.62it/s] 31%|###       | 8/26 [00:00<00:00, 41.52it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.52it/s] 50%|#####     | 13/26 [00:00<00:00, 42.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.02it/s] 96%|#########6| 25/26 [00:00<00:00, 48.82it/s]100%|##########| 26/26 [00:00<00:00, 42.07it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.20 ( -0.20)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.49)	test_majacc   0.54 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.40 (  0.48)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.04 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.47 (  0.47)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.02 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 41/  1]	epoch_time 0.0361 (0.0379)	validation_time 0.0004 (0.0006)	train_time 0.0357 (0.0373)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5380000070929527, 0.49000000953674316)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.23it/s] 19%|#9        | 5/26 [00:00<00:01, 18.51it/s] 35%|###4      | 9/26 [00:00<00:00, 24.74it/s] 50%|#####     | 13/26 [00:00<00:00, 28.31it/s] 65%|######5   | 17/26 [00:00<00:00, 30.35it/s] 81%|########  | 21/26 [00:00<00:00, 31.46it/s] 96%|#########6| 25/26 [00:00<00:00, 31.80it/s]100%|##########| 26/26 [00:00<00:00, 26.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.54)	train_minacc   0.45 (  0.47)	train_majacc   0.57 (  0.55)	train_corr   0.00 (  0.00)	l1 12.1332 (12.1346)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.94it/s] 27%|##6       | 7/26 [00:00<00:00, 34.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.73it/s] 50%|#####     | 13/26 [00:00<00:00, 40.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.91it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.91it/s] 96%|#########6| 25/26 [00:00<00:00, 47.78it/s]100%|##########| 26/26 [00:00<00:00, 40.10it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.22 ( -0.22)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.49)	test_majacc   0.54 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.03 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.39 (  0.47)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.39 (  0.47)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.04 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.45 (  0.46)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.01 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.40it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 42/  1]	epoch_time 0.0366 (0.0379)	validation_time 0.0003 (0.0006)	train_time 0.0362 (0.0373)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5389000114798546, 0.49000000953674316)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.54it/s] 19%|#9        | 5/26 [00:00<00:00, 23.41it/s] 35%|###4      | 9/26 [00:00<00:00, 28.50it/s] 50%|#####     | 13/26 [00:00<00:00, 31.05it/s] 65%|######5   | 17/26 [00:00<00:00, 31.79it/s] 81%|########  | 21/26 [00:00<00:00, 32.75it/s] 96%|#########6| 25/26 [00:00<00:00, 33.40it/s]100%|##########| 26/26 [00:00<00:00, 29.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.54)	train_minacc   0.45 (  0.47)	train_majacc   0.57 (  0.55)	train_corr   0.00 (  0.00)	l1 12.1306 (12.1318)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.92it/s] 35%|###4      | 9/26 [00:00<00:00, 37.33it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.33it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.08it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.38it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.38it/s]100%|##########| 26/26 [00:00<00:00, 49.23it/s]100%|##########| 26/26 [00:00<00:00, 41.27it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.23 ( -0.23)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.37 (  0.47)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.45 (  0.46)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.00 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.22it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 43/  1]	epoch_time 0.0367 (0.0379)	validation_time 0.0004 (0.0006)	train_time 0.0363 (0.0372)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5397000114321708, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.64it/s] 19%|#9        | 5/26 [00:00<00:01, 18.72it/s] 35%|###4      | 9/26 [00:00<00:00, 24.53it/s] 50%|#####     | 13/26 [00:00<00:00, 28.28it/s] 65%|######5   | 17/26 [00:00<00:00, 30.70it/s] 81%|########  | 21/26 [00:00<00:00, 32.32it/s] 96%|#########6| 25/26 [00:00<00:00, 33.51it/s]100%|##########| 26/26 [00:00<00:00, 27.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.55 (  0.54)	train_minacc   0.45 (  0.46)	train_majacc   0.57 (  0.55)	train_corr   0.00 (  0.00)	l1 12.1283 (12.1294)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.51it/s] 27%|##6       | 7/26 [00:00<00:00, 37.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.40it/s] 46%|####6     | 12/26 [00:00<00:00, 42.96it/s] 65%|######5   | 17/26 [00:00<00:00, 43.69it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.69it/s] 88%|########8 | 23/26 [00:00<00:00, 48.51it/s]100%|##########| 26/26 [00:00<00:00, 41.05it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.25 ( -0.25)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.37 (  0.47)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.03 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.45 (  0.46)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.57 (  0.56)	test_corr_d  -0.00 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.97it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 44/  1]	epoch_time 0.0352 (0.0378)	validation_time 0.0006 (0.0006)	train_time 0.0345 (0.0372)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5410000078678131, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.72it/s]  8%|7         | 2/26 [00:00<00:02,  8.48it/s] 23%|##3       | 6/26 [00:00<00:01, 19.77it/s] 38%|###8      | 10/26 [00:00<00:00, 24.88it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.04it/s] 69%|######9   | 18/26 [00:00<00:00, 29.74it/s] 85%|########4 | 22/26 [00:00<00:00, 31.45it/s]100%|##########| 26/26 [00:00<00:00, 32.61it/s]100%|##########| 26/26 [00:00<00:00, 26.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.54)	train_minacc   0.45 (  0.46)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 12.1263 (12.1272)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.65it/s] 27%|##6       | 7/26 [00:00<00:00, 34.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.24it/s] 50%|#####     | 13/26 [00:00<00:00, 41.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.99it/s] 96%|#########6| 25/26 [00:00<00:00, 47.51it/s]100%|##########| 26/26 [00:00<00:00, 39.49it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.27 ( -0.27)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.50 (  0.49)	test_majacc   0.55 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.37 (  0.47)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.03 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.01 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.05it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 45/  1]	epoch_time 0.0370 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0366 (0.0372)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5424000133872032, 0.49500003457069397)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.98it/s] 19%|#9        | 5/26 [00:00<00:01, 20.55it/s] 35%|###4      | 9/26 [00:00<00:00, 26.27it/s] 50%|#####     | 13/26 [00:00<00:00, 29.32it/s] 65%|######5   | 17/26 [00:00<00:00, 31.05it/s] 81%|########  | 21/26 [00:00<00:00, 31.96it/s] 96%|#########6| 25/26 [00:00<00:00, 32.48it/s]100%|##########| 26/26 [00:00<00:00, 27.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.54)	train_minacc   0.45 (  0.46)	train_majacc   0.56 (  0.56)	train_corr   0.00 (  0.00)	l1 12.1243 (12.1252)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.61it/s] 27%|##6       | 7/26 [00:00<00:00, 33.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.33it/s] 50%|#####     | 13/26 [00:00<00:00, 39.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.44it/s] 96%|#########6| 25/26 [00:00<00:00, 47.17it/s]100%|##########| 26/26 [00:00<00:00, 39.31it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.28 ( -0.28)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.50 (  0.49)	test_majacc   0.55 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.33 (  0.47)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.33 (  0.47)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.03 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.45 (  0.46)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.57 (  0.56)	test_corr_d  -0.02 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.74it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 46/  1]	epoch_time 0.0371 (0.0378)	validation_time 0.0003 (0.0006)	train_time 0.0367 (0.0371)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5433000112175942, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.26it/s] 19%|#9        | 5/26 [00:00<00:01, 18.55it/s] 35%|###4      | 9/26 [00:00<00:00, 24.75it/s] 50%|#####     | 13/26 [00:00<00:00, 28.58it/s] 65%|######5   | 17/26 [00:00<00:00, 30.58it/s] 81%|########  | 21/26 [00:00<00:00, 32.07it/s] 96%|#########6| 25/26 [00:00<00:00, 32.89it/s]100%|##########| 26/26 [00:00<00:00, 26.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.54)	train_minacc   0.45 (  0.46)	train_majacc   0.56 (  0.56)	train_corr   0.00 (  0.00)	l1 12.1226 (12.1233)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.02it/s] 27%|##6       | 7/26 [00:00<00:00, 30.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.38it/s] 50%|#####     | 13/26 [00:00<00:00, 38.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.26it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.26it/s] 96%|#########6| 25/26 [00:00<00:00, 46.23it/s]100%|##########| 26/26 [00:00<00:00, 37.44it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.29 ( -0.29)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.50 (  0.49)	test_majacc   0.55 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.02 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.33 (  0.47)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.33 (  0.47)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.03 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.02 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.24it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 47/  1]	epoch_time 0.0375 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0371 (0.0371)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5435000144839287, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.55it/s] 19%|#9        | 5/26 [00:00<00:01, 19.08it/s] 35%|###4      | 9/26 [00:00<00:00, 25.24it/s] 50%|#####     | 13/26 [00:00<00:00, 28.81it/s] 65%|######5   | 17/26 [00:00<00:00, 30.73it/s] 81%|########  | 21/26 [00:00<00:00, 32.18it/s] 96%|#########6| 25/26 [00:00<00:00, 32.37it/s]100%|##########| 26/26 [00:00<00:00, 26.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.54)	train_minacc   0.42 (  0.46)	train_majacc   0.56 (  0.56)	train_corr   0.00 (  0.00)	l1 12.1209 (12.1215)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 27%|##6       | 7/26 [00:00<00:00, 33.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.75it/s] 50%|#####     | 13/26 [00:00<00:00, 39.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.28it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.28it/s] 96%|#########6| 25/26 [00:00<00:00, 45.94it/s]100%|##########| 26/26 [00:00<00:00, 38.70it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.29 ( -0.29)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.50 (  0.49)	test_majacc   0.55 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.02 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.33 (  0.47)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.33 (  0.47)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.03 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.45 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.98it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 48/  1]	epoch_time 0.0370 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0366 (0.0371)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5442000142335892, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.36it/s] 19%|#9        | 5/26 [00:00<00:00, 23.03it/s] 35%|###4      | 9/26 [00:00<00:00, 28.08it/s] 50%|#####     | 13/26 [00:00<00:00, 30.67it/s] 65%|######5   | 17/26 [00:00<00:00, 32.28it/s] 81%|########  | 21/26 [00:00<00:00, 33.26it/s] 96%|#########6| 25/26 [00:00<00:00, 33.73it/s]100%|##########| 26/26 [00:00<00:00, 28.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.54)	train_minacc   0.42 (  0.45)	train_majacc   0.56 (  0.56)	train_corr   0.00 (  0.00)	l1 12.1193 (12.1199)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.02it/s] 31%|###       | 8/26 [00:00<00:00, 41.30it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.30it/s] 50%|#####     | 13/26 [00:00<00:00, 42.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.07it/s] 96%|#########6| 25/26 [00:00<00:00, 48.34it/s]100%|##########| 26/26 [00:00<00:00, 41.56it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.29 ( -0.29)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.52 (  0.48)	test_majacc   0.55 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.02 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.33 (  0.46)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.33 (  0.46)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.03 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.42 (  0.45)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.42 (  0.45)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.32it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 49/  1]	epoch_time 0.0358 (0.0377)	validation_time 0.0004 (0.0006)	train_time 0.0354 (0.0371)
record: (train_acc, test_acc) (0.6668000254631042, 0.5950000286102295)
last accs (train_acc, test_acc) (0.5430000106096268, 0.5010000467300415)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.096 MB of 0.096 MB uploadedwandb: \ 0.096 MB of 0.096 MB uploadedwandb: | 0.096 MB of 0.096 MB uploadedwandb: / 0.118 MB of 0.126 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/diagnostics/epoch_time_val █▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/diagnostics/train_time_val █▁▁▂▂▁▁▁▁▁▁▁▁▂▁▁▁▁▁▂▁▁▂▁▁▁▁▁▂▃▁▁▁▁▁▁▁▁▂▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/diagnostics/validation_time_val █▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/Loss_avg █▇▇▇█▆█▇▆▇▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/Loss_d_avg █▇▇▇█▆█▇▆▇▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/Loss_d_val █▇▇▇█▆█▇▆▇▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/Loss_val █▇▇▇█▆█▇▆▇▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_acc_avg ▁▁▁▁▁▃▂▄▅▄▃▄▇█▆▇▇██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_acc_d_avg ▁▁▁▁▁▃▂▄▅▄▃▄▇█▆▇▇██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_acc_d_val ▁▁▁▁▁▃▂▄▅▄▃▄▇█▆▇▇██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_acc_val ▁▁▁▁▁▃▂▄▅▄▃▄▇█▆▇▇██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_corr_d_avg █████▆▇▆▅▆▆▆▁▂▂▂▂▂▂▃▃▃▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_corr_d_val █████▆▇▆▅▆▆▆▁▂▂▂▂▂▂▃▃▃▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_majacc_avg ████████▇██▇▃▁▃▃▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_majacc_d_avg ████████▇██▇▃▁▃▃▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_majacc_d_val ████████▇██▇▃▁▃▃▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_majacc_val ████████▇██▇▃▁▃▃▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_minacc_avg ▁▁▁▁▁▃▂▃▅▃▃▄▇█▆▇▇██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_minacc_d_avg ▁▁▁▁▁▃▂▃▅▃▃▄▇█▆▇▇██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_minacc_d_val ▁▁▁▁▁▃▂▃▅▃▃▄▇█▆▇▇██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_minacc_val ▁▁▁▁▁▃▂▃▅▃▃▄▇█▆▇▇██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/Loss_val █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/l1_avg ▂▂▂▁▁▁▂▃▄▅▆▇███████▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/l1_val ▂▂▁▁▁▁▂▃▅▆▇▇███████▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_acc_avg ▇███████████▇▃▁▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_acc_val ████████████▆▃▃▂▁▁▂▃▃▃▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_majacc_avg ▇███████████▆▃▁▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▃▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_majacc_val ████████████▅▂▃▂▁▁▁▃▃▃▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_minacc_avg ▂▁▁▂▂▃▂▂▃▄▄▄▇██▇▇▇▇▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_minacc_val ▁▁▁▁▁▂▃▃▄▃▃▄█▇▆████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_nll_avg ▅▃▃▂▂▂▂▂▁▁▁▁▂▇██████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_nll_val ▃▃▃▂▂▂▂▁▁▁▁▁▆███████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_penalty_avg █▃▃▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_penalty_val █▇▇▆█▅▃▄▂▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/diagnostics/epoch_time_val 0.03583
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/diagnostics/train_time_val 0.03545
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/diagnostics/validation_time_val 0.00037
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/Loss_avg 0.69157
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/Loss_d_avg 0.69157
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/Loss_d_val 0.69157
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/Loss_val 0.69157
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_acc_avg 0.501
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_acc_d_avg 0.501
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_acc_d_val 0.501
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_acc_val 0.501
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_corr_d_avg -0.177
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_corr_d_val -0.177
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_majacc_avg 0.54
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_majacc_d_avg 0.54
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_majacc_d_val 0.54
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_majacc_val 0.54
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_minacc_avg 0.49667
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_minacc_d_avg 0.49667
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_minacc_d_val 0.49667
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/test/test_minacc_val 0.49667
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/l1_avg 12.11991
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/l1_val 12.11933
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_acc_avg 0.5423
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_acc_val 0.536
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_majacc_avg 0.55799
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_majacc_val 0.5566
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_minacc_avg 0.4527
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_minacc_val 0.42105
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_nll_avg 0.69286
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_nll_val 0.69345
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/weight_norm_avg 0.17324
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/45/logs/train/weight_norm_val 0.17306
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/12p69t22
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_154344-12p69t22/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_154613-o1qo5g0h
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/o1qo5g0h
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=13.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1256
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5976, 3, 32, 32) (6024, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:38,  1.55s/it] 19%|#9        | 5/26 [00:01<00:05,  3.91it/s] 35%|###4      | 9/26 [00:01<00:02,  7.67it/s] 50%|#####     | 13/26 [00:01<00:01, 11.75it/s] 65%|######5   | 17/26 [00:01<00:00, 15.91it/s] 81%|########  | 21/26 [00:02<00:00, 19.90it/s] 96%|#########6| 25/26 [00:02<00:00, 23.14it/s]100%|##########| 26/26 [00:02<00:00,  9.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 8.987 (12.033)	train_nll   0.38 (  0.54)	train_penalty   0.05 (  0.22)	weight_norm   8.61 ( 11.49)	train_acc   0.87 (  0.81)	train_minacc   0.03 (  0.07)	train_majacc   1.00 (  0.94)	train_corr   0.00 (  0.00)	l1 6.6887 (7.8365)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.50it/s] 27%|##6       | 7/26 [00:00<00:00, 35.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.52it/s] 50%|#####     | 13/26 [00:00<00:00, 40.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.95it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.95it/s] 96%|#########6| 25/26 [00:00<00:00, 46.69it/s]100%|##########| 26/26 [00:00<00:00, 39.16it/s]
Test: [   0/  26]	Loss 0.408 (0.408)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.408 (0.408)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.450 (0.413)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.450 (0.413)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.389 (0.409)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.389 (0.409)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  26/  26]	Loss 0.380 (0.407)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.380 (0.407)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]
Test: [  0/  1]	Loss 1.666 (1.666)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.666 (1.666)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.666 (1.666)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.666 (1.666)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/46/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0754 (0.0754)	validation_time 0.0066 (0.0066)	train_time 0.0638 (0.0638)
record: (train_acc, test_acc) (0.8470000211000442, 0.11700000613927841)
last accs (train_acc, test_acc) (0.8470000211000442, 0.11700000613927841)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 19%|#9        | 5/26 [00:00<00:01, 20.13it/s] 35%|###4      | 9/26 [00:00<00:00, 26.02it/s] 50%|#####     | 13/26 [00:00<00:00, 29.90it/s] 65%|######5   | 17/26 [00:00<00:00, 31.56it/s] 81%|########  | 21/26 [00:00<00:00, 32.90it/s] 96%|#########6| 25/26 [00:00<00:00, 33.24it/s]100%|##########| 26/26 [00:00<00:00, 27.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.488 (6.343)	train_nll   0.37 (  0.40)	train_penalty   0.04 (  0.05)	weight_norm   4.12 (  5.94)	train_acc   0.86 (  0.85)	train_minacc   0.09 (  0.05)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 5.8487 (6.2928)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.66it/s] 31%|###       | 8/26 [00:00<00:00, 41.97it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.97it/s] 50%|#####     | 13/26 [00:00<00:00, 43.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.36it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.36it/s] 96%|#########6| 25/26 [00:00<00:00, 48.75it/s]100%|##########| 26/26 [00:00<00:00, 41.87it/s]
Test: [   0/  26]	Loss 0.406 (0.406)	test_acc   0.84 (  0.84)	test_minacc   0.11 (  0.11)	test_majacc   0.97 (  0.97)	Loss_d 0.406 (0.406)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.439 (0.402)	test_acc   0.82 (  0.84)	test_minacc   0.08 (  0.14)	test_majacc   0.97 (  0.97)	Loss_d 0.439 (0.402)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.08 (  0.14)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.373 (0.397)	test_acc   0.85 (  0.84)	test_minacc   0.09 (  0.14)	test_majacc   0.98 (  0.97)	Loss_d 0.373 (0.397)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.09 (  0.14)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.354 (0.394)	test_acc   0.86 (  0.84)	test_minacc   0.09 (  0.15)	test_majacc   0.98 (  0.97)	Loss_d 0.354 (0.394)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.09 (  0.15)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.95 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.36it/s]
Test: [  0/  1]	Loss 1.694 (1.694)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 1.694 (1.694)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.694 (1.694)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 1.694 (1.694)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.87 (  0.87)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/46/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0374 (0.0564)	validation_time 0.0004 (0.0035)	train_time 0.0370 (0.0504)
record: (train_acc, test_acc) (0.8448000189065933, 0.20000000298023224)
last accs (train_acc, test_acc) (0.8448000189065933, 0.20000000298023224)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.35it/s] 15%|#5        | 4/26 [00:00<00:01, 17.35it/s] 31%|###       | 8/26 [00:00<00:00, 24.65it/s] 46%|####6     | 12/26 [00:00<00:00, 28.17it/s] 62%|######1   | 16/26 [00:00<00:00, 30.25it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.24it/s] 92%|#########2| 24/26 [00:00<00:00, 32.40it/s]100%|##########| 26/26 [00:00<00:00, 26.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.727 (3.498)	train_nll   0.35 (  0.39)	train_penalty   0.03 (  0.04)	weight_norm   2.38 (  3.11)	train_acc   0.86 (  0.84)	train_minacc   0.06 (  0.08)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 4.6664 (5.2980)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 27%|##6       | 7/26 [00:00<00:00, 30.71it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.71it/s] 50%|#####     | 13/26 [00:00<00:00, 37.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.77it/s] 96%|#########6| 25/26 [00:00<00:00, 45.87it/s]100%|##########| 26/26 [00:00<00:00, 37.49it/s]
Test: [   0/  26]	Loss 0.380 (0.380)	test_acc   0.85 (  0.85)	test_minacc   0.09 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 0.380 (0.380)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.395 (0.363)	test_acc   0.84 (  0.85)	test_minacc   0.09 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.395 (0.363)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.09 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.360 (0.359)	test_acc   0.86 (  0.85)	test_minacc   0.13 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.360 (0.359)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.13 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.327 (0.356)	test_acc   0.87 (  0.85)	test_minacc   0.09 (  0.13)	test_majacc   0.99 (  0.98)	Loss_d 0.327 (0.356)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.09 (  0.13)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.16it/s]
Test: [  0/  1]	Loss 1.592 (1.592)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 1.592 (1.592)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.592 (1.592)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 1.592 (1.592)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
Overall Timing[  2/  1]	epoch_time 0.0400 (0.0510)	validation_time 0.0004 (0.0025)	train_time 0.0396 (0.0468)
record: (train_acc, test_acc) (0.8448000189065933, 0.20000000298023224)
last accs (train_acc, test_acc) (0.8529000209569931, 0.19600000977516174)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 19%|#9        | 5/26 [00:00<00:00, 21.31it/s] 35%|###4      | 9/26 [00:00<00:00, 26.75it/s] 50%|#####     | 13/26 [00:00<00:00, 29.85it/s] 65%|######5   | 17/26 [00:00<00:00, 31.05it/s] 81%|########  | 21/26 [00:00<00:00, 31.93it/s] 96%|#########6| 25/26 [00:00<00:00, 32.62it/s]100%|##########| 26/26 [00:00<00:00, 27.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.867 (2.264)	train_nll   0.36 (  0.37)	train_penalty   0.04 (  0.04)	weight_norm   1.51 (  1.89)	train_acc   0.87 (  0.85)	train_minacc   0.12 (  0.15)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 4.1991 (4.4802)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.41it/s] 31%|###       | 8/26 [00:00<00:00, 38.06it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.06it/s] 50%|#####     | 13/26 [00:00<00:00, 40.31it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.43it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.43it/s]100%|##########| 26/26 [00:00<00:00, 49.99it/s]100%|##########| 26/26 [00:00<00:00, 40.59it/s]
Test: [   0/  26]	Loss 0.376 (0.376)	test_acc   0.86 (  0.86)	test_minacc   0.23 (  0.23)	test_majacc   0.96 (  0.96)	Loss_d 0.376 (0.376)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.414 (0.383)	test_acc   0.83 (  0.84)	test_minacc   0.30 (  0.31)	test_majacc   0.94 (  0.94)	Loss_d 0.414 (0.383)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.30 (  0.31)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.85)
Test: [  20/  26]	Loss 0.376 (0.381)	test_acc   0.84 (  0.84)	test_minacc   0.25 (  0.31)	test_majacc   0.94 (  0.94)	Loss_d 0.376 (0.381)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.25 (  0.31)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.85)
Test: [  26/  26]	Loss 0.341 (0.378)	test_acc   0.87 (  0.84)	test_minacc   0.39 (  0.32)	test_majacc   0.94 (  0.94)	Loss_d 0.341 (0.378)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.39 (  0.32)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.85 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.06it/s]
Test: [  0/  1]	Loss 1.338 (1.338)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.92 (  0.92)	Loss_d 1.338 (1.338)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.55 (  0.55)
Test: [  1/  1]	Loss 1.338 (1.338)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.92 (  0.92)	Loss_d 1.338 (1.338)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.55 (  0.55)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/46/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0366 (0.0474)	validation_time 0.0003 (0.0019)	train_time 0.0362 (0.0442)
record: (train_acc, test_acc) (0.8438000240325928, 0.359000027179718)
last accs (train_acc, test_acc) (0.8438000240325928, 0.359000027179718)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 19%|#9        | 5/26 [00:00<00:00, 22.33it/s] 35%|###4      | 9/26 [00:00<00:00, 27.32it/s] 50%|#####     | 13/26 [00:00<00:00, 30.18it/s] 65%|######5   | 17/26 [00:00<00:00, 31.81it/s] 81%|########  | 21/26 [00:00<00:00, 32.76it/s] 96%|#########6| 25/26 [00:00<00:00, 33.19it/s]100%|##########| 26/26 [00:00<00:00, 28.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.328 (1.586)	train_nll   0.34 (  0.37)	train_penalty   0.03 (  0.04)	weight_norm   0.99 (  1.22)	train_acc   0.86 (  0.85)	train_minacc   0.09 (  0.16)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 4.4609 (4.4929)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.69it/s] 27%|##6       | 7/26 [00:00<00:00, 29.86it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.86it/s] 50%|#####     | 13/26 [00:00<00:00, 38.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.20it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.20it/s] 96%|#########6| 25/26 [00:00<00:00, 45.60it/s]100%|##########| 26/26 [00:00<00:00, 36.58it/s]
Test: [   0/  26]	Loss 0.377 (0.377)	test_acc   0.86 (  0.86)	test_minacc   0.18 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.377 (0.377)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.378 (0.361)	test_acc   0.86 (  0.85)	test_minacc   0.28 (  0.29)	test_majacc   0.97 (  0.95)	Loss_d 0.378 (0.361)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.28 (  0.29)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.88 (  0.86)
Test: [  20/  26]	Loss 0.375 (0.355)	test_acc   0.85 (  0.86)	test_minacc   0.22 (  0.30)	test_majacc   0.96 (  0.95)	Loss_d 0.375 (0.355)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.22 (  0.30)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.88 (  0.86)
Test: [  26/  26]	Loss 0.325 (0.354)	test_acc   0.86 (  0.86)	test_minacc   0.21 (  0.30)	test_majacc   0.95 (  0.95)	Loss_d 0.325 (0.354)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.21 (  0.30)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.22it/s]
Test: [  0/  1]	Loss 1.463 (1.463)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.93 (  0.93)	Loss_d 1.463 (1.463)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.60 (  0.60)
Test: [  1/  1]	Loss 1.463 (1.463)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.93 (  0.93)	Loss_d 1.463 (1.463)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.60 (  0.60)
Overall Timing[  4/  1]	epoch_time 0.0384 (0.0456)	validation_time 0.0004 (0.0016)	train_time 0.0380 (0.0429)
record: (train_acc, test_acc) (0.8438000240325928, 0.359000027179718)
last accs (train_acc, test_acc) (0.8568000215888023, 0.3270000219345093)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.60it/s] 19%|#9        | 5/26 [00:00<00:01, 18.56it/s] 35%|###4      | 9/26 [00:00<00:00, 24.71it/s] 50%|#####     | 13/26 [00:00<00:00, 28.20it/s] 65%|######5   | 17/26 [00:00<00:00, 30.41it/s] 81%|########  | 21/26 [00:00<00:00, 31.36it/s] 96%|#########6| 25/26 [00:00<00:00, 32.15it/s]100%|##########| 26/26 [00:00<00:00, 26.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.986 (1.165)	train_nll   0.33 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.65 (  0.80)	train_acc   0.87 (  0.85)	train_minacc   0.06 (  0.17)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 5.2771 (4.8411)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 27%|##6       | 7/26 [00:00<00:00, 28.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.99it/s] 46%|####6     | 12/26 [00:00<00:00, 36.07it/s] 65%|######5   | 17/26 [00:00<00:00, 40.65it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.65it/s] 88%|########8 | 23/26 [00:00<00:00, 46.48it/s]100%|##########| 26/26 [00:00<00:00, 36.32it/s]
Test: [   0/  26]	Loss 0.375 (0.375)	test_acc   0.86 (  0.86)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.375 (0.375)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.372 (0.357)	test_acc   0.84 (  0.85)	test_minacc   0.06 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.372 (0.357)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.06 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.369 (0.353)	test_acc   0.86 (  0.85)	test_minacc   0.05 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.369 (0.353)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.05 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.319 (0.350)	test_acc   0.88 (  0.85)	test_minacc   0.18 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.319 (0.350)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.18 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.96it/s]
Test: [  0/  1]	Loss 1.688 (1.688)	test_acc   0.17 (  0.17)	test_minacc   0.09 (  0.09)	test_majacc   0.95 (  0.95)	Loss_d 1.688 (1.688)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.688 (1.688)	test_acc   0.17 (  0.17)	test_minacc   0.09 (  0.09)	test_majacc   0.95 (  0.95)	Loss_d 1.688 (1.688)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.81 (  0.81)
Overall Timing[  5/  1]	epoch_time 0.0378 (0.0443)	validation_time 0.0003 (0.0014)	train_time 0.0375 (0.0420)
record: (train_acc, test_acc) (0.8438000240325928, 0.359000027179718)
last accs (train_acc, test_acc) (0.8532000238895416, 0.1730000078678131)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 19%|#9        | 5/26 [00:00<00:01, 20.39it/s] 35%|###4      | 9/26 [00:00<00:00, 25.69it/s] 50%|#####     | 13/26 [00:00<00:00, 28.95it/s] 65%|######5   | 17/26 [00:00<00:00, 30.49it/s] 81%|########  | 21/26 [00:00<00:00, 31.84it/s] 96%|#########6| 25/26 [00:00<00:00, 32.65it/s]100%|##########| 26/26 [00:00<00:00, 27.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.773 (0.886)	train_nll   0.35 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.43 (  0.53)	train_acc   0.85 (  0.86)	train_minacc   0.36 (  0.18)	train_majacc   0.92 (  0.98)	train_corr   0.00 (  0.00)	l1 6.3213 (5.8743)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.01it/s] 31%|###       | 8/26 [00:00<00:00, 34.88it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.88it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.62it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.62it/s]100%|##########| 26/26 [00:00<00:00, 49.46it/s]100%|##########| 26/26 [00:00<00:00, 39.71it/s]
Test: [   0/  26]	Loss 0.356 (0.356)	test_acc   0.84 (  0.84)	test_minacc   0.23 (  0.23)	test_majacc   0.94 (  0.94)	Loss_d 0.356 (0.356)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.373 (0.353)	test_acc   0.84 (  0.85)	test_minacc   0.25 (  0.33)	test_majacc   0.96 (  0.94)	Loss_d 0.373 (0.353)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.25 (  0.33)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.89 (  0.87)
Test: [  20/  26]	Loss 0.365 (0.348)	test_acc   0.85 (  0.85)	test_minacc   0.24 (  0.35)	test_majacc   0.95 (  0.94)	Loss_d 0.365 (0.348)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.24 (  0.35)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.89 (  0.87)
Test: [  26/  26]	Loss 0.312 (0.345)	test_acc   0.89 (  0.86)	test_minacc   0.39 (  0.35)	test_majacc   0.96 (  0.95)	Loss_d 0.312 (0.345)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.39 (  0.35)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.89 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.72it/s]
Test: [  0/  1]	Loss 1.451 (1.451)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.95 (  0.95)	Loss_d 1.451 (1.451)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.64 (  0.64)
Test: [  1/  1]	Loss 1.451 (1.451)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.95 (  0.95)	Loss_d 1.451 (1.451)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.64 (  0.64)
Overall Timing[  6/  1]	epoch_time 0.0381 (0.0434)	validation_time 0.0004 (0.0013)	train_time 0.0377 (0.0414)
record: (train_acc, test_acc) (0.8438000240325928, 0.359000027179718)
last accs (train_acc, test_acc) (0.8569000182747841, 0.3500000238418579)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 19%|#9        | 5/26 [00:00<00:01, 20.86it/s] 35%|###4      | 9/26 [00:00<00:00, 26.23it/s] 50%|#####     | 13/26 [00:00<00:00, 29.34it/s] 65%|######5   | 17/26 [00:00<00:00, 30.95it/s] 81%|########  | 21/26 [00:00<00:00, 32.09it/s] 96%|#########6| 25/26 [00:00<00:00, 32.87it/s]100%|##########| 26/26 [00:00<00:00, 27.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.635 (0.714)	train_nll   0.33 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.31 (  0.36)	train_acc   0.87 (  0.85)	train_minacc   0.18 (  0.17)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 7.8119 (6.9822)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s] 27%|##6       | 7/26 [00:00<00:00, 36.31it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.31it/s] 50%|#####     | 13/26 [00:00<00:00, 42.98it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.60it/s] 96%|#########6| 25/26 [00:00<00:00, 48.58it/s]100%|##########| 26/26 [00:00<00:00, 40.57it/s]
Test: [   0/  26]	Loss 0.364 (0.364)	test_acc   0.84 (  0.84)	test_minacc   0.21 (  0.21)	test_majacc   0.95 (  0.95)	Loss_d 0.364 (0.364)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.372 (0.355)	test_acc   0.84 (  0.85)	test_minacc   0.27 (  0.31)	test_majacc   0.95 (  0.95)	Loss_d 0.372 (0.355)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.27 (  0.31)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.87)
Test: [  20/  26]	Loss 0.368 (0.347)	test_acc   0.86 (  0.86)	test_minacc   0.29 (  0.35)	test_majacc   0.95 (  0.95)	Loss_d 0.368 (0.347)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.29 (  0.35)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.87)
Test: [  26/  26]	Loss 0.312 (0.344)	test_acc   0.88 (  0.86)	test_minacc   0.42 (  0.35)	test_majacc   0.94 (  0.95)	Loss_d 0.312 (0.344)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.42 (  0.35)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.87 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.03it/s]
Test: [  0/  1]	Loss 1.482 (1.482)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.90 (  0.90)	Loss_d 1.482 (1.482)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.56 (  0.56)
Test: [  1/  1]	Loss 1.482 (1.482)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.90 (  0.90)	Loss_d 1.482 (1.482)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.56 (  0.56)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/46/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0365 (0.0425)	validation_time 0.0004 (0.0012)	train_time 0.0360 (0.0407)
record: (train_acc, test_acc) (0.8572000222802162, 0.3680000305175781)
last accs (train_acc, test_acc) (0.8572000222802162, 0.3680000305175781)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.05it/s] 19%|#9        | 5/26 [00:00<00:01, 19.28it/s] 35%|###4      | 9/26 [00:00<00:00, 24.55it/s] 50%|#####     | 13/26 [00:00<00:00, 28.15it/s] 62%|######1   | 16/26 [00:00<00:00, 28.33it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.04it/s] 92%|#########2| 24/26 [00:00<00:00, 31.23it/s]100%|##########| 26/26 [00:01<00:00, 25.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.544 (0.612)	train_nll   0.33 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.22 (  0.26)	train_acc   0.85 (  0.85)	train_minacc   0.06 (  0.20)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 9.2047 (8.7076)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.92it/s] 27%|##6       | 7/26 [00:00<00:00, 22.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 22.90it/s] 50%|#####     | 13/26 [00:00<00:00, 33.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.76it/s] 96%|#########6| 25/26 [00:00<00:00, 44.16it/s]100%|##########| 26/26 [00:00<00:00, 33.08it/s]
Test: [   0/  26]	Loss 0.349 (0.349)	test_acc   0.86 (  0.86)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 0.349 (0.349)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.352 (0.332)	test_acc   0.86 (  0.86)	test_minacc   0.16 (  0.19)	test_majacc   0.99 (  0.98)	Loss_d 0.352 (0.332)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.16 (  0.19)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.346 (0.329)	test_acc   0.87 (  0.86)	test_minacc   0.13 (  0.20)	test_majacc   0.99 (  0.98)	Loss_d 0.346 (0.329)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.13 (  0.20)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.301 (0.327)	test_acc   0.87 (  0.86)	test_minacc   0.15 (  0.21)	test_majacc   0.98 (  0.98)	Loss_d 0.301 (0.327)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.15 (  0.21)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.25it/s]
Test: [  0/  1]	Loss 1.536 (1.536)	test_acc   0.28 (  0.28)	test_minacc   0.21 (  0.21)	test_majacc   0.94 (  0.94)	Loss_d 1.536 (1.536)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.536 (1.536)	test_acc   0.28 (  0.28)	test_minacc   0.21 (  0.21)	test_majacc   0.94 (  0.94)	Loss_d 1.536 (1.536)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.69 (  0.69)
Overall Timing[  8/  1]	epoch_time 0.0377 (0.0420)	validation_time 0.0003 (0.0011)	train_time 0.0373 (0.0404)
record: (train_acc, test_acc) (0.8572000222802162, 0.3680000305175781)
last accs (train_acc, test_acc) (0.8615000250935555, 0.28300002217292786)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.10it/s] 19%|#9        | 5/26 [00:00<00:01, 17.75it/s] 35%|###4      | 9/26 [00:00<00:00, 23.88it/s] 50%|#####     | 13/26 [00:00<00:00, 27.59it/s] 65%|######5   | 17/26 [00:00<00:00, 29.88it/s] 81%|########  | 21/26 [00:00<00:00, 31.26it/s] 96%|#########6| 25/26 [00:00<00:00, 31.72it/s]100%|##########| 26/26 [00:01<00:00, 25.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.503 (0.526)	train_nll   0.34 (  0.34)	train_penalty   0.01 (  0.03)	weight_norm   0.16 (  0.18)	train_acc   0.85 (  0.86)	train_minacc   0.36 (  0.23)	train_majacc   0.93 (  0.97)	train_corr   0.00 (  0.00)	l1 11.0344 (10.2632)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.24it/s] 35%|###4      | 9/26 [00:00<00:00, 40.44it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.44it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.93it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.93it/s] 81%|########  | 21/26 [00:00<00:00, 48.17it/s]100%|##########| 26/26 [00:00<00:00, 42.75it/s]
Test: [   0/  26]	Loss 0.345 (0.345)	test_acc   0.86 (  0.86)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 0.345 (0.345)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.350 (0.334)	test_acc   0.85 (  0.86)	test_minacc   0.14 (  0.18)	test_majacc   0.99 (  0.98)	Loss_d 0.350 (0.334)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.14 (  0.18)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.351 (0.332)	test_acc   0.85 (  0.86)	test_minacc   0.04 (  0.19)	test_majacc   0.98 (  0.97)	Loss_d 0.351 (0.332)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.04 (  0.19)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.293 (0.329)	test_acc   0.88 (  0.86)	test_minacc   0.21 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 0.293 (0.329)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.21 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.06it/s]
Test: [  0/  1]	Loss 1.578 (1.578)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.93 (  0.93)	Loss_d 1.578 (1.578)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.578 (1.578)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.93 (  0.93)	Loss_d 1.578 (1.578)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.73 (  0.73)
Overall Timing[  9/  1]	epoch_time 0.0367 (0.0415)	validation_time 0.0004 (0.0010)	train_time 0.0363 (0.0399)
record: (train_acc, test_acc) (0.8572000222802162, 0.3680000305175781)
last accs (train_acc, test_acc) (0.859300023317337, 0.2580000162124634)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.05it/s] 19%|#9        | 5/26 [00:00<00:01, 19.73it/s] 35%|###4      | 9/26 [00:00<00:00, 25.53it/s] 50%|#####     | 13/26 [00:00<00:00, 28.80it/s] 65%|######5   | 17/26 [00:00<00:00, 30.85it/s] 81%|########  | 21/26 [00:00<00:00, 32.10it/s] 96%|#########6| 25/26 [00:00<00:00, 32.77it/s]100%|##########| 26/26 [00:00<00:00, 27.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.438 (0.485)	train_nll   0.30 (  0.34)	train_penalty   0.02 (  0.03)	weight_norm   0.13 (  0.15)	train_acc   0.88 (  0.86)	train_minacc   0.36 (  0.25)	train_majacc   0.95 (  0.97)	train_corr   0.00 (  0.00)	l1 12.7165 (11.9468)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.04it/s] 35%|###4      | 9/26 [00:00<00:00, 38.96it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.96it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.43it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.43it/s] 81%|########  | 21/26 [00:00<00:00, 47.42it/s]100%|##########| 26/26 [00:00<00:00, 42.10it/s]
Test: [   0/  26]	Loss 0.328 (0.328)	test_acc   0.86 (  0.86)	test_minacc   0.25 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 0.328 (0.328)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.328 (0.318)	test_acc   0.86 (  0.87)	test_minacc   0.36 (  0.37)	test_majacc   0.96 (  0.96)	Loss_d 0.328 (0.318)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.36 (  0.37)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.339 (0.316)	test_acc   0.87 (  0.87)	test_minacc   0.27 (  0.38)	test_majacc   0.97 (  0.96)	Loss_d 0.339 (0.316)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.27 (  0.38)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.88)
Test: [  26/  26]	Loss 0.285 (0.314)	test_acc   0.89 (  0.87)	test_minacc   0.36 (  0.38)	test_majacc   0.97 (  0.96)	Loss_d 0.285 (0.314)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.36 (  0.38)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.19it/s]
Test: [  0/  1]	Loss 1.448 (1.448)	test_acc   0.39 (  0.39)	test_minacc   0.34 (  0.34)	test_majacc   0.89 (  0.89)	Loss_d 1.448 (1.448)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.55 (  0.55)
Test: [  1/  1]	Loss 1.448 (1.448)	test_acc   0.39 (  0.39)	test_minacc   0.34 (  0.34)	test_majacc   0.89 (  0.89)	Loss_d 1.448 (1.448)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.55 (  0.55)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/46/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0380 (0.0411)	validation_time 0.0003 (0.0009)	train_time 0.0376 (0.0397)
record: (train_acc, test_acc) (0.8734000254273414, 0.39100003242492676)
last accs (train_acc, test_acc) (0.8734000254273414, 0.39100003242492676)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.80it/s] 23%|##3       | 6/26 [00:00<00:00, 25.30it/s] 38%|###8      | 10/26 [00:00<00:00, 29.04it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.10it/s] 69%|######9   | 18/26 [00:00<00:00, 31.43it/s] 85%|########4 | 22/26 [00:00<00:00, 32.55it/s]100%|##########| 26/26 [00:00<00:00, 33.46it/s]100%|##########| 26/26 [00:00<00:00, 28.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.446 (0.460)	train_nll   0.34 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.11 (  0.12)	train_acc   0.84 (  0.86)	train_minacc   0.48 (  0.27)	train_majacc   0.89 (  0.96)	train_corr   0.00 (  0.00)	l1 14.3496 (13.6597)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.73it/s] 27%|##6       | 7/26 [00:00<00:00, 33.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.66it/s] 46%|####6     | 12/26 [00:00<00:00, 38.69it/s] 69%|######9   | 18/26 [00:00<00:00, 45.93it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.93it/s] 92%|#########2| 24/26 [00:00<00:00, 47.02it/s]100%|##########| 26/26 [00:00<00:00, 40.28it/s]
Test: [   0/  26]	Loss 0.340 (0.340)	test_acc   0.85 (  0.85)	test_minacc   0.29 (  0.29)	test_majacc   0.95 (  0.95)	Loss_d 0.340 (0.340)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.326 (0.326)	test_acc   0.86 (  0.86)	test_minacc   0.41 (  0.43)	test_majacc   0.95 (  0.94)	Loss_d 0.326 (0.326)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.41 (  0.43)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.86 (  0.85)
Test: [  20/  26]	Loss 0.363 (0.325)	test_acc   0.84 (  0.86)	test_minacc   0.27 (  0.43)	test_majacc   0.93 (  0.94)	Loss_d 0.363 (0.325)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.27 (  0.43)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.87 (  0.84)
Test: [  26/  26]	Loss 0.274 (0.321)	test_acc   0.89 (  0.86)	test_minacc   0.48 (  0.44)	test_majacc   0.95 (  0.94)	Loss_d 0.274 (0.321)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.48 (  0.44)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.86 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.87it/s]
Test: [  0/  1]	Loss 1.362 (1.362)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.90 (  0.90)	Loss_d 1.362 (1.362)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.47 (  0.47)
Test: [  1/  1]	Loss 1.362 (1.362)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.90 (  0.90)	Loss_d 1.362 (1.362)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.47 (  0.47)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/46/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0360 (0.0407)	validation_time 0.0004 (0.0009)	train_time 0.0355 (0.0394)
record: (train_acc, test_acc) (0.86450002014637, 0.43400001525878906)
last accs (train_acc, test_acc) (0.86450002014637, 0.43400001525878906)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.20it/s] 19%|#9        | 5/26 [00:00<00:00, 21.93it/s] 35%|###4      | 9/26 [00:00<00:00, 26.20it/s] 50%|#####     | 13/26 [00:00<00:00, 29.00it/s] 65%|######5   | 17/26 [00:00<00:00, 30.69it/s] 81%|########  | 21/26 [00:00<00:00, 31.62it/s] 96%|#########6| 25/26 [00:00<00:00, 32.18it/s]100%|##########| 26/26 [00:00<00:00, 27.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.389 (0.452)	train_nll   0.29 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.10 (  0.10)	train_acc   0.88 (  0.85)	train_minacc   0.27 (  0.23)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 15.2067 (14.7164)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.58it/s] 27%|##6       | 7/26 [00:00<00:00, 35.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.38it/s] 50%|#####     | 13/26 [00:00<00:00, 41.14it/s] 69%|######9   | 18/26 [00:00<00:00, 35.56it/s]                                                69%|######9   | 18/26 [00:00<00:00, 35.56it/s]100%|##########| 26/26 [00:00<00:00, 47.13it/s]100%|##########| 26/26 [00:00<00:00, 37.21it/s]
Test: [   0/  26]	Loss 0.335 (0.335)	test_acc   0.86 (  0.86)	test_minacc   0.21 (  0.21)	test_majacc   0.97 (  0.97)	Loss_d 0.335 (0.335)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.341 (0.332)	test_acc   0.85 (  0.86)	test_minacc   0.22 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 0.341 (0.332)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.22 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.90)
Test: [  20/  26]	Loss 0.355 (0.326)	test_acc   0.85 (  0.86)	test_minacc   0.18 (  0.27)	test_majacc   0.96 (  0.97)	Loss_d 0.355 (0.326)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.18 (  0.27)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.276 (0.323)	test_acc   0.88 (  0.87)	test_minacc   0.27 (  0.28)	test_majacc   0.97 (  0.97)	Loss_d 0.276 (0.323)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.27 (  0.28)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.40it/s]
Test: [  0/  1]	Loss 1.493 (1.493)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.95 (  0.95)	Loss_d 1.493 (1.493)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.66 (  0.66)
Test: [  1/  1]	Loss 1.493 (1.493)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.95 (  0.95)	Loss_d 1.493 (1.493)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.66 (  0.66)
Overall Timing[ 12/  1]	epoch_time 0.0382 (0.0405)	validation_time 0.0004 (0.0009)	train_time 0.0378 (0.0393)
record: (train_acc, test_acc) (0.86450002014637, 0.43400001525878906)
last accs (train_acc, test_acc) (0.8654000254869461, 0.3160000145435333)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.53it/s] 19%|#9        | 5/26 [00:00<00:00, 23.31it/s] 35%|###4      | 9/26 [00:00<00:00, 27.07it/s] 50%|#####     | 13/26 [00:00<00:00, 29.72it/s] 65%|######5   | 17/26 [00:00<00:00, 31.22it/s] 81%|########  | 21/26 [00:00<00:00, 32.40it/s] 96%|#########6| 25/26 [00:00<00:00, 33.27it/s]100%|##########| 26/26 [00:00<00:00, 28.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.397 (0.427)	train_nll   0.31 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.88 (  0.86)	train_minacc   0.39 (  0.28)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 16.3902 (15.9470)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.88it/s] 27%|##6       | 7/26 [00:00<00:00, 31.55it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.55it/s] 50%|#####     | 13/26 [00:00<00:00, 38.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.21it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.21it/s] 96%|#########6| 25/26 [00:00<00:00, 46.30it/s]100%|##########| 26/26 [00:00<00:00, 37.86it/s]
Test: [   0/  26]	Loss 0.332 (0.332)	test_acc   0.87 (  0.87)	test_minacc   0.34 (  0.34)	test_majacc   0.96 (  0.96)	Loss_d 0.332 (0.332)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.333 (0.328)	test_acc   0.85 (  0.86)	test_minacc   0.41 (  0.41)	test_majacc   0.94 (  0.94)	Loss_d 0.333 (0.328)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.85 (  0.85)
Test: [  20/  26]	Loss 0.372 (0.326)	test_acc   0.85 (  0.86)	test_minacc   0.27 (  0.42)	test_majacc   0.95 (  0.94)	Loss_d 0.372 (0.326)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.27 (  0.42)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.88 (  0.85)
Test: [  26/  26]	Loss 0.288 (0.322)	test_acc   0.88 (  0.87)	test_minacc   0.48 (  0.43)	test_majacc   0.94 (  0.94)	Loss_d 0.288 (0.322)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.48 (  0.43)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.04it/s]
Test: [  0/  1]	Loss 1.304 (1.304)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.89 (  0.89)	Loss_d 1.304 (1.304)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.48 (  0.48)
Test: [  1/  1]	Loss 1.304 (1.304)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.89 (  0.89)	Loss_d 1.304 (1.304)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.48 (  0.48)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/46/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0387 (0.0404)	validation_time 0.0004 (0.0008)	train_time 0.0382 (0.0392)
record: (train_acc, test_acc) (0.8650000185370446, 0.4400000274181366)
last accs (train_acc, test_acc) (0.8650000185370446, 0.4400000274181366)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.88it/s] 19%|#9        | 5/26 [00:00<00:01, 19.42it/s] 35%|###4      | 9/26 [00:00<00:00, 25.39it/s] 50%|#####     | 13/26 [00:00<00:00, 28.42it/s] 65%|######5   | 17/26 [00:00<00:00, 30.00it/s] 81%|########  | 21/26 [00:00<00:00, 31.37it/s] 96%|#########6| 25/26 [00:00<00:00, 32.29it/s]100%|##########| 26/26 [00:00<00:00, 26.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.389 (0.415)	train_nll   0.31 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.08 (  0.09)	train_acc   0.87 (  0.86)	train_minacc   0.21 (  0.31)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 17.2551 (16.8416)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.83it/s] 31%|###       | 8/26 [00:00<00:00, 41.32it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.32it/s] 50%|#####     | 13/26 [00:00<00:00, 42.09it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.55it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.55it/s] 96%|#########6| 25/26 [00:00<00:00, 48.34it/s]100%|##########| 26/26 [00:00<00:00, 41.65it/s]
Test: [   0/  26]	Loss 0.337 (0.337)	test_acc   0.86 (  0.86)	test_minacc   0.25 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 0.337 (0.337)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.326 (0.322)	test_acc   0.86 (  0.86)	test_minacc   0.33 (  0.37)	test_majacc   0.96 (  0.95)	Loss_d 0.326 (0.322)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.33 (  0.37)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.89 (  0.87)
Test: [  20/  26]	Loss 0.347 (0.319)	test_acc   0.86 (  0.86)	test_minacc   0.33 (  0.37)	test_majacc   0.95 (  0.95)	Loss_d 0.347 (0.319)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.33 (  0.37)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.87)
Test: [  26/  26]	Loss 0.284 (0.316)	test_acc   0.90 (  0.87)	test_minacc   0.52 (  0.38)	test_majacc   0.96 (  0.95)	Loss_d 0.284 (0.316)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.52 (  0.38)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.88 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.29it/s]
Test: [  0/  1]	Loss 1.292 (1.292)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.91 (  0.91)	Loss_d 1.292 (1.292)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 1.292 (1.292)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.91 (  0.91)	Loss_d 1.292 (1.292)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.53 (  0.53)
Overall Timing[ 14/  1]	epoch_time 0.0378 (0.0402)	validation_time 0.0003 (0.0008)	train_time 0.0375 (0.0391)
record: (train_acc, test_acc) (0.8650000185370446, 0.4400000274181366)
last accs (train_acc, test_acc) (0.8668000261187554, 0.3960000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 19%|#9        | 5/26 [00:00<00:00, 22.09it/s] 35%|###4      | 9/26 [00:00<00:00, 27.29it/s] 50%|#####     | 13/26 [00:00<00:00, 29.97it/s] 65%|######5   | 17/26 [00:00<00:00, 31.61it/s] 81%|########  | 21/26 [00:00<00:00, 32.56it/s] 96%|#########6| 25/26 [00:00<00:00, 32.85it/s]100%|##########| 26/26 [00:00<00:00, 28.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.001 (0.161)	train_nll   0.59 (  0.43)	train_penalty   0.00 (  0.01)	weight_norm   0.10 (  0.08)	train_acc   0.67 (  0.79)	train_minacc   0.67 (  0.48)	train_majacc   0.67 (  0.85)	train_corr   0.00 (  0.00)	l1 17.2534 (17.3847)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.20it/s] 31%|###       | 8/26 [00:00<00:00, 34.17it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.17it/s] 50%|#####     | 13/26 [00:00<00:00, 38.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.94it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.94it/s] 96%|#########6| 25/26 [00:00<00:00, 46.80it/s]100%|##########| 26/26 [00:00<00:00, 37.80it/s]
Test: [   0/  26]	Loss 0.598 (0.598)	test_acc   0.67 (  0.67)	test_minacc   0.62 (  0.62)	test_majacc   0.68 (  0.68)	Loss_d 0.598 (0.598)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.45 (  0.45)
Test: [  10/  26]	Loss 0.622 (0.619)	test_acc   0.63 (  0.65)	test_minacc   0.58 (  0.61)	test_majacc   0.64 (  0.66)	Loss_d 0.622 (0.619)	test_acc_d   0.63 (  0.65)	test_minacc_d   0.58 (  0.61)	test_majacc_d   0.64 (  0.66)	test_corr_d   0.34 (  0.36)
Test: [  20/  26]	Loss 0.617 (0.616)	test_acc   0.65 (  0.66)	test_minacc   0.55 (  0.62)	test_majacc   0.66 (  0.67)	Loss_d 0.617 (0.616)	test_acc_d   0.65 (  0.66)	test_minacc_d   0.55 (  0.62)	test_majacc_d   0.66 (  0.67)	test_corr_d   0.41 (  0.35)
Test: [  26/  26]	Loss 0.596 (0.617)	test_acc   0.65 (  0.66)	test_minacc   0.64 (  0.62)	test_majacc   0.65 (  0.66)	Loss_d 0.596 (0.617)	test_acc_d   0.65 (  0.66)	test_minacc_d   0.64 (  0.62)	test_majacc_d   0.65 (  0.66)	test_corr_d   0.39 (  0.35)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.07it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.64 (  0.64)	Loss_d 0.687 (0.687)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.64 (  0.64)	Loss_d 0.687 (0.687)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.20 ( -0.20)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/46/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0374 (0.0400)	validation_time 0.0004 (0.0008)	train_time 0.0369 (0.0389)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.92it/s] 27%|##6       | 7/26 [00:00<00:00, 27.41it/s] 42%|####2     | 11/26 [00:00<00:00, 30.18it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.66it/s] 88%|########8 | 23/26 [00:00<00:00, 33.32it/s]100%|##########| 26/26 [00:00<00:00, 29.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.001 (0.001)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.64 (  0.63)	train_minacc   0.61 (  0.59)	train_majacc   0.64 (  0.63)	train_corr   0.00 (  0.00)	l1 16.9753 (17.0815)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.85it/s] 31%|###       | 8/26 [00:00<00:00, 43.24it/s]                                               31%|###       | 8/26 [00:00<00:00, 43.24it/s] 50%|#####     | 13/26 [00:00<00:00, 45.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.84it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.84it/s] 96%|#########6| 25/26 [00:00<00:00, 50.01it/s]100%|##########| 26/26 [00:00<00:00, 42.72it/s]
Test: [   0/  26]	Loss 0.648 (0.648)	test_acc   0.65 (  0.65)	test_minacc   0.59 (  0.59)	test_majacc   0.66 (  0.66)	Loss_d 0.648 (0.648)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.654 (0.656)	test_acc   0.62 (  0.62)	test_minacc   0.52 (  0.58)	test_majacc   0.63 (  0.63)	Loss_d 0.654 (0.656)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.28 (  0.29)
Test: [  20/  26]	Loss 0.650 (0.654)	test_acc   0.63 (  0.63)	test_minacc   0.55 (  0.60)	test_majacc   0.65 (  0.64)	Loss_d 0.650 (0.654)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.55 (  0.60)	test_majacc_d   0.65 (  0.64)	test_corr_d   0.32 (  0.28)
Test: [  26/  26]	Loss 0.642 (0.654)	test_acc   0.64 (  0.63)	test_minacc   0.61 (  0.60)	test_majacc   0.64 (  0.64)	Loss_d 0.642 (0.654)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.61 (  0.60)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.36 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.18it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.63 (  0.63)	Loss_d 0.676 (0.676)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.63 (  0.63)	Loss_d 0.676 (0.676)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 16/  1]	epoch_time 0.0359 (0.0398)	validation_time 0.0003 (0.0007)	train_time 0.0356 (0.0387)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.6290000143647194, 0.5900000333786011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.09it/s] 19%|#9        | 5/26 [00:00<00:00, 21.37it/s] 35%|###4      | 9/26 [00:00<00:00, 26.47it/s] 46%|####6     | 12/26 [00:00<00:00, 25.19it/s] 62%|######1   | 16/26 [00:00<00:00, 28.11it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.97it/s] 92%|#########2| 24/26 [00:00<00:00, 31.36it/s]100%|##########| 26/26 [00:00<00:00, 26.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.50 (  0.53)	train_minacc   0.55 (  0.53)	train_majacc   0.49 (  0.53)	train_corr   0.00 (  0.00)	l1 16.9218 (16.9427)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 27%|##6       | 7/26 [00:00<00:00, 33.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.88it/s] 50%|#####     | 13/26 [00:00<00:00, 41.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.46it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.46it/s] 96%|#########6| 25/26 [00:00<00:00, 47.47it/s]100%|##########| 26/26 [00:00<00:00, 39.27it/s]
Test: [   0/  26]	Loss 0.680 (0.680)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.680 (0.680)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.679 (0.683)	test_acc   0.52 (  0.50)	test_minacc   0.62 (  0.52)	test_majacc   0.50 (  0.49)	Loss_d 0.679 (0.683)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.19 (  0.19)
Test: [  20/  26]	Loss 0.680 (0.681)	test_acc   0.51 (  0.50)	test_minacc   0.58 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.680 (0.681)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.20 (  0.17)
Test: [  26/  26]	Loss 0.678 (0.682)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.678 (0.682)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.25 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.97it/s]
Test: [  0/  1]	Loss 0.680 (0.680)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.680 (0.680)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.680 (0.680)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.680 (0.680)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 17/  1]	epoch_time 0.0368 (0.0396)	validation_time 0.0004 (0.0007)	train_time 0.0364 (0.0386)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5001000092923641, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.83it/s] 19%|#9        | 5/26 [00:00<00:00, 21.92it/s] 35%|###4      | 9/26 [00:00<00:00, 27.19it/s] 50%|#####     | 13/26 [00:00<00:00, 29.79it/s] 65%|######5   | 17/26 [00:00<00:00, 31.40it/s] 81%|########  | 21/26 [00:00<00:00, 32.47it/s] 96%|#########6| 25/26 [00:00<00:00, 33.31it/s]100%|##########| 26/26 [00:00<00:00, 28.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.50 (  0.50)	train_minacc   0.55 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 16.9085 (16.9137)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.84it/s] 31%|###       | 8/26 [00:00<00:00, 41.17it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.17it/s] 50%|#####     | 13/26 [00:00<00:00, 42.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.58it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.58it/s] 96%|#########6| 25/26 [00:00<00:00, 48.17it/s]100%|##########| 26/26 [00:00<00:00, 41.28it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.686 (0.690)	test_acc   0.52 (  0.50)	test_minacc   0.62 (  0.52)	test_majacc   0.50 (  0.49)	Loss_d 0.686 (0.690)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.23 (  0.24)
Test: [  20/  26]	Loss 0.688 (0.689)	test_acc   0.51 (  0.50)	test_minacc   0.58 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.688 (0.689)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.21 (  0.22)
Test: [  26/  26]	Loss 0.688 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.688 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.28 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.46it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 18/  1]	epoch_time 0.0370 (0.0395)	validation_time 0.0004 (0.0007)	train_time 0.0365 (0.0385)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5000000104606152, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.12it/s] 19%|#9        | 5/26 [00:00<00:00, 22.19it/s] 35%|###4      | 9/26 [00:00<00:00, 27.04it/s] 50%|#####     | 13/26 [00:00<00:00, 29.47it/s] 65%|######5   | 17/26 [00:00<00:00, 30.84it/s] 81%|########  | 21/26 [00:00<00:00, 31.35it/s] 96%|#########6| 25/26 [00:00<00:00, 32.28it/s]100%|##########| 26/26 [00:00<00:00, 27.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.50 (  0.50)	train_minacc   0.55 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 16.9044 (16.9058)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.20it/s] 31%|###       | 8/26 [00:00<00:00, 38.40it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.40it/s] 50%|#####     | 13/26 [00:00<00:00, 41.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.00it/s] 92%|#########2| 24/26 [00:00<00:00, 48.13it/s]100%|##########| 26/26 [00:00<00:00, 40.47it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.62 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.691 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.62 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.58 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.03 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.13it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 19/  1]	epoch_time 0.0366 (0.0393)	validation_time 0.0004 (0.0007)	train_time 0.0361 (0.0384)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.4990000133812428, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.89it/s] 23%|##3       | 6/26 [00:00<00:00, 26.04it/s] 38%|###8      | 10/26 [00:00<00:00, 29.49it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.93it/s] 69%|######9   | 18/26 [00:00<00:00, 31.76it/s] 85%|########4 | 22/26 [00:00<00:00, 32.80it/s]100%|##########| 26/26 [00:00<00:00, 32.88it/s]100%|##########| 26/26 [00:00<00:00, 28.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.48 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 16.9032 (16.9034)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 27%|##6       | 7/26 [00:00<00:00, 35.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.21it/s] 50%|#####     | 13/26 [00:00<00:00, 42.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.78it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.78it/s] 96%|#########6| 25/26 [00:00<00:00, 48.29it/s]100%|##########| 26/26 [00:00<00:00, 40.12it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.34 (  0.34)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.694)	test_acc   0.53 (  0.50)	test_minacc   0.61 (  0.44)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.694)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.61 (  0.44)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.694)	test_acc   0.52 (  0.51)	test_minacc   0.53 (  0.45)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.694)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.53 (  0.45)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.06 ( -0.03)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.45)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.45)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.04 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.95it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.44 (  0.44)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.44 (  0.44)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 20/  1]	epoch_time 0.0371 (0.0392)	validation_time 0.0003 (0.0007)	train_time 0.0368 (0.0383)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5037000151276588, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.38it/s] 19%|#9        | 5/26 [00:00<00:00, 23.18it/s] 35%|###4      | 9/26 [00:00<00:00, 26.87it/s] 50%|#####     | 13/26 [00:00<00:00, 29.33it/s] 65%|######5   | 17/26 [00:00<00:00, 31.16it/s] 81%|########  | 21/26 [00:00<00:00, 32.21it/s] 96%|#########6| 25/26 [00:00<00:00, 32.93it/s]100%|##########| 26/26 [00:00<00:00, 28.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.44 (  0.51)	train_minacc   0.42 (  0.46)	train_majacc   0.44 (  0.52)	train_corr   0.00 (  0.00)	l1 16.9025 (16.9025)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.69it/s] 31%|###       | 8/26 [00:00<00:00, 37.26it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.26it/s] 50%|#####     | 13/26 [00:00<00:00, 42.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.01it/s] 96%|#########6| 25/26 [00:00<00:00, 48.62it/s]100%|##########| 26/26 [00:00<00:00, 41.20it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.38 (  0.38)	test_majacc   0.47 (  0.47)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.694)	test_acc   0.51 (  0.48)	test_minacc   0.56 (  0.43)	test_majacc   0.50 (  0.49)	Loss_d 0.692 (0.694)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.56 (  0.43)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.04 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.694)	test_acc   0.51 (  0.48)	test_minacc   0.53 (  0.46)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.694)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.53 (  0.46)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.08 ( -0.05)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.48)	test_minacc   0.39 (  0.45)	test_majacc   0.47 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.39 (  0.45)	test_majacc_d   0.47 (  0.49)	test_corr_d  -0.06 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.63it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 21/  1]	epoch_time 0.0366 (0.0391)	validation_time 0.0004 (0.0007)	train_time 0.0362 (0.0382)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.48320000812411307, 0.5580000281333923)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.52it/s] 19%|#9        | 5/26 [00:00<00:01, 20.87it/s] 35%|###4      | 9/26 [00:00<00:00, 26.03it/s] 50%|#####     | 13/26 [00:00<00:00, 28.98it/s] 65%|######5   | 17/26 [00:00<00:00, 30.77it/s] 81%|########  | 21/26 [00:00<00:00, 31.97it/s] 96%|#########6| 25/26 [00:00<00:00, 32.24it/s]100%|##########| 26/26 [00:00<00:00, 27.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.47 (  0.51)	train_minacc   0.42 (  0.49)	train_majacc   0.48 (  0.51)	train_corr   0.00 (  0.00)	l1 16.9021 (16.9020)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.21it/s] 27%|##6       | 7/26 [00:00<00:00, 36.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.29it/s] 46%|####6     | 12/26 [00:00<00:00, 41.45it/s] 69%|######9   | 18/26 [00:00<00:00, 47.42it/s]                                                69%|######9   | 18/26 [00:00<00:00, 47.42it/s] 92%|#########2| 24/26 [00:00<00:00, 48.70it/s]100%|##########| 26/26 [00:00<00:00, 41.37it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.36 (  0.36)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.51 (  0.48)	test_minacc   0.61 (  0.43)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.694)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.61 (  0.43)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.694)	test_acc   0.50 (  0.49)	test_minacc   0.55 (  0.47)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.694)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.55 (  0.47)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.09 ( -0.06)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.49)	test_minacc   0.39 (  0.46)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.39 (  0.46)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.07 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.50it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 22/  1]	epoch_time 0.0371 (0.0390)	validation_time 0.0004 (0.0007)	train_time 0.0366 (0.0381)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.4857000082731247, 0.5730000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.73it/s] 15%|#5        | 4/26 [00:00<00:01, 15.09it/s] 31%|###       | 8/26 [00:00<00:00, 20.27it/s] 42%|####2     | 11/26 [00:00<00:00, 19.06it/s] 50%|#####     | 13/26 [00:00<00:00, 18.61it/s] 58%|#####7    | 15/26 [00:00<00:00, 18.28it/s] 65%|######5   | 17/26 [00:00<00:00, 18.03it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.71it/s] 81%|########  | 21/26 [00:01<00:00, 17.39it/s] 88%|########8 | 23/26 [00:01<00:00, 17.03it/s] 96%|#########6| 25/26 [00:01<00:00, 16.86it/s]100%|##########| 26/26 [00:01<00:00, 16.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 349 tensor(-0.0148, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 413 tensor(-0.0028, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 437 tensor(-0.0009, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 440 tensor(-0.0008, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 442 tensor(-0.0007, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
rho, theta 446 tensor(-0.0006, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 454 tensor(-0.0006, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
rho, theta 460 tensor(-0.0005, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 462 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
rho, theta 468 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
rho, theta 474 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 480 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
rho, theta 488 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
rho, theta 492 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
rho, theta 496 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
rho, theta 499 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
rho, theta 505 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
rho, theta 508 tensor(-0.0002, device='cuda:0')
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
Epoch: [23][  26/  26]	Loss 0.000 (0.012)	train_nll   0.69 (  0.71)	train_penalty   0.00 (  0.01)	weight_norm   0.19 (  0.15)	train_acc   0.51 (  0.52)	train_minacc   0.45 (  0.52)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 13.0336 (13.4755)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.20it/s] 19%|#9        | 5/26 [00:00<00:00, 23.98it/s]                                               19%|#9        | 5/26 [00:00<00:00, 23.98it/s] 46%|####6     | 12/26 [00:00<00:00, 38.58it/s] 69%|######9   | 18/26 [00:00<00:00, 45.14it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.14it/s] 92%|#########2| 24/26 [00:00<00:00, 46.28it/s]100%|##########| 26/26 [00:00<00:00, 38.31it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.43)	test_majacc   0.51 (  0.51)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.697 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.38 (  0.49)	test_majacc   0.50 (  0.51)	Loss_d 0.697 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.38 (  0.49)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.11 (  0.14)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.42 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.16 (  0.13)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.694)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.16 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.90it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 23/  1]	epoch_time 0.0476 (0.0394)	validation_time 0.0004 (0.0006)	train_time 0.0472 (0.0385)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5048000094294548, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.70it/s] 12%|#1        | 3/26 [00:00<00:02, 11.03it/s] 19%|#9        | 5/26 [00:00<00:01, 13.31it/s] 27%|##6       | 7/26 [00:00<00:01, 14.61it/s] 35%|###4      | 9/26 [00:00<00:01, 15.39it/s] 42%|####2     | 11/26 [00:00<00:00, 15.86it/s] 50%|#####     | 13/26 [00:00<00:00, 16.14it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.27it/s] 65%|######5   | 17/26 [00:01<00:00, 16.40it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.60it/s] 81%|########  | 21/26 [00:01<00:00, 16.62it/s] 92%|#########2| 24/26 [00:01<00:00, 19.37it/s]100%|##########| 26/26 [00:01<00:00, 16.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
rho, theta 497 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
rho, theta 508 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
rho, theta 505 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
rho, theta 509 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.50 (  0.50)	train_minacc   0.45 (  0.50)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 12.9872 (13.0215)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.48it/s] 27%|##6       | 7/26 [00:00<00:00, 33.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.57it/s] 46%|####6     | 12/26 [00:00<00:00, 37.62it/s] 69%|######9   | 18/26 [00:00<00:00, 44.03it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.03it/s] 92%|#########2| 24/26 [00:00<00:00, 45.55it/s]100%|##########| 26/26 [00:00<00:00, 38.32it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.51 (  0.51)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.698 (0.694)	test_acc   0.48 (  0.51)	test_minacc   0.38 (  0.49)	test_majacc   0.50 (  0.51)	Loss_d 0.698 (0.694)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.38 (  0.49)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.16 (  0.17)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.42 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.19 (  0.16)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.19 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.15it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 24/  1]	epoch_time 0.0482 (0.0397)	validation_time 0.0003 (0.0006)	train_time 0.0479 (0.0389)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5027000116705894, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.62it/s] 19%|#9        | 5/26 [00:00<00:01, 18.30it/s] 35%|###4      | 9/26 [00:00<00:00, 24.27it/s] 50%|#####     | 13/26 [00:00<00:00, 28.03it/s] 65%|######5   | 17/26 [00:00<00:00, 30.23it/s] 81%|########  | 21/26 [00:00<00:00, 31.37it/s] 96%|#########6| 25/26 [00:00<00:00, 31.85it/s]100%|##########| 26/26 [00:00<00:00, 26.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.51 (  0.50)	train_minacc   0.45 (  0.50)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 12.9471 (12.9590)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.83it/s] 31%|###       | 8/26 [00:00<00:00, 35.83it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.83it/s] 50%|#####     | 13/26 [00:00<00:00, 39.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.35it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.35it/s] 96%|#########6| 25/26 [00:00<00:00, 47.00it/s]100%|##########| 26/26 [00:00<00:00, 38.73it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.43)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.696 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.38 (  0.49)	test_majacc   0.50 (  0.51)	Loss_d 0.696 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.38 (  0.49)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.20 (  0.21)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.42 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.22 (  0.20)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.45 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.22 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.81it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 25/  1]	epoch_time 0.0388 (0.0397)	validation_time 0.0005 (0.0006)	train_time 0.0383 (0.0389)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5056000119149685, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.80it/s] 19%|#9        | 5/26 [00:00<00:00, 23.92it/s] 35%|###4      | 9/26 [00:00<00:00, 28.76it/s] 50%|#####     | 13/26 [00:00<00:00, 30.88it/s] 65%|######5   | 17/26 [00:00<00:00, 31.97it/s] 81%|########  | 21/26 [00:00<00:00, 32.43it/s] 96%|#########6| 25/26 [00:00<00:00, 32.54it/s]100%|##########| 26/26 [00:00<00:00, 28.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.52 (  0.51)	train_minacc   0.48 (  0.50)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 12.9880 (12.9647)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 27%|##6       | 7/26 [00:00<00:00, 33.77it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.77it/s] 50%|#####     | 13/26 [00:00<00:00, 39.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.07it/s] 96%|#########6| 25/26 [00:00<00:00, 46.50it/s]100%|##########| 26/26 [00:00<00:00, 38.94it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.41 (  0.41)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.695 (0.691)	test_acc   0.49 (  0.51)	test_minacc   0.39 (  0.49)	test_majacc   0.51 (  0.52)	Loss_d 0.695 (0.691)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.39 (  0.49)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.21 (  0.23)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.44 (  0.49)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.23 (  0.22)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.48 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.24 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.00it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 26/  1]	epoch_time 0.0369 (0.0396)	validation_time 0.0004 (0.0006)	train_time 0.0364 (0.0388)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5101000165045262, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 19%|#9        | 5/26 [00:00<00:00, 21.09it/s] 35%|###4      | 9/26 [00:00<00:00, 25.88it/s] 46%|####6     | 12/26 [00:00<00:00, 25.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 21.40it/s] 69%|######9   | 18/26 [00:00<00:00, 19.66it/s] 81%|########  | 21/26 [00:01<00:00, 18.63it/s] 88%|########8 | 23/26 [00:01<00:00, 18.09it/s] 96%|#########6| 25/26 [00:01<00:00, 17.63it/s]100%|##########| 26/26 [00:01<00:00, 18.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.52 (  0.51)	train_minacc   0.48 (  0.51)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 13.0248 (13.0050)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.10it/s] 27%|##6       | 7/26 [00:00<00:00, 36.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.36it/s] 50%|#####     | 13/26 [00:00<00:00, 41.52it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.44it/s] 96%|#########6| 25/26 [00:00<00:00, 48.06it/s]100%|##########| 26/26 [00:00<00:00, 40.24it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.41 (  0.41)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.694 (0.691)	test_acc   0.49 (  0.52)	test_minacc   0.39 (  0.49)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.691)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.39 (  0.49)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.21 (  0.22)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.44 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.23 (  0.21)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.48 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.23 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 47.92it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 27/  1]	epoch_time 0.0442 (0.0398)	validation_time 0.0005 (0.0006)	train_time 0.0437 (0.0390)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5132000105082989, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.62it/s] 12%|#1        | 3/26 [00:00<00:02,  9.92it/s] 19%|#9        | 5/26 [00:00<00:01, 12.72it/s] 27%|##6       | 7/26 [00:00<00:01, 14.33it/s] 35%|###4      | 9/26 [00:00<00:01, 15.33it/s] 42%|####2     | 11/26 [00:00<00:00, 16.09it/s] 50%|#####     | 13/26 [00:00<00:00, 16.17it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.23it/s] 65%|######5   | 17/26 [00:01<00:00, 16.38it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.40it/s] 81%|########  | 21/26 [00:01<00:00, 16.36it/s] 88%|########8 | 23/26 [00:01<00:00, 16.56it/s] 96%|#########6| 25/26 [00:01<00:00, 16.71it/s]100%|##########| 26/26 [00:01<00:00, 14.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.52 (  0.51)	train_minacc   0.48 (  0.51)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 13.0548 (13.0386)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.59it/s] 27%|##6       | 7/26 [00:00<00:00, 37.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.25it/s] 50%|#####     | 13/26 [00:00<00:00, 46.41it/s] 69%|######9   | 18/26 [00:00<00:00, 45.93it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.93it/s] 92%|#########2| 24/26 [00:00<00:00, 50.44it/s]100%|##########| 26/26 [00:00<00:00, 42.72it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.41 (  0.41)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.694 (0.691)	test_acc   0.49 (  0.52)	test_minacc   0.41 (  0.50)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.691)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.18 (  0.20)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.44 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.20 (  0.19)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.48 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.21 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.18it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 28/  1]	epoch_time 0.0484 (0.0401)	validation_time 0.0003 (0.0006)	train_time 0.0481 (0.0393)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5140000116229058, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.77it/s] 12%|#1        | 3/26 [00:00<00:02,  9.99it/s] 19%|#9        | 5/26 [00:00<00:01, 12.64it/s] 27%|##6       | 7/26 [00:00<00:01, 14.19it/s] 35%|###4      | 9/26 [00:00<00:01, 15.09it/s] 42%|####2     | 11/26 [00:00<00:00, 15.69it/s] 50%|#####     | 13/26 [00:00<00:00, 16.03it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.27it/s] 65%|######5   | 17/26 [00:01<00:00, 16.35it/s] 73%|#######3  | 19/26 [00:01<00:00, 15.66it/s] 81%|########  | 21/26 [00:01<00:00, 15.87it/s] 88%|########8 | 23/26 [00:01<00:00, 16.10it/s] 96%|#########6| 25/26 [00:01<00:00, 16.34it/s]100%|##########| 26/26 [00:01<00:00, 14.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.52 (  0.51)	train_minacc   0.48 (  0.51)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 13.0821 (13.0674)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.98it/s] 31%|###       | 8/26 [00:00<00:00, 38.61it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.61it/s] 50%|#####     | 13/26 [00:00<00:00, 41.98it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.82it/s] 96%|#########6| 25/26 [00:00<00:00, 48.87it/s]100%|##########| 26/26 [00:00<00:00, 40.45it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.41 (  0.41)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.41 (  0.50)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.15 (  0.17)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.44 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.18 (  0.16)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.48 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.18 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.34it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 29/  1]	epoch_time 0.0500 (0.0404)	validation_time 0.0004 (0.0006)	train_time 0.0496 (0.0396)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.514600011587143, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 12%|#1        | 3/26 [00:00<00:02, 11.03it/s] 19%|#9        | 5/26 [00:00<00:01, 13.27it/s] 27%|##6       | 7/26 [00:00<00:01, 14.44it/s] 35%|###4      | 9/26 [00:00<00:01, 15.03it/s] 42%|####2     | 11/26 [00:00<00:00, 15.46it/s] 50%|#####     | 13/26 [00:00<00:00, 15.77it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.07it/s] 65%|######5   | 17/26 [00:01<00:00, 16.35it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.51it/s] 81%|########  | 21/26 [00:01<00:00, 16.58it/s] 88%|########8 | 23/26 [00:01<00:00, 16.68it/s] 96%|#########6| 25/26 [00:01<00:00, 16.56it/s]100%|##########| 26/26 [00:01<00:00, 14.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.52 (  0.51)	train_minacc   0.48 (  0.51)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 13.1077 (13.0940)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.92it/s] 23%|##3       | 6/26 [00:00<00:00, 29.92it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.92it/s] 46%|####6     | 12/26 [00:00<00:00, 41.11it/s] 65%|######5   | 17/26 [00:00<00:00, 41.90it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.90it/s] 85%|########4 | 22/26 [00:00<00:00, 44.44it/s]100%|##########| 26/26 [00:00<00:00, 38.11it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.41 (  0.41)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.41 (  0.50)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.12 (  0.14)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.44 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.15 (  0.13)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.51)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.16 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.98it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 30/  1]	epoch_time 0.0506 (0.0407)	validation_time 0.0007 (0.0006)	train_time 0.0499 (0.0399)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5155000129044056, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 12%|#1        | 3/26 [00:00<00:01, 12.49it/s] 19%|#9        | 5/26 [00:00<00:01, 14.43it/s] 27%|##6       | 7/26 [00:00<00:01, 15.41it/s] 35%|###4      | 9/26 [00:00<00:01, 15.92it/s] 42%|####2     | 11/26 [00:00<00:00, 16.31it/s] 50%|#####     | 13/26 [00:00<00:00, 16.54it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.64it/s] 65%|######5   | 17/26 [00:01<00:00, 16.60it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.73it/s] 81%|########  | 21/26 [00:01<00:00, 16.80it/s] 88%|########8 | 23/26 [00:01<00:00, 16.85it/s] 96%|#########6| 25/26 [00:01<00:00, 16.97it/s]100%|##########| 26/26 [00:01<00:00, 15.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.52 (  0.52)	train_minacc   0.48 (  0.51)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 13.1318 (13.1190)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.51it/s] 31%|###       | 8/26 [00:00<00:00, 35.42it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.42it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.91it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.39it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.39it/s]100%|##########| 26/26 [00:00<00:00, 50.41it/s]100%|##########| 26/26 [00:00<00:00, 40.46it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.41 (  0.41)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.41 (  0.50)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.08 (  0.12)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.44 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.13 (  0.11)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.51)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.13 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.87it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 31/  1]	epoch_time 0.0489 (0.0410)	validation_time 0.0004 (0.0006)	train_time 0.0485 (0.0402)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5158000154197216, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.25it/s] 12%|#1        | 3/26 [00:00<00:02, 10.29it/s] 19%|#9        | 5/26 [00:00<00:01, 12.92it/s] 27%|##6       | 7/26 [00:00<00:01, 14.33it/s] 35%|###4      | 9/26 [00:00<00:01, 15.23it/s] 42%|####2     | 11/26 [00:00<00:00, 15.76it/s] 50%|#####     | 13/26 [00:00<00:00, 16.12it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.28it/s] 65%|######5   | 17/26 [00:01<00:00, 16.49it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.80it/s] 81%|########  | 21/26 [00:01<00:00, 16.68it/s] 88%|########8 | 23/26 [00:01<00:00, 16.76it/s] 96%|#########6| 25/26 [00:01<00:00, 16.83it/s]100%|##########| 26/26 [00:01<00:00, 14.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.52 (  0.52)	train_minacc   0.48 (  0.51)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 13.1544 (13.1426)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.11it/s] 27%|##6       | 7/26 [00:00<00:00, 30.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.94it/s] 46%|####6     | 12/26 [00:00<00:00, 38.05it/s] 69%|######9   | 18/26 [00:00<00:00, 42.98it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.98it/s] 92%|#########2| 24/26 [00:00<00:00, 46.76it/s]100%|##########| 26/26 [00:00<00:00, 37.55it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.41 (  0.41)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.41 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.09)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.44 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.10 (  0.08)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.51)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.11 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.68it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 32/  1]	epoch_time 0.0504 (0.0413)	validation_time 0.0004 (0.0006)	train_time 0.0500 (0.0405)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5166000153720379, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 12%|#1        | 3/26 [00:00<00:01, 11.97it/s] 19%|#9        | 5/26 [00:00<00:01, 13.81it/s] 27%|##6       | 7/26 [00:00<00:01, 14.96it/s] 35%|###4      | 9/26 [00:00<00:01, 15.48it/s] 42%|####2     | 11/26 [00:00<00:00, 15.79it/s] 50%|#####     | 13/26 [00:00<00:00, 16.10it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.33it/s] 65%|######5   | 17/26 [00:01<00:00, 16.51it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.42it/s] 81%|########  | 21/26 [00:01<00:00, 16.22it/s] 88%|########8 | 23/26 [00:01<00:00, 16.36it/s] 96%|#########6| 25/26 [00:01<00:00, 16.39it/s]100%|##########| 26/26 [00:01<00:00, 15.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.52 (  0.52)	train_minacc   0.48 (  0.51)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 13.1753 (13.1645)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 39.20it/s] 35%|###4      | 9/26 [00:00<00:00, 43.96it/s]                                               35%|###4      | 9/26 [00:00<00:00, 43.96it/s] 58%|#####7    | 15/26 [00:00<00:00, 49.57it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 49.57it/s] 81%|########  | 21/26 [00:00<00:00, 49.32it/s]100%|##########| 26/26 [00:00<00:00, 43.83it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.41 (  0.41)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.41 (  0.50)	test_majacc   0.51 (  0.53)	Loss_d 0.694 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.03 (  0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.44 (  0.50)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.08 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.51)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.08 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.66it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 33/  1]	epoch_time 0.0488 (0.0415)	validation_time 0.0004 (0.0006)	train_time 0.0484 (0.0407)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5177000094950199, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.98it/s] 12%|#1        | 3/26 [00:00<00:02, 10.21it/s] 19%|#9        | 5/26 [00:00<00:01, 12.88it/s] 27%|##6       | 7/26 [00:00<00:01, 14.50it/s] 35%|###4      | 9/26 [00:00<00:01, 15.21it/s] 42%|####2     | 11/26 [00:00<00:00, 15.64it/s] 50%|#####     | 13/26 [00:00<00:00, 16.00it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.23it/s] 65%|######5   | 17/26 [00:01<00:00, 16.29it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.40it/s] 81%|########  | 21/26 [00:01<00:00, 16.47it/s] 88%|########8 | 23/26 [00:01<00:00, 16.66it/s] 96%|#########6| 25/26 [00:01<00:00, 16.65it/s]100%|##########| 26/26 [00:01<00:00, 14.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.52 (  0.52)	train_minacc   0.48 (  0.51)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 13.1943 (13.1846)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.33it/s] 35%|###4      | 9/26 [00:00<00:00, 37.50it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.50it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.89it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.89it/s] 81%|########  | 21/26 [00:00<00:00, 46.55it/s]100%|##########| 26/26 [00:00<00:00, 41.59it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.41 (  0.41)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.41 (  0.50)	test_majacc   0.51 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.00 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.44 (  0.50)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.06 (  0.04)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.52)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.06 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.53it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 34/  1]	epoch_time 0.0498 (0.0417)	validation_time 0.0004 (0.0006)	train_time 0.0494 (0.0410)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5186000129282474, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.43it/s] 12%|#1        | 3/26 [00:00<00:02,  8.67it/s] 19%|#9        | 5/26 [00:00<00:01, 11.34it/s] 27%|##6       | 7/26 [00:00<00:01, 12.85it/s] 35%|###4      | 9/26 [00:00<00:01, 13.57it/s] 42%|####2     | 11/26 [00:00<00:01, 14.67it/s] 50%|#####     | 13/26 [00:01<00:00, 15.28it/s] 58%|#####7    | 15/26 [00:01<00:00, 15.69it/s] 65%|######5   | 17/26 [00:01<00:00, 16.02it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.23it/s] 81%|########  | 21/26 [00:01<00:00, 16.34it/s] 88%|########8 | 23/26 [00:01<00:00, 16.59it/s] 96%|#########6| 25/26 [00:01<00:00, 16.79it/s]100%|##########| 26/26 [00:01<00:00, 14.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.53 (  0.52)	train_minacc   0.48 (  0.52)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 13.2114 (13.2027)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.56it/s] 31%|###       | 8/26 [00:00<00:00, 39.65it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.65it/s] 50%|#####     | 13/26 [00:00<00:00, 40.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.51it/s] 96%|#########6| 25/26 [00:00<00:00, 46.37it/s]100%|##########| 26/26 [00:00<00:00, 39.98it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.41 (  0.41)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.41 (  0.50)	test_majacc   0.51 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.51 (  0.53)	test_corr_d  -0.02 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.44 (  0.51)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.48 (  0.52)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.21it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 35/  1]	epoch_time 0.0504 (0.0420)	validation_time 0.0004 (0.0006)	train_time 0.0500 (0.0412)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5201000138819217, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.95it/s] 12%|#1        | 3/26 [00:00<00:02, 10.20it/s] 19%|#9        | 5/26 [00:00<00:01, 12.90it/s] 27%|##6       | 7/26 [00:00<00:01, 14.29it/s] 35%|###4      | 9/26 [00:00<00:01, 15.27it/s] 42%|####2     | 11/26 [00:00<00:00, 15.91it/s] 50%|#####     | 13/26 [00:00<00:00, 16.21it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.49it/s] 65%|######5   | 17/26 [00:01<00:00, 16.63it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.60it/s] 81%|########  | 21/26 [00:01<00:00, 16.66it/s] 88%|########8 | 23/26 [00:01<00:00, 16.77it/s] 96%|#########6| 25/26 [00:01<00:00, 16.87it/s]100%|##########| 26/26 [00:01<00:00, 14.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.53 (  0.52)	train_minacc   0.48 (  0.52)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 13.2263 (13.2188)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s] 23%|##3       | 6/26 [00:00<00:00, 26.49it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.49it/s] 46%|####6     | 12/26 [00:00<00:00, 36.06it/s] 69%|######9   | 18/26 [00:00<00:00, 42.35it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.35it/s] 92%|#########2| 24/26 [00:00<00:00, 45.54it/s]100%|##########| 26/26 [00:00<00:00, 36.77it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.41 (  0.41)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.50 (  0.53)	test_minacc   0.41 (  0.50)	test_majacc   0.52 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.45 (  0.51)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.48 (  0.52)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.03 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.72it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 36/  1]	epoch_time 0.0516 (0.0422)	validation_time 0.0004 (0.0006)	train_time 0.0512 (0.0415)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5217000137865543, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.45it/s] 12%|#1        | 3/26 [00:00<00:02, 10.60it/s] 19%|#9        | 5/26 [00:00<00:01, 13.25it/s] 27%|##6       | 7/26 [00:00<00:01, 14.59it/s] 35%|###4      | 9/26 [00:00<00:01, 15.47it/s] 42%|####2     | 11/26 [00:00<00:00, 15.90it/s] 50%|#####     | 13/26 [00:00<00:00, 16.07it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.34it/s] 65%|######5   | 17/26 [00:01<00:00, 16.62it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.75it/s] 81%|########  | 21/26 [00:01<00:00, 16.80it/s] 88%|########8 | 23/26 [00:01<00:00, 16.96it/s] 96%|#########6| 25/26 [00:01<00:00, 17.12it/s]100%|##########| 26/26 [00:01<00:00, 15.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.53 (  0.52)	train_minacc   0.48 (  0.52)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 13.2392 (13.2328)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.22it/s] 23%|##3       | 6/26 [00:00<00:00, 28.50it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.50it/s] 46%|####6     | 12/26 [00:00<00:00, 39.79it/s] 65%|######5   | 17/26 [00:00<00:00, 41.64it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.64it/s] 88%|########8 | 23/26 [00:00<00:00, 47.27it/s]100%|##########| 26/26 [00:00<00:00, 37.35it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.43 (  0.43)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.50 (  0.53)	test_minacc   0.41 (  0.51)	test_majacc   0.52 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.41 (  0.51)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.05 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.45 (  0.51)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.02 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.48 (  0.52)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.02 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.38it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 37/  1]	epoch_time 0.0492 (0.0424)	validation_time 0.0003 (0.0006)	train_time 0.0488 (0.0417)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5235000113546848, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 12%|#1        | 3/26 [00:00<00:01, 11.53it/s] 19%|#9        | 5/26 [00:00<00:01, 13.78it/s] 27%|##6       | 7/26 [00:00<00:01, 15.02it/s] 35%|###4      | 9/26 [00:00<00:01, 15.79it/s] 42%|####2     | 11/26 [00:00<00:00, 16.14it/s] 50%|#####     | 13/26 [00:00<00:00, 16.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.53it/s] 65%|######5   | 17/26 [00:01<00:00, 16.69it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.80it/s] 81%|########  | 21/26 [00:01<00:00, 16.78it/s] 88%|########8 | 23/26 [00:01<00:00, 16.90it/s] 96%|#########6| 25/26 [00:01<00:00, 16.94it/s]100%|##########| 26/26 [00:01<00:00, 15.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.53 (  0.52)	train_minacc   0.48 (  0.52)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 13.2502 (13.2448)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.87it/s] 27%|##6       | 7/26 [00:00<00:00, 38.34it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.34it/s] 50%|#####     | 13/26 [00:00<00:00, 43.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.44it/s] 96%|#########6| 25/26 [00:00<00:00, 48.49it/s]100%|##########| 26/26 [00:00<00:00, 41.09it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.43 (  0.43)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.53)	test_minacc   0.41 (  0.51)	test_majacc   0.51 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.41 (  0.51)	test_majacc_d   0.51 (  0.53)	test_corr_d  -0.06 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.51)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.48 (  0.52)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.76it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 38/  1]	epoch_time 0.0488 (0.0426)	validation_time 0.0004 (0.0006)	train_time 0.0484 (0.0419)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5245000173151493, 0.531000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.24it/s] 12%|#1        | 3/26 [00:00<00:02, 11.22it/s] 19%|#9        | 5/26 [00:00<00:01, 13.44it/s] 27%|##6       | 7/26 [00:00<00:01, 14.60it/s] 35%|###4      | 9/26 [00:00<00:01, 15.41it/s] 42%|####2     | 11/26 [00:00<00:00, 15.85it/s] 50%|#####     | 13/26 [00:00<00:00, 16.20it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.25it/s] 65%|######5   | 17/26 [00:01<00:00, 16.28it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.45it/s] 81%|########  | 21/26 [00:01<00:00, 16.38it/s] 88%|########8 | 23/26 [00:01<00:00, 15.71it/s] 96%|#########6| 25/26 [00:01<00:00, 16.03it/s]100%|##########| 26/26 [00:01<00:00, 14.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.53 (  0.52)	train_minacc   0.48 (  0.52)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 13.2596 (13.2550)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.86it/s] 35%|###4      | 9/26 [00:00<00:00, 39.57it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.57it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.13it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.13it/s] 81%|########  | 21/26 [00:00<00:00, 47.40it/s]100%|##########| 26/26 [00:00<00:00, 42.28it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.43 (  0.43)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.53)	test_minacc   0.41 (  0.51)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.41 (  0.51)	test_majacc_d   0.51 (  0.53)	test_corr_d  -0.06 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.47 (  0.51)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.00 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.48 (  0.52)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.79it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 39/  1]	epoch_time 0.0486 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0482 (0.0420)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5239000138640404, 0.534000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 12%|#1        | 3/26 [00:00<00:02, 11.17it/s] 19%|#9        | 5/26 [00:00<00:01, 13.04it/s] 27%|##6       | 7/26 [00:00<00:01, 14.13it/s] 35%|###4      | 9/26 [00:00<00:01, 14.38it/s] 42%|####2     | 11/26 [00:00<00:01, 14.39it/s] 50%|#####     | 13/26 [00:00<00:00, 14.86it/s] 58%|#####7    | 15/26 [00:01<00:00, 15.46it/s] 65%|######5   | 17/26 [00:01<00:00, 15.89it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.23it/s] 81%|########  | 21/26 [00:01<00:00, 16.35it/s] 88%|########8 | 23/26 [00:01<00:00, 16.59it/s] 96%|#########6| 25/26 [00:01<00:00, 16.76it/s]100%|##########| 26/26 [00:01<00:00, 14.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.53 (  0.52)	train_minacc   0.48 (  0.52)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 13.2674 (13.2635)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.01it/s] 27%|##6       | 7/26 [00:00<00:00, 29.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.79it/s] 50%|#####     | 13/26 [00:00<00:00, 37.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.46it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.46it/s] 96%|#########6| 25/26 [00:00<00:00, 45.87it/s]100%|##########| 26/26 [00:00<00:00, 36.93it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.43 (  0.43)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.53)	test_minacc   0.42 (  0.51)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.42 (  0.51)	test_majacc_d   0.51 (  0.53)	test_corr_d  -0.06 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.47 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.00 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.48 (  0.52)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.00 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.95it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 40/  1]	epoch_time 0.0515 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0511 (0.0423)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.524700010329485, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.24it/s] 12%|#1        | 3/26 [00:00<00:02,  9.33it/s] 19%|#9        | 5/26 [00:00<00:02,  8.89it/s] 27%|##6       | 7/26 [00:00<00:01, 11.13it/s] 35%|###4      | 9/26 [00:00<00:01, 12.70it/s] 42%|####2     | 11/26 [00:00<00:01, 13.91it/s] 50%|#####     | 13/26 [00:01<00:00, 14.82it/s] 58%|#####7    | 15/26 [00:01<00:00, 15.47it/s] 65%|######5   | 17/26 [00:01<00:00, 15.92it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.27it/s] 81%|########  | 21/26 [00:01<00:00, 16.30it/s] 88%|########8 | 23/26 [00:01<00:00, 16.36it/s] 96%|#########6| 25/26 [00:01<00:00, 16.39it/s]100%|##########| 26/26 [00:01<00:00, 13.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.53 (  0.52)	train_minacc   0.48 (  0.53)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 13.2739 (13.2707)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.08it/s] 35%|###4      | 9/26 [00:00<00:00, 39.67it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.67it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.09it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.90it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.90it/s]100%|##########| 26/26 [00:00<00:00, 50.81it/s]100%|##########| 26/26 [00:00<00:00, 42.38it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.43 (  0.43)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.53)	test_minacc   0.44 (  0.51)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.51 (  0.53)	test_corr_d  -0.06 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.47 (  0.51)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.00 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.48 (  0.53)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.48 (  0.53)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.00 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.05it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 41/  1]	epoch_time 0.0510 (0.0431)	validation_time 0.0003 (0.0005)	train_time 0.0506 (0.0425)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5239000115394592, 0.5320000052452087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.86it/s] 12%|#1        | 3/26 [00:00<00:02,  9.88it/s] 19%|#9        | 5/26 [00:00<00:01, 12.52it/s] 27%|##6       | 7/26 [00:00<00:01, 14.19it/s] 35%|###4      | 9/26 [00:00<00:01, 15.20it/s] 42%|####2     | 11/26 [00:00<00:00, 15.77it/s] 50%|#####     | 13/26 [00:00<00:00, 16.14it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.55it/s] 65%|######5   | 17/26 [00:01<00:00, 16.66it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.80it/s] 81%|########  | 21/26 [00:01<00:00, 16.68it/s] 88%|########8 | 23/26 [00:01<00:00, 16.76it/s] 96%|#########6| 25/26 [00:01<00:00, 16.82it/s]100%|##########| 26/26 [00:01<00:00, 14.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.52 (  0.52)	train_minacc   0.48 (  0.53)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 13.2792 (13.2766)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.17it/s] 31%|###       | 8/26 [00:00<00:00, 33.66it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.66it/s] 50%|#####     | 13/26 [00:00<00:00, 38.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.83it/s] 96%|#########6| 25/26 [00:00<00:00, 46.40it/s]100%|##########| 26/26 [00:00<00:00, 37.88it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.44 (  0.52)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.44 (  0.52)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.06 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.47 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.00 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.53)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.53)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.00 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.31it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 42/  1]	epoch_time 0.0505 (0.0433)	validation_time 0.0004 (0.0005)	train_time 0.0501 (0.0426)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5191000152230263, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.29it/s] 12%|#1        | 3/26 [00:00<00:02, 10.09it/s] 19%|#9        | 5/26 [00:00<00:01, 12.28it/s] 27%|##6       | 7/26 [00:00<00:01, 13.81it/s] 35%|###4      | 9/26 [00:00<00:01, 14.88it/s] 42%|####2     | 11/26 [00:00<00:00, 15.52it/s] 50%|#####     | 13/26 [00:00<00:00, 15.99it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.31it/s] 65%|######5   | 17/26 [00:01<00:00, 16.51it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.49it/s] 81%|########  | 21/26 [00:01<00:00, 16.49it/s] 88%|########8 | 23/26 [00:01<00:00, 16.59it/s] 96%|#########6| 25/26 [00:01<00:00, 16.75it/s]100%|##########| 26/26 [00:01<00:00, 14.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.50 (  0.51)	train_minacc   0.48 (  0.54)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 13.2836 (13.2814)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.66it/s] 35%|###4      | 9/26 [00:00<00:00, 39.45it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.45it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.15it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.15it/s] 81%|########  | 21/26 [00:00<00:00, 47.40it/s]100%|##########| 26/26 [00:00<00:00, 41.29it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.45 (  0.53)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.47 (  0.50)	test_corr_d  -0.06 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.49 (  0.53)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.00 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.55)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.00 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.71it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 43/  1]	epoch_time 0.0491 (0.0434)	validation_time 0.0004 (0.0005)	train_time 0.0486 (0.0428)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5029000114500523, 0.5520000457763672)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.62it/s] 12%|#1        | 3/26 [00:00<00:02, 11.25it/s] 19%|#9        | 5/26 [00:00<00:01, 13.65it/s] 27%|##6       | 7/26 [00:00<00:01, 14.99it/s] 35%|###4      | 9/26 [00:00<00:01, 15.77it/s] 42%|####2     | 11/26 [00:00<00:00, 16.20it/s] 50%|#####     | 13/26 [00:00<00:00, 16.55it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.74it/s] 65%|######5   | 17/26 [00:01<00:00, 16.90it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.99it/s] 81%|########  | 21/26 [00:01<00:00, 16.68it/s] 88%|########8 | 23/26 [00:01<00:00, 16.69it/s] 96%|#########6| 25/26 [00:01<00:00, 16.79it/s]100%|##########| 26/26 [00:01<00:00, 15.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.21)	train_acc   0.50 (  0.49)	train_minacc   0.48 (  0.55)	train_majacc   0.50 (  0.48)	train_corr   0.00 (  0.00)	l1 13.2871 (13.2854)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 27%|##6       | 7/26 [00:00<00:00, 31.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.56it/s] 50%|#####     | 13/26 [00:00<00:00, 39.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.59it/s] 96%|#########6| 25/26 [00:00<00:00, 46.13it/s]100%|##########| 26/26 [00:00<00:00, 38.42it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.47 (  0.55)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.47 (  0.55)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.06 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.54)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.48 (  0.47)	test_corr_d   0.00 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.48 (  0.56)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.48 (  0.56)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.00 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.19it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 44/  1]	epoch_time 0.0490 (0.0436)	validation_time 0.0006 (0.0005)	train_time 0.0484 (0.0429)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.48740000593662264, 0.5800000429153442)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.08it/s] 12%|#1        | 3/26 [00:00<00:02, 10.18it/s] 19%|#9        | 5/26 [00:00<00:01, 12.70it/s] 27%|##6       | 7/26 [00:00<00:01, 14.18it/s] 35%|###4      | 9/26 [00:00<00:01, 14.97it/s] 42%|####2     | 11/26 [00:00<00:00, 15.45it/s] 50%|#####     | 13/26 [00:00<00:00, 15.91it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.23it/s] 65%|######5   | 17/26 [00:01<00:00, 16.34it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.43it/s] 81%|########  | 21/26 [00:01<00:00, 16.53it/s] 88%|########8 | 23/26 [00:01<00:00, 16.45it/s] 96%|#########6| 25/26 [00:01<00:00, 16.35it/s]100%|##########| 26/26 [00:01<00:00, 14.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.53 (  0.48)	train_minacc   0.45 (  0.55)	train_majacc   0.54 (  0.47)	train_corr   0.00 (  0.00)	l1 13.2899 (13.2885)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 27%|##6       | 7/26 [00:00<00:00, 29.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.52it/s] 50%|#####     | 13/26 [00:00<00:00, 37.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.52it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.52it/s] 96%|#########6| 25/26 [00:00<00:00, 46.05it/s]100%|##########| 26/26 [00:00<00:00, 37.22it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.50 (  0.55)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.50 (  0.55)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.05 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.47 (  0.52)	test_majacc   0.49 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.49 (  0.47)	test_corr_d   0.00 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.45 (  0.53)	test_majacc   0.55 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.55 (  0.48)	test_corr_d   0.01 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.82it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 45/  1]	epoch_time 0.0514 (0.0437)	validation_time 0.0004 (0.0005)	train_time 0.0510 (0.0431)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.48740000927448274, 0.5910000205039978)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.00it/s] 12%|#1        | 3/26 [00:00<00:02, 10.18it/s] 19%|#9        | 5/26 [00:00<00:01, 12.69it/s] 27%|##6       | 7/26 [00:00<00:01, 14.18it/s] 35%|###4      | 9/26 [00:00<00:01, 15.00it/s] 42%|####2     | 11/26 [00:00<00:00, 15.69it/s] 50%|#####     | 13/26 [00:00<00:00, 16.08it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.35it/s] 65%|######5   | 17/26 [00:01<00:00, 16.46it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.62it/s] 81%|########  | 21/26 [00:01<00:00, 16.79it/s] 88%|########8 | 23/26 [00:01<00:00, 16.83it/s] 96%|#########6| 25/26 [00:01<00:00, 16.87it/s]100%|##########| 26/26 [00:01<00:00, 14.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.51 (  0.49)	train_minacc   0.33 (  0.49)	train_majacc   0.54 (  0.49)	train_corr   0.00 (  0.00)	l1 13.2921 (13.2910)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 27%|##6       | 7/26 [00:00<00:00, 32.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.66it/s] 50%|#####     | 13/26 [00:00<00:00, 39.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.42it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.42it/s] 96%|#########6| 25/26 [00:00<00:00, 46.49it/s]100%|##########| 26/26 [00:00<00:00, 38.86it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.41 (  0.41)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.44 (  0.48)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.05 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.40 (  0.45)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.40 (  0.45)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.00 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.36 (  0.45)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.36 (  0.45)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.01 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.09it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 46/  1]	epoch_time 0.0523 (0.0439)	validation_time 0.0005 (0.0005)	train_time 0.0518 (0.0433)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.5124000082314014, 0.5370000004768372)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.15it/s] 12%|#1        | 3/26 [00:00<00:01, 11.65it/s] 19%|#9        | 5/26 [00:00<00:01, 13.92it/s] 27%|##6       | 7/26 [00:00<00:01, 14.97it/s] 35%|###4      | 9/26 [00:00<00:01, 15.55it/s] 42%|####2     | 11/26 [00:00<00:00, 16.03it/s] 50%|#####     | 13/26 [00:00<00:00, 16.21it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.32it/s] 65%|######5   | 17/26 [00:01<00:00, 16.49it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.60it/s] 81%|########  | 21/26 [00:01<00:00, 16.67it/s] 88%|########8 | 23/26 [00:01<00:00, 16.82it/s] 96%|#########6| 25/26 [00:01<00:00, 16.73it/s]100%|##########| 26/26 [00:01<00:00, 15.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.48 (  0.50)	train_minacc   0.39 (  0.44)	train_majacc   0.49 (  0.52)	train_corr   0.00 (  0.00)	l1 13.2938 (13.2930)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.34it/s] 27%|##6       | 7/26 [00:00<00:00, 31.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.38it/s] 50%|#####     | 13/26 [00:00<00:00, 39.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.23it/s] 96%|#########6| 25/26 [00:00<00:00, 46.01it/s]100%|##########| 26/26 [00:00<00:00, 37.41it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.45 (  0.46)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.05 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.49 (  0.44)	test_majacc   0.47 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.49 (  0.44)	test_majacc_d   0.47 (  0.51)	test_corr_d   0.00 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.45)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.45)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.29it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 47/  1]	epoch_time 0.0498 (0.0440)	validation_time 0.0004 (0.0005)	train_time 0.0494 (0.0434)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.4987000061273575, 0.4790000319480896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.88it/s] 12%|#1        | 3/26 [00:00<00:01, 11.84it/s] 19%|#9        | 5/26 [00:00<00:01, 13.93it/s] 27%|##6       | 7/26 [00:00<00:01, 14.83it/s] 35%|###4      | 9/26 [00:00<00:01, 15.53it/s] 42%|####2     | 11/26 [00:00<00:00, 15.96it/s] 50%|#####     | 13/26 [00:00<00:00, 16.29it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.43it/s] 65%|######5   | 17/26 [00:01<00:00, 16.51it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.51it/s] 81%|########  | 21/26 [00:01<00:00, 16.60it/s] 88%|########8 | 23/26 [00:01<00:00, 16.75it/s] 96%|#########6| 25/26 [00:01<00:00, 16.78it/s]100%|##########| 26/26 [00:01<00:00, 15.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.44 (  0.49)	train_minacc   0.45 (  0.45)	train_majacc   0.44 (  0.50)	train_corr   0.00 (  0.00)	l1 13.2952 (13.2945)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.91it/s] 27%|##6       | 7/26 [00:00<00:00, 30.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.12it/s] 50%|#####     | 13/26 [00:00<00:00, 38.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.12it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.12it/s] 96%|#########6| 25/26 [00:00<00:00, 46.33it/s]100%|##########| 26/26 [00:00<00:00, 37.05it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.45 (  0.46)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.05 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.48)	test_minacc   0.51 (  0.45)	test_majacc   0.44 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.51 (  0.45)	test_majacc_d   0.44 (  0.49)	test_corr_d   0.01 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.48)	test_minacc   0.45 (  0.45)	test_majacc   0.44 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.48)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.44 (  0.48)	test_corr_d   0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.87it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 48/  1]	epoch_time 0.0516 (0.0442)	validation_time 0.0004 (0.0005)	train_time 0.0511 (0.0435)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.4793000076413155, 0.4660000205039978)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.14it/s] 12%|#1        | 3/26 [00:00<00:01, 12.17it/s] 19%|#9        | 5/26 [00:00<00:01, 14.16it/s] 27%|##6       | 7/26 [00:00<00:01, 15.28it/s] 35%|###4      | 9/26 [00:00<00:01, 15.88it/s] 42%|####2     | 11/26 [00:00<00:00, 16.17it/s] 50%|#####     | 13/26 [00:00<00:00, 16.35it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.51it/s] 65%|######5   | 17/26 [00:01<00:00, 16.56it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.69it/s] 81%|########  | 21/26 [00:01<00:00, 16.75it/s] 88%|########8 | 23/26 [00:01<00:00, 16.69it/s] 96%|#########6| 25/26 [00:01<00:00, 16.75it/s]100%|##########| 26/26 [00:01<00:00, 15.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.44 (  0.47)	train_minacc   0.48 (  0.45)	train_majacc   0.43 (  0.48)	train_corr   0.00 (  0.00)	l1 13.2962 (13.2957)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.84it/s] 27%|##6       | 7/26 [00:00<00:00, 36.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.98it/s] 50%|#####     | 13/26 [00:00<00:00, 41.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.34it/s] 96%|#########6| 25/26 [00:00<00:00, 47.79it/s]100%|##########| 26/26 [00:00<00:00, 40.59it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.55 (  0.55)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.48 (  0.46)	test_majacc   0.44 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.48 (  0.46)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.04 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.46)	test_minacc   0.51 (  0.44)	test_majacc   0.43 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.51 (  0.44)	test_majacc_d   0.43 (  0.47)	test_corr_d   0.01 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.46)	test_minacc   0.48 (  0.44)	test_majacc   0.43 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.48 (  0.44)	test_majacc_d   0.43 (  0.47)	test_corr_d   0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.55it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 49/  1]	epoch_time 0.0507 (0.0443)	validation_time 0.0004 (0.0005)	train_time 0.0503 (0.0437)
record: (train_acc, test_acc) (0.6578000166416168, 0.6080000400543213)
last accs (train_acc, test_acc) (0.46350000604987146, 0.4570000171661377)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.158 MB of 0.158 MB uploadedwandb: \ 0.158 MB of 0.158 MB uploadedwandb: | 0.158 MB of 0.158 MB uploadedwandb: / 0.158 MB of 0.158 MB uploadedwandb: - 0.158 MB of 0.158 MB uploadedwandb: \ 0.158 MB of 0.158 MB uploadedwandb: | 0.158 MB of 0.158 MB uploadedwandb: / 0.158 MB of 0.158 MB uploadedwandb: - 0.158 MB of 0.158 MB uploadedwandb: \ 0.158 MB of 0.158 MB uploadedwandb: | 0.158 MB of 0.158 MB uploadedwandb: / 0.037 MB of 0.513 MB uploaded (0.003 MB deduped)wandb: - 0.037 MB of 0.513 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/diagnostics/epoch_time_val █▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▂▁▂▃▄▃▄▃▄▄▃▃▄▄▄▃▄▄▃▄
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/diagnostics/train_time_val █▁▂▁▁▂▁▁▂▁▂▂▁▁▁▁▁▁▁▄▂▁▃▄▅▄▅▄▅▅▄▄▅▅▅▄▅▅▄▅
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/Loss_avg ██▇▆█▆▇▇▆▆▇▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/Loss_d_avg ██▇▆█▆▇▇▆▆▇▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/Loss_d_val ██▇▆█▆▇▇▆▆▇▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/Loss_val ██▇▆█▆▇▇▆▆▇▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_acc_avg ▁▂▂▄▂▄▅▃▅▆▄▆██▆▆▇▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_acc_d_avg ▁▂▂▄▂▄▅▃▅▆▄▆██▆▆▇▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_acc_d_val ▁▂▂▄▂▄▅▃▅▆▄▆██▆▆▇▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_acc_val ▁▂▂▄▂▄▅▃▅▆▄▆██▆▆▇▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_corr_d_avg ██▇▆▇▆▆▇▆▅▆▅▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_corr_d_val ██▇▆▇▆▆▇▆▅▆▅▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_majacc_avg ███▇▇▇▇▇▇▇▇▇▃▃▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▃▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_majacc_d_avg ███▇▇▇▇▇▇▇▇▇▃▃▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▃▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_majacc_d_val ███▇▇▇▇▇▇▇▇▇▃▃▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▃▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_majacc_val ███▇▇▇▇▇▇▇▇▇▃▃▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▃▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_minacc_avg ▁▂▂▄▂▄▄▃▅▅▄▅██▇▇▇██▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_minacc_d_avg ▁▂▂▄▂▄▄▃▅▅▄▅██▇▇▇██▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_minacc_d_val ▁▂▂▄▂▄▄▃▅▅▄▅██▇▇▇██▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_minacc_val ▁▂▂▄▂▄▄▃▅▅▄▅██▇▇▇██▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█▇▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/Loss_val █▄▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/l1_avg ▃▂▁▁▁▂▂▃▅▆▇▇███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/l1_val ▂▂▁▁▂▂▃▄▆▆▇████████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_acc_avg ▇███████████▇▄▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▂▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_acc_val █████▇███▇██▅▄▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▃▃▃▂▂▃▂▂▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_majacc_avg ▇███████████▆▃▂▁▁▂▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▂▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_majacc_val █████▇██▇▇█▇▄▄▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_minacc_avg ▁▁▁▂▃▃▃▃▄▄▃▄▇█▇▇▇▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_minacc_val ▁▂▁▂▁▅▃▁▅▆▄▅█▇▇▇▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▄▅▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_nll_avg ▅▂▂▂▂▁▁▁▁▁▁▁▃▇▇█████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_nll_val ▃▂▂▂▂▂▂▂▁▂▁▁▆▇██████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_penalty_avg █▃▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_penalty_val █▆▅▆▅▃▅▄▃▂▄▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/diagnostics/epoch_time_val 0.05068
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/diagnostics/train_time_val 0.05025
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/diagnostics/validation_time_val 0.00041
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/Loss_avg 0.6926
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/Loss_d_avg 0.6926
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/Loss_d_val 0.6926
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/Loss_val 0.6926
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_acc_avg 0.457
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_acc_d_avg 0.457
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_acc_d_val 0.457
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_acc_val 0.457
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_corr_d_avg -0.05278
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_corr_d_val -0.05278
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_majacc_avg 0.48
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_majacc_d_avg 0.48
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_majacc_d_val 0.48
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_majacc_val 0.48
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_minacc_avg 0.45444
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_minacc_d_avg 0.45444
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_minacc_d_val 0.45444
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/test/test_minacc_val 0.45444
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/l1_avg 13.29567
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/l1_val 13.29618
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_acc_avg 0.4718
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_acc_val 0.436
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_majacc_avg 0.4762
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_majacc_val 0.42857
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_minacc_avg 0.44687
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_minacc_val 0.48485
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_nll_avg 0.6931
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_nll_val 0.69307
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/weight_norm_avg 0.20305
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/46/logs/train/weight_norm_val 0.20284
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/o1qo5g0h
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_154613-o1qo5g0h/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240906_154914-zatx2lzz
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/zatx2lzz
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=13.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1183
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5987, 3, 32, 32) (6013, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:39,  1.59s/it] 19%|#9        | 5/26 [00:01<00:05,  3.79it/s] 35%|###4      | 9/26 [00:01<00:02,  7.45it/s] 50%|#####     | 13/26 [00:01<00:01, 11.46it/s] 65%|######5   | 17/26 [00:02<00:00, 15.57it/s] 81%|########  | 21/26 [00:02<00:00, 19.37it/s] 96%|#########6| 25/26 [00:02<00:00, 22.46it/s]100%|##########| 26/26 [00:02<00:00,  9.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.795 (12.428)	train_nll   0.41 (  0.58)	train_penalty   0.07 (  0.26)	weight_norm   9.38 ( 11.85)	train_acc   0.84 (  0.81)	train_minacc   0.03 (  0.07)	train_majacc   0.99 (  0.94)	train_corr   0.00 (  0.00)	l1 6.3012 (7.7490)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.01it/s] 31%|###       | 8/26 [00:00<00:00, 33.73it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.73it/s] 50%|#####     | 13/26 [00:00<00:00, 38.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.57it/s] 96%|#########6| 25/26 [00:00<00:00, 46.44it/s]100%|##########| 26/26 [00:00<00:00, 37.63it/s]
Test: [   0/  26]	Loss 0.430 (0.430)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.430 (0.430)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.394 (0.415)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.394 (0.415)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.99 (  0.98)
Test: [  20/  26]	Loss 0.451 (0.421)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.98 (  0.99)	Loss_d 0.451 (0.421)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.97 (  0.98)
Test: [  26/  26]	Loss 0.412 (0.422)	test_acc   0.85 (  0.84)	test_minacc   0.03 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.412 (0.422)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.03 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]
Test: [  0/  1]	Loss 1.657 (1.657)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.657 (1.657)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.657 (1.657)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.657 (1.657)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/47/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0745 (0.0745)	validation_time 0.0067 (0.0067)	train_time 0.0652 (0.0652)
record: (train_acc, test_acc) (0.8446000218987465, 0.1080000028014183)
last accs (train_acc, test_acc) (0.8446000218987465, 0.1080000028014183)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.40it/s] 23%|##3       | 6/26 [00:00<00:00, 25.56it/s] 38%|###8      | 10/26 [00:00<00:00, 29.97it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.46it/s] 69%|######9   | 18/26 [00:00<00:00, 32.62it/s] 85%|########4 | 22/26 [00:00<00:00, 33.68it/s]100%|##########| 26/26 [00:00<00:00, 34.30it/s]100%|##########| 26/26 [00:00<00:00, 29.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.050 (7.061)	train_nll   0.40 (  0.42)	train_penalty   0.05 (  0.06)	weight_norm   4.65 (  6.64)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.00)	train_majacc   1.00 (  1.00)	train_corr   0.00 (  0.00)	l1 5.8387 (6.1550)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.50it/s] 31%|###       | 8/26 [00:00<00:00, 40.42it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.42it/s] 50%|#####     | 13/26 [00:00<00:00, 43.61it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.56it/s] 96%|#########6| 25/26 [00:00<00:00, 49.02it/s]100%|##########| 26/26 [00:00<00:00, 41.58it/s]
Test: [   0/  26]	Loss 0.408 (0.408)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.408 (0.408)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.390 (0.397)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.390 (0.397)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.426 (0.404)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.426 (0.404)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.98)
Test: [  26/  26]	Loss 0.390 (0.405)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.390 (0.405)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 1.675 (1.675)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.675 (1.675)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.675 (1.675)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.675 (1.675)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.97 (  0.97)
Overall Timing[  1/  1]	epoch_time 0.0370 (0.0557)	validation_time 0.0003 (0.0035)	train_time 0.0366 (0.0509)
record: (train_acc, test_acc) (0.8446000218987465, 0.1080000028014183)
last accs (train_acc, test_acc) (0.8479000265598298, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.73it/s] 23%|##3       | 6/26 [00:00<00:00, 25.21it/s] 38%|###8      | 10/26 [00:00<00:00, 28.81it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.01it/s] 69%|######9   | 18/26 [00:00<00:00, 32.39it/s] 85%|########4 | 22/26 [00:00<00:00, 33.71it/s]100%|##########| 26/26 [00:00<00:00, 34.42it/s]100%|##########| 26/26 [00:00<00:00, 29.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.051 (3.898)	train_nll   0.39 (  0.41)	train_penalty   0.05 (  0.06)	weight_norm   2.66 (  3.49)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.0509 (5.5157)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.31it/s] 31%|###       | 8/26 [00:00<00:00, 40.77it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.77it/s] 50%|#####     | 13/26 [00:00<00:00, 40.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.31it/s] 96%|#########6| 25/26 [00:00<00:00, 48.22it/s]100%|##########| 26/26 [00:00<00:00, 40.89it/s]
Test: [   0/  26]	Loss 0.403 (0.403)	test_acc   0.84 (  0.84)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.403 (0.403)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.388 (0.402)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.03)	test_majacc   0.98 (  0.98)	Loss_d 0.388 (0.402)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.03)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.444 (0.408)	test_acc   0.81 (  0.84)	test_minacc   0.00 (  0.04)	test_majacc   0.97 (  0.98)	Loss_d 0.444 (0.408)	test_acc_d   0.81 (  0.84)	test_minacc_d   0.00 (  0.04)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.379 (0.407)	test_acc   0.86 (  0.84)	test_minacc   0.08 (  0.05)	test_majacc   1.00 (  0.98)	Loss_d 0.379 (0.407)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.08 (  0.05)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.53it/s]
Test: [  0/  1]	Loss 1.689 (1.689)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.95 (  0.95)	Loss_d 1.689 (1.689)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.689 (1.689)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.95 (  0.95)	Loss_d 1.689 (1.689)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.92 (  0.92)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/47/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0355 (0.0490)	validation_time 0.0004 (0.0025)	train_time 0.0350 (0.0456)
record: (train_acc, test_acc) (0.8403000282645225, 0.13199999928474426)
last accs (train_acc, test_acc) (0.8403000282645225, 0.13199999928474426)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.49it/s] 19%|#9        | 5/26 [00:00<00:01, 20.64it/s] 35%|###4      | 9/26 [00:00<00:00, 25.77it/s] 50%|#####     | 13/26 [00:00<00:00, 28.91it/s] 65%|######5   | 17/26 [00:00<00:00, 30.62it/s] 81%|########  | 21/26 [00:00<00:00, 32.25it/s] 96%|#########6| 25/26 [00:00<00:00, 33.42it/s]100%|##########| 26/26 [00:00<00:00, 27.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.031 (2.501)	train_nll   0.36 (  0.40)	train_penalty   0.03 (  0.05)	weight_norm   1.67 (  2.10)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.03)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 4.5611 (4.8851)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.66it/s] 27%|##6       | 7/26 [00:00<00:00, 28.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.97it/s] 50%|#####     | 13/26 [00:00<00:00, 39.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.70it/s] 96%|#########6| 25/26 [00:00<00:00, 47.25it/s]100%|##########| 26/26 [00:00<00:00, 38.11it/s]
Test: [   0/  26]	Loss 0.373 (0.373)	test_acc   0.85 (  0.85)	test_minacc   0.17 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.373 (0.373)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.379 (0.378)	test_acc   0.86 (  0.85)	test_minacc   0.08 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.379 (0.378)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.08 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.393 (0.384)	test_acc   0.85 (  0.85)	test_minacc   0.17 (  0.12)	test_majacc   0.98 (  0.97)	Loss_d 0.393 (0.384)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.17 (  0.12)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.338 (0.383)	test_acc   0.87 (  0.85)	test_minacc   0.22 (  0.13)	test_majacc   0.99 (  0.97)	Loss_d 0.338 (0.383)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.22 (  0.13)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.90 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.24it/s]
Test: [  0/  1]	Loss 1.596 (1.596)	test_acc   0.19 (  0.19)	test_minacc   0.11 (  0.11)	test_majacc   0.96 (  0.96)	Loss_d 1.596 (1.596)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.596 (1.596)	test_acc   0.19 (  0.19)	test_minacc   0.11 (  0.11)	test_majacc   0.96 (  0.96)	Loss_d 1.596 (1.596)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.82 (  0.82)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/47/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0364 (0.0458)	validation_time 0.0004 (0.0020)	train_time 0.0359 (0.0432)
record: (train_acc, test_acc) (0.8470000238418579, 0.19100001454353333)
last accs (train_acc, test_acc) (0.8470000238418579, 0.19100001454353333)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.24it/s] 19%|#9        | 5/26 [00:00<00:01, 19.99it/s] 35%|###4      | 9/26 [00:00<00:00, 26.49it/s] 50%|#####     | 13/26 [00:00<00:00, 30.16it/s] 65%|######5   | 17/26 [00:00<00:00, 32.39it/s] 81%|########  | 21/26 [00:00<00:00, 33.77it/s] 96%|#########6| 25/26 [00:00<00:00, 34.58it/s]100%|##########| 26/26 [00:00<00:00, 28.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.441 (1.731)	train_nll   0.36 (  0.39)	train_penalty   0.03 (  0.04)	weight_norm   1.09 (  1.34)	train_acc   0.85 (  0.85)	train_minacc   0.14 (  0.06)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 4.7176 (4.6227)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.87it/s] 27%|##6       | 7/26 [00:00<00:00, 35.71it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.71it/s] 46%|####6     | 12/26 [00:00<00:00, 42.00it/s] 65%|######5   | 17/26 [00:00<00:00, 43.85it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.85it/s] 88%|########8 | 23/26 [00:00<00:00, 48.30it/s]100%|##########| 26/26 [00:00<00:00, 40.56it/s]
Test: [   0/  26]	Loss 0.351 (0.351)	test_acc   0.86 (  0.86)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 0.351 (0.351)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.367 (0.372)	test_acc   0.87 (  0.85)	test_minacc   0.16 (  0.14)	test_majacc   0.98 (  0.97)	Loss_d 0.367 (0.372)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.16 (  0.14)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.388 (0.381)	test_acc   0.84 (  0.85)	test_minacc   0.17 (  0.14)	test_majacc   0.97 (  0.97)	Loss_d 0.388 (0.381)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.17 (  0.14)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.91)
Test: [  26/  26]	Loss 0.337 (0.380)	test_acc   0.85 (  0.85)	test_minacc   0.19 (  0.15)	test_majacc   0.97 (  0.97)	Loss_d 0.337 (0.380)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.19 (  0.15)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.93it/s]
Test: [  0/  1]	Loss 1.664 (1.664)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.94 (  0.94)	Loss_d 1.664 (1.664)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.664 (1.664)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.94 (  0.94)	Loss_d 1.664 (1.664)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.79 (  0.79)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/47/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0379 (0.0442)	validation_time 0.0006 (0.0017)	train_time 0.0372 (0.0420)
record: (train_acc, test_acc) (0.8455000267028808, 0.22100001573562622)
last accs (train_acc, test_acc) (0.8455000267028808, 0.22100001573562622)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.09it/s] 19%|#9        | 5/26 [00:00<00:00, 21.40it/s] 35%|###4      | 9/26 [00:00<00:00, 26.94it/s] 50%|#####     | 13/26 [00:00<00:00, 29.60it/s] 65%|######5   | 17/26 [00:00<00:00, 31.05it/s] 81%|########  | 21/26 [00:00<00:00, 32.36it/s] 96%|#########6| 25/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:00<00:00, 28.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.085 (1.265)	train_nll   0.36 (  0.38)	train_penalty   0.04 (  0.04)	weight_norm   0.72 (  0.88)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.07)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.2030 (5.0586)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.76it/s] 31%|###       | 8/26 [00:00<00:00, 35.39it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.39it/s] 50%|#####     | 13/26 [00:00<00:00, 39.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.56it/s] 96%|#########6| 25/26 [00:00<00:00, 47.22it/s]100%|##########| 26/26 [00:00<00:00, 38.91it/s]
Test: [   0/  26]	Loss 0.373 (0.373)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.373 (0.373)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.362 (0.375)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.362 (0.375)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.411 (0.383)	test_acc   0.83 (  0.85)	test_minacc   0.05 (  0.03)	test_majacc   0.98 (  0.99)	Loss_d 0.411 (0.383)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.05 (  0.03)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.93 (  0.95)
Test: [  26/  26]	Loss 0.352 (0.382)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.352 (0.382)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.18it/s]
Test: [  0/  1]	Loss 1.644 (1.644)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.644 (1.644)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.644 (1.644)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.644 (1.644)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Overall Timing[  5/  1]	epoch_time 0.0361 (0.0429)	validation_time 0.0003 (0.0015)	train_time 0.0358 (0.0410)
record: (train_acc, test_acc) (0.8455000267028808, 0.22100001573562622)
last accs (train_acc, test_acc) (0.8490000243782997, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 19%|#9        | 5/26 [00:00<00:00, 23.09it/s] 35%|###4      | 9/26 [00:00<00:00, 28.52it/s] 50%|#####     | 13/26 [00:00<00:00, 30.53it/s] 65%|######5   | 17/26 [00:00<00:00, 32.61it/s] 81%|########  | 21/26 [00:00<00:00, 32.89it/s] 96%|#########6| 25/26 [00:00<00:00, 33.55it/s]100%|##########| 26/26 [00:00<00:00, 28.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.846 (0.965)	train_nll   0.35 (  0.37)	train_penalty   0.03 (  0.04)	weight_norm   0.49 (  0.59)	train_acc   0.86 (  0.84)	train_minacc   0.14 (  0.09)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 5.9023 (5.7974)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.63it/s] 27%|##6       | 7/26 [00:00<00:00, 36.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.47it/s] 46%|####6     | 12/26 [00:00<00:00, 41.00it/s] 69%|######9   | 18/26 [00:00<00:00, 46.84it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.84it/s] 92%|#########2| 24/26 [00:00<00:00, 48.13it/s]100%|##########| 26/26 [00:00<00:00, 41.13it/s]
Test: [   0/  26]	Loss 0.369 (0.369)	test_acc   0.86 (  0.86)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 0.369 (0.369)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.347 (0.364)	test_acc   0.86 (  0.85)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 0.347 (0.364)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.379 (0.371)	test_acc   0.83 (  0.85)	test_minacc   0.08 (  0.11)	test_majacc   0.97 (  0.98)	Loss_d 0.379 (0.371)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.08 (  0.11)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.345 (0.371)	test_acc   0.87 (  0.85)	test_minacc   0.22 (  0.11)	test_majacc   0.99 (  0.98)	Loss_d 0.345 (0.371)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.22 (  0.11)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.91it/s]
Test: [  0/  1]	Loss 1.517 (1.517)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 1.517 (1.517)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.517 (1.517)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 1.517 (1.517)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Overall Timing[  6/  1]	epoch_time 0.0362 (0.0419)	validation_time 0.0004 (0.0013)	train_time 0.0358 (0.0402)
record: (train_acc, test_acc) (0.8455000267028808, 0.22100001573562622)
last accs (train_acc, test_acc) (0.8468000192046166, 0.19700001180171967)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.04it/s] 19%|#9        | 5/26 [00:00<00:00, 21.83it/s] 35%|###4      | 9/26 [00:00<00:00, 26.90it/s] 50%|#####     | 13/26 [00:00<00:00, 29.55it/s] 65%|######5   | 17/26 [00:00<00:00, 31.30it/s] 81%|########  | 21/26 [00:00<00:00, 32.44it/s] 96%|#########6| 25/26 [00:00<00:00, 33.29it/s]100%|##########| 26/26 [00:00<00:00, 28.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.692 (0.817)	train_nll   0.34 (  0.37)	train_penalty   0.03 (  0.04)	weight_norm   0.36 (  0.44)	train_acc   0.88 (  0.85)	train_minacc   0.16 (  0.07)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.7641 (6.5792)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.62it/s] 27%|##6       | 7/26 [00:00<00:00, 38.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.30it/s] 50%|#####     | 13/26 [00:00<00:00, 42.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.23it/s] 96%|#########6| 25/26 [00:00<00:00, 48.45it/s]100%|##########| 26/26 [00:00<00:00, 41.15it/s]
Test: [   0/  26]	Loss 0.367 (0.367)	test_acc   0.85 (  0.85)	test_minacc   0.30 (  0.30)	test_majacc   0.96 (  0.96)	Loss_d 0.367 (0.367)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.357 (0.370)	test_acc   0.86 (  0.85)	test_minacc   0.18 (  0.23)	test_majacc   0.96 (  0.96)	Loss_d 0.357 (0.370)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.18 (  0.23)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.382 (0.373)	test_acc   0.83 (  0.85)	test_minacc   0.29 (  0.24)	test_majacc   0.94 (  0.96)	Loss_d 0.382 (0.373)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.29 (  0.24)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.85 (  0.87)
Test: [  26/  26]	Loss 0.325 (0.370)	test_acc   0.86 (  0.85)	test_minacc   0.35 (  0.25)	test_majacc   0.95 (  0.96)	Loss_d 0.325 (0.370)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.35 (  0.25)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.85 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.40it/s]
Test: [  0/  1]	Loss 1.401 (1.401)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.94 (  0.94)	Loss_d 1.401 (1.401)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 1.401 (1.401)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.94 (  0.94)	Loss_d 1.401 (1.401)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.67 (  0.67)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/47/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0374 (0.0414)	validation_time 0.0003 (0.0012)	train_time 0.0371 (0.0398)
record: (train_acc, test_acc) (0.8501000244021416, 0.2710000276565552)
last accs (train_acc, test_acc) (0.8501000244021416, 0.2710000276565552)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.89it/s] 19%|#9        | 5/26 [00:00<00:00, 23.03it/s] 35%|###4      | 9/26 [00:00<00:00, 28.29it/s] 50%|#####     | 13/26 [00:00<00:00, 31.07it/s] 65%|######5   | 17/26 [00:00<00:00, 32.57it/s] 81%|########  | 21/26 [00:00<00:00, 33.52it/s] 96%|#########6| 25/26 [00:00<00:00, 34.08it/s]100%|##########| 26/26 [00:00<00:00, 28.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.563 (0.650)	train_nll   0.33 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.23 (  0.29)	train_acc   0.87 (  0.85)	train_minacc   0.41 (  0.13)	train_majacc   0.95 (  0.98)	train_corr   0.00 (  0.00)	l1 8.6469 (7.9701)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.25it/s] 27%|##6       | 7/26 [00:00<00:00, 37.89it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.89it/s] 50%|#####     | 13/26 [00:00<00:00, 42.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.99it/s] 96%|#########6| 25/26 [00:00<00:00, 48.66it/s]100%|##########| 26/26 [00:00<00:00, 41.01it/s]
Test: [   0/  26]	Loss 0.331 (0.331)	test_acc   0.85 (  0.85)	test_minacc   0.40 (  0.40)	test_majacc   0.94 (  0.94)	Loss_d 0.331 (0.331)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.340 (0.341)	test_acc   0.85 (  0.86)	test_minacc   0.22 (  0.27)	test_majacc   0.94 (  0.96)	Loss_d 0.340 (0.341)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.22 (  0.27)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.338 (0.344)	test_acc   0.84 (  0.86)	test_minacc   0.32 (  0.28)	test_majacc   0.94 (  0.96)	Loss_d 0.338 (0.344)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.32 (  0.28)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.85 (  0.88)
Test: [  26/  26]	Loss 0.301 (0.342)	test_acc   0.88 (  0.86)	test_minacc   0.43 (  0.29)	test_majacc   0.96 (  0.96)	Loss_d 0.301 (0.342)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.43 (  0.29)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.85 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.00it/s]
Test: [  0/  1]	Loss 1.459 (1.459)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.96 (  0.96)	Loss_d 1.459 (1.459)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.459 (1.459)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.96 (  0.96)	Loss_d 1.459 (1.459)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.65 (  0.65)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/47/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0360 (0.0408)	validation_time 0.0004 (0.0011)	train_time 0.0356 (0.0394)
record: (train_acc, test_acc) (0.8553000202775002, 0.3270000219345093)
last accs (train_acc, test_acc) (0.8553000202775002, 0.3270000219345093)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.82it/s] 19%|#9        | 5/26 [00:00<00:00, 23.60it/s] 35%|###4      | 9/26 [00:00<00:00, 28.74it/s] 50%|#####     | 13/26 [00:00<00:00, 30.77it/s] 65%|######5   | 17/26 [00:00<00:00, 30.95it/s] 81%|########  | 21/26 [00:00<00:00, 31.59it/s] 96%|#########6| 25/26 [00:00<00:00, 32.58it/s]100%|##########| 26/26 [00:00<00:00, 28.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.498 (0.558)	train_nll   0.32 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.18 (  0.20)	train_acc   0.88 (  0.85)	train_minacc   0.27 (  0.13)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 10.2935 (9.5916)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.92it/s] 27%|##6       | 7/26 [00:00<00:00, 36.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.01it/s] 50%|#####     | 13/26 [00:00<00:00, 44.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.70it/s] 96%|#########6| 25/26 [00:00<00:00, 48.98it/s]100%|##########| 26/26 [00:00<00:00, 41.05it/s]
Test: [   0/  26]	Loss 0.335 (0.335)	test_acc   0.86 (  0.86)	test_minacc   0.29 (  0.29)	test_majacc   0.97 (  0.97)	Loss_d 0.335 (0.335)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.320 (0.334)	test_acc   0.86 (  0.86)	test_minacc   0.18 (  0.24)	test_majacc   0.97 (  0.97)	Loss_d 0.320 (0.334)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.18 (  0.24)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.325 (0.336)	test_acc   0.86 (  0.86)	test_minacc   0.29 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 0.325 (0.336)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.29 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.90)
Test: [  26/  26]	Loss 0.291 (0.331)	test_acc   0.89 (  0.86)	test_minacc   0.41 (  0.26)	test_majacc   0.97 (  0.97)	Loss_d 0.291 (0.331)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.41 (  0.26)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.71it/s]
Test: [  0/  1]	Loss 1.561 (1.561)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.92 (  0.92)	Loss_d 1.561 (1.561)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.70 (  0.70)
Test: [  1/  1]	Loss 1.561 (1.561)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.92 (  0.92)	Loss_d 1.561 (1.561)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.70 (  0.70)
Overall Timing[  9/  1]	epoch_time 0.0349 (0.0402)	validation_time 0.0003 (0.0010)	train_time 0.0346 (0.0389)
record: (train_acc, test_acc) (0.8553000202775002, 0.3270000219345093)
last accs (train_acc, test_acc) (0.861100024998188, 0.27300000190734863)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.22it/s] 19%|#9        | 5/26 [00:00<00:01, 18.61it/s] 35%|###4      | 9/26 [00:00<00:00, 24.97it/s] 50%|#####     | 13/26 [00:00<00:00, 28.81it/s] 65%|######5   | 17/26 [00:00<00:00, 31.47it/s] 81%|########  | 21/26 [00:00<00:00, 33.09it/s] 96%|#########6| 25/26 [00:00<00:00, 33.91it/s]100%|##########| 26/26 [00:00<00:00, 27.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.428 (0.502)	train_nll   0.30 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.13 (  0.15)	train_acc   0.87 (  0.85)	train_minacc   0.35 (  0.18)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 11.9973 (11.2456)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.07it/s] 27%|##6       | 7/26 [00:00<00:00, 36.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.22it/s] 50%|#####     | 13/26 [00:00<00:00, 41.74it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.34it/s] 96%|#########6| 25/26 [00:00<00:00, 47.31it/s]100%|##########| 26/26 [00:00<00:00, 39.94it/s]
Test: [   0/  26]	Loss 0.321 (0.321)	test_acc   0.86 (  0.86)	test_minacc   0.32 (  0.32)	test_majacc   0.96 (  0.96)	Loss_d 0.321 (0.321)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.337 (0.333)	test_acc   0.86 (  0.86)	test_minacc   0.14 (  0.21)	test_majacc   0.97 (  0.97)	Loss_d 0.337 (0.333)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.14 (  0.21)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.91)
Test: [  20/  26]	Loss 0.327 (0.335)	test_acc   0.85 (  0.85)	test_minacc   0.33 (  0.24)	test_majacc   0.95 (  0.96)	Loss_d 0.327 (0.335)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.33 (  0.24)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.87 (  0.90)
Test: [  26/  26]	Loss 0.269 (0.330)	test_acc   0.89 (  0.86)	test_minacc   0.46 (  0.26)	test_majacc   0.96 (  0.96)	Loss_d 0.269 (0.330)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.46 (  0.26)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.93it/s]
Test: [  0/  1]	Loss 1.668 (1.668)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.91 (  0.91)	Loss_d 1.668 (1.668)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.71 (  0.71)
Test: [  1/  1]	Loss 1.668 (1.668)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.91 (  0.91)	Loss_d 1.668 (1.668)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.71 (  0.71)
Overall Timing[ 10/  1]	epoch_time 0.0368 (0.0399)	validation_time 0.0004 (0.0010)	train_time 0.0364 (0.0387)
record: (train_acc, test_acc) (0.8553000202775002, 0.3270000219345093)
last accs (train_acc, test_acc) (0.8566000217795372, 0.28700000047683716)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.37it/s] 19%|#9        | 5/26 [00:00<00:01, 20.49it/s] 35%|###4      | 9/26 [00:00<00:00, 25.82it/s] 50%|#####     | 13/26 [00:00<00:00, 28.64it/s] 65%|######5   | 17/26 [00:00<00:00, 30.90it/s] 81%|########  | 21/26 [00:00<00:00, 32.54it/s] 96%|#########6| 25/26 [00:00<00:00, 32.91it/s]100%|##########| 26/26 [00:00<00:00, 27.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.413 (0.467)	train_nll   0.30 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.11 (  0.12)	train_acc   0.88 (  0.85)	train_minacc   0.32 (  0.19)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 13.2914 (12.6695)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.75it/s] 35%|###4      | 9/26 [00:00<00:00, 40.31it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.31it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.17it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.17it/s] 81%|########  | 21/26 [00:00<00:00, 48.42it/s]100%|##########| 26/26 [00:00<00:00, 42.56it/s]
Test: [   0/  26]	Loss 0.324 (0.324)	test_acc   0.86 (  0.86)	test_minacc   0.48 (  0.48)	test_majacc   0.94 (  0.94)	Loss_d 0.324 (0.324)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.332 (0.330)	test_acc   0.86 (  0.86)	test_minacc   0.41 (  0.41)	test_majacc   0.92 (  0.93)	Loss_d 0.332 (0.330)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.84 (  0.85)
Test: [  20/  26]	Loss 0.301 (0.329)	test_acc   0.89 (  0.86)	test_minacc   0.59 (  0.42)	test_majacc   0.95 (  0.94)	Loss_d 0.301 (0.329)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.59 (  0.42)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.81 (  0.84)
Test: [  26/  26]	Loss 0.285 (0.325)	test_acc   0.87 (  0.86)	test_minacc   0.51 (  0.44)	test_majacc   0.93 (  0.94)	Loss_d 0.285 (0.325)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.51 (  0.44)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.82 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.18it/s]
Test: [  0/  1]	Loss 1.392 (1.392)	test_acc   0.40 (  0.40)	test_minacc   0.35 (  0.35)	test_majacc   0.88 (  0.88)	Loss_d 1.392 (1.392)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.50 (  0.50)
Test: [  1/  1]	Loss 1.392 (1.392)	test_acc   0.40 (  0.40)	test_minacc   0.35 (  0.35)	test_majacc   0.88 (  0.88)	Loss_d 1.392 (1.392)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.50 (  0.50)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/47/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0369 (0.0396)	validation_time 0.0004 (0.0009)	train_time 0.0365 (0.0385)
record: (train_acc, test_acc) (0.8627000217437744, 0.4020000100135803)
last accs (train_acc, test_acc) (0.8627000217437744, 0.4020000100135803)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s] 19%|#9        | 5/26 [00:00<00:01, 20.82it/s] 35%|###4      | 9/26 [00:00<00:00, 27.48it/s] 50%|#####     | 13/26 [00:00<00:00, 30.44it/s] 65%|######5   | 17/26 [00:00<00:00, 32.56it/s] 81%|########  | 21/26 [00:00<00:00, 33.58it/s] 96%|#########6| 25/26 [00:00<00:00, 33.94it/s]100%|##########| 26/26 [00:00<00:00, 28.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.419 (0.451)	train_nll   0.32 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.10 (  0.10)	train_acc   0.87 (  0.85)	train_minacc   0.27 (  0.19)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 14.4582 (13.9258)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.09it/s] 27%|##6       | 7/26 [00:00<00:00, 31.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.97it/s] 50%|#####     | 13/26 [00:00<00:00, 38.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.53it/s] 96%|#########6| 25/26 [00:00<00:00, 46.43it/s]100%|##########| 26/26 [00:00<00:00, 38.13it/s]
Test: [   0/  26]	Loss 0.317 (0.317)	test_acc   0.84 (  0.84)	test_minacc   0.13 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.317 (0.317)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.339 (0.330)	test_acc   0.85 (  0.86)	test_minacc   0.02 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.339 (0.330)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.02 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.311 (0.334)	test_acc   0.86 (  0.85)	test_minacc   0.22 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.311 (0.334)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.22 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.92)
Test: [  26/  26]	Loss 0.277 (0.332)	test_acc   0.88 (  0.85)	test_minacc   0.30 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 0.277 (0.332)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.30 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.99it/s]
Test: [  0/  1]	Loss 1.667 (1.667)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.95 (  0.95)	Loss_d 1.667 (1.667)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.667 (1.667)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.95 (  0.95)	Loss_d 1.667 (1.667)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.78 (  0.78)
Overall Timing[ 12/  1]	epoch_time 0.0361 (0.0393)	validation_time 0.0003 (0.0009)	train_time 0.0358 (0.0383)
record: (train_acc, test_acc) (0.8627000217437744, 0.4020000100135803)
last accs (train_acc, test_acc) (0.8531000273823738, 0.19700001180171967)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.33it/s] 19%|#9        | 5/26 [00:00<00:01, 18.38it/s] 35%|###4      | 9/26 [00:00<00:00, 24.65it/s] 50%|#####     | 13/26 [00:00<00:00, 28.48it/s] 65%|######5   | 17/26 [00:00<00:00, 30.95it/s] 81%|########  | 21/26 [00:00<00:00, 32.54it/s] 96%|#########6| 25/26 [00:00<00:00, 33.37it/s]100%|##########| 26/26 [00:00<00:00, 26.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.377 (0.440)	train_nll   0.29 (  0.34)	train_penalty   0.01 (  0.03)	weight_norm   0.08 (  0.10)	train_acc   0.89 (  0.85)	train_minacc   0.51 (  0.21)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 15.6314 (15.0795)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.59it/s] 27%|##6       | 7/26 [00:00<00:00, 34.87it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.87it/s] 46%|####6     | 12/26 [00:00<00:00, 40.10it/s] 65%|######5   | 17/26 [00:00<00:00, 43.30it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.30it/s] 88%|########8 | 23/26 [00:00<00:00, 48.10it/s]100%|##########| 26/26 [00:00<00:00, 39.12it/s]
Test: [   0/  26]	Loss 0.316 (0.316)	test_acc   0.86 (  0.86)	test_minacc   0.46 (  0.46)	test_majacc   0.94 (  0.94)	Loss_d 0.316 (0.316)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.312 (0.323)	test_acc   0.84 (  0.86)	test_minacc   0.35 (  0.37)	test_majacc   0.92 (  0.94)	Loss_d 0.312 (0.323)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.35 (  0.37)	test_majacc_d   0.92 (  0.94)	test_corr_d   0.86 (  0.87)
Test: [  20/  26]	Loss 0.305 (0.323)	test_acc   0.88 (  0.86)	test_minacc   0.41 (  0.37)	test_majacc   0.97 (  0.94)	Loss_d 0.305 (0.323)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.41 (  0.37)	test_majacc_d   0.97 (  0.94)	test_corr_d   0.86 (  0.86)
Test: [  26/  26]	Loss 0.267 (0.320)	test_acc   0.90 (  0.86)	test_minacc   0.54 (  0.38)	test_majacc   0.96 (  0.94)	Loss_d 0.267 (0.320)	test_acc_d   0.90 (  0.86)	test_minacc_d   0.54 (  0.38)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.85 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.69it/s]
Test: [  0/  1]	Loss 1.436 (1.436)	test_acc   0.41 (  0.41)	test_minacc   0.36 (  0.36)	test_majacc   0.88 (  0.88)	Loss_d 1.436 (1.436)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.56 (  0.56)
Test: [  1/  1]	Loss 1.436 (1.436)	test_acc   0.41 (  0.41)	test_minacc   0.36 (  0.36)	test_majacc   0.88 (  0.88)	Loss_d 1.436 (1.436)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.56 (  0.56)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/47/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0374 (0.0392)	validation_time 0.0004 (0.0008)	train_time 0.0370 (0.0382)
record: (train_acc, test_acc) (0.8589000287055969, 0.4100000262260437)
last accs (train_acc, test_acc) (0.8589000287055969, 0.4100000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 15%|#5        | 4/26 [00:00<00:01, 17.73it/s] 31%|###       | 8/26 [00:00<00:00, 25.69it/s] 46%|####6     | 12/26 [00:00<00:00, 29.38it/s] 62%|######1   | 16/26 [00:00<00:00, 31.23it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.27it/s] 92%|#########2| 24/26 [00:00<00:00, 32.83it/s]100%|##########| 26/26 [00:00<00:00, 27.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.366 (0.412)	train_nll   0.29 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm   0.08 (  0.08)	train_acc   0.88 (  0.86)	train_minacc   0.46 (  0.27)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 16.6976 (16.1951)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.42it/s] 27%|##6       | 7/26 [00:00<00:00, 36.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.38it/s] 46%|####6     | 12/26 [00:00<00:00, 38.75it/s] 69%|######9   | 18/26 [00:00<00:00, 45.97it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.97it/s] 92%|#########2| 24/26 [00:00<00:00, 46.94it/s]100%|##########| 26/26 [00:00<00:00, 39.83it/s]
Test: [   0/  26]	Loss 0.317 (0.317)	test_acc   0.86 (  0.86)	test_minacc   0.44 (  0.44)	test_majacc   0.94 (  0.94)	Loss_d 0.317 (0.317)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.326 (0.322)	test_acc   0.86 (  0.87)	test_minacc   0.31 (  0.35)	test_majacc   0.94 (  0.95)	Loss_d 0.326 (0.322)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.31 (  0.35)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.301 (0.317)	test_acc   0.86 (  0.86)	test_minacc   0.38 (  0.36)	test_majacc   0.96 (  0.95)	Loss_d 0.301 (0.317)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.38 (  0.36)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.86 (  0.87)
Test: [  26/  26]	Loss 0.258 (0.311)	test_acc   0.90 (  0.87)	test_minacc   0.57 (  0.38)	test_majacc   0.95 (  0.95)	Loss_d 0.258 (0.311)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.57 (  0.38)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.84 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.76it/s]
Test: [  0/  1]	Loss 1.500 (1.500)	test_acc   0.40 (  0.40)	test_minacc   0.35 (  0.35)	test_majacc   0.91 (  0.91)	Loss_d 1.500 (1.500)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 1.500 (1.500)	test_acc   0.40 (  0.40)	test_minacc   0.35 (  0.35)	test_majacc   0.91 (  0.91)	Loss_d 1.500 (1.500)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.53 (  0.53)
Overall Timing[ 14/  1]	epoch_time 0.0367 (0.0390)	validation_time 0.0004 (0.0008)	train_time 0.0363 (0.0381)
record: (train_acc, test_acc) (0.8589000287055969, 0.4100000262260437)
last accs (train_acc, test_acc) (0.8668000200986862, 0.4020000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.56it/s] 19%|#9        | 5/26 [00:00<00:00, 23.59it/s] 35%|###4      | 9/26 [00:00<00:00, 27.59it/s] 50%|#####     | 13/26 [00:00<00:00, 28.55it/s] 65%|######5   | 17/26 [00:00<00:00, 30.70it/s] 81%|########  | 21/26 [00:00<00:00, 31.84it/s] 96%|#########6| 25/26 [00:00<00:00, 32.74it/s]100%|##########| 26/26 [00:00<00:00, 28.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.003 (0.163)	train_nll   0.65 (  0.43)	train_penalty   0.00 (  0.01)	weight_norm   0.11 (  0.08)	train_acc   0.55 (  0.79)	train_minacc   0.89 (  0.51)	train_majacc   0.49 (  0.84)	train_corr   0.00 (  0.00)	l1 16.6531 (16.9464)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s] 27%|##6       | 7/26 [00:00<00:00, 31.86it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.86it/s] 50%|#####     | 13/26 [00:00<00:00, 39.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.17it/s] 96%|#########6| 25/26 [00:00<00:00, 47.22it/s]100%|##########| 26/26 [00:00<00:00, 38.32it/s]
Test: [   0/  26]	Loss 0.607 (0.607)	test_acc   0.66 (  0.66)	test_minacc   0.79 (  0.79)	test_majacc   0.63 (  0.63)	Loss_d 0.607 (0.607)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.620 (0.627)	test_acc   0.59 (  0.61)	test_minacc   0.67 (  0.75)	test_majacc   0.58 (  0.58)	Loss_d 0.620 (0.627)	test_acc_d   0.59 (  0.61)	test_minacc_d   0.67 (  0.75)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.36 (  0.28)
Test: [  20/  26]	Loss 0.645 (0.634)	test_acc   0.58 (  0.60)	test_minacc   0.73 (  0.74)	test_majacc   0.55 (  0.57)	Loss_d 0.645 (0.634)	test_acc_d   0.58 (  0.60)	test_minacc_d   0.73 (  0.74)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.23 (  0.26)
Test: [  26/  26]	Loss 0.633 (0.634)	test_acc   0.62 (  0.60)	test_minacc   0.86 (  0.75)	test_majacc   0.57 (  0.58)	Loss_d 0.633 (0.634)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.86 (  0.75)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.19 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.29it/s]
Test: [  0/  1]	Loss 0.646 (0.646)	test_acc   0.69 (  0.69)	test_minacc   0.70 (  0.70)	test_majacc   0.55 (  0.55)	Loss_d 0.646 (0.646)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.36 ( -0.36)
Test: [  1/  1]	Loss 0.646 (0.646)	test_acc   0.69 (  0.69)	test_minacc   0.70 (  0.70)	test_majacc   0.55 (  0.55)	Loss_d 0.646 (0.646)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.36 ( -0.36)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/47/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0368 (0.0389)	validation_time 0.0004 (0.0008)	train_time 0.0364 (0.0380)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.60it/s] 19%|#9        | 5/26 [00:00<00:00, 21.66it/s] 35%|###4      | 9/26 [00:00<00:00, 26.70it/s] 50%|#####     | 13/26 [00:00<00:00, 29.40it/s] 65%|######5   | 17/26 [00:00<00:00, 30.46it/s] 81%|########  | 21/26 [00:00<00:00, 31.59it/s] 96%|#########6| 25/26 [00:00<00:00, 32.51it/s]100%|##########| 26/26 [00:00<00:00, 27.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.001 (0.001)	train_nll   0.63 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.13)	train_acc   0.59 (  0.61)	train_minacc   0.51 (  0.57)	train_majacc   0.61 (  0.61)	train_corr   0.00 (  0.00)	l1 16.2622 (16.3899)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.46it/s] 27%|##6       | 7/26 [00:00<00:00, 34.10it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.10it/s] 50%|#####     | 13/26 [00:00<00:00, 44.39it/s] 69%|######9   | 18/26 [00:00<00:00, 45.30it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.30it/s] 96%|#########6| 25/26 [00:00<00:00, 51.28it/s]100%|##########| 26/26 [00:00<00:00, 42.06it/s]
Test: [   0/  26]	Loss 0.631 (0.631)	test_acc   0.57 (  0.57)	test_minacc   0.52 (  0.52)	test_majacc   0.58 (  0.58)	Loss_d 0.631 (0.631)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.644 (0.642)	test_acc   0.54 (  0.56)	test_minacc   0.45 (  0.52)	test_majacc   0.55 (  0.56)	Loss_d 0.644 (0.642)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.38 (  0.31)
Test: [  20/  26]	Loss 0.661 (0.647)	test_acc   0.52 (  0.55)	test_minacc   0.49 (  0.51)	test_majacc   0.53 (  0.56)	Loss_d 0.661 (0.647)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.53 (  0.56)	test_corr_d   0.25 (  0.30)
Test: [  26/  26]	Loss 0.638 (0.647)	test_acc   0.52 (  0.55)	test_minacc   0.46 (  0.52)	test_majacc   0.53 (  0.56)	Loss_d 0.638 (0.647)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.53 (  0.56)	test_corr_d   0.29 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.30it/s]
Test: [  0/  1]	Loss 0.670 (0.670)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.60 (  0.60)	Loss_d 0.670 (0.670)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.670 (0.670)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.60 (  0.60)	Loss_d 0.670 (0.670)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 16/  1]	epoch_time 0.0360 (0.0387)	validation_time 0.0003 (0.0007)	train_time 0.0357 (0.0378)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5546000128984452, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.13it/s] 19%|#9        | 5/26 [00:00<00:01, 18.19it/s] 35%|###4      | 9/26 [00:00<00:00, 24.89it/s] 50%|#####     | 13/26 [00:00<00:00, 28.84it/s] 65%|######5   | 17/26 [00:00<00:00, 30.56it/s] 81%|########  | 21/26 [00:00<00:00, 32.10it/s] 96%|#########6| 25/26 [00:00<00:00, 32.72it/s]100%|##########| 26/26 [00:00<00:00, 26.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.50 (  0.50)	train_minacc   0.43 (  0.53)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 16.1843 (16.2183)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.64it/s] 27%|##6       | 7/26 [00:00<00:00, 34.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.38it/s] 50%|#####     | 13/26 [00:00<00:00, 40.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.48it/s] 96%|#########6| 25/26 [00:00<00:00, 47.75it/s]100%|##########| 26/26 [00:00<00:00, 39.45it/s]
Test: [   0/  26]	Loss 0.662 (0.662)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.662 (0.662)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.671 (0.668)	test_acc   0.50 (  0.49)	test_minacc   0.49 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.671 (0.668)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.24 (  0.17)
Test: [  20/  26]	Loss 0.682 (0.671)	test_acc   0.46 (  0.49)	test_minacc   0.48 (  0.51)	test_majacc   0.46 (  0.49)	Loss_d 0.682 (0.671)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.10 (  0.16)
Test: [  26/  26]	Loss 0.668 (0.671)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.52)	test_majacc   0.51 (  0.49)	Loss_d 0.668 (0.671)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.52)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.12 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.30it/s]
Test: [  0/  1]	Loss 0.667 (0.667)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.667 (0.667)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.667 (0.667)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.667 (0.667)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 17/  1]	epoch_time 0.0366 (0.0386)	validation_time 0.0004 (0.0007)	train_time 0.0361 (0.0377)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.4958000054359436, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.52it/s] 19%|#9        | 5/26 [00:00<00:00, 22.07it/s] 35%|###4      | 9/26 [00:00<00:00, 27.68it/s] 50%|#####     | 13/26 [00:00<00:00, 29.99it/s] 65%|######5   | 17/26 [00:00<00:00, 31.52it/s] 81%|########  | 21/26 [00:00<00:00, 32.60it/s] 96%|#########6| 25/26 [00:00<00:00, 32.62it/s]100%|##########| 26/26 [00:00<00:00, 28.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.47 (  0.48)	train_minacc   0.54 (  0.55)	train_majacc   0.46 (  0.47)	train_corr   0.00 (  0.00)	l1 16.1579 (16.1695)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.88it/s] 15%|#5        | 4/26 [00:00<00:01, 18.90it/s] 35%|###4      | 9/26 [00:00<00:00, 31.67it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 40.42it/s] 77%|#######6  | 20/26 [00:00<00:00, 42.21it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 42.21it/s]100%|##########| 26/26 [00:00<00:00, 47.83it/s]100%|##########| 26/26 [00:00<00:00, 36.50it/s]
Test: [   0/  26]	Loss 0.671 (0.671)	test_acc   0.44 (  0.44)	test_minacc   0.60 (  0.60)	test_majacc   0.41 (  0.41)	Loss_d 0.671 (0.671)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.677 (0.675)	test_acc   0.45 (  0.45)	test_minacc   0.53 (  0.60)	test_majacc   0.44 (  0.42)	Loss_d 0.677 (0.675)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.53 (  0.60)	test_majacc_d   0.44 (  0.42)	test_corr_d   0.19 (  0.13)
Test: [  20/  26]	Loss 0.684 (0.677)	test_acc   0.43 (  0.45)	test_minacc   0.52 (  0.61)	test_majacc   0.41 (  0.42)	Loss_d 0.684 (0.677)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.52 (  0.61)	test_majacc_d   0.41 (  0.42)	test_corr_d   0.07 (  0.12)
Test: [  26/  26]	Loss 0.676 (0.677)	test_acc   0.48 (  0.45)	test_minacc   0.54 (  0.61)	test_majacc   0.46 (  0.42)	Loss_d 0.676 (0.677)	test_acc_d   0.48 (  0.45)	test_minacc_d   0.54 (  0.61)	test_majacc_d   0.46 (  0.42)	test_corr_d   0.07 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.10it/s]
Test: [  0/  1]	Loss 0.671 (0.671)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.671 (0.671)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.671 (0.671)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.671 (0.671)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 18/  1]	epoch_time 0.0383 (0.0386)	validation_time 0.0005 (0.0007)	train_time 0.0377 (0.0377)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.45070000433921814, 0.5550000071525574)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.22it/s] 19%|#9        | 5/26 [00:00<00:01, 16.24it/s] 35%|###4      | 9/26 [00:00<00:00, 23.19it/s] 50%|#####     | 13/26 [00:00<00:00, 26.85it/s] 65%|######5   | 17/26 [00:00<00:00, 29.20it/s] 81%|########  | 21/26 [00:00<00:00, 31.14it/s] 96%|#########6| 25/26 [00:00<00:00, 32.10it/s]100%|##########| 26/26 [00:01<00:00, 25.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.42 (  0.44)	train_minacc   0.59 (  0.63)	train_majacc   0.39 (  0.40)	train_corr   0.00 (  0.00)	l1 16.1459 (16.1519)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 31%|###       | 8/26 [00:00<00:00, 40.42it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.42it/s] 50%|#####     | 13/26 [00:00<00:00, 41.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.35it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.35it/s] 96%|#########6| 25/26 [00:00<00:00, 47.65it/s]100%|##########| 26/26 [00:00<00:00, 40.51it/s]
Test: [   0/  26]	Loss 0.681 (0.681)	test_acc   0.41 (  0.41)	test_minacc   0.59 (  0.59)	test_majacc   0.37 (  0.37)	Loss_d 0.681 (0.681)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.682 (0.682)	test_acc   0.42 (  0.41)	test_minacc   0.61 (  0.63)	test_majacc   0.39 (  0.38)	Loss_d 0.682 (0.682)	test_acc_d   0.42 (  0.41)	test_minacc_d   0.61 (  0.63)	test_majacc_d   0.39 (  0.38)	test_corr_d   0.15 (  0.09)
Test: [  20/  26]	Loss 0.689 (0.683)	test_acc   0.38 (  0.42)	test_minacc   0.60 (  0.64)	test_majacc   0.34 (  0.37)	Loss_d 0.689 (0.683)	test_acc_d   0.38 (  0.42)	test_minacc_d   0.60 (  0.64)	test_majacc_d   0.34 (  0.37)	test_corr_d   0.03 (  0.08)
Test: [  26/  26]	Loss 0.683 (0.683)	test_acc   0.42 (  0.42)	test_minacc   0.59 (  0.65)	test_majacc   0.39 (  0.38)	Loss_d 0.683 (0.683)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.59 (  0.65)	test_majacc_d   0.39 (  0.38)	test_corr_d   0.03 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.76it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.41 (  0.41)	Loss_d 0.677 (0.677)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.41 (  0.41)	Loss_d 0.677 (0.677)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 19/  1]	epoch_time 0.0381 (0.0386)	validation_time 0.0003 (0.0007)	train_time 0.0378 (0.0377)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.4177000054121017, 0.581000030040741)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s] 19%|#9        | 5/26 [00:00<00:00, 22.39it/s] 35%|###4      | 9/26 [00:00<00:00, 26.92it/s] 50%|#####     | 13/26 [00:00<00:00, 28.98it/s] 65%|######5   | 17/26 [00:00<00:00, 31.42it/s] 81%|########  | 21/26 [00:00<00:00, 33.16it/s] 96%|#########6| 25/26 [00:00<00:00, 33.82it/s]100%|##########| 26/26 [00:00<00:00, 28.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.40 (  0.42)	train_minacc   0.59 (  0.64)	train_majacc   0.37 (  0.39)	train_corr   0.00 (  0.00)	l1 16.1385 (16.1422)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.54it/s] 27%|##6       | 7/26 [00:00<00:00, 36.10it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.10it/s] 50%|#####     | 13/26 [00:00<00:00, 42.52it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.31it/s] 96%|#########6| 25/26 [00:00<00:00, 48.45it/s]100%|##########| 26/26 [00:00<00:00, 40.65it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.40 (  0.40)	test_minacc   0.59 (  0.59)	test_majacc   0.36 (  0.36)	Loss_d 0.686 (0.686)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.36 (  0.36)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.686 (0.686)	test_acc   0.42 (  0.42)	test_minacc   0.61 (  0.63)	test_majacc   0.39 (  0.39)	Loss_d 0.686 (0.686)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.61 (  0.63)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.12 (  0.06)
Test: [  20/  26]	Loss 0.691 (0.687)	test_acc   0.41 (  0.42)	test_minacc   0.60 (  0.63)	test_majacc   0.37 (  0.38)	Loss_d 0.691 (0.687)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.60 (  0.63)	test_majacc_d   0.37 (  0.38)	test_corr_d   0.00 (  0.05)
Test: [  26/  26]	Loss 0.687 (0.687)	test_acc   0.39 (  0.42)	test_minacc   0.59 (  0.64)	test_majacc   0.35 (  0.38)	Loss_d 0.687 (0.687)	test_acc_d   0.39 (  0.42)	test_minacc_d   0.59 (  0.64)	test_majacc_d   0.35 (  0.38)	test_corr_d  -0.00 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.10it/s]
Test: [  0/  1]	Loss 0.682 (0.682)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.43 (  0.43)	Loss_d 0.682 (0.682)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.682 (0.682)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.43 (  0.43)	Loss_d 0.682 (0.682)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 20/  1]	epoch_time 0.0363 (0.0385)	validation_time 0.0004 (0.0007)	train_time 0.0359 (0.0376)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.42140000596642496, 0.5840000510215759)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.26it/s] 19%|#9        | 5/26 [00:00<00:00, 22.71it/s] 35%|###4      | 9/26 [00:00<00:00, 27.60it/s] 50%|#####     | 13/26 [00:00<00:00, 30.64it/s] 65%|######5   | 17/26 [00:00<00:00, 32.43it/s] 81%|########  | 21/26 [00:00<00:00, 33.73it/s] 96%|#########6| 25/26 [00:00<00:00, 33.97it/s]100%|##########| 26/26 [00:00<00:00, 28.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.41 (  0.43)	train_minacc   0.51 (  0.61)	train_majacc   0.39 (  0.40)	train_corr   0.00 (  0.00)	l1 16.1341 (16.1363)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 27%|##6       | 7/26 [00:00<00:00, 35.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.08it/s] 50%|#####     | 13/26 [00:00<00:00, 40.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.86it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.86it/s] 96%|#########6| 25/26 [00:00<00:00, 48.11it/s]100%|##########| 26/26 [00:00<00:00, 39.95it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.43 (  0.43)	test_minacc   0.57 (  0.57)	test_majacc   0.40 (  0.40)	Loss_d 0.690 (0.690)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.688 (0.689)	test_acc   0.45 (  0.45)	test_minacc   0.59 (  0.58)	test_majacc   0.42 (  0.42)	Loss_d 0.688 (0.689)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.59 (  0.58)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.10 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.689)	test_acc   0.43 (  0.44)	test_minacc   0.56 (  0.58)	test_majacc   0.40 (  0.42)	Loss_d 0.692 (0.689)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.56 (  0.58)	test_majacc_d   0.40 (  0.42)	test_corr_d  -0.02 (  0.03)
Test: [  26/  26]	Loss 0.690 (0.689)	test_acc   0.41 (  0.44)	test_minacc   0.51 (  0.59)	test_majacc   0.39 (  0.42)	Loss_d 0.690 (0.689)	test_acc_d   0.41 (  0.44)	test_minacc_d   0.51 (  0.59)	test_majacc_d   0.39 (  0.42)	test_corr_d  -0.02 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.34it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.686 (0.686)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.686 (0.686)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 21/  1]	epoch_time 0.0369 (0.0384)	validation_time 0.0003 (0.0007)	train_time 0.0366 (0.0376)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.4449000039100647, 0.562000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.89it/s] 19%|#9        | 5/26 [00:00<00:00, 23.86it/s] 35%|###4      | 9/26 [00:00<00:00, 29.28it/s] 50%|#####     | 13/26 [00:00<00:00, 31.62it/s] 65%|######5   | 17/26 [00:00<00:00, 33.14it/s] 81%|########  | 21/26 [00:00<00:00, 34.06it/s] 96%|#########6| 25/26 [00:00<00:00, 34.68it/s]100%|##########| 26/26 [00:00<00:00, 29.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.45 (  0.45)	train_minacc   0.59 (  0.58)	train_majacc   0.43 (  0.42)	train_corr   0.00 (  0.00)	l1 16.1313 (16.1328)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.52it/s] 15%|#5        | 4/26 [00:00<00:01, 18.81it/s] 38%|###8      | 10/26 [00:00<00:00, 35.94it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.94it/s] 62%|######1   | 16/26 [00:00<00:00, 40.58it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.58it/s] 85%|########4 | 22/26 [00:00<00:00, 46.45it/s]100%|##########| 26/26 [00:00<00:00, 37.33it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.42 (  0.42)	test_minacc   0.56 (  0.56)	test_majacc   0.39 (  0.39)	Loss_d 0.691 (0.691)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.689 (0.690)	test_acc   0.47 (  0.45)	test_minacc   0.57 (  0.55)	test_majacc   0.45 (  0.43)	Loss_d 0.689 (0.690)	test_acc_d   0.47 (  0.45)	test_minacc_d   0.57 (  0.55)	test_majacc_d   0.45 (  0.43)	test_corr_d   0.09 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.690)	test_acc   0.44 (  0.45)	test_minacc   0.56 (  0.55)	test_majacc   0.42 (  0.43)	Loss_d 0.693 (0.690)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.42 (  0.43)	test_corr_d  -0.03 (  0.02)
Test: [  26/  26]	Loss 0.691 (0.690)	test_acc   0.45 (  0.45)	test_minacc   0.59 (  0.56)	test_majacc   0.43 (  0.44)	Loss_d 0.691 (0.690)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.59 (  0.56)	test_majacc_d   0.43 (  0.44)	test_corr_d  -0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.63it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 22/  1]	epoch_time 0.0357 (0.0383)	validation_time 0.0004 (0.0007)	train_time 0.0352 (0.0375)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.4540000043809414, 0.5370000004768372)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.35it/s] 15%|#5        | 4/26 [00:00<00:01, 17.11it/s] 31%|###       | 8/26 [00:00<00:00, 24.94it/s] 46%|####6     | 12/26 [00:00<00:00, 28.73it/s] 62%|######1   | 16/26 [00:00<00:00, 31.28it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.76it/s] 92%|#########2| 24/26 [00:00<00:00, 33.89it/s]100%|##########| 26/26 [00:00<00:00, 28.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 355 tensor(-0.0152, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.004)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.15)	train_acc   0.57 (  0.56)	train_minacc   0.62 (  0.54)	train_majacc   0.56 (  0.56)	train_corr   0.00 (  0.00)	l1 12.9191 (13.3098)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.35it/s] 27%|##6       | 7/26 [00:00<00:00, 34.72it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.72it/s] 50%|#####     | 13/26 [00:00<00:00, 42.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.54it/s] 96%|#########6| 25/26 [00:00<00:00, 48.25it/s]100%|##########| 26/26 [00:00<00:00, 40.51it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.690)	test_acc   0.54 (  0.55)	test_minacc   0.51 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.690)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.16 (  0.11)
Test: [  20/  26]	Loss 0.684 (0.690)	test_acc   0.59 (  0.55)	test_minacc   0.60 (  0.53)	test_majacc   0.59 (  0.55)	Loss_d 0.684 (0.690)	test_acc_d   0.59 (  0.55)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.59 (  0.55)	test_corr_d   0.04 (  0.10)
Test: [  26/  26]	Loss 0.689 (0.691)	test_acc   0.56 (  0.54)	test_minacc   0.62 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.689 (0.691)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.62 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.57it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 23/  1]	epoch_time 0.0359 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0354 (0.0374)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5447000114321708, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.72it/s] 19%|#9        | 5/26 [00:00<00:00, 24.54it/s] 35%|###4      | 9/26 [00:00<00:00, 29.76it/s] 50%|#####     | 13/26 [00:00<00:00, 32.32it/s] 65%|######5   | 17/26 [00:00<00:00, 34.00it/s] 81%|########  | 21/26 [00:00<00:00, 34.99it/s] 96%|#########6| 25/26 [00:00<00:00, 34.92it/s]100%|##########| 26/26 [00:00<00:00, 30.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.17)	train_acc   0.56 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 12.8289 (12.8825)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.62it/s] 27%|##6       | 7/26 [00:00<00:00, 29.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.11it/s] 50%|#####     | 13/26 [00:00<00:00, 36.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.29it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.29it/s] 96%|#########6| 25/26 [00:00<00:00, 46.03it/s]100%|##########| 26/26 [00:00<00:00, 36.55it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.691 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.53)	test_majacc   0.55 (  0.54)	Loss_d 0.691 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.20 (  0.15)
Test: [  20/  26]	Loss 0.683 (0.689)	test_acc   0.58 (  0.54)	test_minacc   0.59 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.683 (0.689)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.09 (  0.14)
Test: [  26/  26]	Loss 0.688 (0.690)	test_acc   0.56 (  0.54)	test_minacc   0.62 (  0.52)	test_majacc   0.55 (  0.54)	Loss_d 0.688 (0.690)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.11 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.54it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 24/  1]	epoch_time 0.0359 (0.0381)	validation_time 0.0004 (0.0006)	train_time 0.0355 (0.0373)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5381000141501426, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.80it/s] 19%|#9        | 5/26 [00:00<00:00, 22.77it/s] 35%|###4      | 9/26 [00:00<00:00, 28.13it/s] 50%|#####     | 13/26 [00:00<00:00, 31.11it/s] 65%|######5   | 17/26 [00:00<00:00, 32.62it/s] 81%|########  | 21/26 [00:00<00:00, 33.51it/s] 96%|#########6| 25/26 [00:00<00:00, 33.75it/s]100%|##########| 26/26 [00:00<00:00, 28.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.56 (  0.54)	train_minacc   0.62 (  0.52)	train_majacc   0.55 (  0.54)	train_corr   0.00 (  0.00)	l1 12.7719 (12.7952)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.17it/s] 27%|##6       | 7/26 [00:00<00:00, 36.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.78it/s] 50%|#####     | 13/26 [00:00<00:00, 40.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.19it/s] 96%|#########6| 25/26 [00:00<00:00, 47.25it/s]100%|##########| 26/26 [00:00<00:00, 40.19it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.689 (0.689)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.690 (0.688)	test_acc   0.54 (  0.55)	test_minacc   0.51 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.690 (0.688)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.22 (  0.17)
Test: [  20/  26]	Loss 0.682 (0.688)	test_acc   0.58 (  0.54)	test_minacc   0.59 (  0.53)	test_majacc   0.58 (  0.55)	Loss_d 0.682 (0.688)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.58 (  0.55)	test_corr_d   0.10 (  0.16)
Test: [  26/  26]	Loss 0.687 (0.688)	test_acc   0.56 (  0.54)	test_minacc   0.62 (  0.52)	test_majacc   0.55 (  0.54)	Loss_d 0.687 (0.688)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.12 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.13it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 25/  1]	epoch_time 0.0361 (0.0380)	validation_time 0.0003 (0.0006)	train_time 0.0358 (0.0373)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5417000164687633, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.40it/s] 19%|#9        | 5/26 [00:00<00:00, 22.13it/s] 35%|###4      | 9/26 [00:00<00:00, 27.51it/s] 50%|#####     | 13/26 [00:00<00:00, 30.68it/s] 65%|######5   | 17/26 [00:00<00:00, 32.33it/s] 81%|########  | 21/26 [00:00<00:00, 33.38it/s] 96%|#########6| 25/26 [00:00<00:00, 34.18it/s]100%|##########| 26/26 [00:00<00:00, 28.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.56 (  0.54)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 12.7447 (12.7587)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.69it/s] 31%|###       | 8/26 [00:00<00:00, 39.06it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.06it/s] 50%|#####     | 13/26 [00:00<00:00, 41.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.85it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.85it/s] 96%|#########6| 25/26 [00:00<00:00, 47.73it/s]100%|##########| 26/26 [00:00<00:00, 41.26it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.54 (  0.54)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.691 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.20 (  0.15)
Test: [  20/  26]	Loss 0.684 (0.689)	test_acc   0.58 (  0.54)	test_minacc   0.59 (  0.53)	test_majacc   0.58 (  0.54)	Loss_d 0.684 (0.689)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.09 (  0.14)
Test: [  26/  26]	Loss 0.688 (0.690)	test_acc   0.56 (  0.54)	test_minacc   0.62 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.688 (0.690)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.74it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 26/  1]	epoch_time 0.0364 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0360 (0.0372)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5379000177681446, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.23it/s] 19%|#9        | 5/26 [00:00<00:01, 19.35it/s] 35%|###4      | 9/26 [00:00<00:00, 25.62it/s] 50%|#####     | 13/26 [00:00<00:00, 29.51it/s] 65%|######5   | 17/26 [00:00<00:00, 31.53it/s] 81%|########  | 21/26 [00:00<00:00, 33.27it/s] 96%|#########6| 25/26 [00:00<00:00, 33.80it/s]100%|##########| 26/26 [00:00<00:00, 27.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.54)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 12.7162 (12.7309)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.11it/s] 27%|##6       | 7/26 [00:00<00:00, 33.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.19it/s] 46%|####6     | 12/26 [00:00<00:00, 39.81it/s] 69%|######9   | 18/26 [00:00<00:00, 46.59it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.59it/s] 92%|#########2| 24/26 [00:00<00:00, 47.09it/s]100%|##########| 26/26 [00:00<00:00, 39.88it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.691 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.19 (  0.14)
Test: [  20/  26]	Loss 0.685 (0.690)	test_acc   0.58 (  0.54)	test_minacc   0.59 (  0.53)	test_majacc   0.58 (  0.54)	Loss_d 0.685 (0.690)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.08 (  0.13)
Test: [  26/  26]	Loss 0.689 (0.690)	test_acc   0.55 (  0.54)	test_minacc   0.62 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.689 (0.690)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.94it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 27/  1]	epoch_time 0.0364 (0.0379)	validation_time 0.0005 (0.0006)	train_time 0.0359 (0.0372)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5367000141441822, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.04it/s] 23%|##3       | 6/26 [00:00<00:00, 25.80it/s] 38%|###8      | 10/26 [00:00<00:00, 29.62it/s] 50%|#####     | 13/26 [00:00<00:00, 29.00it/s] 65%|######5   | 17/26 [00:00<00:00, 30.63it/s] 81%|########  | 21/26 [00:00<00:00, 32.04it/s] 96%|#########6| 25/26 [00:00<00:00, 32.54it/s]100%|##########| 26/26 [00:00<00:00, 28.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.54)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 12.6895 (12.7030)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.42it/s] 27%|##6       | 7/26 [00:00<00:00, 34.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.96it/s] 46%|####6     | 12/26 [00:00<00:00, 39.84it/s] 69%|######9   | 18/26 [00:00<00:00, 46.64it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.64it/s] 92%|#########2| 24/26 [00:00<00:00, 47.11it/s]100%|##########| 26/26 [00:00<00:00, 40.60it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.691 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.18 (  0.13)
Test: [  20/  26]	Loss 0.685 (0.690)	test_acc   0.58 (  0.54)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.685 (0.690)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.07 (  0.12)
Test: [  26/  26]	Loss 0.689 (0.690)	test_acc   0.55 (  0.54)	test_minacc   0.62 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.689 (0.690)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.96it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 28/  1]	epoch_time 0.0373 (0.0379)	validation_time 0.0004 (0.0006)	train_time 0.0370 (0.0372)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5362000164985656, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.08it/s] 19%|#9        | 5/26 [00:00<00:00, 22.88it/s] 35%|###4      | 9/26 [00:00<00:00, 28.83it/s] 50%|#####     | 13/26 [00:00<00:00, 31.77it/s] 65%|######5   | 17/26 [00:00<00:00, 33.42it/s] 81%|########  | 21/26 [00:00<00:00, 34.41it/s] 96%|#########6| 25/26 [00:00<00:00, 35.08it/s]100%|##########| 26/26 [00:00<00:00, 29.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.54)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 12.6651 (12.6775)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.49it/s] 19%|#9        | 5/26 [00:00<00:00, 26.49it/s]                                               19%|#9        | 5/26 [00:00<00:00, 26.49it/s] 42%|####2     | 11/26 [00:00<00:00, 37.99it/s] 65%|######5   | 17/26 [00:00<00:00, 45.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 45.42it/s] 88%|########8 | 23/26 [00:00<00:00, 46.36it/s]100%|##########| 26/26 [00:00<00:00, 39.54it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.691 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.17 (  0.12)
Test: [  20/  26]	Loss 0.686 (0.690)	test_acc   0.58 (  0.54)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.686 (0.690)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.06 (  0.11)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.55 (  0.54)	test_minacc   0.62 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.690 (0.691)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.91it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 29/  1]	epoch_time 0.0365 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0371)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5358000095486641, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.18it/s] 19%|#9        | 5/26 [00:00<00:01, 19.57it/s] 35%|###4      | 9/26 [00:00<00:00, 25.79it/s] 50%|#####     | 13/26 [00:00<00:00, 29.17it/s] 65%|######5   | 17/26 [00:00<00:00, 31.14it/s] 81%|########  | 21/26 [00:00<00:00, 32.53it/s] 96%|#########6| 25/26 [00:00<00:00, 32.49it/s]100%|##########| 26/26 [00:00<00:00, 27.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.54)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 12.6426 (12.6540)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 27%|##6       | 7/26 [00:00<00:00, 30.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.64it/s] 50%|#####     | 13/26 [00:00<00:00, 40.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.28it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.28it/s] 96%|#########6| 25/26 [00:00<00:00, 48.88it/s]100%|##########| 26/26 [00:00<00:00, 39.47it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.16 (  0.11)
Test: [  20/  26]	Loss 0.687 (0.691)	test_acc   0.58 (  0.54)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.687 (0.691)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.05 (  0.10)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.55 (  0.54)	test_minacc   0.62 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.690 (0.691)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.07 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.68it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 30/  1]	epoch_time 0.0375 (0.0378)	validation_time 0.0003 (0.0006)	train_time 0.0371 (0.0371)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5353000119030475, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.61it/s] 23%|##3       | 6/26 [00:00<00:00, 25.14it/s] 38%|###8      | 10/26 [00:00<00:00, 29.25it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.16it/s] 69%|######9   | 18/26 [00:00<00:00, 33.37it/s] 85%|########4 | 22/26 [00:00<00:00, 34.59it/s]100%|##########| 26/26 [00:00<00:00, 32.24it/s]100%|##########| 26/26 [00:00<00:00, 28.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 12.6218 (12.6324)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 19%|#9        | 5/26 [00:00<00:00, 23.63it/s]                                               19%|#9        | 5/26 [00:00<00:00, 23.63it/s] 42%|####2     | 11/26 [00:00<00:00, 37.40it/s] 62%|######1   | 16/26 [00:00<00:00, 39.81it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.81it/s] 85%|########4 | 22/26 [00:00<00:00, 44.70it/s]100%|##########| 26/26 [00:00<00:00, 36.71it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.16 (  0.10)
Test: [  20/  26]	Loss 0.687 (0.691)	test_acc   0.58 (  0.54)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.687 (0.691)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.04 (  0.10)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.55 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.690 (0.691)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.07 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.23it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 31/  1]	epoch_time 0.0367 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0363 (0.0371)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.534500015437603, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.50it/s] 19%|#9        | 5/26 [00:00<00:01, 20.28it/s] 35%|###4      | 9/26 [00:00<00:00, 26.33it/s] 50%|#####     | 13/26 [00:00<00:00, 29.53it/s] 65%|######5   | 17/26 [00:00<00:00, 31.51it/s] 81%|########  | 21/26 [00:00<00:00, 32.74it/s] 96%|#########6| 25/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 27.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 12.6025 (12.6123)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 27%|##6       | 7/26 [00:00<00:00, 33.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.37it/s] 50%|#####     | 13/26 [00:00<00:00, 40.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.74it/s] 96%|#########6| 25/26 [00:00<00:00, 47.22it/s]100%|##########| 26/26 [00:00<00:00, 38.78it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.15 (  0.09)
Test: [  20/  26]	Loss 0.688 (0.691)	test_acc   0.58 (  0.54)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.688 (0.691)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.03 (  0.09)
Test: [  26/  26]	Loss 0.691 (0.691)	test_acc   0.55 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 32/  1]	epoch_time 0.0366 (0.0377)	validation_time 0.0004 (0.0006)	train_time 0.0362 (0.0371)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5341000131368637, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.49it/s] 19%|#9        | 5/26 [00:00<00:00, 23.98it/s] 35%|###4      | 9/26 [00:00<00:00, 28.37it/s] 50%|#####     | 13/26 [00:00<00:00, 30.40it/s] 65%|######5   | 17/26 [00:00<00:00, 31.51it/s] 81%|########  | 21/26 [00:00<00:00, 32.03it/s] 96%|#########6| 25/26 [00:00<00:00, 33.32it/s]100%|##########| 26/26 [00:00<00:00, 28.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5847 (12.5937)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.33it/s] 35%|###4      | 9/26 [00:00<00:00, 40.65it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.65it/s] 58%|#####7    | 15/26 [00:00<00:00, 43.69it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 43.69it/s] 81%|########  | 21/26 [00:00<00:00, 49.10it/s]100%|##########| 26/26 [00:00<00:00, 40.79it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.53 (  0.54)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.691)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.14 (  0.09)
Test: [  20/  26]	Loss 0.688 (0.691)	test_acc   0.58 (  0.54)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.688 (0.691)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.02 (  0.08)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.05 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.13it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 33/  1]	epoch_time 0.0369 (0.0377)	validation_time 0.0003 (0.0006)	train_time 0.0365 (0.0371)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5338000119924545, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.44it/s] 23%|##3       | 6/26 [00:00<00:00, 26.07it/s] 38%|###8      | 10/26 [00:00<00:00, 29.53it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.81it/s] 69%|######9   | 18/26 [00:00<00:00, 32.90it/s] 85%|########4 | 22/26 [00:00<00:00, 33.82it/s]100%|##########| 26/26 [00:00<00:00, 34.07it/s]100%|##########| 26/26 [00:00<00:00, 29.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5684 (12.5766)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.78it/s] 27%|##6       | 7/26 [00:00<00:00, 37.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.38it/s] 50%|#####     | 13/26 [00:00<00:00, 42.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.60it/s] 96%|#########6| 25/26 [00:00<00:00, 48.27it/s]100%|##########| 26/26 [00:00<00:00, 40.93it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.54)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.13 (  0.08)
Test: [  20/  26]	Loss 0.688 (0.692)	test_acc   0.58 (  0.54)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.688 (0.692)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.02 (  0.07)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.59it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 34/  1]	epoch_time 0.0360 (0.0377)	validation_time 0.0003 (0.0006)	train_time 0.0356 (0.0370)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5339000119864941, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.98it/s] 19%|#9        | 5/26 [00:00<00:00, 23.64it/s] 35%|###4      | 9/26 [00:00<00:00, 28.96it/s] 50%|#####     | 13/26 [00:00<00:00, 31.61it/s] 65%|######5   | 17/26 [00:00<00:00, 33.41it/s] 81%|########  | 21/26 [00:00<00:00, 34.44it/s] 96%|#########6| 25/26 [00:00<00:00, 35.10it/s]100%|##########| 26/26 [00:00<00:00, 29.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.18)	train_acc   0.55 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5533 (12.5609)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.65it/s] 27%|##6       | 7/26 [00:00<00:00, 33.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.30it/s] 50%|#####     | 13/26 [00:00<00:00, 39.61it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.05it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.05it/s] 96%|#########6| 25/26 [00:00<00:00, 46.87it/s]100%|##########| 26/26 [00:00<00:00, 38.86it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.54)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.07)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.58 (  0.54)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.689 (0.692)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.01 (  0.07)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.54it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 35/  1]	epoch_time 0.0352 (0.0376)	validation_time 0.0004 (0.0006)	train_time 0.0347 (0.0370)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.533700011998415, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.90it/s] 19%|#9        | 5/26 [00:00<00:01, 19.66it/s] 35%|###4      | 9/26 [00:00<00:00, 25.81it/s] 50%|#####     | 13/26 [00:00<00:00, 28.92it/s] 65%|######5   | 17/26 [00:00<00:00, 30.74it/s] 81%|########  | 21/26 [00:00<00:00, 32.39it/s] 96%|#########6| 25/26 [00:00<00:00, 33.45it/s]100%|##########| 26/26 [00:00<00:00, 27.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.55 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5393 (12.5464)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.96it/s] 27%|##6       | 7/26 [00:00<00:00, 36.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.73it/s] 50%|#####     | 13/26 [00:00<00:00, 44.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.46it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.46it/s] 96%|#########6| 25/26 [00:00<00:00, 49.74it/s]100%|##########| 26/26 [00:00<00:00, 41.68it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.54)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.06)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.58 (  0.54)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.689 (0.692)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.01 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.99it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 36/  1]	epoch_time 0.0364 (0.0376)	validation_time 0.0006 (0.0006)	train_time 0.0358 (0.0369)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5335000143349171, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 19%|#9        | 5/26 [00:00<00:01, 18.82it/s] 35%|###4      | 9/26 [00:00<00:00, 24.50it/s] 50%|#####     | 13/26 [00:00<00:00, 28.40it/s] 65%|######5   | 17/26 [00:00<00:00, 30.91it/s] 81%|########  | 21/26 [00:00<00:00, 32.17it/s] 96%|#########6| 25/26 [00:00<00:00, 33.45it/s]100%|##########| 26/26 [00:00<00:00, 27.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.55 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5263 (12.5329)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.22it/s] 31%|###       | 8/26 [00:00<00:00, 41.54it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.54it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.51it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.80it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.80it/s]100%|##########| 26/26 [00:00<00:00, 52.84it/s]100%|##########| 26/26 [00:00<00:00, 42.99it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.54)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.06)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.58 (  0.54)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.689 (0.692)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.00 (  0.05)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.02 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.95it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 37/  1]	epoch_time 0.0361 (0.0375)	validation_time 0.0004 (0.0006)	train_time 0.0357 (0.0369)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5332000153064728, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.19it/s] 19%|#9        | 5/26 [00:00<00:00, 23.91it/s] 35%|###4      | 9/26 [00:00<00:00, 29.11it/s] 50%|#####     | 13/26 [00:00<00:00, 31.61it/s] 65%|######5   | 17/26 [00:00<00:00, 32.64it/s] 81%|########  | 21/26 [00:00<00:00, 33.50it/s] 96%|#########6| 25/26 [00:00<00:00, 33.90it/s]100%|##########| 26/26 [00:00<00:00, 29.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.55 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5140 (12.5202)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.47it/s] 35%|###4      | 9/26 [00:00<00:00, 40.63it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.63it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.26it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.26it/s] 81%|########  | 21/26 [00:00<00:00, 47.92it/s]100%|##########| 26/26 [00:00<00:00, 42.04it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.54)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.05)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.58 (  0.53)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.690 (0.692)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d  -0.00 (  0.05)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.01 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.12it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 38/  1]	epoch_time 0.0367 (0.0375)	validation_time 0.0003 (0.0005)	train_time 0.0363 (0.0369)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5329000176489354, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.85it/s] 19%|#9        | 5/26 [00:00<00:01, 20.90it/s] 35%|###4      | 9/26 [00:00<00:00, 25.64it/s] 50%|#####     | 13/26 [00:00<00:00, 28.51it/s] 65%|######5   | 17/26 [00:00<00:00, 30.10it/s] 81%|########  | 21/26 [00:00<00:00, 31.90it/s] 96%|#########6| 25/26 [00:00<00:00, 32.82it/s]100%|##########| 26/26 [00:00<00:00, 27.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.55 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 12.5025 (12.5083)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.56it/s] 31%|###       | 8/26 [00:00<00:00, 39.99it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.99it/s] 50%|#####     | 13/26 [00:00<00:00, 40.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.77it/s] 96%|#########6| 25/26 [00:00<00:00, 47.05it/s]100%|##########| 26/26 [00:00<00:00, 41.03it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.54)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.04)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.58 (  0.53)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.690 (0.692)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d  -0.01 (  0.04)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.01 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.35it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 39/  1]	epoch_time 0.0368 (0.0375)	validation_time 0.0006 (0.0005)	train_time 0.0362 (0.0369)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5327000176608563, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 19%|#9        | 5/26 [00:00<00:00, 23.44it/s] 35%|###4      | 9/26 [00:00<00:00, 28.62it/s] 50%|#####     | 13/26 [00:00<00:00, 31.07it/s] 65%|######5   | 17/26 [00:00<00:00, 32.55it/s] 81%|########  | 21/26 [00:00<00:00, 33.67it/s] 96%|#########6| 25/26 [00:00<00:00, 33.63it/s]100%|##########| 26/26 [00:00<00:00, 29.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.55 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 12.4917 (12.4972)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.11it/s] 27%|##6       | 7/26 [00:00<00:00, 34.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.79it/s] 46%|####6     | 12/26 [00:00<00:00, 39.88it/s] 69%|######9   | 18/26 [00:00<00:00, 45.86it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.86it/s] 92%|#########2| 24/26 [00:00<00:00, 47.41it/s]100%|##########| 26/26 [00:00<00:00, 40.26it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.04)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.58 (  0.53)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.690 (0.692)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.00 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.05it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 40/  1]	epoch_time 0.0364 (0.0375)	validation_time 0.0004 (0.0005)	train_time 0.0360 (0.0368)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5321000176966191, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.96it/s] 19%|#9        | 5/26 [00:00<00:00, 23.72it/s] 35%|###4      | 9/26 [00:00<00:00, 28.80it/s] 50%|#####     | 13/26 [00:00<00:00, 31.44it/s] 65%|######5   | 17/26 [00:00<00:00, 33.04it/s] 81%|########  | 21/26 [00:00<00:00, 33.71it/s] 96%|#########6| 25/26 [00:00<00:00, 34.01it/s]100%|##########| 26/26 [00:00<00:00, 29.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 12.4815 (12.4866)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.97it/s] 27%|##6       | 7/26 [00:00<00:00, 30.15it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.15it/s] 50%|#####     | 13/26 [00:00<00:00, 36.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.72it/s] 96%|#########6| 25/26 [00:00<00:00, 45.63it/s]100%|##########| 26/26 [00:00<00:00, 36.71it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.58 (  0.53)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.53)	Loss_d 0.690 (0.692)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.53)	test_corr_d  -0.02 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.12it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 41/  1]	epoch_time 0.0383 (0.0375)	validation_time 0.0004 (0.0005)	train_time 0.0379 (0.0369)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5311000152230263, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 19%|#9        | 5/26 [00:00<00:00, 22.30it/s] 35%|###4      | 9/26 [00:00<00:00, 27.57it/s] 50%|#####     | 13/26 [00:00<00:00, 30.71it/s] 65%|######5   | 17/26 [00:00<00:00, 32.66it/s] 81%|########  | 21/26 [00:00<00:00, 33.93it/s] 96%|#########6| 25/26 [00:00<00:00, 33.87it/s]100%|##########| 26/26 [00:00<00:00, 28.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 12.4720 (12.4768)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 20.69it/s] 35%|###4      | 9/26 [00:00<00:00, 39.11it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 43.62it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 43.62it/s] 81%|########  | 21/26 [00:00<00:00, 48.40it/s]100%|##########| 26/26 [00:00<00:00, 41.79it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.58 (  0.53)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.53)	Loss_d 0.691 (0.693)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.53)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.94it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 42/  1]	epoch_time 0.0373 (0.0375)	validation_time 0.0003 (0.0005)	train_time 0.0370 (0.0369)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5307000175714492, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.54it/s] 19%|#9        | 5/26 [00:00<00:01, 18.96it/s] 35%|###4      | 9/26 [00:00<00:00, 24.85it/s] 50%|#####     | 13/26 [00:00<00:00, 28.31it/s] 65%|######5   | 17/26 [00:00<00:00, 30.78it/s] 81%|########  | 21/26 [00:00<00:00, 32.13it/s] 96%|#########6| 25/26 [00:00<00:00, 32.83it/s]100%|##########| 26/26 [00:00<00:00, 26.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 12.4632 (12.4676)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.61it/s] 27%|##6       | 7/26 [00:00<00:00, 28.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.08it/s] 50%|#####     | 13/26 [00:00<00:00, 37.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.99it/s] 96%|#########6| 25/26 [00:00<00:00, 45.80it/s]100%|##########| 26/26 [00:00<00:00, 36.30it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.07 (  0.02)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.58 (  0.53)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.53)	Loss_d 0.691 (0.693)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.53)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.19it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 43/  1]	epoch_time 0.0364 (0.0375)	validation_time 0.0004 (0.0005)	train_time 0.0360 (0.0368)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5304000152647496, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 19%|#9        | 5/26 [00:00<00:00, 22.77it/s] 35%|###4      | 9/26 [00:00<00:00, 28.59it/s] 50%|#####     | 13/26 [00:00<00:00, 31.72it/s] 65%|######5   | 17/26 [00:00<00:00, 33.33it/s] 81%|########  | 21/26 [00:00<00:00, 34.59it/s] 96%|#########6| 25/26 [00:00<00:00, 34.59it/s]100%|##########| 26/26 [00:00<00:00, 29.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 12.4549 (12.4591)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.78it/s] 27%|##6       | 7/26 [00:00<00:00, 31.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.05it/s] 46%|####6     | 12/26 [00:00<00:00, 37.27it/s] 69%|######9   | 18/26 [00:00<00:00, 44.81it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.81it/s] 92%|#########2| 24/26 [00:00<00:00, 46.19it/s]100%|##########| 26/26 [00:00<00:00, 38.78it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.07 (  0.02)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.58 (  0.53)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.53)	Loss_d 0.691 (0.693)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.53)	test_corr_d  -0.03 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.02 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.92it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 44/  1]	epoch_time 0.0368 (0.0374)	validation_time 0.0004 (0.0005)	train_time 0.0363 (0.0368)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5301000117957592, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.87it/s] 19%|#9        | 5/26 [00:00<00:00, 24.30it/s] 35%|###4      | 9/26 [00:00<00:00, 28.35it/s] 50%|#####     | 13/26 [00:00<00:00, 31.04it/s] 65%|######5   | 17/26 [00:00<00:00, 32.26it/s] 81%|########  | 21/26 [00:00<00:00, 33.21it/s] 96%|#########6| 25/26 [00:00<00:00, 33.30it/s]100%|##########| 26/26 [00:00<00:00, 29.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 12.4472 (12.4510)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.46it/s] 23%|##3       | 6/26 [00:00<00:00, 26.03it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.03it/s] 42%|####2     | 11/26 [00:00<00:00, 34.51it/s] 65%|######5   | 17/26 [00:00<00:00, 39.35it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.35it/s] 88%|########8 | 23/26 [00:00<00:00, 45.17it/s]100%|##########| 26/26 [00:00<00:00, 35.79it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.06 (  0.01)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.58 (  0.53)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.53)	Loss_d 0.691 (0.693)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.53)	test_corr_d  -0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.90it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 45/  1]	epoch_time 0.0360 (0.0374)	validation_time 0.0003 (0.0005)	train_time 0.0357 (0.0368)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5301000106334687, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.82it/s] 23%|##3       | 6/26 [00:00<00:00, 25.23it/s] 38%|###8      | 10/26 [00:00<00:00, 29.17it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.04it/s] 69%|######9   | 18/26 [00:00<00:00, 32.07it/s] 85%|########4 | 22/26 [00:00<00:00, 32.98it/s]100%|##########| 26/26 [00:00<00:00, 33.85it/s]100%|##########| 26/26 [00:00<00:00, 29.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 12.4401 (12.4436)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 23%|##3       | 6/26 [00:00<00:00, 29.57it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.57it/s] 46%|####6     | 12/26 [00:00<00:00, 37.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.13it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.13it/s] 92%|#########2| 24/26 [00:00<00:00, 46.18it/s]100%|##########| 26/26 [00:00<00:00, 38.96it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.06 (  0.01)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.58 (  0.53)	test_minacc   0.57 (  0.52)	test_majacc   0.58 (  0.53)	Loss_d 0.691 (0.693)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.58 (  0.53)	test_corr_d  -0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.52it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 46/  1]	epoch_time 0.0362 (0.0374)	validation_time 0.0004 (0.0005)	train_time 0.0357 (0.0368)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5299000106453896, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 19%|#9        | 5/26 [00:00<00:01, 20.54it/s] 35%|###4      | 9/26 [00:00<00:00, 26.48it/s] 50%|#####     | 13/26 [00:00<00:00, 30.03it/s] 65%|######5   | 17/26 [00:00<00:00, 32.10it/s] 81%|########  | 21/26 [00:00<00:00, 33.37it/s] 96%|#########6| 25/26 [00:00<00:00, 34.01it/s]100%|##########| 26/26 [00:00<00:00, 28.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 12.4334 (12.4367)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.73it/s] 31%|###       | 8/26 [00:00<00:00, 37.12it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.12it/s] 62%|######1   | 16/26 [00:00<00:00, 52.26it/s]                                                62%|######1   | 16/26 [00:00<00:00, 52.26it/s] 85%|########4 | 22/26 [00:00<00:00, 51.32it/s]100%|##########| 26/26 [00:00<00:00, 42.26it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.05 (  0.01)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.58 (  0.53)	test_minacc   0.57 (  0.53)	test_majacc   0.58 (  0.53)	Loss_d 0.691 (0.693)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.58 (  0.53)	test_corr_d  -0.03 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.04 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.34it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 47/  1]	epoch_time 0.0379 (0.0374)	validation_time 0.0004 (0.0005)	train_time 0.0375 (0.0368)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5302000141143799, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.16it/s] 19%|#9        | 5/26 [00:00<00:00, 21.84it/s] 35%|###4      | 9/26 [00:00<00:00, 27.65it/s] 50%|#####     | 13/26 [00:00<00:00, 31.36it/s] 65%|######5   | 17/26 [00:00<00:00, 33.40it/s] 81%|########  | 21/26 [00:00<00:00, 34.83it/s] 96%|#########6| 25/26 [00:00<00:00, 35.27it/s]100%|##########| 26/26 [00:00<00:00, 29.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 12.4273 (12.4303)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.58it/s] 31%|###       | 8/26 [00:00<00:00, 38.82it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.82it/s] 50%|#####     | 13/26 [00:00<00:00, 42.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.61it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.61it/s] 96%|#########6| 25/26 [00:00<00:00, 48.19it/s]100%|##########| 26/26 [00:00<00:00, 41.09it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.05 (  0.00)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.58 (  0.53)	test_minacc   0.57 (  0.53)	test_majacc   0.58 (  0.53)	Loss_d 0.691 (0.693)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.58 (  0.53)	test_corr_d  -0.03 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.04 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.15it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 48/  1]	epoch_time 0.0354 (0.0374)	validation_time 0.0003 (0.0005)	train_time 0.0351 (0.0368)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5302000141143799, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 19%|#9        | 5/26 [00:00<00:00, 21.43it/s] 35%|###4      | 9/26 [00:00<00:00, 26.05it/s] 50%|#####     | 13/26 [00:00<00:00, 29.09it/s] 65%|######5   | 17/26 [00:00<00:00, 31.09it/s] 81%|########  | 21/26 [00:00<00:00, 31.91it/s] 96%|#########6| 25/26 [00:00<00:00, 32.55it/s]100%|##########| 26/26 [00:00<00:00, 27.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.54 (  0.53)	train_minacc   0.62 (  0.52)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 12.4217 (12.4245)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.98it/s] 35%|###4      | 9/26 [00:00<00:00, 38.75it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.75it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.80it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.80it/s] 81%|########  | 21/26 [00:00<00:00, 47.60it/s]100%|##########| 26/26 [00:00<00:00, 42.28it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.05 ( -0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.53)	test_minacc   0.57 (  0.53)	test_majacc   0.58 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.58 (  0.53)	test_corr_d  -0.03 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.62 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.45it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 49/  1]	epoch_time 0.0387 (0.0374)	validation_time 0.0006 (0.0005)	train_time 0.0380 (0.0368)
record: (train_acc, test_acc) (0.602200012922287, 0.6880000233650208)
last accs (train_acc, test_acc) (0.5300000115931034, 0.5190000534057617)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.097 MB of 0.097 MB uploadedwandb: \ 0.097 MB of 0.097 MB uploadedwandb: | 0.097 MB of 0.097 MB uploadedwandb: / 0.097 MB of 0.097 MB uploadedwandb: - 0.097 MB of 0.097 MB uploadedwandb: \ 0.097 MB of 0.097 MB uploadedwandb: | 0.119 MB of 0.131 MB uploaded (0.003 MB deduped)wandb: / 0.494 MB of 0.494 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▂
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/diagnostics/train_time_val █▁▁▁▁▁▂▁▁▁▁▂▁▁▁▂▁▁▁▁▁▁▁▂▂▁▁▁▁▁▁▁▁▂▂▁▁▁▂▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/Loss_avg ███▇█▇▆▆█▆█▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/Loss_d_avg ███▇█▇▆▆█▆█▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/Loss_d_val ███▇█▇▆▆█▆█▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/Loss_val ███▇█▇▆▆█▆█▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_acc_avg ▁▁▁▂▁▂▃▄▃▅▂▅█▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_acc_d_avg ▁▁▁▂▁▂▃▄▃▅▂▅█▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_acc_d_val ▁▁▁▂▁▂▃▄▃▅▂▅█▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_acc_val ▁▁▁▂▁▂▃▄▃▅▂▅█▆▆▆▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_corr_d_avg ███▇█▇▆▆▇▅▇▆▁▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_corr_d_val ███▇█▇▆▆▇▅▇▆▁▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_majacc_avg ██████▇█▇▇█▇▃▃▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_majacc_d_avg ██████▇█▇▇█▇▃▃▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_majacc_d_val ██████▇█▇▇█▇▃▃▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_majacc_val ██████▇█▇▇█▇▃▃▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_minacc_avg ▁▁▁▂▁▂▃▄▃▄▂▅█▆▆▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_minacc_d_avg ▁▁▁▂▁▂▃▄▃▄▂▅█▆▆▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_minacc_d_val ▁▁▁▂▁▂▃▄▃▄▂▅█▆▆▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_minacc_val ▁▁▁▂▁▂▃▄▃▄▂▅█▆▆▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/Loss_val █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/l1_avg ▃▂▁▁▁▂▂▃▅▆▆▇███████▆▆▆▆▆▆▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/l1_val ▂▂▁▁▁▂▂▃▅▆▇▇███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_acc_avg ▇███████████▇▄▂▂▁▁▁▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_acc_val ▇▇█▇████████▃▄▂▂▁▁▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_majacc_avg ▇███████████▆▄▂▂▁▁▁▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_majacc_val ███████▇███▇▂▄▃▂▁▁▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_minacc_avg ▂▁▁▁▂▂▂▂▃▃▃▃▇▇▇▇██▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_minacc_val ▁▁▁▁▁▂▂▄▄▄▃▅█▅▄▅▆▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_nll_avg ▆▃▂▂▂▂▂▁▁▁▁▁▃▇▇█████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_nll_val ▃▃▃▂▂▂▂▂▁▁▁▁▇▇██████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_penalty_avg █▃▃▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_penalty_val █▆▆▄▆▅▅▃▃▃▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/diagnostics/epoch_time_val 0.03866
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/diagnostics/train_time_val 0.03804
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/diagnostics/validation_time_val 0.00061
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/Loss_avg 0.69187
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/Loss_d_avg 0.69187
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/Loss_d_val 0.69187
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/Loss_val 0.69187
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_acc_avg 0.519
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_acc_d_avg 0.519
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_acc_d_val 0.519
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_acc_val 0.519
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_corr_d_avg -0.11544
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_corr_d_val -0.11544
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_majacc_avg 0.52
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_majacc_d_avg 0.52
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_majacc_d_val 0.52
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_majacc_val 0.52
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_minacc_avg 0.51889
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_minacc_d_avg 0.51889
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_minacc_d_val 0.51889
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/test/test_minacc_val 0.51889
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/l1_avg 12.42446
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/l1_val 12.42169
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_acc_avg 0.5302
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_acc_val 0.54
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_majacc_avg 0.53158
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_majacc_val 0.52582
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_minacc_avg 0.51974
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_minacc_val 0.62162
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_nll_avg 0.69289
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_nll_val 0.69274
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/weight_norm_avg 0.17142
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/47/logs/train/weight_norm_val 0.17128
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/zatx2lzz
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240906_154914-zatx2lzz/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
